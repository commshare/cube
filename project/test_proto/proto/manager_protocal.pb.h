// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: manager_protocal.proto

#ifndef PROTOBUF_manager_5fprotocal_2eproto__INCLUDED
#define PROTOBUF_manager_5fprotocal_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace manager {
class contract_info;
class contract_infoDefaultTypeInternal;
extern contract_infoDefaultTypeInternal _contract_info_default_instance_;
class error_info;
class error_infoDefaultTypeInternal;
extern error_infoDefaultTypeInternal _error_info_default_instance_;
class insmrgnrate_info;
class insmrgnrate_infoDefaultTypeInternal;
extern insmrgnrate_infoDefaultTypeInternal _insmrgnrate_info_default_instance_;
class investor_info;
class investor_infoDefaultTypeInternal;
extern investor_infoDefaultTypeInternal _investor_info_default_instance_;
class option_argv;
class option_argvDefaultTypeInternal;
extern option_argvDefaultTypeInternal _option_argv_default_instance_;
class req_add_insmrgnrate;
class req_add_insmrgnrateDefaultTypeInternal;
extern req_add_insmrgnrateDefaultTypeInternal _req_add_insmrgnrate_default_instance_;
class req_add_investors;
class req_add_investorsDefaultTypeInternal;
extern req_add_investorsDefaultTypeInternal _req_add_investors_default_instance_;
class req_add_sys_user;
class req_add_sys_userDefaultTypeInternal;
extern req_add_sys_userDefaultTypeInternal _req_add_sys_user_default_instance_;
class req_contract;
class req_contractDefaultTypeInternal;
extern req_contractDefaultTypeInternal _req_contract_default_instance_;
class req_del_insmrgnrate;
class req_del_insmrgnrateDefaultTypeInternal;
extern req_del_insmrgnrateDefaultTypeInternal _req_del_insmrgnrate_default_instance_;
class req_del_investors;
class req_del_investorsDefaultTypeInternal;
extern req_del_investorsDefaultTypeInternal _req_del_investors_default_instance_;
class req_del_sys_user;
class req_del_sys_userDefaultTypeInternal;
extern req_del_sys_userDefaultTypeInternal _req_del_sys_user_default_instance_;
class req_edit_insmrgnrate;
class req_edit_insmrgnrateDefaultTypeInternal;
extern req_edit_insmrgnrateDefaultTypeInternal _req_edit_insmrgnrate_default_instance_;
class req_edit_sys_user;
class req_edit_sys_userDefaultTypeInternal;
extern req_edit_sys_userDefaultTypeInternal _req_edit_sys_user_default_instance_;
class req_insmrgnrate;
class req_insmrgnrateDefaultTypeInternal;
extern req_insmrgnrateDefaultTypeInternal _req_insmrgnrate_default_instance_;
class req_investor_info;
class req_investor_infoDefaultTypeInternal;
extern req_investor_infoDefaultTypeInternal _req_investor_info_default_instance_;
class req_investors;
class req_investorsDefaultTypeInternal;
extern req_investorsDefaultTypeInternal _req_investors_default_instance_;
class req_login;
class req_loginDefaultTypeInternal;
extern req_loginDefaultTypeInternal _req_login_default_instance_;
class req_option_argv;
class req_option_argvDefaultTypeInternal;
extern req_option_argvDefaultTypeInternal _req_option_argv_default_instance_;
class req_option_argv_adj;
class req_option_argv_adjDefaultTypeInternal;
extern req_option_argv_adjDefaultTypeInternal _req_option_argv_adj_default_instance_;
class req_risk_investors;
class req_risk_investorsDefaultTypeInternal;
extern req_risk_investorsDefaultTypeInternal _req_risk_investors_default_instance_;
class req_sys_subs;
class req_sys_subsDefaultTypeInternal;
extern req_sys_subsDefaultTypeInternal _req_sys_subs_default_instance_;
class role_auth;
class role_authDefaultTypeInternal;
extern role_authDefaultTypeInternal _role_auth_default_instance_;
class rsp_action_info;
class rsp_action_infoDefaultTypeInternal;
extern rsp_action_infoDefaultTypeInternal _rsp_action_info_default_instance_;
class rsp_contract;
class rsp_contractDefaultTypeInternal;
extern rsp_contractDefaultTypeInternal _rsp_contract_default_instance_;
class rsp_head_info;
class rsp_head_infoDefaultTypeInternal;
extern rsp_head_infoDefaultTypeInternal _rsp_head_info_default_instance_;
class rsp_insmrgnrate;
class rsp_insmrgnrateDefaultTypeInternal;
extern rsp_insmrgnrateDefaultTypeInternal _rsp_insmrgnrate_default_instance_;
class rsp_investor_info;
class rsp_investor_infoDefaultTypeInternal;
extern rsp_investor_infoDefaultTypeInternal _rsp_investor_info_default_instance_;
class rsp_investors;
class rsp_investorsDefaultTypeInternal;
extern rsp_investorsDefaultTypeInternal _rsp_investors_default_instance_;
class rsp_login;
class rsp_loginDefaultTypeInternal;
extern rsp_loginDefaultTypeInternal _rsp_login_default_instance_;
class rsp_option_argv;
class rsp_option_argvDefaultTypeInternal;
extern rsp_option_argvDefaultTypeInternal _rsp_option_argv_default_instance_;
class rsp_risk_investors;
class rsp_risk_investorsDefaultTypeInternal;
extern rsp_risk_investorsDefaultTypeInternal _rsp_risk_investors_default_instance_;
class rsp_sys_subs;
class rsp_sys_subsDefaultTypeInternal;
extern rsp_sys_subsDefaultTypeInternal _rsp_sys_subs_default_instance_;
class rtn_add_insmrgnrate;
class rtn_add_insmrgnrateDefaultTypeInternal;
extern rtn_add_insmrgnrateDefaultTypeInternal _rtn_add_insmrgnrate_default_instance_;
class rtn_change_insmrgnrate;
class rtn_change_insmrgnrateDefaultTypeInternal;
extern rtn_change_insmrgnrateDefaultTypeInternal _rtn_change_insmrgnrate_default_instance_;
class rtn_change_investor;
class rtn_change_investorDefaultTypeInternal;
extern rtn_change_investorDefaultTypeInternal _rtn_change_investor_default_instance_;
class rtn_change_risker_investor;
class rtn_change_risker_investorDefaultTypeInternal;
extern rtn_change_risker_investorDefaultTypeInternal _rtn_change_risker_investor_default_instance_;
class rtn_change_tree;
class rtn_change_treeDefaultTypeInternal;
extern rtn_change_treeDefaultTypeInternal _rtn_change_tree_default_instance_;
class rtn_del_insmrgnrate;
class rtn_del_insmrgnrateDefaultTypeInternal;
extern rtn_del_insmrgnrateDefaultTypeInternal _rtn_del_insmrgnrate_default_instance_;
class sys_auth;
class sys_authDefaultTypeInternal;
extern sys_authDefaultTypeInternal _sys_auth_default_instance_;
class sys_investor;
class sys_investorDefaultTypeInternal;
extern sys_investorDefaultTypeInternal _sys_investor_default_instance_;
class sys_user;
class sys_userDefaultTypeInternal;
extern sys_userDefaultTypeInternal _sys_user_default_instance_;
}  // namespace manager

namespace manager {

namespace protobuf_manager_5fprotocal_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_manager_5fprotocal_2eproto

// ===================================================================

class error_info : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:manager.error_info) */ {
 public:
  error_info();
  virtual ~error_info();

  error_info(const error_info& from);

  inline error_info& operator=(const error_info& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  error_info(error_info&& from) noexcept
    : error_info() {
    *this = ::std::move(from);
  }

  inline error_info& operator=(error_info&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const error_info& default_instance();

  static inline const error_info* internal_default_instance() {
    return reinterpret_cast<const error_info*>(
               &_error_info_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(error_info* other);
  friend void swap(error_info& a, error_info& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline error_info* New() const PROTOBUF_FINAL { return New(NULL); }

  error_info* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const error_info& from);
  void MergeFrom(const error_info& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(error_info* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string errormsg = 2;
  void clear_errormsg();
  static const int kErrormsgFieldNumber = 2;
  const ::std::string& errormsg() const;
  void set_errormsg(const ::std::string& value);
  #if LANG_CXX11
  void set_errormsg(::std::string&& value);
  #endif
  void set_errormsg(const char* value);
  void set_errormsg(const char* value, size_t size);
  ::std::string* mutable_errormsg();
  ::std::string* release_errormsg();
  void set_allocated_errormsg(::std::string* errormsg);

  // sint32 errorid = 1;
  void clear_errorid();
  static const int kErroridFieldNumber = 1;
  ::google::protobuf::int32 errorid() const;
  void set_errorid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:manager.error_info)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr errormsg_;
  ::google::protobuf::int32 errorid_;
  mutable int _cached_size_;
  friend struct protobuf_manager_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rsp_action_info : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:manager.rsp_action_info) */ {
 public:
  rsp_action_info();
  virtual ~rsp_action_info();

  rsp_action_info(const rsp_action_info& from);

  inline rsp_action_info& operator=(const rsp_action_info& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rsp_action_info(rsp_action_info&& from) noexcept
    : rsp_action_info() {
    *this = ::std::move(from);
  }

  inline rsp_action_info& operator=(rsp_action_info&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rsp_action_info& default_instance();

  static inline const rsp_action_info* internal_default_instance() {
    return reinterpret_cast<const rsp_action_info*>(
               &_rsp_action_info_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(rsp_action_info* other);
  friend void swap(rsp_action_info& a, rsp_action_info& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rsp_action_info* New() const PROTOBUF_FINAL { return New(NULL); }

  rsp_action_info* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rsp_action_info& from);
  void MergeFrom(const rsp_action_info& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rsp_action_info* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .manager.error_info info = 2;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 2;
  const ::manager::error_info& info() const;
  ::manager::error_info* mutable_info();
  ::manager::error_info* release_info();
  void set_allocated_info(::manager::error_info* info);

  // int32 requestid = 1;
  void clear_requestid();
  static const int kRequestidFieldNumber = 1;
  ::google::protobuf::int32 requestid() const;
  void set_requestid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:manager.rsp_action_info)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::manager::error_info* info_;
  ::google::protobuf::int32 requestid_;
  mutable int _cached_size_;
  friend struct protobuf_manager_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rsp_head_info : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:manager.rsp_head_info) */ {
 public:
  rsp_head_info();
  virtual ~rsp_head_info();

  rsp_head_info(const rsp_head_info& from);

  inline rsp_head_info& operator=(const rsp_head_info& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rsp_head_info(rsp_head_info&& from) noexcept
    : rsp_head_info() {
    *this = ::std::move(from);
  }

  inline rsp_head_info& operator=(rsp_head_info&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rsp_head_info& default_instance();

  static inline const rsp_head_info* internal_default_instance() {
    return reinterpret_cast<const rsp_head_info*>(
               &_rsp_head_info_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(rsp_head_info* other);
  friend void swap(rsp_head_info& a, rsp_head_info& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rsp_head_info* New() const PROTOBUF_FINAL { return New(NULL); }

  rsp_head_info* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rsp_head_info& from);
  void MergeFrom(const rsp_head_info& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rsp_head_info* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .manager.error_info info = 2;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 2;
  const ::manager::error_info& info() const;
  ::manager::error_info* mutable_info();
  ::manager::error_info* release_info();
  void set_allocated_info(::manager::error_info* info);

  // int32 requestid = 1;
  void clear_requestid();
  static const int kRequestidFieldNumber = 1;
  ::google::protobuf::int32 requestid() const;
  void set_requestid(::google::protobuf::int32 value);

  // bool islast = 3;
  void clear_islast();
  static const int kIslastFieldNumber = 3;
  bool islast() const;
  void set_islast(bool value);

  // @@protoc_insertion_point(class_scope:manager.rsp_head_info)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::manager::error_info* info_;
  ::google::protobuf::int32 requestid_;
  bool islast_;
  mutable int _cached_size_;
  friend struct protobuf_manager_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class sys_auth : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:manager.sys_auth) */ {
 public:
  sys_auth();
  virtual ~sys_auth();

  sys_auth(const sys_auth& from);

  inline sys_auth& operator=(const sys_auth& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  sys_auth(sys_auth&& from) noexcept
    : sys_auth() {
    *this = ::std::move(from);
  }

  inline sys_auth& operator=(sys_auth&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const sys_auth& default_instance();

  static inline const sys_auth* internal_default_instance() {
    return reinterpret_cast<const sys_auth*>(
               &_sys_auth_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(sys_auth* other);
  friend void swap(sys_auth& a, sys_auth& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline sys_auth* New() const PROTOBUF_FINAL { return New(NULL); }

  sys_auth* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const sys_auth& from);
  void MergeFrom(const sys_auth& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(sys_auth* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // int32 authid = 1;
  void clear_authid();
  static const int kAuthidFieldNumber = 1;
  ::google::protobuf::int32 authid() const;
  void set_authid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:manager.sys_auth)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 authid_;
  mutable int _cached_size_;
  friend struct protobuf_manager_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class role_auth : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:manager.role_auth) */ {
 public:
  role_auth();
  virtual ~role_auth();

  role_auth(const role_auth& from);

  inline role_auth& operator=(const role_auth& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  role_auth(role_auth&& from) noexcept
    : role_auth() {
    *this = ::std::move(from);
  }

  inline role_auth& operator=(role_auth&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const role_auth& default_instance();

  static inline const role_auth* internal_default_instance() {
    return reinterpret_cast<const role_auth*>(
               &_role_auth_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(role_auth* other);
  friend void swap(role_auth& a, role_auth& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline role_auth* New() const PROTOBUF_FINAL { return New(NULL); }

  role_auth* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const role_auth& from);
  void MergeFrom(const role_auth& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(role_auth* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .manager.sys_auth auth = 2;
  int auth_size() const;
  void clear_auth();
  static const int kAuthFieldNumber = 2;
  const ::manager::sys_auth& auth(int index) const;
  ::manager::sys_auth* mutable_auth(int index);
  ::manager::sys_auth* add_auth();
  ::google::protobuf::RepeatedPtrField< ::manager::sys_auth >*
      mutable_auth();
  const ::google::protobuf::RepeatedPtrField< ::manager::sys_auth >&
      auth() const;

  // int32 roleid = 1;
  void clear_roleid();
  static const int kRoleidFieldNumber = 1;
  ::google::protobuf::int32 roleid() const;
  void set_roleid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:manager.role_auth)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::manager::sys_auth > auth_;
  ::google::protobuf::int32 roleid_;
  mutable int _cached_size_;
  friend struct protobuf_manager_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class req_login : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:manager.req_login) */ {
 public:
  req_login();
  virtual ~req_login();

  req_login(const req_login& from);

  inline req_login& operator=(const req_login& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  req_login(req_login&& from) noexcept
    : req_login() {
    *this = ::std::move(from);
  }

  inline req_login& operator=(req_login&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const req_login& default_instance();

  static inline const req_login* internal_default_instance() {
    return reinterpret_cast<const req_login*>(
               &_req_login_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(req_login* other);
  friend void swap(req_login& a, req_login& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline req_login* New() const PROTOBUF_FINAL { return New(NULL); }

  req_login* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const req_login& from);
  void MergeFrom(const req_login& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(req_login* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string userid = 2;
  void clear_userid();
  static const int kUseridFieldNumber = 2;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // string pwd = 3;
  void clear_pwd();
  static const int kPwdFieldNumber = 3;
  const ::std::string& pwd() const;
  void set_pwd(const ::std::string& value);
  #if LANG_CXX11
  void set_pwd(::std::string&& value);
  #endif
  void set_pwd(const char* value);
  void set_pwd(const char* value, size_t size);
  ::std::string* mutable_pwd();
  ::std::string* release_pwd();
  void set_allocated_pwd(::std::string* pwd);

  // int32 requestid = 1;
  void clear_requestid();
  static const int kRequestidFieldNumber = 1;
  ::google::protobuf::int32 requestid() const;
  void set_requestid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:manager.req_login)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr pwd_;
  ::google::protobuf::int32 requestid_;
  mutable int _cached_size_;
  friend struct protobuf_manager_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rsp_login : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:manager.rsp_login) */ {
 public:
  rsp_login();
  virtual ~rsp_login();

  rsp_login(const rsp_login& from);

  inline rsp_login& operator=(const rsp_login& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rsp_login(rsp_login&& from) noexcept
    : rsp_login() {
    *this = ::std::move(from);
  }

  inline rsp_login& operator=(rsp_login&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rsp_login& default_instance();

  static inline const rsp_login* internal_default_instance() {
    return reinterpret_cast<const rsp_login*>(
               &_rsp_login_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(rsp_login* other);
  friend void swap(rsp_login& a, rsp_login& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rsp_login* New() const PROTOBUF_FINAL { return New(NULL); }

  rsp_login* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rsp_login& from);
  void MergeFrom(const rsp_login& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rsp_login* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .manager.role_auth auth = 2;
  int auth_size() const;
  void clear_auth();
  static const int kAuthFieldNumber = 2;
  const ::manager::role_auth& auth(int index) const;
  ::manager::role_auth* mutable_auth(int index);
  ::manager::role_auth* add_auth();
  ::google::protobuf::RepeatedPtrField< ::manager::role_auth >*
      mutable_auth();
  const ::google::protobuf::RepeatedPtrField< ::manager::role_auth >&
      auth() const;

  // .manager.rsp_head_info header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::manager::rsp_head_info& header() const;
  ::manager::rsp_head_info* mutable_header();
  ::manager::rsp_head_info* release_header();
  void set_allocated_header(::manager::rsp_head_info* header);

  // @@protoc_insertion_point(class_scope:manager.rsp_login)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::manager::role_auth > auth_;
  ::manager::rsp_head_info* header_;
  mutable int _cached_size_;
  friend struct protobuf_manager_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class req_sys_subs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:manager.req_sys_subs) */ {
 public:
  req_sys_subs();
  virtual ~req_sys_subs();

  req_sys_subs(const req_sys_subs& from);

  inline req_sys_subs& operator=(const req_sys_subs& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  req_sys_subs(req_sys_subs&& from) noexcept
    : req_sys_subs() {
    *this = ::std::move(from);
  }

  inline req_sys_subs& operator=(req_sys_subs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const req_sys_subs& default_instance();

  static inline const req_sys_subs* internal_default_instance() {
    return reinterpret_cast<const req_sys_subs*>(
               &_req_sys_subs_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(req_sys_subs* other);
  friend void swap(req_sys_subs& a, req_sys_subs& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline req_sys_subs* New() const PROTOBUF_FINAL { return New(NULL); }

  req_sys_subs* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const req_sys_subs& from);
  void MergeFrom(const req_sys_subs& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(req_sys_subs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string userid = 2;
  void clear_userid();
  static const int kUseridFieldNumber = 2;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // int32 requestid = 1;
  void clear_requestid();
  static const int kRequestidFieldNumber = 1;
  ::google::protobuf::int32 requestid() const;
  void set_requestid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:manager.req_sys_subs)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::int32 requestid_;
  mutable int _cached_size_;
  friend struct protobuf_manager_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class sys_user : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:manager.sys_user) */ {
 public:
  sys_user();
  virtual ~sys_user();

  sys_user(const sys_user& from);

  inline sys_user& operator=(const sys_user& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  sys_user(sys_user&& from) noexcept
    : sys_user() {
    *this = ::std::move(from);
  }

  inline sys_user& operator=(sys_user&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const sys_user& default_instance();

  static inline const sys_user* internal_default_instance() {
    return reinterpret_cast<const sys_user*>(
               &_sys_user_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(sys_user* other);
  friend void swap(sys_user& a, sys_user& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline sys_user* New() const PROTOBUF_FINAL { return New(NULL); }

  sys_user* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const sys_user& from);
  void MergeFrom(const sys_user& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(sys_user* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .manager.sys_auth auths = 8;
  int auths_size() const;
  void clear_auths();
  static const int kAuthsFieldNumber = 8;
  const ::manager::sys_auth& auths(int index) const;
  ::manager::sys_auth* mutable_auths(int index);
  ::manager::sys_auth* add_auths();
  ::google::protobuf::RepeatedPtrField< ::manager::sys_auth >*
      mutable_auths();
  const ::google::protobuf::RepeatedPtrField< ::manager::sys_auth >&
      auths() const;

  // string userid = 2;
  void clear_userid();
  static const int kUseridFieldNumber = 2;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // string username = 3;
  void clear_username();
  static const int kUsernameFieldNumber = 3;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string father = 4;
  void clear_father();
  static const int kFatherFieldNumber = 4;
  const ::std::string& father() const;
  void set_father(const ::std::string& value);
  #if LANG_CXX11
  void set_father(::std::string&& value);
  #endif
  void set_father(const char* value);
  void set_father(const char* value, size_t size);
  ::std::string* mutable_father();
  ::std::string* release_father();
  void set_allocated_father(::std::string* father);

  // string pwd = 6;
  void clear_pwd();
  static const int kPwdFieldNumber = 6;
  const ::std::string& pwd() const;
  void set_pwd(const ::std::string& value);
  #if LANG_CXX11
  void set_pwd(::std::string&& value);
  #endif
  void set_pwd(const char* value);
  void set_pwd(const char* value, size_t size);
  ::std::string* mutable_pwd();
  ::std::string* release_pwd();
  void set_allocated_pwd(::std::string* pwd);

  // string desc = 7;
  void clear_desc();
  static const int kDescFieldNumber = 7;
  const ::std::string& desc() const;
  void set_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_desc(::std::string&& value);
  #endif
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  ::std::string* mutable_desc();
  ::std::string* release_desc();
  void set_allocated_desc(::std::string* desc);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // int32 roleid = 5;
  void clear_roleid();
  static const int kRoleidFieldNumber = 5;
  ::google::protobuf::int32 roleid() const;
  void set_roleid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:manager.sys_user)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::manager::sys_auth > auths_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr father_;
  ::google::protobuf::internal::ArenaStringPtr pwd_;
  ::google::protobuf::internal::ArenaStringPtr desc_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 roleid_;
  mutable int _cached_size_;
  friend struct protobuf_manager_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rsp_sys_subs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:manager.rsp_sys_subs) */ {
 public:
  rsp_sys_subs();
  virtual ~rsp_sys_subs();

  rsp_sys_subs(const rsp_sys_subs& from);

  inline rsp_sys_subs& operator=(const rsp_sys_subs& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rsp_sys_subs(rsp_sys_subs&& from) noexcept
    : rsp_sys_subs() {
    *this = ::std::move(from);
  }

  inline rsp_sys_subs& operator=(rsp_sys_subs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rsp_sys_subs& default_instance();

  static inline const rsp_sys_subs* internal_default_instance() {
    return reinterpret_cast<const rsp_sys_subs*>(
               &_rsp_sys_subs_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(rsp_sys_subs* other);
  friend void swap(rsp_sys_subs& a, rsp_sys_subs& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rsp_sys_subs* New() const PROTOBUF_FINAL { return New(NULL); }

  rsp_sys_subs* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rsp_sys_subs& from);
  void MergeFrom(const rsp_sys_subs& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rsp_sys_subs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .manager.sys_user info = 2;
  int info_size() const;
  void clear_info();
  static const int kInfoFieldNumber = 2;
  const ::manager::sys_user& info(int index) const;
  ::manager::sys_user* mutable_info(int index);
  ::manager::sys_user* add_info();
  ::google::protobuf::RepeatedPtrField< ::manager::sys_user >*
      mutable_info();
  const ::google::protobuf::RepeatedPtrField< ::manager::sys_user >&
      info() const;

  // .manager.rsp_head_info header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::manager::rsp_head_info& header() const;
  ::manager::rsp_head_info* mutable_header();
  ::manager::rsp_head_info* release_header();
  void set_allocated_header(::manager::rsp_head_info* header);

  // @@protoc_insertion_point(class_scope:manager.rsp_sys_subs)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::manager::sys_user > info_;
  ::manager::rsp_head_info* header_;
  mutable int _cached_size_;
  friend struct protobuf_manager_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class req_add_sys_user : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:manager.req_add_sys_user) */ {
 public:
  req_add_sys_user();
  virtual ~req_add_sys_user();

  req_add_sys_user(const req_add_sys_user& from);

  inline req_add_sys_user& operator=(const req_add_sys_user& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  req_add_sys_user(req_add_sys_user&& from) noexcept
    : req_add_sys_user() {
    *this = ::std::move(from);
  }

  inline req_add_sys_user& operator=(req_add_sys_user&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const req_add_sys_user& default_instance();

  static inline const req_add_sys_user* internal_default_instance() {
    return reinterpret_cast<const req_add_sys_user*>(
               &_req_add_sys_user_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(req_add_sys_user* other);
  friend void swap(req_add_sys_user& a, req_add_sys_user& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline req_add_sys_user* New() const PROTOBUF_FINAL { return New(NULL); }

  req_add_sys_user* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const req_add_sys_user& from);
  void MergeFrom(const req_add_sys_user& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(req_add_sys_user* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .manager.sys_user user = 2;
  bool has_user() const;
  void clear_user();
  static const int kUserFieldNumber = 2;
  const ::manager::sys_user& user() const;
  ::manager::sys_user* mutable_user();
  ::manager::sys_user* release_user();
  void set_allocated_user(::manager::sys_user* user);

  // int32 requestid = 1;
  void clear_requestid();
  static const int kRequestidFieldNumber = 1;
  ::google::protobuf::int32 requestid() const;
  void set_requestid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:manager.req_add_sys_user)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::manager::sys_user* user_;
  ::google::protobuf::int32 requestid_;
  mutable int _cached_size_;
  friend struct protobuf_manager_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class req_del_sys_user : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:manager.req_del_sys_user) */ {
 public:
  req_del_sys_user();
  virtual ~req_del_sys_user();

  req_del_sys_user(const req_del_sys_user& from);

  inline req_del_sys_user& operator=(const req_del_sys_user& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  req_del_sys_user(req_del_sys_user&& from) noexcept
    : req_del_sys_user() {
    *this = ::std::move(from);
  }

  inline req_del_sys_user& operator=(req_del_sys_user&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const req_del_sys_user& default_instance();

  static inline const req_del_sys_user* internal_default_instance() {
    return reinterpret_cast<const req_del_sys_user*>(
               &_req_del_sys_user_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(req_del_sys_user* other);
  friend void swap(req_del_sys_user& a, req_del_sys_user& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline req_del_sys_user* New() const PROTOBUF_FINAL { return New(NULL); }

  req_del_sys_user* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const req_del_sys_user& from);
  void MergeFrom(const req_del_sys_user& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(req_del_sys_user* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string userid = 2;
  void clear_userid();
  static const int kUseridFieldNumber = 2;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // int32 requestid = 1;
  void clear_requestid();
  static const int kRequestidFieldNumber = 1;
  ::google::protobuf::int32 requestid() const;
  void set_requestid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:manager.req_del_sys_user)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::int32 requestid_;
  mutable int _cached_size_;
  friend struct protobuf_manager_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class req_edit_sys_user : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:manager.req_edit_sys_user) */ {
 public:
  req_edit_sys_user();
  virtual ~req_edit_sys_user();

  req_edit_sys_user(const req_edit_sys_user& from);

  inline req_edit_sys_user& operator=(const req_edit_sys_user& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  req_edit_sys_user(req_edit_sys_user&& from) noexcept
    : req_edit_sys_user() {
    *this = ::std::move(from);
  }

  inline req_edit_sys_user& operator=(req_edit_sys_user&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const req_edit_sys_user& default_instance();

  static inline const req_edit_sys_user* internal_default_instance() {
    return reinterpret_cast<const req_edit_sys_user*>(
               &_req_edit_sys_user_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(req_edit_sys_user* other);
  friend void swap(req_edit_sys_user& a, req_edit_sys_user& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline req_edit_sys_user* New() const PROTOBUF_FINAL { return New(NULL); }

  req_edit_sys_user* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const req_edit_sys_user& from);
  void MergeFrom(const req_edit_sys_user& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(req_edit_sys_user* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .manager.sys_user user = 2;
  bool has_user() const;
  void clear_user();
  static const int kUserFieldNumber = 2;
  const ::manager::sys_user& user() const;
  ::manager::sys_user* mutable_user();
  ::manager::sys_user* release_user();
  void set_allocated_user(::manager::sys_user* user);

  // int32 requestid = 1;
  void clear_requestid();
  static const int kRequestidFieldNumber = 1;
  ::google::protobuf::int32 requestid() const;
  void set_requestid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:manager.req_edit_sys_user)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::manager::sys_user* user_;
  ::google::protobuf::int32 requestid_;
  mutable int _cached_size_;
  friend struct protobuf_manager_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class sys_investor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:manager.sys_investor) */ {
 public:
  sys_investor();
  virtual ~sys_investor();

  sys_investor(const sys_investor& from);

  inline sys_investor& operator=(const sys_investor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  sys_investor(sys_investor&& from) noexcept
    : sys_investor() {
    *this = ::std::move(from);
  }

  inline sys_investor& operator=(sys_investor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const sys_investor& default_instance();

  static inline const sys_investor* internal_default_instance() {
    return reinterpret_cast<const sys_investor*>(
               &_sys_investor_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(sys_investor* other);
  friend void swap(sys_investor& a, sys_investor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline sys_investor* New() const PROTOBUF_FINAL { return New(NULL); }

  sys_investor* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const sys_investor& from);
  void MergeFrom(const sys_investor& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(sys_investor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string investor = 1;
  void clear_investor();
  static const int kInvestorFieldNumber = 1;
  const ::std::string& investor() const;
  void set_investor(const ::std::string& value);
  #if LANG_CXX11
  void set_investor(::std::string&& value);
  #endif
  void set_investor(const char* value);
  void set_investor(const char* value, size_t size);
  ::std::string* mutable_investor();
  ::std::string* release_investor();
  void set_allocated_investor(::std::string* investor);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // int32 state = 3;
  void clear_state();
  static const int kStateFieldNumber = 3;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:manager.sys_investor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr investor_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 state_;
  mutable int _cached_size_;
  friend struct protobuf_manager_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class req_risk_investors : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:manager.req_risk_investors) */ {
 public:
  req_risk_investors();
  virtual ~req_risk_investors();

  req_risk_investors(const req_risk_investors& from);

  inline req_risk_investors& operator=(const req_risk_investors& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  req_risk_investors(req_risk_investors&& from) noexcept
    : req_risk_investors() {
    *this = ::std::move(from);
  }

  inline req_risk_investors& operator=(req_risk_investors&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const req_risk_investors& default_instance();

  static inline const req_risk_investors* internal_default_instance() {
    return reinterpret_cast<const req_risk_investors*>(
               &_req_risk_investors_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(req_risk_investors* other);
  friend void swap(req_risk_investors& a, req_risk_investors& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline req_risk_investors* New() const PROTOBUF_FINAL { return New(NULL); }

  req_risk_investors* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const req_risk_investors& from);
  void MergeFrom(const req_risk_investors& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(req_risk_investors* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string userid = 2;
  void clear_userid();
  static const int kUseridFieldNumber = 2;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // int32 requestid = 1;
  void clear_requestid();
  static const int kRequestidFieldNumber = 1;
  ::google::protobuf::int32 requestid() const;
  void set_requestid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:manager.req_risk_investors)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::int32 requestid_;
  mutable int _cached_size_;
  friend struct protobuf_manager_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rsp_risk_investors : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:manager.rsp_risk_investors) */ {
 public:
  rsp_risk_investors();
  virtual ~rsp_risk_investors();

  rsp_risk_investors(const rsp_risk_investors& from);

  inline rsp_risk_investors& operator=(const rsp_risk_investors& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rsp_risk_investors(rsp_risk_investors&& from) noexcept
    : rsp_risk_investors() {
    *this = ::std::move(from);
  }

  inline rsp_risk_investors& operator=(rsp_risk_investors&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rsp_risk_investors& default_instance();

  static inline const rsp_risk_investors* internal_default_instance() {
    return reinterpret_cast<const rsp_risk_investors*>(
               &_rsp_risk_investors_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(rsp_risk_investors* other);
  friend void swap(rsp_risk_investors& a, rsp_risk_investors& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rsp_risk_investors* New() const PROTOBUF_FINAL { return New(NULL); }

  rsp_risk_investors* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rsp_risk_investors& from);
  void MergeFrom(const rsp_risk_investors& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rsp_risk_investors* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .manager.sys_investor investors = 3;
  int investors_size() const;
  void clear_investors();
  static const int kInvestorsFieldNumber = 3;
  const ::manager::sys_investor& investors(int index) const;
  ::manager::sys_investor* mutable_investors(int index);
  ::manager::sys_investor* add_investors();
  ::google::protobuf::RepeatedPtrField< ::manager::sys_investor >*
      mutable_investors();
  const ::google::protobuf::RepeatedPtrField< ::manager::sys_investor >&
      investors() const;

  // string userid = 2;
  void clear_userid();
  static const int kUseridFieldNumber = 2;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // .manager.rsp_head_info header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::manager::rsp_head_info& header() const;
  ::manager::rsp_head_info* mutable_header();
  ::manager::rsp_head_info* release_header();
  void set_allocated_header(::manager::rsp_head_info* header);

  // @@protoc_insertion_point(class_scope:manager.rsp_risk_investors)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::manager::sys_investor > investors_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::manager::rsp_head_info* header_;
  mutable int _cached_size_;
  friend struct protobuf_manager_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class req_investors : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:manager.req_investors) */ {
 public:
  req_investors();
  virtual ~req_investors();

  req_investors(const req_investors& from);

  inline req_investors& operator=(const req_investors& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  req_investors(req_investors&& from) noexcept
    : req_investors() {
    *this = ::std::move(from);
  }

  inline req_investors& operator=(req_investors&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const req_investors& default_instance();

  static inline const req_investors* internal_default_instance() {
    return reinterpret_cast<const req_investors*>(
               &_req_investors_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(req_investors* other);
  friend void swap(req_investors& a, req_investors& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline req_investors* New() const PROTOBUF_FINAL { return New(NULL); }

  req_investors* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const req_investors& from);
  void MergeFrom(const req_investors& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(req_investors* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 requestid = 1;
  void clear_requestid();
  static const int kRequestidFieldNumber = 1;
  ::google::protobuf::int32 requestid() const;
  void set_requestid(::google::protobuf::int32 value);

  // int32 state = 2;
  void clear_state();
  static const int kStateFieldNumber = 2;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:manager.req_investors)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 requestid_;
  ::google::protobuf::int32 state_;
  mutable int _cached_size_;
  friend struct protobuf_manager_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rsp_investors : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:manager.rsp_investors) */ {
 public:
  rsp_investors();
  virtual ~rsp_investors();

  rsp_investors(const rsp_investors& from);

  inline rsp_investors& operator=(const rsp_investors& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rsp_investors(rsp_investors&& from) noexcept
    : rsp_investors() {
    *this = ::std::move(from);
  }

  inline rsp_investors& operator=(rsp_investors&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rsp_investors& default_instance();

  static inline const rsp_investors* internal_default_instance() {
    return reinterpret_cast<const rsp_investors*>(
               &_rsp_investors_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(rsp_investors* other);
  friend void swap(rsp_investors& a, rsp_investors& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rsp_investors* New() const PROTOBUF_FINAL { return New(NULL); }

  rsp_investors* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rsp_investors& from);
  void MergeFrom(const rsp_investors& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rsp_investors* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .manager.sys_investor investors = 2;
  int investors_size() const;
  void clear_investors();
  static const int kInvestorsFieldNumber = 2;
  const ::manager::sys_investor& investors(int index) const;
  ::manager::sys_investor* mutable_investors(int index);
  ::manager::sys_investor* add_investors();
  ::google::protobuf::RepeatedPtrField< ::manager::sys_investor >*
      mutable_investors();
  const ::google::protobuf::RepeatedPtrField< ::manager::sys_investor >&
      investors() const;

  // .manager.rsp_head_info header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::manager::rsp_head_info& header() const;
  ::manager::rsp_head_info* mutable_header();
  ::manager::rsp_head_info* release_header();
  void set_allocated_header(::manager::rsp_head_info* header);

  // @@protoc_insertion_point(class_scope:manager.rsp_investors)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::manager::sys_investor > investors_;
  ::manager::rsp_head_info* header_;
  mutable int _cached_size_;
  friend struct protobuf_manager_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class req_add_investors : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:manager.req_add_investors) */ {
 public:
  req_add_investors();
  virtual ~req_add_investors();

  req_add_investors(const req_add_investors& from);

  inline req_add_investors& operator=(const req_add_investors& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  req_add_investors(req_add_investors&& from) noexcept
    : req_add_investors() {
    *this = ::std::move(from);
  }

  inline req_add_investors& operator=(req_add_investors&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const req_add_investors& default_instance();

  static inline const req_add_investors* internal_default_instance() {
    return reinterpret_cast<const req_add_investors*>(
               &_req_add_investors_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(req_add_investors* other);
  friend void swap(req_add_investors& a, req_add_investors& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline req_add_investors* New() const PROTOBUF_FINAL { return New(NULL); }

  req_add_investors* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const req_add_investors& from);
  void MergeFrom(const req_add_investors& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(req_add_investors* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string investor = 3;
  int investor_size() const;
  void clear_investor();
  static const int kInvestorFieldNumber = 3;
  const ::std::string& investor(int index) const;
  ::std::string* mutable_investor(int index);
  void set_investor(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_investor(int index, ::std::string&& value);
  #endif
  void set_investor(int index, const char* value);
  void set_investor(int index, const char* value, size_t size);
  ::std::string* add_investor();
  void add_investor(const ::std::string& value);
  #if LANG_CXX11
  void add_investor(::std::string&& value);
  #endif
  void add_investor(const char* value);
  void add_investor(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& investor() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_investor();

  // string userid = 2;
  void clear_userid();
  static const int kUseridFieldNumber = 2;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // int32 requestid = 1;
  void clear_requestid();
  static const int kRequestidFieldNumber = 1;
  ::google::protobuf::int32 requestid() const;
  void set_requestid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:manager.req_add_investors)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> investor_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::int32 requestid_;
  mutable int _cached_size_;
  friend struct protobuf_manager_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class req_del_investors : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:manager.req_del_investors) */ {
 public:
  req_del_investors();
  virtual ~req_del_investors();

  req_del_investors(const req_del_investors& from);

  inline req_del_investors& operator=(const req_del_investors& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  req_del_investors(req_del_investors&& from) noexcept
    : req_del_investors() {
    *this = ::std::move(from);
  }

  inline req_del_investors& operator=(req_del_investors&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const req_del_investors& default_instance();

  static inline const req_del_investors* internal_default_instance() {
    return reinterpret_cast<const req_del_investors*>(
               &_req_del_investors_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(req_del_investors* other);
  friend void swap(req_del_investors& a, req_del_investors& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline req_del_investors* New() const PROTOBUF_FINAL { return New(NULL); }

  req_del_investors* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const req_del_investors& from);
  void MergeFrom(const req_del_investors& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(req_del_investors* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string investor = 3;
  int investor_size() const;
  void clear_investor();
  static const int kInvestorFieldNumber = 3;
  const ::std::string& investor(int index) const;
  ::std::string* mutable_investor(int index);
  void set_investor(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_investor(int index, ::std::string&& value);
  #endif
  void set_investor(int index, const char* value);
  void set_investor(int index, const char* value, size_t size);
  ::std::string* add_investor();
  void add_investor(const ::std::string& value);
  #if LANG_CXX11
  void add_investor(::std::string&& value);
  #endif
  void add_investor(const char* value);
  void add_investor(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& investor() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_investor();

  // string userid = 2;
  void clear_userid();
  static const int kUseridFieldNumber = 2;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // int32 requestid = 1;
  void clear_requestid();
  static const int kRequestidFieldNumber = 1;
  ::google::protobuf::int32 requestid() const;
  void set_requestid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:manager.req_del_investors)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> investor_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::int32 requestid_;
  mutable int _cached_size_;
  friend struct protobuf_manager_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rtn_change_tree : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:manager.rtn_change_tree) */ {
 public:
  rtn_change_tree();
  virtual ~rtn_change_tree();

  rtn_change_tree(const rtn_change_tree& from);

  inline rtn_change_tree& operator=(const rtn_change_tree& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rtn_change_tree(rtn_change_tree&& from) noexcept
    : rtn_change_tree() {
    *this = ::std::move(from);
  }

  inline rtn_change_tree& operator=(rtn_change_tree&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rtn_change_tree& default_instance();

  static inline const rtn_change_tree* internal_default_instance() {
    return reinterpret_cast<const rtn_change_tree*>(
               &_rtn_change_tree_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(rtn_change_tree* other);
  friend void swap(rtn_change_tree& a, rtn_change_tree& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rtn_change_tree* New() const PROTOBUF_FINAL { return New(NULL); }

  rtn_change_tree* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rtn_change_tree& from);
  void MergeFrom(const rtn_change_tree& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rtn_change_tree* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .manager.sys_user info = 2;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 2;
  const ::manager::sys_user& info() const;
  ::manager::sys_user* mutable_info();
  ::manager::sys_user* release_info();
  void set_allocated_info(::manager::sys_user* info);

  // int32 operatorid = 1;
  void clear_operatorid();
  static const int kOperatoridFieldNumber = 1;
  ::google::protobuf::int32 operatorid() const;
  void set_operatorid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:manager.rtn_change_tree)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::manager::sys_user* info_;
  ::google::protobuf::int32 operatorid_;
  mutable int _cached_size_;
  friend struct protobuf_manager_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rtn_change_risker_investor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:manager.rtn_change_risker_investor) */ {
 public:
  rtn_change_risker_investor();
  virtual ~rtn_change_risker_investor();

  rtn_change_risker_investor(const rtn_change_risker_investor& from);

  inline rtn_change_risker_investor& operator=(const rtn_change_risker_investor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rtn_change_risker_investor(rtn_change_risker_investor&& from) noexcept
    : rtn_change_risker_investor() {
    *this = ::std::move(from);
  }

  inline rtn_change_risker_investor& operator=(rtn_change_risker_investor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rtn_change_risker_investor& default_instance();

  static inline const rtn_change_risker_investor* internal_default_instance() {
    return reinterpret_cast<const rtn_change_risker_investor*>(
               &_rtn_change_risker_investor_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(rtn_change_risker_investor* other);
  friend void swap(rtn_change_risker_investor& a, rtn_change_risker_investor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rtn_change_risker_investor* New() const PROTOBUF_FINAL { return New(NULL); }

  rtn_change_risker_investor* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rtn_change_risker_investor& from);
  void MergeFrom(const rtn_change_risker_investor& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rtn_change_risker_investor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string investor = 3;
  int investor_size() const;
  void clear_investor();
  static const int kInvestorFieldNumber = 3;
  const ::std::string& investor(int index) const;
  ::std::string* mutable_investor(int index);
  void set_investor(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_investor(int index, ::std::string&& value);
  #endif
  void set_investor(int index, const char* value);
  void set_investor(int index, const char* value, size_t size);
  ::std::string* add_investor();
  void add_investor(const ::std::string& value);
  #if LANG_CXX11
  void add_investor(::std::string&& value);
  #endif
  void add_investor(const char* value);
  void add_investor(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& investor() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_investor();

  // string userid = 2;
  void clear_userid();
  static const int kUseridFieldNumber = 2;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // int32 operatorid = 1;
  void clear_operatorid();
  static const int kOperatoridFieldNumber = 1;
  ::google::protobuf::int32 operatorid() const;
  void set_operatorid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:manager.rtn_change_risker_investor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> investor_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::int32 operatorid_;
  mutable int _cached_size_;
  friend struct protobuf_manager_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rtn_change_investor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:manager.rtn_change_investor) */ {
 public:
  rtn_change_investor();
  virtual ~rtn_change_investor();

  rtn_change_investor(const rtn_change_investor& from);

  inline rtn_change_investor& operator=(const rtn_change_investor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rtn_change_investor(rtn_change_investor&& from) noexcept
    : rtn_change_investor() {
    *this = ::std::move(from);
  }

  inline rtn_change_investor& operator=(rtn_change_investor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rtn_change_investor& default_instance();

  static inline const rtn_change_investor* internal_default_instance() {
    return reinterpret_cast<const rtn_change_investor*>(
               &_rtn_change_investor_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(rtn_change_investor* other);
  friend void swap(rtn_change_investor& a, rtn_change_investor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rtn_change_investor* New() const PROTOBUF_FINAL { return New(NULL); }

  rtn_change_investor* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rtn_change_investor& from);
  void MergeFrom(const rtn_change_investor& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rtn_change_investor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string investor = 2;
  int investor_size() const;
  void clear_investor();
  static const int kInvestorFieldNumber = 2;
  const ::std::string& investor(int index) const;
  ::std::string* mutable_investor(int index);
  void set_investor(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_investor(int index, ::std::string&& value);
  #endif
  void set_investor(int index, const char* value);
  void set_investor(int index, const char* value, size_t size);
  ::std::string* add_investor();
  void add_investor(const ::std::string& value);
  #if LANG_CXX11
  void add_investor(::std::string&& value);
  #endif
  void add_investor(const char* value);
  void add_investor(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& investor() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_investor();

  // int32 operatorid = 1;
  void clear_operatorid();
  static const int kOperatoridFieldNumber = 1;
  ::google::protobuf::int32 operatorid() const;
  void set_operatorid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:manager.rtn_change_investor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> investor_;
  ::google::protobuf::int32 operatorid_;
  mutable int _cached_size_;
  friend struct protobuf_manager_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class insmrgnrate_info : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:manager.insmrgnrate_info) */ {
 public:
  insmrgnrate_info();
  virtual ~insmrgnrate_info();

  insmrgnrate_info(const insmrgnrate_info& from);

  inline insmrgnrate_info& operator=(const insmrgnrate_info& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  insmrgnrate_info(insmrgnrate_info&& from) noexcept
    : insmrgnrate_info() {
    *this = ::std::move(from);
  }

  inline insmrgnrate_info& operator=(insmrgnrate_info&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const insmrgnrate_info& default_instance();

  static inline const insmrgnrate_info* internal_default_instance() {
    return reinterpret_cast<const insmrgnrate_info*>(
               &_insmrgnrate_info_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(insmrgnrate_info* other);
  friend void swap(insmrgnrate_info& a, insmrgnrate_info& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline insmrgnrate_info* New() const PROTOBUF_FINAL { return New(NULL); }

  insmrgnrate_info* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const insmrgnrate_info& from);
  void MergeFrom(const insmrgnrate_info& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(insmrgnrate_info* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string tradingday = 1;
  void clear_tradingday();
  static const int kTradingdayFieldNumber = 1;
  const ::std::string& tradingday() const;
  void set_tradingday(const ::std::string& value);
  #if LANG_CXX11
  void set_tradingday(::std::string&& value);
  #endif
  void set_tradingday(const char* value);
  void set_tradingday(const char* value, size_t size);
  ::std::string* mutable_tradingday();
  ::std::string* release_tradingday();
  void set_allocated_tradingday(::std::string* tradingday);

  // string contractcode = 2;
  void clear_contractcode();
  static const int kContractcodeFieldNumber = 2;
  const ::std::string& contractcode() const;
  void set_contractcode(const ::std::string& value);
  #if LANG_CXX11
  void set_contractcode(::std::string&& value);
  #endif
  void set_contractcode(const char* value);
  void set_contractcode(const char* value, size_t size);
  ::std::string* mutable_contractcode();
  ::std::string* release_contractcode();
  void set_allocated_contractcode(::std::string* contractcode);

  // string exchangecode = 3;
  void clear_exchangecode();
  static const int kExchangecodeFieldNumber = 3;
  const ::std::string& exchangecode() const;
  void set_exchangecode(const ::std::string& value);
  #if LANG_CXX11
  void set_exchangecode(::std::string&& value);
  #endif
  void set_exchangecode(const char* value);
  void set_exchangecode(const char* value, size_t size);
  ::std::string* mutable_exchangecode();
  ::std::string* release_exchangecode();
  void set_allocated_exchangecode(::std::string* exchangecode);

  // string direction = 4;
  void clear_direction();
  static const int kDirectionFieldNumber = 4;
  const ::std::string& direction() const;
  void set_direction(const ::std::string& value);
  #if LANG_CXX11
  void set_direction(::std::string&& value);
  #endif
  void set_direction(const char* value);
  void set_direction(const char* value, size_t size);
  ::std::string* mutable_direction();
  ::std::string* release_direction();
  void set_allocated_direction(::std::string* direction);

  // string hedgeflag = 5;
  void clear_hedgeflag();
  static const int kHedgeflagFieldNumber = 5;
  const ::std::string& hedgeflag() const;
  void set_hedgeflag(const ::std::string& value);
  #if LANG_CXX11
  void set_hedgeflag(::std::string&& value);
  #endif
  void set_hedgeflag(const char* value);
  void set_hedgeflag(const char* value, size_t size);
  ::std::string* mutable_hedgeflag();
  ::std::string* release_hedgeflag();
  void set_allocated_hedgeflag(::std::string* hedgeflag);

  // double marginrate = 6;
  void clear_marginrate();
  static const int kMarginrateFieldNumber = 6;
  double marginrate() const;
  void set_marginrate(double value);

  // double segmrgn = 7;
  void clear_segmrgn();
  static const int kSegmrgnFieldNumber = 7;
  double segmrgn() const;
  void set_segmrgn(double value);

  // @@protoc_insertion_point(class_scope:manager.insmrgnrate_info)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr tradingday_;
  ::google::protobuf::internal::ArenaStringPtr contractcode_;
  ::google::protobuf::internal::ArenaStringPtr exchangecode_;
  ::google::protobuf::internal::ArenaStringPtr direction_;
  ::google::protobuf::internal::ArenaStringPtr hedgeflag_;
  double marginrate_;
  double segmrgn_;
  mutable int _cached_size_;
  friend struct protobuf_manager_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class req_insmrgnrate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:manager.req_insmrgnrate) */ {
 public:
  req_insmrgnrate();
  virtual ~req_insmrgnrate();

  req_insmrgnrate(const req_insmrgnrate& from);

  inline req_insmrgnrate& operator=(const req_insmrgnrate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  req_insmrgnrate(req_insmrgnrate&& from) noexcept
    : req_insmrgnrate() {
    *this = ::std::move(from);
  }

  inline req_insmrgnrate& operator=(req_insmrgnrate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const req_insmrgnrate& default_instance();

  static inline const req_insmrgnrate* internal_default_instance() {
    return reinterpret_cast<const req_insmrgnrate*>(
               &_req_insmrgnrate_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(req_insmrgnrate* other);
  friend void swap(req_insmrgnrate& a, req_insmrgnrate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline req_insmrgnrate* New() const PROTOBUF_FINAL { return New(NULL); }

  req_insmrgnrate* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const req_insmrgnrate& from);
  void MergeFrom(const req_insmrgnrate& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(req_insmrgnrate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 requestid = 1;
  void clear_requestid();
  static const int kRequestidFieldNumber = 1;
  ::google::protobuf::int32 requestid() const;
  void set_requestid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:manager.req_insmrgnrate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 requestid_;
  mutable int _cached_size_;
  friend struct protobuf_manager_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rsp_insmrgnrate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:manager.rsp_insmrgnrate) */ {
 public:
  rsp_insmrgnrate();
  virtual ~rsp_insmrgnrate();

  rsp_insmrgnrate(const rsp_insmrgnrate& from);

  inline rsp_insmrgnrate& operator=(const rsp_insmrgnrate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rsp_insmrgnrate(rsp_insmrgnrate&& from) noexcept
    : rsp_insmrgnrate() {
    *this = ::std::move(from);
  }

  inline rsp_insmrgnrate& operator=(rsp_insmrgnrate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rsp_insmrgnrate& default_instance();

  static inline const rsp_insmrgnrate* internal_default_instance() {
    return reinterpret_cast<const rsp_insmrgnrate*>(
               &_rsp_insmrgnrate_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(rsp_insmrgnrate* other);
  friend void swap(rsp_insmrgnrate& a, rsp_insmrgnrate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rsp_insmrgnrate* New() const PROTOBUF_FINAL { return New(NULL); }

  rsp_insmrgnrate* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rsp_insmrgnrate& from);
  void MergeFrom(const rsp_insmrgnrate& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rsp_insmrgnrate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .manager.insmrgnrate_info infos = 2;
  int infos_size() const;
  void clear_infos();
  static const int kInfosFieldNumber = 2;
  const ::manager::insmrgnrate_info& infos(int index) const;
  ::manager::insmrgnrate_info* mutable_infos(int index);
  ::manager::insmrgnrate_info* add_infos();
  ::google::protobuf::RepeatedPtrField< ::manager::insmrgnrate_info >*
      mutable_infos();
  const ::google::protobuf::RepeatedPtrField< ::manager::insmrgnrate_info >&
      infos() const;

  // .manager.rsp_head_info header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::manager::rsp_head_info& header() const;
  ::manager::rsp_head_info* mutable_header();
  ::manager::rsp_head_info* release_header();
  void set_allocated_header(::manager::rsp_head_info* header);

  // @@protoc_insertion_point(class_scope:manager.rsp_insmrgnrate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::manager::insmrgnrate_info > infos_;
  ::manager::rsp_head_info* header_;
  mutable int _cached_size_;
  friend struct protobuf_manager_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class req_edit_insmrgnrate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:manager.req_edit_insmrgnrate) */ {
 public:
  req_edit_insmrgnrate();
  virtual ~req_edit_insmrgnrate();

  req_edit_insmrgnrate(const req_edit_insmrgnrate& from);

  inline req_edit_insmrgnrate& operator=(const req_edit_insmrgnrate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  req_edit_insmrgnrate(req_edit_insmrgnrate&& from) noexcept
    : req_edit_insmrgnrate() {
    *this = ::std::move(from);
  }

  inline req_edit_insmrgnrate& operator=(req_edit_insmrgnrate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const req_edit_insmrgnrate& default_instance();

  static inline const req_edit_insmrgnrate* internal_default_instance() {
    return reinterpret_cast<const req_edit_insmrgnrate*>(
               &_req_edit_insmrgnrate_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void Swap(req_edit_insmrgnrate* other);
  friend void swap(req_edit_insmrgnrate& a, req_edit_insmrgnrate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline req_edit_insmrgnrate* New() const PROTOBUF_FINAL { return New(NULL); }

  req_edit_insmrgnrate* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const req_edit_insmrgnrate& from);
  void MergeFrom(const req_edit_insmrgnrate& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(req_edit_insmrgnrate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .manager.insmrgnrate_info infos = 2;
  int infos_size() const;
  void clear_infos();
  static const int kInfosFieldNumber = 2;
  const ::manager::insmrgnrate_info& infos(int index) const;
  ::manager::insmrgnrate_info* mutable_infos(int index);
  ::manager::insmrgnrate_info* add_infos();
  ::google::protobuf::RepeatedPtrField< ::manager::insmrgnrate_info >*
      mutable_infos();
  const ::google::protobuf::RepeatedPtrField< ::manager::insmrgnrate_info >&
      infos() const;

  // int32 requestid = 1;
  void clear_requestid();
  static const int kRequestidFieldNumber = 1;
  ::google::protobuf::int32 requestid() const;
  void set_requestid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:manager.req_edit_insmrgnrate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::manager::insmrgnrate_info > infos_;
  ::google::protobuf::int32 requestid_;
  mutable int _cached_size_;
  friend struct protobuf_manager_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rtn_change_insmrgnrate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:manager.rtn_change_insmrgnrate) */ {
 public:
  rtn_change_insmrgnrate();
  virtual ~rtn_change_insmrgnrate();

  rtn_change_insmrgnrate(const rtn_change_insmrgnrate& from);

  inline rtn_change_insmrgnrate& operator=(const rtn_change_insmrgnrate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rtn_change_insmrgnrate(rtn_change_insmrgnrate&& from) noexcept
    : rtn_change_insmrgnrate() {
    *this = ::std::move(from);
  }

  inline rtn_change_insmrgnrate& operator=(rtn_change_insmrgnrate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rtn_change_insmrgnrate& default_instance();

  static inline const rtn_change_insmrgnrate* internal_default_instance() {
    return reinterpret_cast<const rtn_change_insmrgnrate*>(
               &_rtn_change_insmrgnrate_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void Swap(rtn_change_insmrgnrate* other);
  friend void swap(rtn_change_insmrgnrate& a, rtn_change_insmrgnrate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rtn_change_insmrgnrate* New() const PROTOBUF_FINAL { return New(NULL); }

  rtn_change_insmrgnrate* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rtn_change_insmrgnrate& from);
  void MergeFrom(const rtn_change_insmrgnrate& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rtn_change_insmrgnrate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .manager.insmrgnrate_info infos = 1;
  int infos_size() const;
  void clear_infos();
  static const int kInfosFieldNumber = 1;
  const ::manager::insmrgnrate_info& infos(int index) const;
  ::manager::insmrgnrate_info* mutable_infos(int index);
  ::manager::insmrgnrate_info* add_infos();
  ::google::protobuf::RepeatedPtrField< ::manager::insmrgnrate_info >*
      mutable_infos();
  const ::google::protobuf::RepeatedPtrField< ::manager::insmrgnrate_info >&
      infos() const;

  // @@protoc_insertion_point(class_scope:manager.rtn_change_insmrgnrate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::manager::insmrgnrate_info > infos_;
  mutable int _cached_size_;
  friend struct protobuf_manager_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class req_add_insmrgnrate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:manager.req_add_insmrgnrate) */ {
 public:
  req_add_insmrgnrate();
  virtual ~req_add_insmrgnrate();

  req_add_insmrgnrate(const req_add_insmrgnrate& from);

  inline req_add_insmrgnrate& operator=(const req_add_insmrgnrate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  req_add_insmrgnrate(req_add_insmrgnrate&& from) noexcept
    : req_add_insmrgnrate() {
    *this = ::std::move(from);
  }

  inline req_add_insmrgnrate& operator=(req_add_insmrgnrate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const req_add_insmrgnrate& default_instance();

  static inline const req_add_insmrgnrate* internal_default_instance() {
    return reinterpret_cast<const req_add_insmrgnrate*>(
               &_req_add_insmrgnrate_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    28;

  void Swap(req_add_insmrgnrate* other);
  friend void swap(req_add_insmrgnrate& a, req_add_insmrgnrate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline req_add_insmrgnrate* New() const PROTOBUF_FINAL { return New(NULL); }

  req_add_insmrgnrate* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const req_add_insmrgnrate& from);
  void MergeFrom(const req_add_insmrgnrate& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(req_add_insmrgnrate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .manager.insmrgnrate_info info = 2;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 2;
  const ::manager::insmrgnrate_info& info() const;
  ::manager::insmrgnrate_info* mutable_info();
  ::manager::insmrgnrate_info* release_info();
  void set_allocated_info(::manager::insmrgnrate_info* info);

  // int32 requestid = 1;
  void clear_requestid();
  static const int kRequestidFieldNumber = 1;
  ::google::protobuf::int32 requestid() const;
  void set_requestid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:manager.req_add_insmrgnrate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::manager::insmrgnrate_info* info_;
  ::google::protobuf::int32 requestid_;
  mutable int _cached_size_;
  friend struct protobuf_manager_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rtn_add_insmrgnrate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:manager.rtn_add_insmrgnrate) */ {
 public:
  rtn_add_insmrgnrate();
  virtual ~rtn_add_insmrgnrate();

  rtn_add_insmrgnrate(const rtn_add_insmrgnrate& from);

  inline rtn_add_insmrgnrate& operator=(const rtn_add_insmrgnrate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rtn_add_insmrgnrate(rtn_add_insmrgnrate&& from) noexcept
    : rtn_add_insmrgnrate() {
    *this = ::std::move(from);
  }

  inline rtn_add_insmrgnrate& operator=(rtn_add_insmrgnrate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rtn_add_insmrgnrate& default_instance();

  static inline const rtn_add_insmrgnrate* internal_default_instance() {
    return reinterpret_cast<const rtn_add_insmrgnrate*>(
               &_rtn_add_insmrgnrate_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    29;

  void Swap(rtn_add_insmrgnrate* other);
  friend void swap(rtn_add_insmrgnrate& a, rtn_add_insmrgnrate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rtn_add_insmrgnrate* New() const PROTOBUF_FINAL { return New(NULL); }

  rtn_add_insmrgnrate* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rtn_add_insmrgnrate& from);
  void MergeFrom(const rtn_add_insmrgnrate& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rtn_add_insmrgnrate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .manager.insmrgnrate_info info = 1;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 1;
  const ::manager::insmrgnrate_info& info() const;
  ::manager::insmrgnrate_info* mutable_info();
  ::manager::insmrgnrate_info* release_info();
  void set_allocated_info(::manager::insmrgnrate_info* info);

  // @@protoc_insertion_point(class_scope:manager.rtn_add_insmrgnrate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::manager::insmrgnrate_info* info_;
  mutable int _cached_size_;
  friend struct protobuf_manager_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class req_del_insmrgnrate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:manager.req_del_insmrgnrate) */ {
 public:
  req_del_insmrgnrate();
  virtual ~req_del_insmrgnrate();

  req_del_insmrgnrate(const req_del_insmrgnrate& from);

  inline req_del_insmrgnrate& operator=(const req_del_insmrgnrate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  req_del_insmrgnrate(req_del_insmrgnrate&& from) noexcept
    : req_del_insmrgnrate() {
    *this = ::std::move(from);
  }

  inline req_del_insmrgnrate& operator=(req_del_insmrgnrate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const req_del_insmrgnrate& default_instance();

  static inline const req_del_insmrgnrate* internal_default_instance() {
    return reinterpret_cast<const req_del_insmrgnrate*>(
               &_req_del_insmrgnrate_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    30;

  void Swap(req_del_insmrgnrate* other);
  friend void swap(req_del_insmrgnrate& a, req_del_insmrgnrate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline req_del_insmrgnrate* New() const PROTOBUF_FINAL { return New(NULL); }

  req_del_insmrgnrate* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const req_del_insmrgnrate& from);
  void MergeFrom(const req_del_insmrgnrate& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(req_del_insmrgnrate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .manager.insmrgnrate_info info = 2;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 2;
  const ::manager::insmrgnrate_info& info() const;
  ::manager::insmrgnrate_info* mutable_info();
  ::manager::insmrgnrate_info* release_info();
  void set_allocated_info(::manager::insmrgnrate_info* info);

  // int32 requestid = 1;
  void clear_requestid();
  static const int kRequestidFieldNumber = 1;
  ::google::protobuf::int32 requestid() const;
  void set_requestid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:manager.req_del_insmrgnrate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::manager::insmrgnrate_info* info_;
  ::google::protobuf::int32 requestid_;
  mutable int _cached_size_;
  friend struct protobuf_manager_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rtn_del_insmrgnrate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:manager.rtn_del_insmrgnrate) */ {
 public:
  rtn_del_insmrgnrate();
  virtual ~rtn_del_insmrgnrate();

  rtn_del_insmrgnrate(const rtn_del_insmrgnrate& from);

  inline rtn_del_insmrgnrate& operator=(const rtn_del_insmrgnrate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rtn_del_insmrgnrate(rtn_del_insmrgnrate&& from) noexcept
    : rtn_del_insmrgnrate() {
    *this = ::std::move(from);
  }

  inline rtn_del_insmrgnrate& operator=(rtn_del_insmrgnrate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rtn_del_insmrgnrate& default_instance();

  static inline const rtn_del_insmrgnrate* internal_default_instance() {
    return reinterpret_cast<const rtn_del_insmrgnrate*>(
               &_rtn_del_insmrgnrate_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    31;

  void Swap(rtn_del_insmrgnrate* other);
  friend void swap(rtn_del_insmrgnrate& a, rtn_del_insmrgnrate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rtn_del_insmrgnrate* New() const PROTOBUF_FINAL { return New(NULL); }

  rtn_del_insmrgnrate* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rtn_del_insmrgnrate& from);
  void MergeFrom(const rtn_del_insmrgnrate& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rtn_del_insmrgnrate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .manager.insmrgnrate_info info = 1;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 1;
  const ::manager::insmrgnrate_info& info() const;
  ::manager::insmrgnrate_info* mutable_info();
  ::manager::insmrgnrate_info* release_info();
  void set_allocated_info(::manager::insmrgnrate_info* info);

  // @@protoc_insertion_point(class_scope:manager.rtn_del_insmrgnrate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::manager::insmrgnrate_info* info_;
  mutable int _cached_size_;
  friend struct protobuf_manager_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class req_option_argv : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:manager.req_option_argv) */ {
 public:
  req_option_argv();
  virtual ~req_option_argv();

  req_option_argv(const req_option_argv& from);

  inline req_option_argv& operator=(const req_option_argv& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  req_option_argv(req_option_argv&& from) noexcept
    : req_option_argv() {
    *this = ::std::move(from);
  }

  inline req_option_argv& operator=(req_option_argv&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const req_option_argv& default_instance();

  static inline const req_option_argv* internal_default_instance() {
    return reinterpret_cast<const req_option_argv*>(
               &_req_option_argv_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    32;

  void Swap(req_option_argv* other);
  friend void swap(req_option_argv& a, req_option_argv& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline req_option_argv* New() const PROTOBUF_FINAL { return New(NULL); }

  req_option_argv* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const req_option_argv& from);
  void MergeFrom(const req_option_argv& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(req_option_argv* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 requestid = 1;
  void clear_requestid();
  static const int kRequestidFieldNumber = 1;
  ::google::protobuf::int32 requestid() const;
  void set_requestid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:manager.req_option_argv)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 requestid_;
  mutable int _cached_size_;
  friend struct protobuf_manager_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class option_argv : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:manager.option_argv) */ {
 public:
  option_argv();
  virtual ~option_argv();

  option_argv(const option_argv& from);

  inline option_argv& operator=(const option_argv& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  option_argv(option_argv&& from) noexcept
    : option_argv() {
    *this = ::std::move(from);
  }

  inline option_argv& operator=(option_argv&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const option_argv& default_instance();

  static inline const option_argv* internal_default_instance() {
    return reinterpret_cast<const option_argv*>(
               &_option_argv_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    33;

  void Swap(option_argv* other);
  friend void swap(option_argv& a, option_argv& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline option_argv* New() const PROTOBUF_FINAL { return New(NULL); }

  option_argv* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const option_argv& from);
  void MergeFrom(const option_argv& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(option_argv* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double vol = 2;
  void clear_vol();
  static const int kVolFieldNumber = 2;
  double vol() const;
  void set_vol(double value);

  // int32 price_type = 1;
  void clear_price_type();
  static const int kPriceTypeFieldNumber = 1;
  ::google::protobuf::int32 price_type() const;
  void set_price_type(::google::protobuf::int32 value);

  // int32 step = 4;
  void clear_step();
  static const int kStepFieldNumber = 4;
  ::google::protobuf::int32 step() const;
  void set_step(::google::protobuf::int32 value);

  // double rate = 3;
  void clear_rate();
  static const int kRateFieldNumber = 3;
  double rate() const;
  void set_rate(double value);

  // int32 iterations = 5;
  void clear_iterations();
  static const int kIterationsFieldNumber = 5;
  ::google::protobuf::int32 iterations() const;
  void set_iterations(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:manager.option_argv)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double vol_;
  ::google::protobuf::int32 price_type_;
  ::google::protobuf::int32 step_;
  double rate_;
  ::google::protobuf::int32 iterations_;
  mutable int _cached_size_;
  friend struct protobuf_manager_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rsp_option_argv : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:manager.rsp_option_argv) */ {
 public:
  rsp_option_argv();
  virtual ~rsp_option_argv();

  rsp_option_argv(const rsp_option_argv& from);

  inline rsp_option_argv& operator=(const rsp_option_argv& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rsp_option_argv(rsp_option_argv&& from) noexcept
    : rsp_option_argv() {
    *this = ::std::move(from);
  }

  inline rsp_option_argv& operator=(rsp_option_argv&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rsp_option_argv& default_instance();

  static inline const rsp_option_argv* internal_default_instance() {
    return reinterpret_cast<const rsp_option_argv*>(
               &_rsp_option_argv_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    34;

  void Swap(rsp_option_argv* other);
  friend void swap(rsp_option_argv& a, rsp_option_argv& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rsp_option_argv* New() const PROTOBUF_FINAL { return New(NULL); }

  rsp_option_argv* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rsp_option_argv& from);
  void MergeFrom(const rsp_option_argv& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rsp_option_argv* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .manager.rsp_head_info header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::manager::rsp_head_info& header() const;
  ::manager::rsp_head_info* mutable_header();
  ::manager::rsp_head_info* release_header();
  void set_allocated_header(::manager::rsp_head_info* header);

  // .manager.option_argv info = 2;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 2;
  const ::manager::option_argv& info() const;
  ::manager::option_argv* mutable_info();
  ::manager::option_argv* release_info();
  void set_allocated_info(::manager::option_argv* info);

  // @@protoc_insertion_point(class_scope:manager.rsp_option_argv)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::manager::rsp_head_info* header_;
  ::manager::option_argv* info_;
  mutable int _cached_size_;
  friend struct protobuf_manager_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class req_option_argv_adj : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:manager.req_option_argv_adj) */ {
 public:
  req_option_argv_adj();
  virtual ~req_option_argv_adj();

  req_option_argv_adj(const req_option_argv_adj& from);

  inline req_option_argv_adj& operator=(const req_option_argv_adj& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  req_option_argv_adj(req_option_argv_adj&& from) noexcept
    : req_option_argv_adj() {
    *this = ::std::move(from);
  }

  inline req_option_argv_adj& operator=(req_option_argv_adj&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const req_option_argv_adj& default_instance();

  static inline const req_option_argv_adj* internal_default_instance() {
    return reinterpret_cast<const req_option_argv_adj*>(
               &_req_option_argv_adj_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    35;

  void Swap(req_option_argv_adj* other);
  friend void swap(req_option_argv_adj& a, req_option_argv_adj& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline req_option_argv_adj* New() const PROTOBUF_FINAL { return New(NULL); }

  req_option_argv_adj* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const req_option_argv_adj& from);
  void MergeFrom(const req_option_argv_adj& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(req_option_argv_adj* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .manager.option_argv info = 2;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 2;
  const ::manager::option_argv& info() const;
  ::manager::option_argv* mutable_info();
  ::manager::option_argv* release_info();
  void set_allocated_info(::manager::option_argv* info);

  // int32 requestid = 1;
  void clear_requestid();
  static const int kRequestidFieldNumber = 1;
  ::google::protobuf::int32 requestid() const;
  void set_requestid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:manager.req_option_argv_adj)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::manager::option_argv* info_;
  ::google::protobuf::int32 requestid_;
  mutable int _cached_size_;
  friend struct protobuf_manager_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class req_contract : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:manager.req_contract) */ {
 public:
  req_contract();
  virtual ~req_contract();

  req_contract(const req_contract& from);

  inline req_contract& operator=(const req_contract& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  req_contract(req_contract&& from) noexcept
    : req_contract() {
    *this = ::std::move(from);
  }

  inline req_contract& operator=(req_contract&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const req_contract& default_instance();

  static inline const req_contract* internal_default_instance() {
    return reinterpret_cast<const req_contract*>(
               &_req_contract_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    36;

  void Swap(req_contract* other);
  friend void swap(req_contract& a, req_contract& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline req_contract* New() const PROTOBUF_FINAL { return New(NULL); }

  req_contract* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const req_contract& from);
  void MergeFrom(const req_contract& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(req_contract* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 requestid = 1;
  void clear_requestid();
  static const int kRequestidFieldNumber = 1;
  ::google::protobuf::int32 requestid() const;
  void set_requestid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:manager.req_contract)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 requestid_;
  mutable int _cached_size_;
  friend struct protobuf_manager_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class contract_info : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:manager.contract_info) */ {
 public:
  contract_info();
  virtual ~contract_info();

  contract_info(const contract_info& from);

  inline contract_info& operator=(const contract_info& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  contract_info(contract_info&& from) noexcept
    : contract_info() {
    *this = ::std::move(from);
  }

  inline contract_info& operator=(contract_info&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const contract_info& default_instance();

  static inline const contract_info* internal_default_instance() {
    return reinterpret_cast<const contract_info*>(
               &_contract_info_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    37;

  void Swap(contract_info* other);
  friend void swap(contract_info& a, contract_info& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline contract_info* New() const PROTOBUF_FINAL { return New(NULL); }

  contract_info* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const contract_info& from);
  void MergeFrom(const contract_info& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(contract_info* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string contractcode = 1;
  void clear_contractcode();
  static const int kContractcodeFieldNumber = 1;
  const ::std::string& contractcode() const;
  void set_contractcode(const ::std::string& value);
  #if LANG_CXX11
  void set_contractcode(::std::string&& value);
  #endif
  void set_contractcode(const char* value);
  void set_contractcode(const char* value, size_t size);
  ::std::string* mutable_contractcode();
  ::std::string* release_contractcode();
  void set_allocated_contractcode(::std::string* contractcode);

  // string productcode = 2;
  void clear_productcode();
  static const int kProductcodeFieldNumber = 2;
  const ::std::string& productcode() const;
  void set_productcode(const ::std::string& value);
  #if LANG_CXX11
  void set_productcode(::std::string&& value);
  #endif
  void set_productcode(const char* value);
  void set_productcode(const char* value, size_t size);
  ::std::string* mutable_productcode();
  ::std::string* release_productcode();
  void set_allocated_productcode(::std::string* productcode);

  // string productkind = 3;
  void clear_productkind();
  static const int kProductkindFieldNumber = 3;
  const ::std::string& productkind() const;
  void set_productkind(const ::std::string& value);
  #if LANG_CXX11
  void set_productkind(::std::string&& value);
  #endif
  void set_productkind(const char* value);
  void set_productkind(const char* value, size_t size);
  ::std::string* mutable_productkind();
  ::std::string* release_productkind();
  void set_allocated_productkind(::std::string* productkind);

  // string exchangecode = 4;
  void clear_exchangecode();
  static const int kExchangecodeFieldNumber = 4;
  const ::std::string& exchangecode() const;
  void set_exchangecode(const ::std::string& value);
  #if LANG_CXX11
  void set_exchangecode(::std::string&& value);
  #endif
  void set_exchangecode(const char* value);
  void set_exchangecode(const char* value, size_t size);
  ::std::string* mutable_exchangecode();
  ::std::string* release_exchangecode();
  void set_allocated_exchangecode(::std::string* exchangecode);

  // string marketcode = 5;
  void clear_marketcode();
  static const int kMarketcodeFieldNumber = 5;
  const ::std::string& marketcode() const;
  void set_marketcode(const ::std::string& value);
  #if LANG_CXX11
  void set_marketcode(::std::string&& value);
  #endif
  void set_marketcode(const char* value);
  void set_marketcode(const char* value, size_t size);
  ::std::string* mutable_marketcode();
  ::std::string* release_marketcode();
  void set_allocated_marketcode(::std::string* marketcode);

  // string createdate = 6;
  void clear_createdate();
  static const int kCreatedateFieldNumber = 6;
  const ::std::string& createdate() const;
  void set_createdate(const ::std::string& value);
  #if LANG_CXX11
  void set_createdate(::std::string&& value);
  #endif
  void set_createdate(const char* value);
  void set_createdate(const char* value, size_t size);
  ::std::string* mutable_createdate();
  ::std::string* release_createdate();
  void set_allocated_createdate(::std::string* createdate);

  // string opendate = 7;
  void clear_opendate();
  static const int kOpendateFieldNumber = 7;
  const ::std::string& opendate() const;
  void set_opendate(const ::std::string& value);
  #if LANG_CXX11
  void set_opendate(::std::string&& value);
  #endif
  void set_opendate(const char* value);
  void set_opendate(const char* value, size_t size);
  ::std::string* mutable_opendate();
  ::std::string* release_opendate();
  void set_allocated_opendate(::std::string* opendate);

  // string expiredate = 8;
  void clear_expiredate();
  static const int kExpiredateFieldNumber = 8;
  const ::std::string& expiredate() const;
  void set_expiredate(const ::std::string& value);
  #if LANG_CXX11
  void set_expiredate(::std::string&& value);
  #endif
  void set_expiredate(const char* value);
  void set_expiredate(const char* value, size_t size);
  ::std::string* mutable_expiredate();
  ::std::string* release_expiredate();
  void set_allocated_expiredate(::std::string* expiredate);

  // string contractname = 11;
  void clear_contractname();
  static const int kContractnameFieldNumber = 11;
  const ::std::string& contractname() const;
  void set_contractname(const ::std::string& value);
  #if LANG_CXX11
  void set_contractname(::std::string&& value);
  #endif
  void set_contractname(const char* value);
  void set_contractname(const char* value, size_t size);
  ::std::string* mutable_contractname();
  ::std::string* release_contractname();
  void set_allocated_contractname(::std::string* contractname);

  // string delivbegindate = 12;
  void clear_delivbegindate();
  static const int kDelivbegindateFieldNumber = 12;
  const ::std::string& delivbegindate() const;
  void set_delivbegindate(const ::std::string& value);
  #if LANG_CXX11
  void set_delivbegindate(::std::string&& value);
  #endif
  void set_delivbegindate(const char* value);
  void set_delivbegindate(const char* value, size_t size);
  ::std::string* mutable_delivbegindate();
  ::std::string* release_delivbegindate();
  void set_allocated_delivbegindate(::std::string* delivbegindate);

  // string delivenddate = 13;
  void clear_delivenddate();
  static const int kDelivenddateFieldNumber = 13;
  const ::std::string& delivenddate() const;
  void set_delivenddate(const ::std::string& value);
  #if LANG_CXX11
  void set_delivenddate(::std::string&& value);
  #endif
  void set_delivenddate(const char* value);
  void set_delivenddate(const char* value, size_t size);
  ::std::string* mutable_delivenddate();
  ::std::string* release_delivenddate();
  void set_allocated_delivenddate(::std::string* delivenddate);

  // string excontractname = 14;
  void clear_excontractname();
  static const int kExcontractnameFieldNumber = 14;
  const ::std::string& excontractname() const;
  void set_excontractname(const ::std::string& value);
  #if LANG_CXX11
  void set_excontractname(::std::string&& value);
  #endif
  void set_excontractname(const char* value);
  void set_excontractname(const char* value, size_t size);
  ::std::string* mutable_excontractname();
  ::std::string* release_excontractname();
  void set_allocated_excontractname(::std::string* excontractname);

  // string exproductname = 15;
  void clear_exproductname();
  static const int kExproductnameFieldNumber = 15;
  const ::std::string& exproductname() const;
  void set_exproductname(const ::std::string& value);
  #if LANG_CXX11
  void set_exproductname(::std::string&& value);
  #endif
  void set_exproductname(const char* value);
  void set_exproductname(const char* value, size_t size);
  ::std::string* mutable_exproductname();
  ::std::string* release_exproductname();
  void set_allocated_exproductname(::std::string* exproductname);

  // string ismrgndisc = 16;
  void clear_ismrgndisc();
  static const int kIsmrgndiscFieldNumber = 16;
  const ::std::string& ismrgndisc() const;
  void set_ismrgndisc(const ::std::string& value);
  #if LANG_CXX11
  void set_ismrgndisc(::std::string&& value);
  #endif
  void set_ismrgndisc(const char* value);
  void set_ismrgndisc(const char* value, size_t size);
  ::std::string* mutable_ismrgndisc();
  ::std::string* release_ismrgndisc();
  void set_allocated_ismrgndisc(::std::string* ismrgndisc);

  // string productclass = 17;
  void clear_productclass();
  static const int kProductclassFieldNumber = 17;
  const ::std::string& productclass() const;
  void set_productclass(const ::std::string& value);
  #if LANG_CXX11
  void set_productclass(::std::string&& value);
  #endif
  void set_productclass(const char* value);
  void set_productclass(const char* value, size_t size);
  ::std::string* mutable_productclass();
  ::std::string* release_productclass();
  void set_allocated_productclass(::std::string* productclass);

  // string optionstype = 19;
  void clear_optionstype();
  static const int kOptionstypeFieldNumber = 19;
  const ::std::string& optionstype() const;
  void set_optionstype(const ::std::string& value);
  #if LANG_CXX11
  void set_optionstype(::std::string&& value);
  #endif
  void set_optionstype(const char* value);
  void set_optionstype(const char* value, size_t size);
  ::std::string* mutable_optionstype();
  ::std::string* release_optionstype();
  void set_allocated_optionstype(::std::string* optionstype);

  // string underlyinginstrid = 21;
  void clear_underlyinginstrid();
  static const int kUnderlyinginstridFieldNumber = 21;
  const ::std::string& underlyinginstrid() const;
  void set_underlyinginstrid(const ::std::string& value);
  #if LANG_CXX11
  void set_underlyinginstrid(::std::string&& value);
  #endif
  void set_underlyinginstrid(const char* value);
  void set_underlyinginstrid(const char* value, size_t size);
  ::std::string* mutable_underlyinginstrid();
  ::std::string* release_underlyinginstrid();
  void set_allocated_underlyinginstrid(::std::string* underlyinginstrid);

  // string strikemode = 22;
  void clear_strikemode();
  static const int kStrikemodeFieldNumber = 22;
  const ::std::string& strikemode() const;
  void set_strikemode(const ::std::string& value);
  #if LANG_CXX11
  void set_strikemode(::std::string&& value);
  #endif
  void set_strikemode(const char* value);
  void set_strikemode(const char* value, size_t size);
  ::std::string* mutable_strikemode();
  ::std::string* release_strikemode();
  void set_allocated_strikemode(::std::string* strikemode);

  // double pricetick = 10;
  void clear_pricetick();
  static const int kPricetickFieldNumber = 10;
  double pricetick() const;
  void set_pricetick(double value);

  // double baseprice = 18;
  void clear_baseprice();
  static const int kBasepriceFieldNumber = 18;
  double baseprice() const;
  void set_baseprice(double value);

  // double strikeprice = 20;
  void clear_strikeprice();
  static const int kStrikepriceFieldNumber = 20;
  double strikeprice() const;
  void set_strikeprice(double value);

  // double underlyingmultiple = 23;
  void clear_underlyingmultiple();
  static const int kUnderlyingmultipleFieldNumber = 23;
  double underlyingmultiple() const;
  void set_underlyingmultiple(double value);

  // int32 multiplier = 9;
  void clear_multiplier();
  static const int kMultiplierFieldNumber = 9;
  ::google::protobuf::int32 multiplier() const;
  void set_multiplier(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:manager.contract_info)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr contractcode_;
  ::google::protobuf::internal::ArenaStringPtr productcode_;
  ::google::protobuf::internal::ArenaStringPtr productkind_;
  ::google::protobuf::internal::ArenaStringPtr exchangecode_;
  ::google::protobuf::internal::ArenaStringPtr marketcode_;
  ::google::protobuf::internal::ArenaStringPtr createdate_;
  ::google::protobuf::internal::ArenaStringPtr opendate_;
  ::google::protobuf::internal::ArenaStringPtr expiredate_;
  ::google::protobuf::internal::ArenaStringPtr contractname_;
  ::google::protobuf::internal::ArenaStringPtr delivbegindate_;
  ::google::protobuf::internal::ArenaStringPtr delivenddate_;
  ::google::protobuf::internal::ArenaStringPtr excontractname_;
  ::google::protobuf::internal::ArenaStringPtr exproductname_;
  ::google::protobuf::internal::ArenaStringPtr ismrgndisc_;
  ::google::protobuf::internal::ArenaStringPtr productclass_;
  ::google::protobuf::internal::ArenaStringPtr optionstype_;
  ::google::protobuf::internal::ArenaStringPtr underlyinginstrid_;
  ::google::protobuf::internal::ArenaStringPtr strikemode_;
  double pricetick_;
  double baseprice_;
  double strikeprice_;
  double underlyingmultiple_;
  ::google::protobuf::int32 multiplier_;
  mutable int _cached_size_;
  friend struct protobuf_manager_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rsp_contract : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:manager.rsp_contract) */ {
 public:
  rsp_contract();
  virtual ~rsp_contract();

  rsp_contract(const rsp_contract& from);

  inline rsp_contract& operator=(const rsp_contract& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rsp_contract(rsp_contract&& from) noexcept
    : rsp_contract() {
    *this = ::std::move(from);
  }

  inline rsp_contract& operator=(rsp_contract&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rsp_contract& default_instance();

  static inline const rsp_contract* internal_default_instance() {
    return reinterpret_cast<const rsp_contract*>(
               &_rsp_contract_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    38;

  void Swap(rsp_contract* other);
  friend void swap(rsp_contract& a, rsp_contract& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rsp_contract* New() const PROTOBUF_FINAL { return New(NULL); }

  rsp_contract* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rsp_contract& from);
  void MergeFrom(const rsp_contract& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rsp_contract* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .manager.contract_info infos = 2;
  int infos_size() const;
  void clear_infos();
  static const int kInfosFieldNumber = 2;
  const ::manager::contract_info& infos(int index) const;
  ::manager::contract_info* mutable_infos(int index);
  ::manager::contract_info* add_infos();
  ::google::protobuf::RepeatedPtrField< ::manager::contract_info >*
      mutable_infos();
  const ::google::protobuf::RepeatedPtrField< ::manager::contract_info >&
      infos() const;

  // .manager.rsp_head_info header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::manager::rsp_head_info& header() const;
  ::manager::rsp_head_info* mutable_header();
  ::manager::rsp_head_info* release_header();
  void set_allocated_header(::manager::rsp_head_info* header);

  // @@protoc_insertion_point(class_scope:manager.rsp_contract)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::manager::contract_info > infos_;
  ::manager::rsp_head_info* header_;
  mutable int _cached_size_;
  friend struct protobuf_manager_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class req_investor_info : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:manager.req_investor_info) */ {
 public:
  req_investor_info();
  virtual ~req_investor_info();

  req_investor_info(const req_investor_info& from);

  inline req_investor_info& operator=(const req_investor_info& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  req_investor_info(req_investor_info&& from) noexcept
    : req_investor_info() {
    *this = ::std::move(from);
  }

  inline req_investor_info& operator=(req_investor_info&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const req_investor_info& default_instance();

  static inline const req_investor_info* internal_default_instance() {
    return reinterpret_cast<const req_investor_info*>(
               &_req_investor_info_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    39;

  void Swap(req_investor_info* other);
  friend void swap(req_investor_info& a, req_investor_info& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline req_investor_info* New() const PROTOBUF_FINAL { return New(NULL); }

  req_investor_info* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const req_investor_info& from);
  void MergeFrom(const req_investor_info& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(req_investor_info* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string investor = 2;
  int investor_size() const;
  void clear_investor();
  static const int kInvestorFieldNumber = 2;
  const ::std::string& investor(int index) const;
  ::std::string* mutable_investor(int index);
  void set_investor(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_investor(int index, ::std::string&& value);
  #endif
  void set_investor(int index, const char* value);
  void set_investor(int index, const char* value, size_t size);
  ::std::string* add_investor();
  void add_investor(const ::std::string& value);
  #if LANG_CXX11
  void add_investor(::std::string&& value);
  #endif
  void add_investor(const char* value);
  void add_investor(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& investor() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_investor();

  // int32 requestid = 1;
  void clear_requestid();
  static const int kRequestidFieldNumber = 1;
  ::google::protobuf::int32 requestid() const;
  void set_requestid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:manager.req_investor_info)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> investor_;
  ::google::protobuf::int32 requestid_;
  mutable int _cached_size_;
  friend struct protobuf_manager_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class investor_info : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:manager.investor_info) */ {
 public:
  investor_info();
  virtual ~investor_info();

  investor_info(const investor_info& from);

  inline investor_info& operator=(const investor_info& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  investor_info(investor_info&& from) noexcept
    : investor_info() {
    *this = ::std::move(from);
  }

  inline investor_info& operator=(investor_info&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const investor_info& default_instance();

  static inline const investor_info* internal_default_instance() {
    return reinterpret_cast<const investor_info*>(
               &_investor_info_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    40;

  void Swap(investor_info* other);
  friend void swap(investor_info& a, investor_info& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline investor_info* New() const PROTOBUF_FINAL { return New(NULL); }

  investor_info* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const investor_info& from);
  void MergeFrom(const investor_info& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(investor_info* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string investorid = 1;
  void clear_investorid();
  static const int kInvestoridFieldNumber = 1;
  const ::std::string& investorid() const;
  void set_investorid(const ::std::string& value);
  #if LANG_CXX11
  void set_investorid(::std::string&& value);
  #endif
  void set_investorid(const char* value);
  void set_investorid(const char* value, size_t size);
  ::std::string* mutable_investorid();
  ::std::string* release_investorid();
  void set_allocated_investorid(::std::string* investorid);

  // string brokerid = 2;
  void clear_brokerid();
  static const int kBrokeridFieldNumber = 2;
  const ::std::string& brokerid() const;
  void set_brokerid(const ::std::string& value);
  #if LANG_CXX11
  void set_brokerid(::std::string&& value);
  #endif
  void set_brokerid(const char* value);
  void set_brokerid(const char* value, size_t size);
  ::std::string* mutable_brokerid();
  ::std::string* release_brokerid();
  void set_allocated_brokerid(::std::string* brokerid);

  // string investortype = 3;
  void clear_investortype();
  static const int kInvestortypeFieldNumber = 3;
  const ::std::string& investortype() const;
  void set_investortype(const ::std::string& value);
  #if LANG_CXX11
  void set_investortype(::std::string&& value);
  #endif
  void set_investortype(const char* value);
  void set_investortype(const char* value, size_t size);
  ::std::string* mutable_investortype();
  ::std::string* release_investortype();
  void set_allocated_investortype(::std::string* investortype);

  // string investorname = 4;
  void clear_investorname();
  static const int kInvestornameFieldNumber = 4;
  const ::std::string& investorname() const;
  void set_investorname(const ::std::string& value);
  #if LANG_CXX11
  void set_investorname(::std::string&& value);
  #endif
  void set_investorname(const char* value);
  void set_investorname(const char* value, size_t size);
  ::std::string* mutable_investorname();
  ::std::string* release_investorname();
  void set_allocated_investorname(::std::string* investorname);

  // string identifiedcardtype = 5;
  void clear_identifiedcardtype();
  static const int kIdentifiedcardtypeFieldNumber = 5;
  const ::std::string& identifiedcardtype() const;
  void set_identifiedcardtype(const ::std::string& value);
  #if LANG_CXX11
  void set_identifiedcardtype(::std::string&& value);
  #endif
  void set_identifiedcardtype(const char* value);
  void set_identifiedcardtype(const char* value, size_t size);
  ::std::string* mutable_identifiedcardtype();
  ::std::string* release_identifiedcardtype();
  void set_allocated_identifiedcardtype(::std::string* identifiedcardtype);

  // string identifiedcardno = 6;
  void clear_identifiedcardno();
  static const int kIdentifiedcardnoFieldNumber = 6;
  const ::std::string& identifiedcardno() const;
  void set_identifiedcardno(const ::std::string& value);
  #if LANG_CXX11
  void set_identifiedcardno(::std::string&& value);
  #endif
  void set_identifiedcardno(const char* value);
  void set_identifiedcardno(const char* value, size_t size);
  ::std::string* mutable_identifiedcardno();
  ::std::string* release_identifiedcardno();
  void set_allocated_identifiedcardno(::std::string* identifiedcardno);

  // string country = 7;
  void clear_country();
  static const int kCountryFieldNumber = 7;
  const ::std::string& country() const;
  void set_country(const ::std::string& value);
  #if LANG_CXX11
  void set_country(::std::string&& value);
  #endif
  void set_country(const char* value);
  void set_country(const char* value, size_t size);
  ::std::string* mutable_country();
  ::std::string* release_country();
  void set_allocated_country(::std::string* country);

  // string province = 8;
  void clear_province();
  static const int kProvinceFieldNumber = 8;
  const ::std::string& province() const;
  void set_province(const ::std::string& value);
  #if LANG_CXX11
  void set_province(::std::string&& value);
  #endif
  void set_province(const char* value);
  void set_province(const char* value, size_t size);
  ::std::string* mutable_province();
  ::std::string* release_province();
  void set_allocated_province(::std::string* province);

  // string city = 9;
  void clear_city();
  static const int kCityFieldNumber = 9;
  const ::std::string& city() const;
  void set_city(const ::std::string& value);
  #if LANG_CXX11
  void set_city(::std::string&& value);
  #endif
  void set_city(const char* value);
  void set_city(const char* value, size_t size);
  ::std::string* mutable_city();
  ::std::string* release_city();
  void set_allocated_city(::std::string* city);

  // string birthday = 10;
  void clear_birthday();
  static const int kBirthdayFieldNumber = 10;
  const ::std::string& birthday() const;
  void set_birthday(const ::std::string& value);
  #if LANG_CXX11
  void set_birthday(::std::string&& value);
  #endif
  void set_birthday(const char* value);
  void set_birthday(const char* value, size_t size);
  ::std::string* mutable_birthday();
  ::std::string* release_birthday();
  void set_allocated_birthday(::std::string* birthday);

  // string sex = 11;
  void clear_sex();
  static const int kSexFieldNumber = 11;
  const ::std::string& sex() const;
  void set_sex(const ::std::string& value);
  #if LANG_CXX11
  void set_sex(::std::string&& value);
  #endif
  void set_sex(const char* value);
  void set_sex(const char* value, size_t size);
  ::std::string* mutable_sex();
  ::std::string* release_sex();
  void set_allocated_sex(::std::string* sex);

  // string profession = 12;
  void clear_profession();
  static const int kProfessionFieldNumber = 12;
  const ::std::string& profession() const;
  void set_profession(const ::std::string& value);
  #if LANG_CXX11
  void set_profession(::std::string&& value);
  #endif
  void set_profession(const char* value);
  void set_profession(const char* value, size_t size);
  ::std::string* mutable_profession();
  ::std::string* release_profession();
  void set_allocated_profession(::std::string* profession);

  // string national = 13;
  void clear_national();
  static const int kNationalFieldNumber = 13;
  const ::std::string& national() const;
  void set_national(const ::std::string& value);
  #if LANG_CXX11
  void set_national(::std::string&& value);
  #endif
  void set_national(const char* value);
  void set_national(const char* value, size_t size);
  ::std::string* mutable_national();
  ::std::string* release_national();
  void set_allocated_national(::std::string* national);

  // string capitalcurrency = 15;
  void clear_capitalcurrency();
  static const int kCapitalcurrencyFieldNumber = 15;
  const ::std::string& capitalcurrency() const;
  void set_capitalcurrency(const ::std::string& value);
  #if LANG_CXX11
  void set_capitalcurrency(::std::string&& value);
  #endif
  void set_capitalcurrency(const char* value);
  void set_capitalcurrency(const char* value, size_t size);
  ::std::string* mutable_capitalcurrency();
  ::std::string* release_capitalcurrency();
  void set_allocated_capitalcurrency(::std::string* capitalcurrency);

  // string telephone = 16;
  void clear_telephone();
  static const int kTelephoneFieldNumber = 16;
  const ::std::string& telephone() const;
  void set_telephone(const ::std::string& value);
  #if LANG_CXX11
  void set_telephone(::std::string&& value);
  #endif
  void set_telephone(const char* value);
  void set_telephone(const char* value, size_t size);
  ::std::string* mutable_telephone();
  ::std::string* release_telephone();
  void set_allocated_telephone(::std::string* telephone);

  // string address = 17;
  void clear_address();
  static const int kAddressFieldNumber = 17;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // string zipcode = 18;
  void clear_zipcode();
  static const int kZipcodeFieldNumber = 18;
  const ::std::string& zipcode() const;
  void set_zipcode(const ::std::string& value);
  #if LANG_CXX11
  void set_zipcode(::std::string&& value);
  #endif
  void set_zipcode(const char* value);
  void set_zipcode(const char* value, size_t size);
  ::std::string* mutable_zipcode();
  ::std::string* release_zipcode();
  void set_allocated_zipcode(::std::string* zipcode);

  // string email = 19;
  void clear_email();
  static const int kEmailFieldNumber = 19;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  #if LANG_CXX11
  void set_email(::std::string&& value);
  #endif
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // string memo = 20;
  void clear_memo();
  static const int kMemoFieldNumber = 20;
  const ::std::string& memo() const;
  void set_memo(const ::std::string& value);
  #if LANG_CXX11
  void set_memo(::std::string&& value);
  #endif
  void set_memo(const char* value);
  void set_memo(const char* value, size_t size);
  ::std::string* mutable_memo();
  ::std::string* release_memo();
  void set_allocated_memo(::std::string* memo);

  // string openinvestorname = 21;
  void clear_openinvestorname();
  static const int kOpeninvestornameFieldNumber = 21;
  const ::std::string& openinvestorname() const;
  void set_openinvestorname(const ::std::string& value);
  #if LANG_CXX11
  void set_openinvestorname(::std::string&& value);
  #endif
  void set_openinvestorname(const char* value);
  void set_openinvestorname(const char* value, size_t size);
  ::std::string* mutable_openinvestorname();
  ::std::string* release_openinvestorname();
  void set_allocated_openinvestorname(::std::string* openinvestorname);

  // string orderinvestorname = 22;
  void clear_orderinvestorname();
  static const int kOrderinvestornameFieldNumber = 22;
  const ::std::string& orderinvestorname() const;
  void set_orderinvestorname(const ::std::string& value);
  #if LANG_CXX11
  void set_orderinvestorname(::std::string&& value);
  #endif
  void set_orderinvestorname(const char* value);
  void set_orderinvestorname(const char* value, size_t size);
  ::std::string* mutable_orderinvestorname();
  ::std::string* release_orderinvestorname();
  void set_allocated_orderinvestorname(::std::string* orderinvestorname);

  // string fundinvestorname = 23;
  void clear_fundinvestorname();
  static const int kFundinvestornameFieldNumber = 23;
  const ::std::string& fundinvestorname() const;
  void set_fundinvestorname(const ::std::string& value);
  #if LANG_CXX11
  void set_fundinvestorname(::std::string&& value);
  #endif
  void set_fundinvestorname(const char* value);
  void set_fundinvestorname(const char* value, size_t size);
  ::std::string* mutable_fundinvestorname();
  ::std::string* release_fundinvestorname();
  void set_allocated_fundinvestorname(::std::string* fundinvestorname);

  // string settleinvestorname = 24;
  void clear_settleinvestorname();
  static const int kSettleinvestornameFieldNumber = 24;
  const ::std::string& settleinvestorname() const;
  void set_settleinvestorname(const ::std::string& value);
  #if LANG_CXX11
  void set_settleinvestorname(::std::string&& value);
  #endif
  void set_settleinvestorname(const char* value);
  void set_settleinvestorname(const char* value, size_t size);
  ::std::string* mutable_settleinvestorname();
  ::std::string* release_settleinvestorname();
  void set_allocated_settleinvestorname(::std::string* settleinvestorname);

  // string departmentid = 26;
  void clear_departmentid();
  static const int kDepartmentidFieldNumber = 26;
  const ::std::string& departmentid() const;
  void set_departmentid(const ::std::string& value);
  #if LANG_CXX11
  void set_departmentid(::std::string&& value);
  #endif
  void set_departmentid(const char* value);
  void set_departmentid(const char* value, size_t size);
  ::std::string* mutable_departmentid();
  ::std::string* release_departmentid();
  void set_allocated_departmentid(::std::string* departmentid);

  // string investorfullname = 27;
  void clear_investorfullname();
  static const int kInvestorfullnameFieldNumber = 27;
  const ::std::string& investorfullname() const;
  void set_investorfullname(const ::std::string& value);
  #if LANG_CXX11
  void set_investorfullname(::std::string&& value);
  #endif
  void set_investorfullname(const char* value);
  void set_investorfullname(const char* value, size_t size);
  ::std::string* mutable_investorfullname();
  ::std::string* release_investorfullname();
  void set_allocated_investorfullname(::std::string* investorfullname);

  // string clientregion = 31;
  void clear_clientregion();
  static const int kClientregionFieldNumber = 31;
  const ::std::string& clientregion() const;
  void set_clientregion(const ::std::string& value);
  #if LANG_CXX11
  void set_clientregion(::std::string&& value);
  #endif
  void set_clientregion(const char* value);
  void set_clientregion(const char* value, size_t size);
  ::std::string* mutable_clientregion();
  ::std::string* release_clientregion();
  void set_allocated_clientregion(::std::string* clientregion);

  // double capital = 14;
  void clear_capital();
  static const int kCapitalFieldNumber = 14;
  double capital() const;
  void set_capital(double value);

  // int32 isactive = 25;
  void clear_isactive();
  static const int kIsactiveFieldNumber = 25;
  ::google::protobuf::int32 isactive() const;
  void set_isactive(::google::protobuf::int32 value);

  // int32 isemail = 28;
  void clear_isemail();
  static const int kIsemailFieldNumber = 28;
  ::google::protobuf::int32 isemail() const;
  void set_isemail(::google::protobuf::int32 value);

  // int32 issms = 29;
  void clear_issms();
  static const int kIssmsFieldNumber = 29;
  ::google::protobuf::int32 issms() const;
  void set_issms(::google::protobuf::int32 value);

  // int32 isusingotp = 30;
  void clear_isusingotp();
  static const int kIsusingotpFieldNumber = 30;
  ::google::protobuf::int32 isusingotp() const;
  void set_isusingotp(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:manager.investor_info)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr investorid_;
  ::google::protobuf::internal::ArenaStringPtr brokerid_;
  ::google::protobuf::internal::ArenaStringPtr investortype_;
  ::google::protobuf::internal::ArenaStringPtr investorname_;
  ::google::protobuf::internal::ArenaStringPtr identifiedcardtype_;
  ::google::protobuf::internal::ArenaStringPtr identifiedcardno_;
  ::google::protobuf::internal::ArenaStringPtr country_;
  ::google::protobuf::internal::ArenaStringPtr province_;
  ::google::protobuf::internal::ArenaStringPtr city_;
  ::google::protobuf::internal::ArenaStringPtr birthday_;
  ::google::protobuf::internal::ArenaStringPtr sex_;
  ::google::protobuf::internal::ArenaStringPtr profession_;
  ::google::protobuf::internal::ArenaStringPtr national_;
  ::google::protobuf::internal::ArenaStringPtr capitalcurrency_;
  ::google::protobuf::internal::ArenaStringPtr telephone_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr zipcode_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::google::protobuf::internal::ArenaStringPtr memo_;
  ::google::protobuf::internal::ArenaStringPtr openinvestorname_;
  ::google::protobuf::internal::ArenaStringPtr orderinvestorname_;
  ::google::protobuf::internal::ArenaStringPtr fundinvestorname_;
  ::google::protobuf::internal::ArenaStringPtr settleinvestorname_;
  ::google::protobuf::internal::ArenaStringPtr departmentid_;
  ::google::protobuf::internal::ArenaStringPtr investorfullname_;
  ::google::protobuf::internal::ArenaStringPtr clientregion_;
  double capital_;
  ::google::protobuf::int32 isactive_;
  ::google::protobuf::int32 isemail_;
  ::google::protobuf::int32 issms_;
  ::google::protobuf::int32 isusingotp_;
  mutable int _cached_size_;
  friend struct protobuf_manager_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rsp_investor_info : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:manager.rsp_investor_info) */ {
 public:
  rsp_investor_info();
  virtual ~rsp_investor_info();

  rsp_investor_info(const rsp_investor_info& from);

  inline rsp_investor_info& operator=(const rsp_investor_info& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rsp_investor_info(rsp_investor_info&& from) noexcept
    : rsp_investor_info() {
    *this = ::std::move(from);
  }

  inline rsp_investor_info& operator=(rsp_investor_info&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rsp_investor_info& default_instance();

  static inline const rsp_investor_info* internal_default_instance() {
    return reinterpret_cast<const rsp_investor_info*>(
               &_rsp_investor_info_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    41;

  void Swap(rsp_investor_info* other);
  friend void swap(rsp_investor_info& a, rsp_investor_info& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rsp_investor_info* New() const PROTOBUF_FINAL { return New(NULL); }

  rsp_investor_info* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rsp_investor_info& from);
  void MergeFrom(const rsp_investor_info& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rsp_investor_info* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .manager.investor_info infos = 2;
  int infos_size() const;
  void clear_infos();
  static const int kInfosFieldNumber = 2;
  const ::manager::investor_info& infos(int index) const;
  ::manager::investor_info* mutable_infos(int index);
  ::manager::investor_info* add_infos();
  ::google::protobuf::RepeatedPtrField< ::manager::investor_info >*
      mutable_infos();
  const ::google::protobuf::RepeatedPtrField< ::manager::investor_info >&
      infos() const;

  // .manager.rsp_head_info header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::manager::rsp_head_info& header() const;
  ::manager::rsp_head_info* mutable_header();
  ::manager::rsp_head_info* release_header();
  void set_allocated_header(::manager::rsp_head_info* header);

  // @@protoc_insertion_point(class_scope:manager.rsp_investor_info)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::manager::investor_info > infos_;
  ::manager::rsp_head_info* header_;
  mutable int _cached_size_;
  friend struct protobuf_manager_5fprotocal_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// error_info

// sint32 errorid = 1;
inline void error_info::clear_errorid() {
  errorid_ = 0;
}
inline ::google::protobuf::int32 error_info::errorid() const {
  // @@protoc_insertion_point(field_get:manager.error_info.errorid)
  return errorid_;
}
inline void error_info::set_errorid(::google::protobuf::int32 value) {
  
  errorid_ = value;
  // @@protoc_insertion_point(field_set:manager.error_info.errorid)
}

// string errormsg = 2;
inline void error_info::clear_errormsg() {
  errormsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& error_info::errormsg() const {
  // @@protoc_insertion_point(field_get:manager.error_info.errormsg)
  return errormsg_.GetNoArena();
}
inline void error_info::set_errormsg(const ::std::string& value) {
  
  errormsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manager.error_info.errormsg)
}
#if LANG_CXX11
inline void error_info::set_errormsg(::std::string&& value) {
  
  errormsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manager.error_info.errormsg)
}
#endif
inline void error_info::set_errormsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  errormsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manager.error_info.errormsg)
}
inline void error_info::set_errormsg(const char* value, size_t size) {
  
  errormsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manager.error_info.errormsg)
}
inline ::std::string* error_info::mutable_errormsg() {
  
  // @@protoc_insertion_point(field_mutable:manager.error_info.errormsg)
  return errormsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* error_info::release_errormsg() {
  // @@protoc_insertion_point(field_release:manager.error_info.errormsg)
  
  return errormsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void error_info::set_allocated_errormsg(::std::string* errormsg) {
  if (errormsg != NULL) {
    
  } else {
    
  }
  errormsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errormsg);
  // @@protoc_insertion_point(field_set_allocated:manager.error_info.errormsg)
}

// -------------------------------------------------------------------

// rsp_action_info

// int32 requestid = 1;
inline void rsp_action_info::clear_requestid() {
  requestid_ = 0;
}
inline ::google::protobuf::int32 rsp_action_info::requestid() const {
  // @@protoc_insertion_point(field_get:manager.rsp_action_info.requestid)
  return requestid_;
}
inline void rsp_action_info::set_requestid(::google::protobuf::int32 value) {
  
  requestid_ = value;
  // @@protoc_insertion_point(field_set:manager.rsp_action_info.requestid)
}

// .manager.error_info info = 2;
inline bool rsp_action_info::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
inline void rsp_action_info::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
inline const ::manager::error_info& rsp_action_info::info() const {
  const ::manager::error_info* p = info_;
  // @@protoc_insertion_point(field_get:manager.rsp_action_info.info)
  return p != NULL ? *p : *reinterpret_cast<const ::manager::error_info*>(
      &::manager::_error_info_default_instance_);
}
inline ::manager::error_info* rsp_action_info::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::manager::error_info;
  }
  // @@protoc_insertion_point(field_mutable:manager.rsp_action_info.info)
  return info_;
}
inline ::manager::error_info* rsp_action_info::release_info() {
  // @@protoc_insertion_point(field_release:manager.rsp_action_info.info)
  
  ::manager::error_info* temp = info_;
  info_ = NULL;
  return temp;
}
inline void rsp_action_info::set_allocated_info(::manager::error_info* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:manager.rsp_action_info.info)
}

// -------------------------------------------------------------------

// rsp_head_info

// int32 requestid = 1;
inline void rsp_head_info::clear_requestid() {
  requestid_ = 0;
}
inline ::google::protobuf::int32 rsp_head_info::requestid() const {
  // @@protoc_insertion_point(field_get:manager.rsp_head_info.requestid)
  return requestid_;
}
inline void rsp_head_info::set_requestid(::google::protobuf::int32 value) {
  
  requestid_ = value;
  // @@protoc_insertion_point(field_set:manager.rsp_head_info.requestid)
}

// .manager.error_info info = 2;
inline bool rsp_head_info::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
inline void rsp_head_info::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
inline const ::manager::error_info& rsp_head_info::info() const {
  const ::manager::error_info* p = info_;
  // @@protoc_insertion_point(field_get:manager.rsp_head_info.info)
  return p != NULL ? *p : *reinterpret_cast<const ::manager::error_info*>(
      &::manager::_error_info_default_instance_);
}
inline ::manager::error_info* rsp_head_info::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::manager::error_info;
  }
  // @@protoc_insertion_point(field_mutable:manager.rsp_head_info.info)
  return info_;
}
inline ::manager::error_info* rsp_head_info::release_info() {
  // @@protoc_insertion_point(field_release:manager.rsp_head_info.info)
  
  ::manager::error_info* temp = info_;
  info_ = NULL;
  return temp;
}
inline void rsp_head_info::set_allocated_info(::manager::error_info* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:manager.rsp_head_info.info)
}

// bool islast = 3;
inline void rsp_head_info::clear_islast() {
  islast_ = false;
}
inline bool rsp_head_info::islast() const {
  // @@protoc_insertion_point(field_get:manager.rsp_head_info.islast)
  return islast_;
}
inline void rsp_head_info::set_islast(bool value) {
  
  islast_ = value;
  // @@protoc_insertion_point(field_set:manager.rsp_head_info.islast)
}

// -------------------------------------------------------------------

// sys_auth

// int32 authid = 1;
inline void sys_auth::clear_authid() {
  authid_ = 0;
}
inline ::google::protobuf::int32 sys_auth::authid() const {
  // @@protoc_insertion_point(field_get:manager.sys_auth.authid)
  return authid_;
}
inline void sys_auth::set_authid(::google::protobuf::int32 value) {
  
  authid_ = value;
  // @@protoc_insertion_point(field_set:manager.sys_auth.authid)
}

// string name = 2;
inline void sys_auth::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& sys_auth::name() const {
  // @@protoc_insertion_point(field_get:manager.sys_auth.name)
  return name_.GetNoArena();
}
inline void sys_auth::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manager.sys_auth.name)
}
#if LANG_CXX11
inline void sys_auth::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manager.sys_auth.name)
}
#endif
inline void sys_auth::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manager.sys_auth.name)
}
inline void sys_auth::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manager.sys_auth.name)
}
inline ::std::string* sys_auth::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:manager.sys_auth.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* sys_auth::release_name() {
  // @@protoc_insertion_point(field_release:manager.sys_auth.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void sys_auth::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:manager.sys_auth.name)
}

// -------------------------------------------------------------------

// role_auth

// int32 roleid = 1;
inline void role_auth::clear_roleid() {
  roleid_ = 0;
}
inline ::google::protobuf::int32 role_auth::roleid() const {
  // @@protoc_insertion_point(field_get:manager.role_auth.roleid)
  return roleid_;
}
inline void role_auth::set_roleid(::google::protobuf::int32 value) {
  
  roleid_ = value;
  // @@protoc_insertion_point(field_set:manager.role_auth.roleid)
}

// repeated .manager.sys_auth auth = 2;
inline int role_auth::auth_size() const {
  return auth_.size();
}
inline void role_auth::clear_auth() {
  auth_.Clear();
}
inline const ::manager::sys_auth& role_auth::auth(int index) const {
  // @@protoc_insertion_point(field_get:manager.role_auth.auth)
  return auth_.Get(index);
}
inline ::manager::sys_auth* role_auth::mutable_auth(int index) {
  // @@protoc_insertion_point(field_mutable:manager.role_auth.auth)
  return auth_.Mutable(index);
}
inline ::manager::sys_auth* role_auth::add_auth() {
  // @@protoc_insertion_point(field_add:manager.role_auth.auth)
  return auth_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::manager::sys_auth >*
role_auth::mutable_auth() {
  // @@protoc_insertion_point(field_mutable_list:manager.role_auth.auth)
  return &auth_;
}
inline const ::google::protobuf::RepeatedPtrField< ::manager::sys_auth >&
role_auth::auth() const {
  // @@protoc_insertion_point(field_list:manager.role_auth.auth)
  return auth_;
}

// -------------------------------------------------------------------

// req_login

// int32 requestid = 1;
inline void req_login::clear_requestid() {
  requestid_ = 0;
}
inline ::google::protobuf::int32 req_login::requestid() const {
  // @@protoc_insertion_point(field_get:manager.req_login.requestid)
  return requestid_;
}
inline void req_login::set_requestid(::google::protobuf::int32 value) {
  
  requestid_ = value;
  // @@protoc_insertion_point(field_set:manager.req_login.requestid)
}

// string userid = 2;
inline void req_login::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& req_login::userid() const {
  // @@protoc_insertion_point(field_get:manager.req_login.userid)
  return userid_.GetNoArena();
}
inline void req_login::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manager.req_login.userid)
}
#if LANG_CXX11
inline void req_login::set_userid(::std::string&& value) {
  
  userid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manager.req_login.userid)
}
#endif
inline void req_login::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manager.req_login.userid)
}
inline void req_login::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manager.req_login.userid)
}
inline ::std::string* req_login::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:manager.req_login.userid)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* req_login::release_userid() {
  // @@protoc_insertion_point(field_release:manager.req_login.userid)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void req_login::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:manager.req_login.userid)
}

// string pwd = 3;
inline void req_login::clear_pwd() {
  pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& req_login::pwd() const {
  // @@protoc_insertion_point(field_get:manager.req_login.pwd)
  return pwd_.GetNoArena();
}
inline void req_login::set_pwd(const ::std::string& value) {
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manager.req_login.pwd)
}
#if LANG_CXX11
inline void req_login::set_pwd(::std::string&& value) {
  
  pwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manager.req_login.pwd)
}
#endif
inline void req_login::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manager.req_login.pwd)
}
inline void req_login::set_pwd(const char* value, size_t size) {
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manager.req_login.pwd)
}
inline ::std::string* req_login::mutable_pwd() {
  
  // @@protoc_insertion_point(field_mutable:manager.req_login.pwd)
  return pwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* req_login::release_pwd() {
  // @@protoc_insertion_point(field_release:manager.req_login.pwd)
  
  return pwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void req_login::set_allocated_pwd(::std::string* pwd) {
  if (pwd != NULL) {
    
  } else {
    
  }
  pwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwd);
  // @@protoc_insertion_point(field_set_allocated:manager.req_login.pwd)
}

// -------------------------------------------------------------------

// rsp_login

// .manager.rsp_head_info header = 1;
inline bool rsp_login::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void rsp_login::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::manager::rsp_head_info& rsp_login::header() const {
  const ::manager::rsp_head_info* p = header_;
  // @@protoc_insertion_point(field_get:manager.rsp_login.header)
  return p != NULL ? *p : *reinterpret_cast<const ::manager::rsp_head_info*>(
      &::manager::_rsp_head_info_default_instance_);
}
inline ::manager::rsp_head_info* rsp_login::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::manager::rsp_head_info;
  }
  // @@protoc_insertion_point(field_mutable:manager.rsp_login.header)
  return header_;
}
inline ::manager::rsp_head_info* rsp_login::release_header() {
  // @@protoc_insertion_point(field_release:manager.rsp_login.header)
  
  ::manager::rsp_head_info* temp = header_;
  header_ = NULL;
  return temp;
}
inline void rsp_login::set_allocated_header(::manager::rsp_head_info* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:manager.rsp_login.header)
}

// repeated .manager.role_auth auth = 2;
inline int rsp_login::auth_size() const {
  return auth_.size();
}
inline void rsp_login::clear_auth() {
  auth_.Clear();
}
inline const ::manager::role_auth& rsp_login::auth(int index) const {
  // @@protoc_insertion_point(field_get:manager.rsp_login.auth)
  return auth_.Get(index);
}
inline ::manager::role_auth* rsp_login::mutable_auth(int index) {
  // @@protoc_insertion_point(field_mutable:manager.rsp_login.auth)
  return auth_.Mutable(index);
}
inline ::manager::role_auth* rsp_login::add_auth() {
  // @@protoc_insertion_point(field_add:manager.rsp_login.auth)
  return auth_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::manager::role_auth >*
rsp_login::mutable_auth() {
  // @@protoc_insertion_point(field_mutable_list:manager.rsp_login.auth)
  return &auth_;
}
inline const ::google::protobuf::RepeatedPtrField< ::manager::role_auth >&
rsp_login::auth() const {
  // @@protoc_insertion_point(field_list:manager.rsp_login.auth)
  return auth_;
}

// -------------------------------------------------------------------

// req_sys_subs

// int32 requestid = 1;
inline void req_sys_subs::clear_requestid() {
  requestid_ = 0;
}
inline ::google::protobuf::int32 req_sys_subs::requestid() const {
  // @@protoc_insertion_point(field_get:manager.req_sys_subs.requestid)
  return requestid_;
}
inline void req_sys_subs::set_requestid(::google::protobuf::int32 value) {
  
  requestid_ = value;
  // @@protoc_insertion_point(field_set:manager.req_sys_subs.requestid)
}

// string userid = 2;
inline void req_sys_subs::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& req_sys_subs::userid() const {
  // @@protoc_insertion_point(field_get:manager.req_sys_subs.userid)
  return userid_.GetNoArena();
}
inline void req_sys_subs::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manager.req_sys_subs.userid)
}
#if LANG_CXX11
inline void req_sys_subs::set_userid(::std::string&& value) {
  
  userid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manager.req_sys_subs.userid)
}
#endif
inline void req_sys_subs::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manager.req_sys_subs.userid)
}
inline void req_sys_subs::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manager.req_sys_subs.userid)
}
inline ::std::string* req_sys_subs::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:manager.req_sys_subs.userid)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* req_sys_subs::release_userid() {
  // @@protoc_insertion_point(field_release:manager.req_sys_subs.userid)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void req_sys_subs::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:manager.req_sys_subs.userid)
}

// -------------------------------------------------------------------

// sys_user

// int32 id = 1;
inline void sys_user::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 sys_user::id() const {
  // @@protoc_insertion_point(field_get:manager.sys_user.id)
  return id_;
}
inline void sys_user::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:manager.sys_user.id)
}

// string userid = 2;
inline void sys_user::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& sys_user::userid() const {
  // @@protoc_insertion_point(field_get:manager.sys_user.userid)
  return userid_.GetNoArena();
}
inline void sys_user::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manager.sys_user.userid)
}
#if LANG_CXX11
inline void sys_user::set_userid(::std::string&& value) {
  
  userid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manager.sys_user.userid)
}
#endif
inline void sys_user::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manager.sys_user.userid)
}
inline void sys_user::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manager.sys_user.userid)
}
inline ::std::string* sys_user::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:manager.sys_user.userid)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* sys_user::release_userid() {
  // @@protoc_insertion_point(field_release:manager.sys_user.userid)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void sys_user::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:manager.sys_user.userid)
}

// string username = 3;
inline void sys_user::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& sys_user::username() const {
  // @@protoc_insertion_point(field_get:manager.sys_user.username)
  return username_.GetNoArena();
}
inline void sys_user::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manager.sys_user.username)
}
#if LANG_CXX11
inline void sys_user::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manager.sys_user.username)
}
#endif
inline void sys_user::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manager.sys_user.username)
}
inline void sys_user::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manager.sys_user.username)
}
inline ::std::string* sys_user::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:manager.sys_user.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* sys_user::release_username() {
  // @@protoc_insertion_point(field_release:manager.sys_user.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void sys_user::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:manager.sys_user.username)
}

// string father = 4;
inline void sys_user::clear_father() {
  father_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& sys_user::father() const {
  // @@protoc_insertion_point(field_get:manager.sys_user.father)
  return father_.GetNoArena();
}
inline void sys_user::set_father(const ::std::string& value) {
  
  father_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manager.sys_user.father)
}
#if LANG_CXX11
inline void sys_user::set_father(::std::string&& value) {
  
  father_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manager.sys_user.father)
}
#endif
inline void sys_user::set_father(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  father_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manager.sys_user.father)
}
inline void sys_user::set_father(const char* value, size_t size) {
  
  father_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manager.sys_user.father)
}
inline ::std::string* sys_user::mutable_father() {
  
  // @@protoc_insertion_point(field_mutable:manager.sys_user.father)
  return father_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* sys_user::release_father() {
  // @@protoc_insertion_point(field_release:manager.sys_user.father)
  
  return father_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void sys_user::set_allocated_father(::std::string* father) {
  if (father != NULL) {
    
  } else {
    
  }
  father_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), father);
  // @@protoc_insertion_point(field_set_allocated:manager.sys_user.father)
}

// int32 roleid = 5;
inline void sys_user::clear_roleid() {
  roleid_ = 0;
}
inline ::google::protobuf::int32 sys_user::roleid() const {
  // @@protoc_insertion_point(field_get:manager.sys_user.roleid)
  return roleid_;
}
inline void sys_user::set_roleid(::google::protobuf::int32 value) {
  
  roleid_ = value;
  // @@protoc_insertion_point(field_set:manager.sys_user.roleid)
}

// string pwd = 6;
inline void sys_user::clear_pwd() {
  pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& sys_user::pwd() const {
  // @@protoc_insertion_point(field_get:manager.sys_user.pwd)
  return pwd_.GetNoArena();
}
inline void sys_user::set_pwd(const ::std::string& value) {
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manager.sys_user.pwd)
}
#if LANG_CXX11
inline void sys_user::set_pwd(::std::string&& value) {
  
  pwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manager.sys_user.pwd)
}
#endif
inline void sys_user::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manager.sys_user.pwd)
}
inline void sys_user::set_pwd(const char* value, size_t size) {
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manager.sys_user.pwd)
}
inline ::std::string* sys_user::mutable_pwd() {
  
  // @@protoc_insertion_point(field_mutable:manager.sys_user.pwd)
  return pwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* sys_user::release_pwd() {
  // @@protoc_insertion_point(field_release:manager.sys_user.pwd)
  
  return pwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void sys_user::set_allocated_pwd(::std::string* pwd) {
  if (pwd != NULL) {
    
  } else {
    
  }
  pwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwd);
  // @@protoc_insertion_point(field_set_allocated:manager.sys_user.pwd)
}

// string desc = 7;
inline void sys_user::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& sys_user::desc() const {
  // @@protoc_insertion_point(field_get:manager.sys_user.desc)
  return desc_.GetNoArena();
}
inline void sys_user::set_desc(const ::std::string& value) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manager.sys_user.desc)
}
#if LANG_CXX11
inline void sys_user::set_desc(::std::string&& value) {
  
  desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manager.sys_user.desc)
}
#endif
inline void sys_user::set_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manager.sys_user.desc)
}
inline void sys_user::set_desc(const char* value, size_t size) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manager.sys_user.desc)
}
inline ::std::string* sys_user::mutable_desc() {
  
  // @@protoc_insertion_point(field_mutable:manager.sys_user.desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* sys_user::release_desc() {
  // @@protoc_insertion_point(field_release:manager.sys_user.desc)
  
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void sys_user::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    
  } else {
    
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:manager.sys_user.desc)
}

// repeated .manager.sys_auth auths = 8;
inline int sys_user::auths_size() const {
  return auths_.size();
}
inline void sys_user::clear_auths() {
  auths_.Clear();
}
inline const ::manager::sys_auth& sys_user::auths(int index) const {
  // @@protoc_insertion_point(field_get:manager.sys_user.auths)
  return auths_.Get(index);
}
inline ::manager::sys_auth* sys_user::mutable_auths(int index) {
  // @@protoc_insertion_point(field_mutable:manager.sys_user.auths)
  return auths_.Mutable(index);
}
inline ::manager::sys_auth* sys_user::add_auths() {
  // @@protoc_insertion_point(field_add:manager.sys_user.auths)
  return auths_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::manager::sys_auth >*
sys_user::mutable_auths() {
  // @@protoc_insertion_point(field_mutable_list:manager.sys_user.auths)
  return &auths_;
}
inline const ::google::protobuf::RepeatedPtrField< ::manager::sys_auth >&
sys_user::auths() const {
  // @@protoc_insertion_point(field_list:manager.sys_user.auths)
  return auths_;
}

// -------------------------------------------------------------------

// rsp_sys_subs

// .manager.rsp_head_info header = 1;
inline bool rsp_sys_subs::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void rsp_sys_subs::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::manager::rsp_head_info& rsp_sys_subs::header() const {
  const ::manager::rsp_head_info* p = header_;
  // @@protoc_insertion_point(field_get:manager.rsp_sys_subs.header)
  return p != NULL ? *p : *reinterpret_cast<const ::manager::rsp_head_info*>(
      &::manager::_rsp_head_info_default_instance_);
}
inline ::manager::rsp_head_info* rsp_sys_subs::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::manager::rsp_head_info;
  }
  // @@protoc_insertion_point(field_mutable:manager.rsp_sys_subs.header)
  return header_;
}
inline ::manager::rsp_head_info* rsp_sys_subs::release_header() {
  // @@protoc_insertion_point(field_release:manager.rsp_sys_subs.header)
  
  ::manager::rsp_head_info* temp = header_;
  header_ = NULL;
  return temp;
}
inline void rsp_sys_subs::set_allocated_header(::manager::rsp_head_info* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:manager.rsp_sys_subs.header)
}

// repeated .manager.sys_user info = 2;
inline int rsp_sys_subs::info_size() const {
  return info_.size();
}
inline void rsp_sys_subs::clear_info() {
  info_.Clear();
}
inline const ::manager::sys_user& rsp_sys_subs::info(int index) const {
  // @@protoc_insertion_point(field_get:manager.rsp_sys_subs.info)
  return info_.Get(index);
}
inline ::manager::sys_user* rsp_sys_subs::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:manager.rsp_sys_subs.info)
  return info_.Mutable(index);
}
inline ::manager::sys_user* rsp_sys_subs::add_info() {
  // @@protoc_insertion_point(field_add:manager.rsp_sys_subs.info)
  return info_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::manager::sys_user >*
rsp_sys_subs::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:manager.rsp_sys_subs.info)
  return &info_;
}
inline const ::google::protobuf::RepeatedPtrField< ::manager::sys_user >&
rsp_sys_subs::info() const {
  // @@protoc_insertion_point(field_list:manager.rsp_sys_subs.info)
  return info_;
}

// -------------------------------------------------------------------

// req_add_sys_user

// int32 requestid = 1;
inline void req_add_sys_user::clear_requestid() {
  requestid_ = 0;
}
inline ::google::protobuf::int32 req_add_sys_user::requestid() const {
  // @@protoc_insertion_point(field_get:manager.req_add_sys_user.requestid)
  return requestid_;
}
inline void req_add_sys_user::set_requestid(::google::protobuf::int32 value) {
  
  requestid_ = value;
  // @@protoc_insertion_point(field_set:manager.req_add_sys_user.requestid)
}

// .manager.sys_user user = 2;
inline bool req_add_sys_user::has_user() const {
  return this != internal_default_instance() && user_ != NULL;
}
inline void req_add_sys_user::clear_user() {
  if (GetArenaNoVirtual() == NULL && user_ != NULL) delete user_;
  user_ = NULL;
}
inline const ::manager::sys_user& req_add_sys_user::user() const {
  const ::manager::sys_user* p = user_;
  // @@protoc_insertion_point(field_get:manager.req_add_sys_user.user)
  return p != NULL ? *p : *reinterpret_cast<const ::manager::sys_user*>(
      &::manager::_sys_user_default_instance_);
}
inline ::manager::sys_user* req_add_sys_user::mutable_user() {
  
  if (user_ == NULL) {
    user_ = new ::manager::sys_user;
  }
  // @@protoc_insertion_point(field_mutable:manager.req_add_sys_user.user)
  return user_;
}
inline ::manager::sys_user* req_add_sys_user::release_user() {
  // @@protoc_insertion_point(field_release:manager.req_add_sys_user.user)
  
  ::manager::sys_user* temp = user_;
  user_ = NULL;
  return temp;
}
inline void req_add_sys_user::set_allocated_user(::manager::sys_user* user) {
  delete user_;
  user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:manager.req_add_sys_user.user)
}

// -------------------------------------------------------------------

// req_del_sys_user

// int32 requestid = 1;
inline void req_del_sys_user::clear_requestid() {
  requestid_ = 0;
}
inline ::google::protobuf::int32 req_del_sys_user::requestid() const {
  // @@protoc_insertion_point(field_get:manager.req_del_sys_user.requestid)
  return requestid_;
}
inline void req_del_sys_user::set_requestid(::google::protobuf::int32 value) {
  
  requestid_ = value;
  // @@protoc_insertion_point(field_set:manager.req_del_sys_user.requestid)
}

// string userid = 2;
inline void req_del_sys_user::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& req_del_sys_user::userid() const {
  // @@protoc_insertion_point(field_get:manager.req_del_sys_user.userid)
  return userid_.GetNoArena();
}
inline void req_del_sys_user::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manager.req_del_sys_user.userid)
}
#if LANG_CXX11
inline void req_del_sys_user::set_userid(::std::string&& value) {
  
  userid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manager.req_del_sys_user.userid)
}
#endif
inline void req_del_sys_user::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manager.req_del_sys_user.userid)
}
inline void req_del_sys_user::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manager.req_del_sys_user.userid)
}
inline ::std::string* req_del_sys_user::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:manager.req_del_sys_user.userid)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* req_del_sys_user::release_userid() {
  // @@protoc_insertion_point(field_release:manager.req_del_sys_user.userid)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void req_del_sys_user::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:manager.req_del_sys_user.userid)
}

// -------------------------------------------------------------------

// req_edit_sys_user

// int32 requestid = 1;
inline void req_edit_sys_user::clear_requestid() {
  requestid_ = 0;
}
inline ::google::protobuf::int32 req_edit_sys_user::requestid() const {
  // @@protoc_insertion_point(field_get:manager.req_edit_sys_user.requestid)
  return requestid_;
}
inline void req_edit_sys_user::set_requestid(::google::protobuf::int32 value) {
  
  requestid_ = value;
  // @@protoc_insertion_point(field_set:manager.req_edit_sys_user.requestid)
}

// .manager.sys_user user = 2;
inline bool req_edit_sys_user::has_user() const {
  return this != internal_default_instance() && user_ != NULL;
}
inline void req_edit_sys_user::clear_user() {
  if (GetArenaNoVirtual() == NULL && user_ != NULL) delete user_;
  user_ = NULL;
}
inline const ::manager::sys_user& req_edit_sys_user::user() const {
  const ::manager::sys_user* p = user_;
  // @@protoc_insertion_point(field_get:manager.req_edit_sys_user.user)
  return p != NULL ? *p : *reinterpret_cast<const ::manager::sys_user*>(
      &::manager::_sys_user_default_instance_);
}
inline ::manager::sys_user* req_edit_sys_user::mutable_user() {
  
  if (user_ == NULL) {
    user_ = new ::manager::sys_user;
  }
  // @@protoc_insertion_point(field_mutable:manager.req_edit_sys_user.user)
  return user_;
}
inline ::manager::sys_user* req_edit_sys_user::release_user() {
  // @@protoc_insertion_point(field_release:manager.req_edit_sys_user.user)
  
  ::manager::sys_user* temp = user_;
  user_ = NULL;
  return temp;
}
inline void req_edit_sys_user::set_allocated_user(::manager::sys_user* user) {
  delete user_;
  user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:manager.req_edit_sys_user.user)
}

// -------------------------------------------------------------------

// sys_investor

// string investor = 1;
inline void sys_investor::clear_investor() {
  investor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& sys_investor::investor() const {
  // @@protoc_insertion_point(field_get:manager.sys_investor.investor)
  return investor_.GetNoArena();
}
inline void sys_investor::set_investor(const ::std::string& value) {
  
  investor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manager.sys_investor.investor)
}
#if LANG_CXX11
inline void sys_investor::set_investor(::std::string&& value) {
  
  investor_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manager.sys_investor.investor)
}
#endif
inline void sys_investor::set_investor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  investor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manager.sys_investor.investor)
}
inline void sys_investor::set_investor(const char* value, size_t size) {
  
  investor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manager.sys_investor.investor)
}
inline ::std::string* sys_investor::mutable_investor() {
  
  // @@protoc_insertion_point(field_mutable:manager.sys_investor.investor)
  return investor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* sys_investor::release_investor() {
  // @@protoc_insertion_point(field_release:manager.sys_investor.investor)
  
  return investor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void sys_investor::set_allocated_investor(::std::string* investor) {
  if (investor != NULL) {
    
  } else {
    
  }
  investor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), investor);
  // @@protoc_insertion_point(field_set_allocated:manager.sys_investor.investor)
}

// string name = 2;
inline void sys_investor::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& sys_investor::name() const {
  // @@protoc_insertion_point(field_get:manager.sys_investor.name)
  return name_.GetNoArena();
}
inline void sys_investor::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manager.sys_investor.name)
}
#if LANG_CXX11
inline void sys_investor::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manager.sys_investor.name)
}
#endif
inline void sys_investor::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manager.sys_investor.name)
}
inline void sys_investor::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manager.sys_investor.name)
}
inline ::std::string* sys_investor::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:manager.sys_investor.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* sys_investor::release_name() {
  // @@protoc_insertion_point(field_release:manager.sys_investor.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void sys_investor::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:manager.sys_investor.name)
}

// int32 state = 3;
inline void sys_investor::clear_state() {
  state_ = 0;
}
inline ::google::protobuf::int32 sys_investor::state() const {
  // @@protoc_insertion_point(field_get:manager.sys_investor.state)
  return state_;
}
inline void sys_investor::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:manager.sys_investor.state)
}

// -------------------------------------------------------------------

// req_risk_investors

// int32 requestid = 1;
inline void req_risk_investors::clear_requestid() {
  requestid_ = 0;
}
inline ::google::protobuf::int32 req_risk_investors::requestid() const {
  // @@protoc_insertion_point(field_get:manager.req_risk_investors.requestid)
  return requestid_;
}
inline void req_risk_investors::set_requestid(::google::protobuf::int32 value) {
  
  requestid_ = value;
  // @@protoc_insertion_point(field_set:manager.req_risk_investors.requestid)
}

// string userid = 2;
inline void req_risk_investors::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& req_risk_investors::userid() const {
  // @@protoc_insertion_point(field_get:manager.req_risk_investors.userid)
  return userid_.GetNoArena();
}
inline void req_risk_investors::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manager.req_risk_investors.userid)
}
#if LANG_CXX11
inline void req_risk_investors::set_userid(::std::string&& value) {
  
  userid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manager.req_risk_investors.userid)
}
#endif
inline void req_risk_investors::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manager.req_risk_investors.userid)
}
inline void req_risk_investors::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manager.req_risk_investors.userid)
}
inline ::std::string* req_risk_investors::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:manager.req_risk_investors.userid)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* req_risk_investors::release_userid() {
  // @@protoc_insertion_point(field_release:manager.req_risk_investors.userid)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void req_risk_investors::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:manager.req_risk_investors.userid)
}

// -------------------------------------------------------------------

// rsp_risk_investors

// .manager.rsp_head_info header = 1;
inline bool rsp_risk_investors::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void rsp_risk_investors::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::manager::rsp_head_info& rsp_risk_investors::header() const {
  const ::manager::rsp_head_info* p = header_;
  // @@protoc_insertion_point(field_get:manager.rsp_risk_investors.header)
  return p != NULL ? *p : *reinterpret_cast<const ::manager::rsp_head_info*>(
      &::manager::_rsp_head_info_default_instance_);
}
inline ::manager::rsp_head_info* rsp_risk_investors::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::manager::rsp_head_info;
  }
  // @@protoc_insertion_point(field_mutable:manager.rsp_risk_investors.header)
  return header_;
}
inline ::manager::rsp_head_info* rsp_risk_investors::release_header() {
  // @@protoc_insertion_point(field_release:manager.rsp_risk_investors.header)
  
  ::manager::rsp_head_info* temp = header_;
  header_ = NULL;
  return temp;
}
inline void rsp_risk_investors::set_allocated_header(::manager::rsp_head_info* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:manager.rsp_risk_investors.header)
}

// string userid = 2;
inline void rsp_risk_investors::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& rsp_risk_investors::userid() const {
  // @@protoc_insertion_point(field_get:manager.rsp_risk_investors.userid)
  return userid_.GetNoArena();
}
inline void rsp_risk_investors::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manager.rsp_risk_investors.userid)
}
#if LANG_CXX11
inline void rsp_risk_investors::set_userid(::std::string&& value) {
  
  userid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manager.rsp_risk_investors.userid)
}
#endif
inline void rsp_risk_investors::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manager.rsp_risk_investors.userid)
}
inline void rsp_risk_investors::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manager.rsp_risk_investors.userid)
}
inline ::std::string* rsp_risk_investors::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:manager.rsp_risk_investors.userid)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* rsp_risk_investors::release_userid() {
  // @@protoc_insertion_point(field_release:manager.rsp_risk_investors.userid)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void rsp_risk_investors::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:manager.rsp_risk_investors.userid)
}

// repeated .manager.sys_investor investors = 3;
inline int rsp_risk_investors::investors_size() const {
  return investors_.size();
}
inline void rsp_risk_investors::clear_investors() {
  investors_.Clear();
}
inline const ::manager::sys_investor& rsp_risk_investors::investors(int index) const {
  // @@protoc_insertion_point(field_get:manager.rsp_risk_investors.investors)
  return investors_.Get(index);
}
inline ::manager::sys_investor* rsp_risk_investors::mutable_investors(int index) {
  // @@protoc_insertion_point(field_mutable:manager.rsp_risk_investors.investors)
  return investors_.Mutable(index);
}
inline ::manager::sys_investor* rsp_risk_investors::add_investors() {
  // @@protoc_insertion_point(field_add:manager.rsp_risk_investors.investors)
  return investors_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::manager::sys_investor >*
rsp_risk_investors::mutable_investors() {
  // @@protoc_insertion_point(field_mutable_list:manager.rsp_risk_investors.investors)
  return &investors_;
}
inline const ::google::protobuf::RepeatedPtrField< ::manager::sys_investor >&
rsp_risk_investors::investors() const {
  // @@protoc_insertion_point(field_list:manager.rsp_risk_investors.investors)
  return investors_;
}

// -------------------------------------------------------------------

// req_investors

// int32 requestid = 1;
inline void req_investors::clear_requestid() {
  requestid_ = 0;
}
inline ::google::protobuf::int32 req_investors::requestid() const {
  // @@protoc_insertion_point(field_get:manager.req_investors.requestid)
  return requestid_;
}
inline void req_investors::set_requestid(::google::protobuf::int32 value) {
  
  requestid_ = value;
  // @@protoc_insertion_point(field_set:manager.req_investors.requestid)
}

// int32 state = 2;
inline void req_investors::clear_state() {
  state_ = 0;
}
inline ::google::protobuf::int32 req_investors::state() const {
  // @@protoc_insertion_point(field_get:manager.req_investors.state)
  return state_;
}
inline void req_investors::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:manager.req_investors.state)
}

// -------------------------------------------------------------------

// rsp_investors

// .manager.rsp_head_info header = 1;
inline bool rsp_investors::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void rsp_investors::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::manager::rsp_head_info& rsp_investors::header() const {
  const ::manager::rsp_head_info* p = header_;
  // @@protoc_insertion_point(field_get:manager.rsp_investors.header)
  return p != NULL ? *p : *reinterpret_cast<const ::manager::rsp_head_info*>(
      &::manager::_rsp_head_info_default_instance_);
}
inline ::manager::rsp_head_info* rsp_investors::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::manager::rsp_head_info;
  }
  // @@protoc_insertion_point(field_mutable:manager.rsp_investors.header)
  return header_;
}
inline ::manager::rsp_head_info* rsp_investors::release_header() {
  // @@protoc_insertion_point(field_release:manager.rsp_investors.header)
  
  ::manager::rsp_head_info* temp = header_;
  header_ = NULL;
  return temp;
}
inline void rsp_investors::set_allocated_header(::manager::rsp_head_info* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:manager.rsp_investors.header)
}

// repeated .manager.sys_investor investors = 2;
inline int rsp_investors::investors_size() const {
  return investors_.size();
}
inline void rsp_investors::clear_investors() {
  investors_.Clear();
}
inline const ::manager::sys_investor& rsp_investors::investors(int index) const {
  // @@protoc_insertion_point(field_get:manager.rsp_investors.investors)
  return investors_.Get(index);
}
inline ::manager::sys_investor* rsp_investors::mutable_investors(int index) {
  // @@protoc_insertion_point(field_mutable:manager.rsp_investors.investors)
  return investors_.Mutable(index);
}
inline ::manager::sys_investor* rsp_investors::add_investors() {
  // @@protoc_insertion_point(field_add:manager.rsp_investors.investors)
  return investors_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::manager::sys_investor >*
rsp_investors::mutable_investors() {
  // @@protoc_insertion_point(field_mutable_list:manager.rsp_investors.investors)
  return &investors_;
}
inline const ::google::protobuf::RepeatedPtrField< ::manager::sys_investor >&
rsp_investors::investors() const {
  // @@protoc_insertion_point(field_list:manager.rsp_investors.investors)
  return investors_;
}

// -------------------------------------------------------------------

// req_add_investors

// int32 requestid = 1;
inline void req_add_investors::clear_requestid() {
  requestid_ = 0;
}
inline ::google::protobuf::int32 req_add_investors::requestid() const {
  // @@protoc_insertion_point(field_get:manager.req_add_investors.requestid)
  return requestid_;
}
inline void req_add_investors::set_requestid(::google::protobuf::int32 value) {
  
  requestid_ = value;
  // @@protoc_insertion_point(field_set:manager.req_add_investors.requestid)
}

// string userid = 2;
inline void req_add_investors::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& req_add_investors::userid() const {
  // @@protoc_insertion_point(field_get:manager.req_add_investors.userid)
  return userid_.GetNoArena();
}
inline void req_add_investors::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manager.req_add_investors.userid)
}
#if LANG_CXX11
inline void req_add_investors::set_userid(::std::string&& value) {
  
  userid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manager.req_add_investors.userid)
}
#endif
inline void req_add_investors::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manager.req_add_investors.userid)
}
inline void req_add_investors::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manager.req_add_investors.userid)
}
inline ::std::string* req_add_investors::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:manager.req_add_investors.userid)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* req_add_investors::release_userid() {
  // @@protoc_insertion_point(field_release:manager.req_add_investors.userid)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void req_add_investors::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:manager.req_add_investors.userid)
}

// repeated string investor = 3;
inline int req_add_investors::investor_size() const {
  return investor_.size();
}
inline void req_add_investors::clear_investor() {
  investor_.Clear();
}
inline const ::std::string& req_add_investors::investor(int index) const {
  // @@protoc_insertion_point(field_get:manager.req_add_investors.investor)
  return investor_.Get(index);
}
inline ::std::string* req_add_investors::mutable_investor(int index) {
  // @@protoc_insertion_point(field_mutable:manager.req_add_investors.investor)
  return investor_.Mutable(index);
}
inline void req_add_investors::set_investor(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:manager.req_add_investors.investor)
  investor_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void req_add_investors::set_investor(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:manager.req_add_investors.investor)
  investor_.Mutable(index)->assign(std::move(value));
}
#endif
inline void req_add_investors::set_investor(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  investor_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:manager.req_add_investors.investor)
}
inline void req_add_investors::set_investor(int index, const char* value, size_t size) {
  investor_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:manager.req_add_investors.investor)
}
inline ::std::string* req_add_investors::add_investor() {
  // @@protoc_insertion_point(field_add_mutable:manager.req_add_investors.investor)
  return investor_.Add();
}
inline void req_add_investors::add_investor(const ::std::string& value) {
  investor_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:manager.req_add_investors.investor)
}
#if LANG_CXX11
inline void req_add_investors::add_investor(::std::string&& value) {
  investor_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:manager.req_add_investors.investor)
}
#endif
inline void req_add_investors::add_investor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  investor_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:manager.req_add_investors.investor)
}
inline void req_add_investors::add_investor(const char* value, size_t size) {
  investor_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:manager.req_add_investors.investor)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
req_add_investors::investor() const {
  // @@protoc_insertion_point(field_list:manager.req_add_investors.investor)
  return investor_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
req_add_investors::mutable_investor() {
  // @@protoc_insertion_point(field_mutable_list:manager.req_add_investors.investor)
  return &investor_;
}

// -------------------------------------------------------------------

// req_del_investors

// int32 requestid = 1;
inline void req_del_investors::clear_requestid() {
  requestid_ = 0;
}
inline ::google::protobuf::int32 req_del_investors::requestid() const {
  // @@protoc_insertion_point(field_get:manager.req_del_investors.requestid)
  return requestid_;
}
inline void req_del_investors::set_requestid(::google::protobuf::int32 value) {
  
  requestid_ = value;
  // @@protoc_insertion_point(field_set:manager.req_del_investors.requestid)
}

// string userid = 2;
inline void req_del_investors::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& req_del_investors::userid() const {
  // @@protoc_insertion_point(field_get:manager.req_del_investors.userid)
  return userid_.GetNoArena();
}
inline void req_del_investors::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manager.req_del_investors.userid)
}
#if LANG_CXX11
inline void req_del_investors::set_userid(::std::string&& value) {
  
  userid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manager.req_del_investors.userid)
}
#endif
inline void req_del_investors::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manager.req_del_investors.userid)
}
inline void req_del_investors::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manager.req_del_investors.userid)
}
inline ::std::string* req_del_investors::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:manager.req_del_investors.userid)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* req_del_investors::release_userid() {
  // @@protoc_insertion_point(field_release:manager.req_del_investors.userid)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void req_del_investors::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:manager.req_del_investors.userid)
}

// repeated string investor = 3;
inline int req_del_investors::investor_size() const {
  return investor_.size();
}
inline void req_del_investors::clear_investor() {
  investor_.Clear();
}
inline const ::std::string& req_del_investors::investor(int index) const {
  // @@protoc_insertion_point(field_get:manager.req_del_investors.investor)
  return investor_.Get(index);
}
inline ::std::string* req_del_investors::mutable_investor(int index) {
  // @@protoc_insertion_point(field_mutable:manager.req_del_investors.investor)
  return investor_.Mutable(index);
}
inline void req_del_investors::set_investor(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:manager.req_del_investors.investor)
  investor_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void req_del_investors::set_investor(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:manager.req_del_investors.investor)
  investor_.Mutable(index)->assign(std::move(value));
}
#endif
inline void req_del_investors::set_investor(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  investor_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:manager.req_del_investors.investor)
}
inline void req_del_investors::set_investor(int index, const char* value, size_t size) {
  investor_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:manager.req_del_investors.investor)
}
inline ::std::string* req_del_investors::add_investor() {
  // @@protoc_insertion_point(field_add_mutable:manager.req_del_investors.investor)
  return investor_.Add();
}
inline void req_del_investors::add_investor(const ::std::string& value) {
  investor_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:manager.req_del_investors.investor)
}
#if LANG_CXX11
inline void req_del_investors::add_investor(::std::string&& value) {
  investor_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:manager.req_del_investors.investor)
}
#endif
inline void req_del_investors::add_investor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  investor_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:manager.req_del_investors.investor)
}
inline void req_del_investors::add_investor(const char* value, size_t size) {
  investor_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:manager.req_del_investors.investor)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
req_del_investors::investor() const {
  // @@protoc_insertion_point(field_list:manager.req_del_investors.investor)
  return investor_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
req_del_investors::mutable_investor() {
  // @@protoc_insertion_point(field_mutable_list:manager.req_del_investors.investor)
  return &investor_;
}

// -------------------------------------------------------------------

// rtn_change_tree

// int32 operatorid = 1;
inline void rtn_change_tree::clear_operatorid() {
  operatorid_ = 0;
}
inline ::google::protobuf::int32 rtn_change_tree::operatorid() const {
  // @@protoc_insertion_point(field_get:manager.rtn_change_tree.operatorid)
  return operatorid_;
}
inline void rtn_change_tree::set_operatorid(::google::protobuf::int32 value) {
  
  operatorid_ = value;
  // @@protoc_insertion_point(field_set:manager.rtn_change_tree.operatorid)
}

// .manager.sys_user info = 2;
inline bool rtn_change_tree::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
inline void rtn_change_tree::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
inline const ::manager::sys_user& rtn_change_tree::info() const {
  const ::manager::sys_user* p = info_;
  // @@protoc_insertion_point(field_get:manager.rtn_change_tree.info)
  return p != NULL ? *p : *reinterpret_cast<const ::manager::sys_user*>(
      &::manager::_sys_user_default_instance_);
}
inline ::manager::sys_user* rtn_change_tree::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::manager::sys_user;
  }
  // @@protoc_insertion_point(field_mutable:manager.rtn_change_tree.info)
  return info_;
}
inline ::manager::sys_user* rtn_change_tree::release_info() {
  // @@protoc_insertion_point(field_release:manager.rtn_change_tree.info)
  
  ::manager::sys_user* temp = info_;
  info_ = NULL;
  return temp;
}
inline void rtn_change_tree::set_allocated_info(::manager::sys_user* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:manager.rtn_change_tree.info)
}

// -------------------------------------------------------------------

// rtn_change_risker_investor

// int32 operatorid = 1;
inline void rtn_change_risker_investor::clear_operatorid() {
  operatorid_ = 0;
}
inline ::google::protobuf::int32 rtn_change_risker_investor::operatorid() const {
  // @@protoc_insertion_point(field_get:manager.rtn_change_risker_investor.operatorid)
  return operatorid_;
}
inline void rtn_change_risker_investor::set_operatorid(::google::protobuf::int32 value) {
  
  operatorid_ = value;
  // @@protoc_insertion_point(field_set:manager.rtn_change_risker_investor.operatorid)
}

// string userid = 2;
inline void rtn_change_risker_investor::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& rtn_change_risker_investor::userid() const {
  // @@protoc_insertion_point(field_get:manager.rtn_change_risker_investor.userid)
  return userid_.GetNoArena();
}
inline void rtn_change_risker_investor::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manager.rtn_change_risker_investor.userid)
}
#if LANG_CXX11
inline void rtn_change_risker_investor::set_userid(::std::string&& value) {
  
  userid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manager.rtn_change_risker_investor.userid)
}
#endif
inline void rtn_change_risker_investor::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manager.rtn_change_risker_investor.userid)
}
inline void rtn_change_risker_investor::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manager.rtn_change_risker_investor.userid)
}
inline ::std::string* rtn_change_risker_investor::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:manager.rtn_change_risker_investor.userid)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* rtn_change_risker_investor::release_userid() {
  // @@protoc_insertion_point(field_release:manager.rtn_change_risker_investor.userid)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void rtn_change_risker_investor::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:manager.rtn_change_risker_investor.userid)
}

// repeated string investor = 3;
inline int rtn_change_risker_investor::investor_size() const {
  return investor_.size();
}
inline void rtn_change_risker_investor::clear_investor() {
  investor_.Clear();
}
inline const ::std::string& rtn_change_risker_investor::investor(int index) const {
  // @@protoc_insertion_point(field_get:manager.rtn_change_risker_investor.investor)
  return investor_.Get(index);
}
inline ::std::string* rtn_change_risker_investor::mutable_investor(int index) {
  // @@protoc_insertion_point(field_mutable:manager.rtn_change_risker_investor.investor)
  return investor_.Mutable(index);
}
inline void rtn_change_risker_investor::set_investor(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:manager.rtn_change_risker_investor.investor)
  investor_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void rtn_change_risker_investor::set_investor(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:manager.rtn_change_risker_investor.investor)
  investor_.Mutable(index)->assign(std::move(value));
}
#endif
inline void rtn_change_risker_investor::set_investor(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  investor_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:manager.rtn_change_risker_investor.investor)
}
inline void rtn_change_risker_investor::set_investor(int index, const char* value, size_t size) {
  investor_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:manager.rtn_change_risker_investor.investor)
}
inline ::std::string* rtn_change_risker_investor::add_investor() {
  // @@protoc_insertion_point(field_add_mutable:manager.rtn_change_risker_investor.investor)
  return investor_.Add();
}
inline void rtn_change_risker_investor::add_investor(const ::std::string& value) {
  investor_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:manager.rtn_change_risker_investor.investor)
}
#if LANG_CXX11
inline void rtn_change_risker_investor::add_investor(::std::string&& value) {
  investor_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:manager.rtn_change_risker_investor.investor)
}
#endif
inline void rtn_change_risker_investor::add_investor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  investor_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:manager.rtn_change_risker_investor.investor)
}
inline void rtn_change_risker_investor::add_investor(const char* value, size_t size) {
  investor_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:manager.rtn_change_risker_investor.investor)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
rtn_change_risker_investor::investor() const {
  // @@protoc_insertion_point(field_list:manager.rtn_change_risker_investor.investor)
  return investor_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
rtn_change_risker_investor::mutable_investor() {
  // @@protoc_insertion_point(field_mutable_list:manager.rtn_change_risker_investor.investor)
  return &investor_;
}

// -------------------------------------------------------------------

// rtn_change_investor

// int32 operatorid = 1;
inline void rtn_change_investor::clear_operatorid() {
  operatorid_ = 0;
}
inline ::google::protobuf::int32 rtn_change_investor::operatorid() const {
  // @@protoc_insertion_point(field_get:manager.rtn_change_investor.operatorid)
  return operatorid_;
}
inline void rtn_change_investor::set_operatorid(::google::protobuf::int32 value) {
  
  operatorid_ = value;
  // @@protoc_insertion_point(field_set:manager.rtn_change_investor.operatorid)
}

// repeated string investor = 2;
inline int rtn_change_investor::investor_size() const {
  return investor_.size();
}
inline void rtn_change_investor::clear_investor() {
  investor_.Clear();
}
inline const ::std::string& rtn_change_investor::investor(int index) const {
  // @@protoc_insertion_point(field_get:manager.rtn_change_investor.investor)
  return investor_.Get(index);
}
inline ::std::string* rtn_change_investor::mutable_investor(int index) {
  // @@protoc_insertion_point(field_mutable:manager.rtn_change_investor.investor)
  return investor_.Mutable(index);
}
inline void rtn_change_investor::set_investor(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:manager.rtn_change_investor.investor)
  investor_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void rtn_change_investor::set_investor(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:manager.rtn_change_investor.investor)
  investor_.Mutable(index)->assign(std::move(value));
}
#endif
inline void rtn_change_investor::set_investor(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  investor_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:manager.rtn_change_investor.investor)
}
inline void rtn_change_investor::set_investor(int index, const char* value, size_t size) {
  investor_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:manager.rtn_change_investor.investor)
}
inline ::std::string* rtn_change_investor::add_investor() {
  // @@protoc_insertion_point(field_add_mutable:manager.rtn_change_investor.investor)
  return investor_.Add();
}
inline void rtn_change_investor::add_investor(const ::std::string& value) {
  investor_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:manager.rtn_change_investor.investor)
}
#if LANG_CXX11
inline void rtn_change_investor::add_investor(::std::string&& value) {
  investor_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:manager.rtn_change_investor.investor)
}
#endif
inline void rtn_change_investor::add_investor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  investor_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:manager.rtn_change_investor.investor)
}
inline void rtn_change_investor::add_investor(const char* value, size_t size) {
  investor_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:manager.rtn_change_investor.investor)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
rtn_change_investor::investor() const {
  // @@protoc_insertion_point(field_list:manager.rtn_change_investor.investor)
  return investor_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
rtn_change_investor::mutable_investor() {
  // @@protoc_insertion_point(field_mutable_list:manager.rtn_change_investor.investor)
  return &investor_;
}

// -------------------------------------------------------------------

// insmrgnrate_info

// string tradingday = 1;
inline void insmrgnrate_info::clear_tradingday() {
  tradingday_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& insmrgnrate_info::tradingday() const {
  // @@protoc_insertion_point(field_get:manager.insmrgnrate_info.tradingday)
  return tradingday_.GetNoArena();
}
inline void insmrgnrate_info::set_tradingday(const ::std::string& value) {
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manager.insmrgnrate_info.tradingday)
}
#if LANG_CXX11
inline void insmrgnrate_info::set_tradingday(::std::string&& value) {
  
  tradingday_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manager.insmrgnrate_info.tradingday)
}
#endif
inline void insmrgnrate_info::set_tradingday(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manager.insmrgnrate_info.tradingday)
}
inline void insmrgnrate_info::set_tradingday(const char* value, size_t size) {
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manager.insmrgnrate_info.tradingday)
}
inline ::std::string* insmrgnrate_info::mutable_tradingday() {
  
  // @@protoc_insertion_point(field_mutable:manager.insmrgnrate_info.tradingday)
  return tradingday_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* insmrgnrate_info::release_tradingday() {
  // @@protoc_insertion_point(field_release:manager.insmrgnrate_info.tradingday)
  
  return tradingday_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void insmrgnrate_info::set_allocated_tradingday(::std::string* tradingday) {
  if (tradingday != NULL) {
    
  } else {
    
  }
  tradingday_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradingday);
  // @@protoc_insertion_point(field_set_allocated:manager.insmrgnrate_info.tradingday)
}

// string contractcode = 2;
inline void insmrgnrate_info::clear_contractcode() {
  contractcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& insmrgnrate_info::contractcode() const {
  // @@protoc_insertion_point(field_get:manager.insmrgnrate_info.contractcode)
  return contractcode_.GetNoArena();
}
inline void insmrgnrate_info::set_contractcode(const ::std::string& value) {
  
  contractcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manager.insmrgnrate_info.contractcode)
}
#if LANG_CXX11
inline void insmrgnrate_info::set_contractcode(::std::string&& value) {
  
  contractcode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manager.insmrgnrate_info.contractcode)
}
#endif
inline void insmrgnrate_info::set_contractcode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  contractcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manager.insmrgnrate_info.contractcode)
}
inline void insmrgnrate_info::set_contractcode(const char* value, size_t size) {
  
  contractcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manager.insmrgnrate_info.contractcode)
}
inline ::std::string* insmrgnrate_info::mutable_contractcode() {
  
  // @@protoc_insertion_point(field_mutable:manager.insmrgnrate_info.contractcode)
  return contractcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* insmrgnrate_info::release_contractcode() {
  // @@protoc_insertion_point(field_release:manager.insmrgnrate_info.contractcode)
  
  return contractcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void insmrgnrate_info::set_allocated_contractcode(::std::string* contractcode) {
  if (contractcode != NULL) {
    
  } else {
    
  }
  contractcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contractcode);
  // @@protoc_insertion_point(field_set_allocated:manager.insmrgnrate_info.contractcode)
}

// string exchangecode = 3;
inline void insmrgnrate_info::clear_exchangecode() {
  exchangecode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& insmrgnrate_info::exchangecode() const {
  // @@protoc_insertion_point(field_get:manager.insmrgnrate_info.exchangecode)
  return exchangecode_.GetNoArena();
}
inline void insmrgnrate_info::set_exchangecode(const ::std::string& value) {
  
  exchangecode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manager.insmrgnrate_info.exchangecode)
}
#if LANG_CXX11
inline void insmrgnrate_info::set_exchangecode(::std::string&& value) {
  
  exchangecode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manager.insmrgnrate_info.exchangecode)
}
#endif
inline void insmrgnrate_info::set_exchangecode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exchangecode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manager.insmrgnrate_info.exchangecode)
}
inline void insmrgnrate_info::set_exchangecode(const char* value, size_t size) {
  
  exchangecode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manager.insmrgnrate_info.exchangecode)
}
inline ::std::string* insmrgnrate_info::mutable_exchangecode() {
  
  // @@protoc_insertion_point(field_mutable:manager.insmrgnrate_info.exchangecode)
  return exchangecode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* insmrgnrate_info::release_exchangecode() {
  // @@protoc_insertion_point(field_release:manager.insmrgnrate_info.exchangecode)
  
  return exchangecode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void insmrgnrate_info::set_allocated_exchangecode(::std::string* exchangecode) {
  if (exchangecode != NULL) {
    
  } else {
    
  }
  exchangecode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchangecode);
  // @@protoc_insertion_point(field_set_allocated:manager.insmrgnrate_info.exchangecode)
}

// string direction = 4;
inline void insmrgnrate_info::clear_direction() {
  direction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& insmrgnrate_info::direction() const {
  // @@protoc_insertion_point(field_get:manager.insmrgnrate_info.direction)
  return direction_.GetNoArena();
}
inline void insmrgnrate_info::set_direction(const ::std::string& value) {
  
  direction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manager.insmrgnrate_info.direction)
}
#if LANG_CXX11
inline void insmrgnrate_info::set_direction(::std::string&& value) {
  
  direction_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manager.insmrgnrate_info.direction)
}
#endif
inline void insmrgnrate_info::set_direction(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  direction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manager.insmrgnrate_info.direction)
}
inline void insmrgnrate_info::set_direction(const char* value, size_t size) {
  
  direction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manager.insmrgnrate_info.direction)
}
inline ::std::string* insmrgnrate_info::mutable_direction() {
  
  // @@protoc_insertion_point(field_mutable:manager.insmrgnrate_info.direction)
  return direction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* insmrgnrate_info::release_direction() {
  // @@protoc_insertion_point(field_release:manager.insmrgnrate_info.direction)
  
  return direction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void insmrgnrate_info::set_allocated_direction(::std::string* direction) {
  if (direction != NULL) {
    
  } else {
    
  }
  direction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), direction);
  // @@protoc_insertion_point(field_set_allocated:manager.insmrgnrate_info.direction)
}

// string hedgeflag = 5;
inline void insmrgnrate_info::clear_hedgeflag() {
  hedgeflag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& insmrgnrate_info::hedgeflag() const {
  // @@protoc_insertion_point(field_get:manager.insmrgnrate_info.hedgeflag)
  return hedgeflag_.GetNoArena();
}
inline void insmrgnrate_info::set_hedgeflag(const ::std::string& value) {
  
  hedgeflag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manager.insmrgnrate_info.hedgeflag)
}
#if LANG_CXX11
inline void insmrgnrate_info::set_hedgeflag(::std::string&& value) {
  
  hedgeflag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manager.insmrgnrate_info.hedgeflag)
}
#endif
inline void insmrgnrate_info::set_hedgeflag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hedgeflag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manager.insmrgnrate_info.hedgeflag)
}
inline void insmrgnrate_info::set_hedgeflag(const char* value, size_t size) {
  
  hedgeflag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manager.insmrgnrate_info.hedgeflag)
}
inline ::std::string* insmrgnrate_info::mutable_hedgeflag() {
  
  // @@protoc_insertion_point(field_mutable:manager.insmrgnrate_info.hedgeflag)
  return hedgeflag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* insmrgnrate_info::release_hedgeflag() {
  // @@protoc_insertion_point(field_release:manager.insmrgnrate_info.hedgeflag)
  
  return hedgeflag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void insmrgnrate_info::set_allocated_hedgeflag(::std::string* hedgeflag) {
  if (hedgeflag != NULL) {
    
  } else {
    
  }
  hedgeflag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hedgeflag);
  // @@protoc_insertion_point(field_set_allocated:manager.insmrgnrate_info.hedgeflag)
}

// double marginrate = 6;
inline void insmrgnrate_info::clear_marginrate() {
  marginrate_ = 0;
}
inline double insmrgnrate_info::marginrate() const {
  // @@protoc_insertion_point(field_get:manager.insmrgnrate_info.marginrate)
  return marginrate_;
}
inline void insmrgnrate_info::set_marginrate(double value) {
  
  marginrate_ = value;
  // @@protoc_insertion_point(field_set:manager.insmrgnrate_info.marginrate)
}

// double segmrgn = 7;
inline void insmrgnrate_info::clear_segmrgn() {
  segmrgn_ = 0;
}
inline double insmrgnrate_info::segmrgn() const {
  // @@protoc_insertion_point(field_get:manager.insmrgnrate_info.segmrgn)
  return segmrgn_;
}
inline void insmrgnrate_info::set_segmrgn(double value) {
  
  segmrgn_ = value;
  // @@protoc_insertion_point(field_set:manager.insmrgnrate_info.segmrgn)
}

// -------------------------------------------------------------------

// req_insmrgnrate

// int32 requestid = 1;
inline void req_insmrgnrate::clear_requestid() {
  requestid_ = 0;
}
inline ::google::protobuf::int32 req_insmrgnrate::requestid() const {
  // @@protoc_insertion_point(field_get:manager.req_insmrgnrate.requestid)
  return requestid_;
}
inline void req_insmrgnrate::set_requestid(::google::protobuf::int32 value) {
  
  requestid_ = value;
  // @@protoc_insertion_point(field_set:manager.req_insmrgnrate.requestid)
}

// -------------------------------------------------------------------

// rsp_insmrgnrate

// .manager.rsp_head_info header = 1;
inline bool rsp_insmrgnrate::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void rsp_insmrgnrate::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::manager::rsp_head_info& rsp_insmrgnrate::header() const {
  const ::manager::rsp_head_info* p = header_;
  // @@protoc_insertion_point(field_get:manager.rsp_insmrgnrate.header)
  return p != NULL ? *p : *reinterpret_cast<const ::manager::rsp_head_info*>(
      &::manager::_rsp_head_info_default_instance_);
}
inline ::manager::rsp_head_info* rsp_insmrgnrate::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::manager::rsp_head_info;
  }
  // @@protoc_insertion_point(field_mutable:manager.rsp_insmrgnrate.header)
  return header_;
}
inline ::manager::rsp_head_info* rsp_insmrgnrate::release_header() {
  // @@protoc_insertion_point(field_release:manager.rsp_insmrgnrate.header)
  
  ::manager::rsp_head_info* temp = header_;
  header_ = NULL;
  return temp;
}
inline void rsp_insmrgnrate::set_allocated_header(::manager::rsp_head_info* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:manager.rsp_insmrgnrate.header)
}

// repeated .manager.insmrgnrate_info infos = 2;
inline int rsp_insmrgnrate::infos_size() const {
  return infos_.size();
}
inline void rsp_insmrgnrate::clear_infos() {
  infos_.Clear();
}
inline const ::manager::insmrgnrate_info& rsp_insmrgnrate::infos(int index) const {
  // @@protoc_insertion_point(field_get:manager.rsp_insmrgnrate.infos)
  return infos_.Get(index);
}
inline ::manager::insmrgnrate_info* rsp_insmrgnrate::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:manager.rsp_insmrgnrate.infos)
  return infos_.Mutable(index);
}
inline ::manager::insmrgnrate_info* rsp_insmrgnrate::add_infos() {
  // @@protoc_insertion_point(field_add:manager.rsp_insmrgnrate.infos)
  return infos_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::manager::insmrgnrate_info >*
rsp_insmrgnrate::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:manager.rsp_insmrgnrate.infos)
  return &infos_;
}
inline const ::google::protobuf::RepeatedPtrField< ::manager::insmrgnrate_info >&
rsp_insmrgnrate::infos() const {
  // @@protoc_insertion_point(field_list:manager.rsp_insmrgnrate.infos)
  return infos_;
}

// -------------------------------------------------------------------

// req_edit_insmrgnrate

// int32 requestid = 1;
inline void req_edit_insmrgnrate::clear_requestid() {
  requestid_ = 0;
}
inline ::google::protobuf::int32 req_edit_insmrgnrate::requestid() const {
  // @@protoc_insertion_point(field_get:manager.req_edit_insmrgnrate.requestid)
  return requestid_;
}
inline void req_edit_insmrgnrate::set_requestid(::google::protobuf::int32 value) {
  
  requestid_ = value;
  // @@protoc_insertion_point(field_set:manager.req_edit_insmrgnrate.requestid)
}

// repeated .manager.insmrgnrate_info infos = 2;
inline int req_edit_insmrgnrate::infos_size() const {
  return infos_.size();
}
inline void req_edit_insmrgnrate::clear_infos() {
  infos_.Clear();
}
inline const ::manager::insmrgnrate_info& req_edit_insmrgnrate::infos(int index) const {
  // @@protoc_insertion_point(field_get:manager.req_edit_insmrgnrate.infos)
  return infos_.Get(index);
}
inline ::manager::insmrgnrate_info* req_edit_insmrgnrate::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:manager.req_edit_insmrgnrate.infos)
  return infos_.Mutable(index);
}
inline ::manager::insmrgnrate_info* req_edit_insmrgnrate::add_infos() {
  // @@protoc_insertion_point(field_add:manager.req_edit_insmrgnrate.infos)
  return infos_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::manager::insmrgnrate_info >*
req_edit_insmrgnrate::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:manager.req_edit_insmrgnrate.infos)
  return &infos_;
}
inline const ::google::protobuf::RepeatedPtrField< ::manager::insmrgnrate_info >&
req_edit_insmrgnrate::infos() const {
  // @@protoc_insertion_point(field_list:manager.req_edit_insmrgnrate.infos)
  return infos_;
}

// -------------------------------------------------------------------

// rtn_change_insmrgnrate

// repeated .manager.insmrgnrate_info infos = 1;
inline int rtn_change_insmrgnrate::infos_size() const {
  return infos_.size();
}
inline void rtn_change_insmrgnrate::clear_infos() {
  infos_.Clear();
}
inline const ::manager::insmrgnrate_info& rtn_change_insmrgnrate::infos(int index) const {
  // @@protoc_insertion_point(field_get:manager.rtn_change_insmrgnrate.infos)
  return infos_.Get(index);
}
inline ::manager::insmrgnrate_info* rtn_change_insmrgnrate::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:manager.rtn_change_insmrgnrate.infos)
  return infos_.Mutable(index);
}
inline ::manager::insmrgnrate_info* rtn_change_insmrgnrate::add_infos() {
  // @@protoc_insertion_point(field_add:manager.rtn_change_insmrgnrate.infos)
  return infos_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::manager::insmrgnrate_info >*
rtn_change_insmrgnrate::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:manager.rtn_change_insmrgnrate.infos)
  return &infos_;
}
inline const ::google::protobuf::RepeatedPtrField< ::manager::insmrgnrate_info >&
rtn_change_insmrgnrate::infos() const {
  // @@protoc_insertion_point(field_list:manager.rtn_change_insmrgnrate.infos)
  return infos_;
}

// -------------------------------------------------------------------

// req_add_insmrgnrate

// int32 requestid = 1;
inline void req_add_insmrgnrate::clear_requestid() {
  requestid_ = 0;
}
inline ::google::protobuf::int32 req_add_insmrgnrate::requestid() const {
  // @@protoc_insertion_point(field_get:manager.req_add_insmrgnrate.requestid)
  return requestid_;
}
inline void req_add_insmrgnrate::set_requestid(::google::protobuf::int32 value) {
  
  requestid_ = value;
  // @@protoc_insertion_point(field_set:manager.req_add_insmrgnrate.requestid)
}

// .manager.insmrgnrate_info info = 2;
inline bool req_add_insmrgnrate::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
inline void req_add_insmrgnrate::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
inline const ::manager::insmrgnrate_info& req_add_insmrgnrate::info() const {
  const ::manager::insmrgnrate_info* p = info_;
  // @@protoc_insertion_point(field_get:manager.req_add_insmrgnrate.info)
  return p != NULL ? *p : *reinterpret_cast<const ::manager::insmrgnrate_info*>(
      &::manager::_insmrgnrate_info_default_instance_);
}
inline ::manager::insmrgnrate_info* req_add_insmrgnrate::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::manager::insmrgnrate_info;
  }
  // @@protoc_insertion_point(field_mutable:manager.req_add_insmrgnrate.info)
  return info_;
}
inline ::manager::insmrgnrate_info* req_add_insmrgnrate::release_info() {
  // @@protoc_insertion_point(field_release:manager.req_add_insmrgnrate.info)
  
  ::manager::insmrgnrate_info* temp = info_;
  info_ = NULL;
  return temp;
}
inline void req_add_insmrgnrate::set_allocated_info(::manager::insmrgnrate_info* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:manager.req_add_insmrgnrate.info)
}

// -------------------------------------------------------------------

// rtn_add_insmrgnrate

// .manager.insmrgnrate_info info = 1;
inline bool rtn_add_insmrgnrate::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
inline void rtn_add_insmrgnrate::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
inline const ::manager::insmrgnrate_info& rtn_add_insmrgnrate::info() const {
  const ::manager::insmrgnrate_info* p = info_;
  // @@protoc_insertion_point(field_get:manager.rtn_add_insmrgnrate.info)
  return p != NULL ? *p : *reinterpret_cast<const ::manager::insmrgnrate_info*>(
      &::manager::_insmrgnrate_info_default_instance_);
}
inline ::manager::insmrgnrate_info* rtn_add_insmrgnrate::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::manager::insmrgnrate_info;
  }
  // @@protoc_insertion_point(field_mutable:manager.rtn_add_insmrgnrate.info)
  return info_;
}
inline ::manager::insmrgnrate_info* rtn_add_insmrgnrate::release_info() {
  // @@protoc_insertion_point(field_release:manager.rtn_add_insmrgnrate.info)
  
  ::manager::insmrgnrate_info* temp = info_;
  info_ = NULL;
  return temp;
}
inline void rtn_add_insmrgnrate::set_allocated_info(::manager::insmrgnrate_info* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:manager.rtn_add_insmrgnrate.info)
}

// -------------------------------------------------------------------

// req_del_insmrgnrate

// int32 requestid = 1;
inline void req_del_insmrgnrate::clear_requestid() {
  requestid_ = 0;
}
inline ::google::protobuf::int32 req_del_insmrgnrate::requestid() const {
  // @@protoc_insertion_point(field_get:manager.req_del_insmrgnrate.requestid)
  return requestid_;
}
inline void req_del_insmrgnrate::set_requestid(::google::protobuf::int32 value) {
  
  requestid_ = value;
  // @@protoc_insertion_point(field_set:manager.req_del_insmrgnrate.requestid)
}

// .manager.insmrgnrate_info info = 2;
inline bool req_del_insmrgnrate::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
inline void req_del_insmrgnrate::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
inline const ::manager::insmrgnrate_info& req_del_insmrgnrate::info() const {
  const ::manager::insmrgnrate_info* p = info_;
  // @@protoc_insertion_point(field_get:manager.req_del_insmrgnrate.info)
  return p != NULL ? *p : *reinterpret_cast<const ::manager::insmrgnrate_info*>(
      &::manager::_insmrgnrate_info_default_instance_);
}
inline ::manager::insmrgnrate_info* req_del_insmrgnrate::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::manager::insmrgnrate_info;
  }
  // @@protoc_insertion_point(field_mutable:manager.req_del_insmrgnrate.info)
  return info_;
}
inline ::manager::insmrgnrate_info* req_del_insmrgnrate::release_info() {
  // @@protoc_insertion_point(field_release:manager.req_del_insmrgnrate.info)
  
  ::manager::insmrgnrate_info* temp = info_;
  info_ = NULL;
  return temp;
}
inline void req_del_insmrgnrate::set_allocated_info(::manager::insmrgnrate_info* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:manager.req_del_insmrgnrate.info)
}

// -------------------------------------------------------------------

// rtn_del_insmrgnrate

// .manager.insmrgnrate_info info = 1;
inline bool rtn_del_insmrgnrate::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
inline void rtn_del_insmrgnrate::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
inline const ::manager::insmrgnrate_info& rtn_del_insmrgnrate::info() const {
  const ::manager::insmrgnrate_info* p = info_;
  // @@protoc_insertion_point(field_get:manager.rtn_del_insmrgnrate.info)
  return p != NULL ? *p : *reinterpret_cast<const ::manager::insmrgnrate_info*>(
      &::manager::_insmrgnrate_info_default_instance_);
}
inline ::manager::insmrgnrate_info* rtn_del_insmrgnrate::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::manager::insmrgnrate_info;
  }
  // @@protoc_insertion_point(field_mutable:manager.rtn_del_insmrgnrate.info)
  return info_;
}
inline ::manager::insmrgnrate_info* rtn_del_insmrgnrate::release_info() {
  // @@protoc_insertion_point(field_release:manager.rtn_del_insmrgnrate.info)
  
  ::manager::insmrgnrate_info* temp = info_;
  info_ = NULL;
  return temp;
}
inline void rtn_del_insmrgnrate::set_allocated_info(::manager::insmrgnrate_info* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:manager.rtn_del_insmrgnrate.info)
}

// -------------------------------------------------------------------

// req_option_argv

// int32 requestid = 1;
inline void req_option_argv::clear_requestid() {
  requestid_ = 0;
}
inline ::google::protobuf::int32 req_option_argv::requestid() const {
  // @@protoc_insertion_point(field_get:manager.req_option_argv.requestid)
  return requestid_;
}
inline void req_option_argv::set_requestid(::google::protobuf::int32 value) {
  
  requestid_ = value;
  // @@protoc_insertion_point(field_set:manager.req_option_argv.requestid)
}

// -------------------------------------------------------------------

// option_argv

// int32 price_type = 1;
inline void option_argv::clear_price_type() {
  price_type_ = 0;
}
inline ::google::protobuf::int32 option_argv::price_type() const {
  // @@protoc_insertion_point(field_get:manager.option_argv.price_type)
  return price_type_;
}
inline void option_argv::set_price_type(::google::protobuf::int32 value) {
  
  price_type_ = value;
  // @@protoc_insertion_point(field_set:manager.option_argv.price_type)
}

// double vol = 2;
inline void option_argv::clear_vol() {
  vol_ = 0;
}
inline double option_argv::vol() const {
  // @@protoc_insertion_point(field_get:manager.option_argv.vol)
  return vol_;
}
inline void option_argv::set_vol(double value) {
  
  vol_ = value;
  // @@protoc_insertion_point(field_set:manager.option_argv.vol)
}

// double rate = 3;
inline void option_argv::clear_rate() {
  rate_ = 0;
}
inline double option_argv::rate() const {
  // @@protoc_insertion_point(field_get:manager.option_argv.rate)
  return rate_;
}
inline void option_argv::set_rate(double value) {
  
  rate_ = value;
  // @@protoc_insertion_point(field_set:manager.option_argv.rate)
}

// int32 step = 4;
inline void option_argv::clear_step() {
  step_ = 0;
}
inline ::google::protobuf::int32 option_argv::step() const {
  // @@protoc_insertion_point(field_get:manager.option_argv.step)
  return step_;
}
inline void option_argv::set_step(::google::protobuf::int32 value) {
  
  step_ = value;
  // @@protoc_insertion_point(field_set:manager.option_argv.step)
}

// int32 iterations = 5;
inline void option_argv::clear_iterations() {
  iterations_ = 0;
}
inline ::google::protobuf::int32 option_argv::iterations() const {
  // @@protoc_insertion_point(field_get:manager.option_argv.iterations)
  return iterations_;
}
inline void option_argv::set_iterations(::google::protobuf::int32 value) {
  
  iterations_ = value;
  // @@protoc_insertion_point(field_set:manager.option_argv.iterations)
}

// -------------------------------------------------------------------

// rsp_option_argv

// .manager.rsp_head_info header = 1;
inline bool rsp_option_argv::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void rsp_option_argv::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::manager::rsp_head_info& rsp_option_argv::header() const {
  const ::manager::rsp_head_info* p = header_;
  // @@protoc_insertion_point(field_get:manager.rsp_option_argv.header)
  return p != NULL ? *p : *reinterpret_cast<const ::manager::rsp_head_info*>(
      &::manager::_rsp_head_info_default_instance_);
}
inline ::manager::rsp_head_info* rsp_option_argv::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::manager::rsp_head_info;
  }
  // @@protoc_insertion_point(field_mutable:manager.rsp_option_argv.header)
  return header_;
}
inline ::manager::rsp_head_info* rsp_option_argv::release_header() {
  // @@protoc_insertion_point(field_release:manager.rsp_option_argv.header)
  
  ::manager::rsp_head_info* temp = header_;
  header_ = NULL;
  return temp;
}
inline void rsp_option_argv::set_allocated_header(::manager::rsp_head_info* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:manager.rsp_option_argv.header)
}

// .manager.option_argv info = 2;
inline bool rsp_option_argv::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
inline void rsp_option_argv::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
inline const ::manager::option_argv& rsp_option_argv::info() const {
  const ::manager::option_argv* p = info_;
  // @@protoc_insertion_point(field_get:manager.rsp_option_argv.info)
  return p != NULL ? *p : *reinterpret_cast<const ::manager::option_argv*>(
      &::manager::_option_argv_default_instance_);
}
inline ::manager::option_argv* rsp_option_argv::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::manager::option_argv;
  }
  // @@protoc_insertion_point(field_mutable:manager.rsp_option_argv.info)
  return info_;
}
inline ::manager::option_argv* rsp_option_argv::release_info() {
  // @@protoc_insertion_point(field_release:manager.rsp_option_argv.info)
  
  ::manager::option_argv* temp = info_;
  info_ = NULL;
  return temp;
}
inline void rsp_option_argv::set_allocated_info(::manager::option_argv* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:manager.rsp_option_argv.info)
}

// -------------------------------------------------------------------

// req_option_argv_adj

// int32 requestid = 1;
inline void req_option_argv_adj::clear_requestid() {
  requestid_ = 0;
}
inline ::google::protobuf::int32 req_option_argv_adj::requestid() const {
  // @@protoc_insertion_point(field_get:manager.req_option_argv_adj.requestid)
  return requestid_;
}
inline void req_option_argv_adj::set_requestid(::google::protobuf::int32 value) {
  
  requestid_ = value;
  // @@protoc_insertion_point(field_set:manager.req_option_argv_adj.requestid)
}

// .manager.option_argv info = 2;
inline bool req_option_argv_adj::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
inline void req_option_argv_adj::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
inline const ::manager::option_argv& req_option_argv_adj::info() const {
  const ::manager::option_argv* p = info_;
  // @@protoc_insertion_point(field_get:manager.req_option_argv_adj.info)
  return p != NULL ? *p : *reinterpret_cast<const ::manager::option_argv*>(
      &::manager::_option_argv_default_instance_);
}
inline ::manager::option_argv* req_option_argv_adj::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::manager::option_argv;
  }
  // @@protoc_insertion_point(field_mutable:manager.req_option_argv_adj.info)
  return info_;
}
inline ::manager::option_argv* req_option_argv_adj::release_info() {
  // @@protoc_insertion_point(field_release:manager.req_option_argv_adj.info)
  
  ::manager::option_argv* temp = info_;
  info_ = NULL;
  return temp;
}
inline void req_option_argv_adj::set_allocated_info(::manager::option_argv* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:manager.req_option_argv_adj.info)
}

// -------------------------------------------------------------------

// req_contract

// int32 requestid = 1;
inline void req_contract::clear_requestid() {
  requestid_ = 0;
}
inline ::google::protobuf::int32 req_contract::requestid() const {
  // @@protoc_insertion_point(field_get:manager.req_contract.requestid)
  return requestid_;
}
inline void req_contract::set_requestid(::google::protobuf::int32 value) {
  
  requestid_ = value;
  // @@protoc_insertion_point(field_set:manager.req_contract.requestid)
}

// -------------------------------------------------------------------

// contract_info

// string contractcode = 1;
inline void contract_info::clear_contractcode() {
  contractcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& contract_info::contractcode() const {
  // @@protoc_insertion_point(field_get:manager.contract_info.contractcode)
  return contractcode_.GetNoArena();
}
inline void contract_info::set_contractcode(const ::std::string& value) {
  
  contractcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manager.contract_info.contractcode)
}
#if LANG_CXX11
inline void contract_info::set_contractcode(::std::string&& value) {
  
  contractcode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manager.contract_info.contractcode)
}
#endif
inline void contract_info::set_contractcode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  contractcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manager.contract_info.contractcode)
}
inline void contract_info::set_contractcode(const char* value, size_t size) {
  
  contractcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manager.contract_info.contractcode)
}
inline ::std::string* contract_info::mutable_contractcode() {
  
  // @@protoc_insertion_point(field_mutable:manager.contract_info.contractcode)
  return contractcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* contract_info::release_contractcode() {
  // @@protoc_insertion_point(field_release:manager.contract_info.contractcode)
  
  return contractcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void contract_info::set_allocated_contractcode(::std::string* contractcode) {
  if (contractcode != NULL) {
    
  } else {
    
  }
  contractcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contractcode);
  // @@protoc_insertion_point(field_set_allocated:manager.contract_info.contractcode)
}

// string productcode = 2;
inline void contract_info::clear_productcode() {
  productcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& contract_info::productcode() const {
  // @@protoc_insertion_point(field_get:manager.contract_info.productcode)
  return productcode_.GetNoArena();
}
inline void contract_info::set_productcode(const ::std::string& value) {
  
  productcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manager.contract_info.productcode)
}
#if LANG_CXX11
inline void contract_info::set_productcode(::std::string&& value) {
  
  productcode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manager.contract_info.productcode)
}
#endif
inline void contract_info::set_productcode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  productcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manager.contract_info.productcode)
}
inline void contract_info::set_productcode(const char* value, size_t size) {
  
  productcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manager.contract_info.productcode)
}
inline ::std::string* contract_info::mutable_productcode() {
  
  // @@protoc_insertion_point(field_mutable:manager.contract_info.productcode)
  return productcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* contract_info::release_productcode() {
  // @@protoc_insertion_point(field_release:manager.contract_info.productcode)
  
  return productcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void contract_info::set_allocated_productcode(::std::string* productcode) {
  if (productcode != NULL) {
    
  } else {
    
  }
  productcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productcode);
  // @@protoc_insertion_point(field_set_allocated:manager.contract_info.productcode)
}

// string productkind = 3;
inline void contract_info::clear_productkind() {
  productkind_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& contract_info::productkind() const {
  // @@protoc_insertion_point(field_get:manager.contract_info.productkind)
  return productkind_.GetNoArena();
}
inline void contract_info::set_productkind(const ::std::string& value) {
  
  productkind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manager.contract_info.productkind)
}
#if LANG_CXX11
inline void contract_info::set_productkind(::std::string&& value) {
  
  productkind_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manager.contract_info.productkind)
}
#endif
inline void contract_info::set_productkind(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  productkind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manager.contract_info.productkind)
}
inline void contract_info::set_productkind(const char* value, size_t size) {
  
  productkind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manager.contract_info.productkind)
}
inline ::std::string* contract_info::mutable_productkind() {
  
  // @@protoc_insertion_point(field_mutable:manager.contract_info.productkind)
  return productkind_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* contract_info::release_productkind() {
  // @@protoc_insertion_point(field_release:manager.contract_info.productkind)
  
  return productkind_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void contract_info::set_allocated_productkind(::std::string* productkind) {
  if (productkind != NULL) {
    
  } else {
    
  }
  productkind_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productkind);
  // @@protoc_insertion_point(field_set_allocated:manager.contract_info.productkind)
}

// string exchangecode = 4;
inline void contract_info::clear_exchangecode() {
  exchangecode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& contract_info::exchangecode() const {
  // @@protoc_insertion_point(field_get:manager.contract_info.exchangecode)
  return exchangecode_.GetNoArena();
}
inline void contract_info::set_exchangecode(const ::std::string& value) {
  
  exchangecode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manager.contract_info.exchangecode)
}
#if LANG_CXX11
inline void contract_info::set_exchangecode(::std::string&& value) {
  
  exchangecode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manager.contract_info.exchangecode)
}
#endif
inline void contract_info::set_exchangecode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exchangecode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manager.contract_info.exchangecode)
}
inline void contract_info::set_exchangecode(const char* value, size_t size) {
  
  exchangecode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manager.contract_info.exchangecode)
}
inline ::std::string* contract_info::mutable_exchangecode() {
  
  // @@protoc_insertion_point(field_mutable:manager.contract_info.exchangecode)
  return exchangecode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* contract_info::release_exchangecode() {
  // @@protoc_insertion_point(field_release:manager.contract_info.exchangecode)
  
  return exchangecode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void contract_info::set_allocated_exchangecode(::std::string* exchangecode) {
  if (exchangecode != NULL) {
    
  } else {
    
  }
  exchangecode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchangecode);
  // @@protoc_insertion_point(field_set_allocated:manager.contract_info.exchangecode)
}

// string marketcode = 5;
inline void contract_info::clear_marketcode() {
  marketcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& contract_info::marketcode() const {
  // @@protoc_insertion_point(field_get:manager.contract_info.marketcode)
  return marketcode_.GetNoArena();
}
inline void contract_info::set_marketcode(const ::std::string& value) {
  
  marketcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manager.contract_info.marketcode)
}
#if LANG_CXX11
inline void contract_info::set_marketcode(::std::string&& value) {
  
  marketcode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manager.contract_info.marketcode)
}
#endif
inline void contract_info::set_marketcode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  marketcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manager.contract_info.marketcode)
}
inline void contract_info::set_marketcode(const char* value, size_t size) {
  
  marketcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manager.contract_info.marketcode)
}
inline ::std::string* contract_info::mutable_marketcode() {
  
  // @@protoc_insertion_point(field_mutable:manager.contract_info.marketcode)
  return marketcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* contract_info::release_marketcode() {
  // @@protoc_insertion_point(field_release:manager.contract_info.marketcode)
  
  return marketcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void contract_info::set_allocated_marketcode(::std::string* marketcode) {
  if (marketcode != NULL) {
    
  } else {
    
  }
  marketcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), marketcode);
  // @@protoc_insertion_point(field_set_allocated:manager.contract_info.marketcode)
}

// string createdate = 6;
inline void contract_info::clear_createdate() {
  createdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& contract_info::createdate() const {
  // @@protoc_insertion_point(field_get:manager.contract_info.createdate)
  return createdate_.GetNoArena();
}
inline void contract_info::set_createdate(const ::std::string& value) {
  
  createdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manager.contract_info.createdate)
}
#if LANG_CXX11
inline void contract_info::set_createdate(::std::string&& value) {
  
  createdate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manager.contract_info.createdate)
}
#endif
inline void contract_info::set_createdate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  createdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manager.contract_info.createdate)
}
inline void contract_info::set_createdate(const char* value, size_t size) {
  
  createdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manager.contract_info.createdate)
}
inline ::std::string* contract_info::mutable_createdate() {
  
  // @@protoc_insertion_point(field_mutable:manager.contract_info.createdate)
  return createdate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* contract_info::release_createdate() {
  // @@protoc_insertion_point(field_release:manager.contract_info.createdate)
  
  return createdate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void contract_info::set_allocated_createdate(::std::string* createdate) {
  if (createdate != NULL) {
    
  } else {
    
  }
  createdate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), createdate);
  // @@protoc_insertion_point(field_set_allocated:manager.contract_info.createdate)
}

// string opendate = 7;
inline void contract_info::clear_opendate() {
  opendate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& contract_info::opendate() const {
  // @@protoc_insertion_point(field_get:manager.contract_info.opendate)
  return opendate_.GetNoArena();
}
inline void contract_info::set_opendate(const ::std::string& value) {
  
  opendate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manager.contract_info.opendate)
}
#if LANG_CXX11
inline void contract_info::set_opendate(::std::string&& value) {
  
  opendate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manager.contract_info.opendate)
}
#endif
inline void contract_info::set_opendate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  opendate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manager.contract_info.opendate)
}
inline void contract_info::set_opendate(const char* value, size_t size) {
  
  opendate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manager.contract_info.opendate)
}
inline ::std::string* contract_info::mutable_opendate() {
  
  // @@protoc_insertion_point(field_mutable:manager.contract_info.opendate)
  return opendate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* contract_info::release_opendate() {
  // @@protoc_insertion_point(field_release:manager.contract_info.opendate)
  
  return opendate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void contract_info::set_allocated_opendate(::std::string* opendate) {
  if (opendate != NULL) {
    
  } else {
    
  }
  opendate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), opendate);
  // @@protoc_insertion_point(field_set_allocated:manager.contract_info.opendate)
}

// string expiredate = 8;
inline void contract_info::clear_expiredate() {
  expiredate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& contract_info::expiredate() const {
  // @@protoc_insertion_point(field_get:manager.contract_info.expiredate)
  return expiredate_.GetNoArena();
}
inline void contract_info::set_expiredate(const ::std::string& value) {
  
  expiredate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manager.contract_info.expiredate)
}
#if LANG_CXX11
inline void contract_info::set_expiredate(::std::string&& value) {
  
  expiredate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manager.contract_info.expiredate)
}
#endif
inline void contract_info::set_expiredate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  expiredate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manager.contract_info.expiredate)
}
inline void contract_info::set_expiredate(const char* value, size_t size) {
  
  expiredate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manager.contract_info.expiredate)
}
inline ::std::string* contract_info::mutable_expiredate() {
  
  // @@protoc_insertion_point(field_mutable:manager.contract_info.expiredate)
  return expiredate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* contract_info::release_expiredate() {
  // @@protoc_insertion_point(field_release:manager.contract_info.expiredate)
  
  return expiredate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void contract_info::set_allocated_expiredate(::std::string* expiredate) {
  if (expiredate != NULL) {
    
  } else {
    
  }
  expiredate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), expiredate);
  // @@protoc_insertion_point(field_set_allocated:manager.contract_info.expiredate)
}

// int32 multiplier = 9;
inline void contract_info::clear_multiplier() {
  multiplier_ = 0;
}
inline ::google::protobuf::int32 contract_info::multiplier() const {
  // @@protoc_insertion_point(field_get:manager.contract_info.multiplier)
  return multiplier_;
}
inline void contract_info::set_multiplier(::google::protobuf::int32 value) {
  
  multiplier_ = value;
  // @@protoc_insertion_point(field_set:manager.contract_info.multiplier)
}

// double pricetick = 10;
inline void contract_info::clear_pricetick() {
  pricetick_ = 0;
}
inline double contract_info::pricetick() const {
  // @@protoc_insertion_point(field_get:manager.contract_info.pricetick)
  return pricetick_;
}
inline void contract_info::set_pricetick(double value) {
  
  pricetick_ = value;
  // @@protoc_insertion_point(field_set:manager.contract_info.pricetick)
}

// string contractname = 11;
inline void contract_info::clear_contractname() {
  contractname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& contract_info::contractname() const {
  // @@protoc_insertion_point(field_get:manager.contract_info.contractname)
  return contractname_.GetNoArena();
}
inline void contract_info::set_contractname(const ::std::string& value) {
  
  contractname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manager.contract_info.contractname)
}
#if LANG_CXX11
inline void contract_info::set_contractname(::std::string&& value) {
  
  contractname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manager.contract_info.contractname)
}
#endif
inline void contract_info::set_contractname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  contractname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manager.contract_info.contractname)
}
inline void contract_info::set_contractname(const char* value, size_t size) {
  
  contractname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manager.contract_info.contractname)
}
inline ::std::string* contract_info::mutable_contractname() {
  
  // @@protoc_insertion_point(field_mutable:manager.contract_info.contractname)
  return contractname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* contract_info::release_contractname() {
  // @@protoc_insertion_point(field_release:manager.contract_info.contractname)
  
  return contractname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void contract_info::set_allocated_contractname(::std::string* contractname) {
  if (contractname != NULL) {
    
  } else {
    
  }
  contractname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contractname);
  // @@protoc_insertion_point(field_set_allocated:manager.contract_info.contractname)
}

// string delivbegindate = 12;
inline void contract_info::clear_delivbegindate() {
  delivbegindate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& contract_info::delivbegindate() const {
  // @@protoc_insertion_point(field_get:manager.contract_info.delivbegindate)
  return delivbegindate_.GetNoArena();
}
inline void contract_info::set_delivbegindate(const ::std::string& value) {
  
  delivbegindate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manager.contract_info.delivbegindate)
}
#if LANG_CXX11
inline void contract_info::set_delivbegindate(::std::string&& value) {
  
  delivbegindate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manager.contract_info.delivbegindate)
}
#endif
inline void contract_info::set_delivbegindate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  delivbegindate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manager.contract_info.delivbegindate)
}
inline void contract_info::set_delivbegindate(const char* value, size_t size) {
  
  delivbegindate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manager.contract_info.delivbegindate)
}
inline ::std::string* contract_info::mutable_delivbegindate() {
  
  // @@protoc_insertion_point(field_mutable:manager.contract_info.delivbegindate)
  return delivbegindate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* contract_info::release_delivbegindate() {
  // @@protoc_insertion_point(field_release:manager.contract_info.delivbegindate)
  
  return delivbegindate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void contract_info::set_allocated_delivbegindate(::std::string* delivbegindate) {
  if (delivbegindate != NULL) {
    
  } else {
    
  }
  delivbegindate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), delivbegindate);
  // @@protoc_insertion_point(field_set_allocated:manager.contract_info.delivbegindate)
}

// string delivenddate = 13;
inline void contract_info::clear_delivenddate() {
  delivenddate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& contract_info::delivenddate() const {
  // @@protoc_insertion_point(field_get:manager.contract_info.delivenddate)
  return delivenddate_.GetNoArena();
}
inline void contract_info::set_delivenddate(const ::std::string& value) {
  
  delivenddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manager.contract_info.delivenddate)
}
#if LANG_CXX11
inline void contract_info::set_delivenddate(::std::string&& value) {
  
  delivenddate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manager.contract_info.delivenddate)
}
#endif
inline void contract_info::set_delivenddate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  delivenddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manager.contract_info.delivenddate)
}
inline void contract_info::set_delivenddate(const char* value, size_t size) {
  
  delivenddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manager.contract_info.delivenddate)
}
inline ::std::string* contract_info::mutable_delivenddate() {
  
  // @@protoc_insertion_point(field_mutable:manager.contract_info.delivenddate)
  return delivenddate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* contract_info::release_delivenddate() {
  // @@protoc_insertion_point(field_release:manager.contract_info.delivenddate)
  
  return delivenddate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void contract_info::set_allocated_delivenddate(::std::string* delivenddate) {
  if (delivenddate != NULL) {
    
  } else {
    
  }
  delivenddate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), delivenddate);
  // @@protoc_insertion_point(field_set_allocated:manager.contract_info.delivenddate)
}

// string excontractname = 14;
inline void contract_info::clear_excontractname() {
  excontractname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& contract_info::excontractname() const {
  // @@protoc_insertion_point(field_get:manager.contract_info.excontractname)
  return excontractname_.GetNoArena();
}
inline void contract_info::set_excontractname(const ::std::string& value) {
  
  excontractname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manager.contract_info.excontractname)
}
#if LANG_CXX11
inline void contract_info::set_excontractname(::std::string&& value) {
  
  excontractname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manager.contract_info.excontractname)
}
#endif
inline void contract_info::set_excontractname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  excontractname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manager.contract_info.excontractname)
}
inline void contract_info::set_excontractname(const char* value, size_t size) {
  
  excontractname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manager.contract_info.excontractname)
}
inline ::std::string* contract_info::mutable_excontractname() {
  
  // @@protoc_insertion_point(field_mutable:manager.contract_info.excontractname)
  return excontractname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* contract_info::release_excontractname() {
  // @@protoc_insertion_point(field_release:manager.contract_info.excontractname)
  
  return excontractname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void contract_info::set_allocated_excontractname(::std::string* excontractname) {
  if (excontractname != NULL) {
    
  } else {
    
  }
  excontractname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), excontractname);
  // @@protoc_insertion_point(field_set_allocated:manager.contract_info.excontractname)
}

// string exproductname = 15;
inline void contract_info::clear_exproductname() {
  exproductname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& contract_info::exproductname() const {
  // @@protoc_insertion_point(field_get:manager.contract_info.exproductname)
  return exproductname_.GetNoArena();
}
inline void contract_info::set_exproductname(const ::std::string& value) {
  
  exproductname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manager.contract_info.exproductname)
}
#if LANG_CXX11
inline void contract_info::set_exproductname(::std::string&& value) {
  
  exproductname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manager.contract_info.exproductname)
}
#endif
inline void contract_info::set_exproductname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exproductname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manager.contract_info.exproductname)
}
inline void contract_info::set_exproductname(const char* value, size_t size) {
  
  exproductname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manager.contract_info.exproductname)
}
inline ::std::string* contract_info::mutable_exproductname() {
  
  // @@protoc_insertion_point(field_mutable:manager.contract_info.exproductname)
  return exproductname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* contract_info::release_exproductname() {
  // @@protoc_insertion_point(field_release:manager.contract_info.exproductname)
  
  return exproductname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void contract_info::set_allocated_exproductname(::std::string* exproductname) {
  if (exproductname != NULL) {
    
  } else {
    
  }
  exproductname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exproductname);
  // @@protoc_insertion_point(field_set_allocated:manager.contract_info.exproductname)
}

// string ismrgndisc = 16;
inline void contract_info::clear_ismrgndisc() {
  ismrgndisc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& contract_info::ismrgndisc() const {
  // @@protoc_insertion_point(field_get:manager.contract_info.ismrgndisc)
  return ismrgndisc_.GetNoArena();
}
inline void contract_info::set_ismrgndisc(const ::std::string& value) {
  
  ismrgndisc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manager.contract_info.ismrgndisc)
}
#if LANG_CXX11
inline void contract_info::set_ismrgndisc(::std::string&& value) {
  
  ismrgndisc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manager.contract_info.ismrgndisc)
}
#endif
inline void contract_info::set_ismrgndisc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ismrgndisc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manager.contract_info.ismrgndisc)
}
inline void contract_info::set_ismrgndisc(const char* value, size_t size) {
  
  ismrgndisc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manager.contract_info.ismrgndisc)
}
inline ::std::string* contract_info::mutable_ismrgndisc() {
  
  // @@protoc_insertion_point(field_mutable:manager.contract_info.ismrgndisc)
  return ismrgndisc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* contract_info::release_ismrgndisc() {
  // @@protoc_insertion_point(field_release:manager.contract_info.ismrgndisc)
  
  return ismrgndisc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void contract_info::set_allocated_ismrgndisc(::std::string* ismrgndisc) {
  if (ismrgndisc != NULL) {
    
  } else {
    
  }
  ismrgndisc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ismrgndisc);
  // @@protoc_insertion_point(field_set_allocated:manager.contract_info.ismrgndisc)
}

// string productclass = 17;
inline void contract_info::clear_productclass() {
  productclass_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& contract_info::productclass() const {
  // @@protoc_insertion_point(field_get:manager.contract_info.productclass)
  return productclass_.GetNoArena();
}
inline void contract_info::set_productclass(const ::std::string& value) {
  
  productclass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manager.contract_info.productclass)
}
#if LANG_CXX11
inline void contract_info::set_productclass(::std::string&& value) {
  
  productclass_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manager.contract_info.productclass)
}
#endif
inline void contract_info::set_productclass(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  productclass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manager.contract_info.productclass)
}
inline void contract_info::set_productclass(const char* value, size_t size) {
  
  productclass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manager.contract_info.productclass)
}
inline ::std::string* contract_info::mutable_productclass() {
  
  // @@protoc_insertion_point(field_mutable:manager.contract_info.productclass)
  return productclass_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* contract_info::release_productclass() {
  // @@protoc_insertion_point(field_release:manager.contract_info.productclass)
  
  return productclass_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void contract_info::set_allocated_productclass(::std::string* productclass) {
  if (productclass != NULL) {
    
  } else {
    
  }
  productclass_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productclass);
  // @@protoc_insertion_point(field_set_allocated:manager.contract_info.productclass)
}

// double baseprice = 18;
inline void contract_info::clear_baseprice() {
  baseprice_ = 0;
}
inline double contract_info::baseprice() const {
  // @@protoc_insertion_point(field_get:manager.contract_info.baseprice)
  return baseprice_;
}
inline void contract_info::set_baseprice(double value) {
  
  baseprice_ = value;
  // @@protoc_insertion_point(field_set:manager.contract_info.baseprice)
}

// string optionstype = 19;
inline void contract_info::clear_optionstype() {
  optionstype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& contract_info::optionstype() const {
  // @@protoc_insertion_point(field_get:manager.contract_info.optionstype)
  return optionstype_.GetNoArena();
}
inline void contract_info::set_optionstype(const ::std::string& value) {
  
  optionstype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manager.contract_info.optionstype)
}
#if LANG_CXX11
inline void contract_info::set_optionstype(::std::string&& value) {
  
  optionstype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manager.contract_info.optionstype)
}
#endif
inline void contract_info::set_optionstype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  optionstype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manager.contract_info.optionstype)
}
inline void contract_info::set_optionstype(const char* value, size_t size) {
  
  optionstype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manager.contract_info.optionstype)
}
inline ::std::string* contract_info::mutable_optionstype() {
  
  // @@protoc_insertion_point(field_mutable:manager.contract_info.optionstype)
  return optionstype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* contract_info::release_optionstype() {
  // @@protoc_insertion_point(field_release:manager.contract_info.optionstype)
  
  return optionstype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void contract_info::set_allocated_optionstype(::std::string* optionstype) {
  if (optionstype != NULL) {
    
  } else {
    
  }
  optionstype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), optionstype);
  // @@protoc_insertion_point(field_set_allocated:manager.contract_info.optionstype)
}

// double strikeprice = 20;
inline void contract_info::clear_strikeprice() {
  strikeprice_ = 0;
}
inline double contract_info::strikeprice() const {
  // @@protoc_insertion_point(field_get:manager.contract_info.strikeprice)
  return strikeprice_;
}
inline void contract_info::set_strikeprice(double value) {
  
  strikeprice_ = value;
  // @@protoc_insertion_point(field_set:manager.contract_info.strikeprice)
}

// string underlyinginstrid = 21;
inline void contract_info::clear_underlyinginstrid() {
  underlyinginstrid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& contract_info::underlyinginstrid() const {
  // @@protoc_insertion_point(field_get:manager.contract_info.underlyinginstrid)
  return underlyinginstrid_.GetNoArena();
}
inline void contract_info::set_underlyinginstrid(const ::std::string& value) {
  
  underlyinginstrid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manager.contract_info.underlyinginstrid)
}
#if LANG_CXX11
inline void contract_info::set_underlyinginstrid(::std::string&& value) {
  
  underlyinginstrid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manager.contract_info.underlyinginstrid)
}
#endif
inline void contract_info::set_underlyinginstrid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  underlyinginstrid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manager.contract_info.underlyinginstrid)
}
inline void contract_info::set_underlyinginstrid(const char* value, size_t size) {
  
  underlyinginstrid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manager.contract_info.underlyinginstrid)
}
inline ::std::string* contract_info::mutable_underlyinginstrid() {
  
  // @@protoc_insertion_point(field_mutable:manager.contract_info.underlyinginstrid)
  return underlyinginstrid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* contract_info::release_underlyinginstrid() {
  // @@protoc_insertion_point(field_release:manager.contract_info.underlyinginstrid)
  
  return underlyinginstrid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void contract_info::set_allocated_underlyinginstrid(::std::string* underlyinginstrid) {
  if (underlyinginstrid != NULL) {
    
  } else {
    
  }
  underlyinginstrid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), underlyinginstrid);
  // @@protoc_insertion_point(field_set_allocated:manager.contract_info.underlyinginstrid)
}

// string strikemode = 22;
inline void contract_info::clear_strikemode() {
  strikemode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& contract_info::strikemode() const {
  // @@protoc_insertion_point(field_get:manager.contract_info.strikemode)
  return strikemode_.GetNoArena();
}
inline void contract_info::set_strikemode(const ::std::string& value) {
  
  strikemode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manager.contract_info.strikemode)
}
#if LANG_CXX11
inline void contract_info::set_strikemode(::std::string&& value) {
  
  strikemode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manager.contract_info.strikemode)
}
#endif
inline void contract_info::set_strikemode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  strikemode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manager.contract_info.strikemode)
}
inline void contract_info::set_strikemode(const char* value, size_t size) {
  
  strikemode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manager.contract_info.strikemode)
}
inline ::std::string* contract_info::mutable_strikemode() {
  
  // @@protoc_insertion_point(field_mutable:manager.contract_info.strikemode)
  return strikemode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* contract_info::release_strikemode() {
  // @@protoc_insertion_point(field_release:manager.contract_info.strikemode)
  
  return strikemode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void contract_info::set_allocated_strikemode(::std::string* strikemode) {
  if (strikemode != NULL) {
    
  } else {
    
  }
  strikemode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strikemode);
  // @@protoc_insertion_point(field_set_allocated:manager.contract_info.strikemode)
}

// double underlyingmultiple = 23;
inline void contract_info::clear_underlyingmultiple() {
  underlyingmultiple_ = 0;
}
inline double contract_info::underlyingmultiple() const {
  // @@protoc_insertion_point(field_get:manager.contract_info.underlyingmultiple)
  return underlyingmultiple_;
}
inline void contract_info::set_underlyingmultiple(double value) {
  
  underlyingmultiple_ = value;
  // @@protoc_insertion_point(field_set:manager.contract_info.underlyingmultiple)
}

// -------------------------------------------------------------------

// rsp_contract

// .manager.rsp_head_info header = 1;
inline bool rsp_contract::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void rsp_contract::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::manager::rsp_head_info& rsp_contract::header() const {
  const ::manager::rsp_head_info* p = header_;
  // @@protoc_insertion_point(field_get:manager.rsp_contract.header)
  return p != NULL ? *p : *reinterpret_cast<const ::manager::rsp_head_info*>(
      &::manager::_rsp_head_info_default_instance_);
}
inline ::manager::rsp_head_info* rsp_contract::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::manager::rsp_head_info;
  }
  // @@protoc_insertion_point(field_mutable:manager.rsp_contract.header)
  return header_;
}
inline ::manager::rsp_head_info* rsp_contract::release_header() {
  // @@protoc_insertion_point(field_release:manager.rsp_contract.header)
  
  ::manager::rsp_head_info* temp = header_;
  header_ = NULL;
  return temp;
}
inline void rsp_contract::set_allocated_header(::manager::rsp_head_info* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:manager.rsp_contract.header)
}

// repeated .manager.contract_info infos = 2;
inline int rsp_contract::infos_size() const {
  return infos_.size();
}
inline void rsp_contract::clear_infos() {
  infos_.Clear();
}
inline const ::manager::contract_info& rsp_contract::infos(int index) const {
  // @@protoc_insertion_point(field_get:manager.rsp_contract.infos)
  return infos_.Get(index);
}
inline ::manager::contract_info* rsp_contract::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:manager.rsp_contract.infos)
  return infos_.Mutable(index);
}
inline ::manager::contract_info* rsp_contract::add_infos() {
  // @@protoc_insertion_point(field_add:manager.rsp_contract.infos)
  return infos_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::manager::contract_info >*
rsp_contract::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:manager.rsp_contract.infos)
  return &infos_;
}
inline const ::google::protobuf::RepeatedPtrField< ::manager::contract_info >&
rsp_contract::infos() const {
  // @@protoc_insertion_point(field_list:manager.rsp_contract.infos)
  return infos_;
}

// -------------------------------------------------------------------

// req_investor_info

// int32 requestid = 1;
inline void req_investor_info::clear_requestid() {
  requestid_ = 0;
}
inline ::google::protobuf::int32 req_investor_info::requestid() const {
  // @@protoc_insertion_point(field_get:manager.req_investor_info.requestid)
  return requestid_;
}
inline void req_investor_info::set_requestid(::google::protobuf::int32 value) {
  
  requestid_ = value;
  // @@protoc_insertion_point(field_set:manager.req_investor_info.requestid)
}

// repeated string investor = 2;
inline int req_investor_info::investor_size() const {
  return investor_.size();
}
inline void req_investor_info::clear_investor() {
  investor_.Clear();
}
inline const ::std::string& req_investor_info::investor(int index) const {
  // @@protoc_insertion_point(field_get:manager.req_investor_info.investor)
  return investor_.Get(index);
}
inline ::std::string* req_investor_info::mutable_investor(int index) {
  // @@protoc_insertion_point(field_mutable:manager.req_investor_info.investor)
  return investor_.Mutable(index);
}
inline void req_investor_info::set_investor(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:manager.req_investor_info.investor)
  investor_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void req_investor_info::set_investor(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:manager.req_investor_info.investor)
  investor_.Mutable(index)->assign(std::move(value));
}
#endif
inline void req_investor_info::set_investor(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  investor_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:manager.req_investor_info.investor)
}
inline void req_investor_info::set_investor(int index, const char* value, size_t size) {
  investor_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:manager.req_investor_info.investor)
}
inline ::std::string* req_investor_info::add_investor() {
  // @@protoc_insertion_point(field_add_mutable:manager.req_investor_info.investor)
  return investor_.Add();
}
inline void req_investor_info::add_investor(const ::std::string& value) {
  investor_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:manager.req_investor_info.investor)
}
#if LANG_CXX11
inline void req_investor_info::add_investor(::std::string&& value) {
  investor_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:manager.req_investor_info.investor)
}
#endif
inline void req_investor_info::add_investor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  investor_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:manager.req_investor_info.investor)
}
inline void req_investor_info::add_investor(const char* value, size_t size) {
  investor_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:manager.req_investor_info.investor)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
req_investor_info::investor() const {
  // @@protoc_insertion_point(field_list:manager.req_investor_info.investor)
  return investor_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
req_investor_info::mutable_investor() {
  // @@protoc_insertion_point(field_mutable_list:manager.req_investor_info.investor)
  return &investor_;
}

// -------------------------------------------------------------------

// investor_info

// string investorid = 1;
inline void investor_info::clear_investorid() {
  investorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& investor_info::investorid() const {
  // @@protoc_insertion_point(field_get:manager.investor_info.investorid)
  return investorid_.GetNoArena();
}
inline void investor_info::set_investorid(const ::std::string& value) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manager.investor_info.investorid)
}
#if LANG_CXX11
inline void investor_info::set_investorid(::std::string&& value) {
  
  investorid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manager.investor_info.investorid)
}
#endif
inline void investor_info::set_investorid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manager.investor_info.investorid)
}
inline void investor_info::set_investorid(const char* value, size_t size) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manager.investor_info.investorid)
}
inline ::std::string* investor_info::mutable_investorid() {
  
  // @@protoc_insertion_point(field_mutable:manager.investor_info.investorid)
  return investorid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* investor_info::release_investorid() {
  // @@protoc_insertion_point(field_release:manager.investor_info.investorid)
  
  return investorid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void investor_info::set_allocated_investorid(::std::string* investorid) {
  if (investorid != NULL) {
    
  } else {
    
  }
  investorid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), investorid);
  // @@protoc_insertion_point(field_set_allocated:manager.investor_info.investorid)
}

// string brokerid = 2;
inline void investor_info::clear_brokerid() {
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& investor_info::brokerid() const {
  // @@protoc_insertion_point(field_get:manager.investor_info.brokerid)
  return brokerid_.GetNoArena();
}
inline void investor_info::set_brokerid(const ::std::string& value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manager.investor_info.brokerid)
}
#if LANG_CXX11
inline void investor_info::set_brokerid(::std::string&& value) {
  
  brokerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manager.investor_info.brokerid)
}
#endif
inline void investor_info::set_brokerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manager.investor_info.brokerid)
}
inline void investor_info::set_brokerid(const char* value, size_t size) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manager.investor_info.brokerid)
}
inline ::std::string* investor_info::mutable_brokerid() {
  
  // @@protoc_insertion_point(field_mutable:manager.investor_info.brokerid)
  return brokerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* investor_info::release_brokerid() {
  // @@protoc_insertion_point(field_release:manager.investor_info.brokerid)
  
  return brokerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void investor_info::set_allocated_brokerid(::std::string* brokerid) {
  if (brokerid != NULL) {
    
  } else {
    
  }
  brokerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brokerid);
  // @@protoc_insertion_point(field_set_allocated:manager.investor_info.brokerid)
}

// string investortype = 3;
inline void investor_info::clear_investortype() {
  investortype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& investor_info::investortype() const {
  // @@protoc_insertion_point(field_get:manager.investor_info.investortype)
  return investortype_.GetNoArena();
}
inline void investor_info::set_investortype(const ::std::string& value) {
  
  investortype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manager.investor_info.investortype)
}
#if LANG_CXX11
inline void investor_info::set_investortype(::std::string&& value) {
  
  investortype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manager.investor_info.investortype)
}
#endif
inline void investor_info::set_investortype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  investortype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manager.investor_info.investortype)
}
inline void investor_info::set_investortype(const char* value, size_t size) {
  
  investortype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manager.investor_info.investortype)
}
inline ::std::string* investor_info::mutable_investortype() {
  
  // @@protoc_insertion_point(field_mutable:manager.investor_info.investortype)
  return investortype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* investor_info::release_investortype() {
  // @@protoc_insertion_point(field_release:manager.investor_info.investortype)
  
  return investortype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void investor_info::set_allocated_investortype(::std::string* investortype) {
  if (investortype != NULL) {
    
  } else {
    
  }
  investortype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), investortype);
  // @@protoc_insertion_point(field_set_allocated:manager.investor_info.investortype)
}

// string investorname = 4;
inline void investor_info::clear_investorname() {
  investorname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& investor_info::investorname() const {
  // @@protoc_insertion_point(field_get:manager.investor_info.investorname)
  return investorname_.GetNoArena();
}
inline void investor_info::set_investorname(const ::std::string& value) {
  
  investorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manager.investor_info.investorname)
}
#if LANG_CXX11
inline void investor_info::set_investorname(::std::string&& value) {
  
  investorname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manager.investor_info.investorname)
}
#endif
inline void investor_info::set_investorname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  investorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manager.investor_info.investorname)
}
inline void investor_info::set_investorname(const char* value, size_t size) {
  
  investorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manager.investor_info.investorname)
}
inline ::std::string* investor_info::mutable_investorname() {
  
  // @@protoc_insertion_point(field_mutable:manager.investor_info.investorname)
  return investorname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* investor_info::release_investorname() {
  // @@protoc_insertion_point(field_release:manager.investor_info.investorname)
  
  return investorname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void investor_info::set_allocated_investorname(::std::string* investorname) {
  if (investorname != NULL) {
    
  } else {
    
  }
  investorname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), investorname);
  // @@protoc_insertion_point(field_set_allocated:manager.investor_info.investorname)
}

// string identifiedcardtype = 5;
inline void investor_info::clear_identifiedcardtype() {
  identifiedcardtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& investor_info::identifiedcardtype() const {
  // @@protoc_insertion_point(field_get:manager.investor_info.identifiedcardtype)
  return identifiedcardtype_.GetNoArena();
}
inline void investor_info::set_identifiedcardtype(const ::std::string& value) {
  
  identifiedcardtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manager.investor_info.identifiedcardtype)
}
#if LANG_CXX11
inline void investor_info::set_identifiedcardtype(::std::string&& value) {
  
  identifiedcardtype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manager.investor_info.identifiedcardtype)
}
#endif
inline void investor_info::set_identifiedcardtype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  identifiedcardtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manager.investor_info.identifiedcardtype)
}
inline void investor_info::set_identifiedcardtype(const char* value, size_t size) {
  
  identifiedcardtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manager.investor_info.identifiedcardtype)
}
inline ::std::string* investor_info::mutable_identifiedcardtype() {
  
  // @@protoc_insertion_point(field_mutable:manager.investor_info.identifiedcardtype)
  return identifiedcardtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* investor_info::release_identifiedcardtype() {
  // @@protoc_insertion_point(field_release:manager.investor_info.identifiedcardtype)
  
  return identifiedcardtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void investor_info::set_allocated_identifiedcardtype(::std::string* identifiedcardtype) {
  if (identifiedcardtype != NULL) {
    
  } else {
    
  }
  identifiedcardtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), identifiedcardtype);
  // @@protoc_insertion_point(field_set_allocated:manager.investor_info.identifiedcardtype)
}

// string identifiedcardno = 6;
inline void investor_info::clear_identifiedcardno() {
  identifiedcardno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& investor_info::identifiedcardno() const {
  // @@protoc_insertion_point(field_get:manager.investor_info.identifiedcardno)
  return identifiedcardno_.GetNoArena();
}
inline void investor_info::set_identifiedcardno(const ::std::string& value) {
  
  identifiedcardno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manager.investor_info.identifiedcardno)
}
#if LANG_CXX11
inline void investor_info::set_identifiedcardno(::std::string&& value) {
  
  identifiedcardno_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manager.investor_info.identifiedcardno)
}
#endif
inline void investor_info::set_identifiedcardno(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  identifiedcardno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manager.investor_info.identifiedcardno)
}
inline void investor_info::set_identifiedcardno(const char* value, size_t size) {
  
  identifiedcardno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manager.investor_info.identifiedcardno)
}
inline ::std::string* investor_info::mutable_identifiedcardno() {
  
  // @@protoc_insertion_point(field_mutable:manager.investor_info.identifiedcardno)
  return identifiedcardno_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* investor_info::release_identifiedcardno() {
  // @@protoc_insertion_point(field_release:manager.investor_info.identifiedcardno)
  
  return identifiedcardno_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void investor_info::set_allocated_identifiedcardno(::std::string* identifiedcardno) {
  if (identifiedcardno != NULL) {
    
  } else {
    
  }
  identifiedcardno_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), identifiedcardno);
  // @@protoc_insertion_point(field_set_allocated:manager.investor_info.identifiedcardno)
}

// string country = 7;
inline void investor_info::clear_country() {
  country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& investor_info::country() const {
  // @@protoc_insertion_point(field_get:manager.investor_info.country)
  return country_.GetNoArena();
}
inline void investor_info::set_country(const ::std::string& value) {
  
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manager.investor_info.country)
}
#if LANG_CXX11
inline void investor_info::set_country(::std::string&& value) {
  
  country_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manager.investor_info.country)
}
#endif
inline void investor_info::set_country(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manager.investor_info.country)
}
inline void investor_info::set_country(const char* value, size_t size) {
  
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manager.investor_info.country)
}
inline ::std::string* investor_info::mutable_country() {
  
  // @@protoc_insertion_point(field_mutable:manager.investor_info.country)
  return country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* investor_info::release_country() {
  // @@protoc_insertion_point(field_release:manager.investor_info.country)
  
  return country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void investor_info::set_allocated_country(::std::string* country) {
  if (country != NULL) {
    
  } else {
    
  }
  country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:manager.investor_info.country)
}

// string province = 8;
inline void investor_info::clear_province() {
  province_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& investor_info::province() const {
  // @@protoc_insertion_point(field_get:manager.investor_info.province)
  return province_.GetNoArena();
}
inline void investor_info::set_province(const ::std::string& value) {
  
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manager.investor_info.province)
}
#if LANG_CXX11
inline void investor_info::set_province(::std::string&& value) {
  
  province_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manager.investor_info.province)
}
#endif
inline void investor_info::set_province(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manager.investor_info.province)
}
inline void investor_info::set_province(const char* value, size_t size) {
  
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manager.investor_info.province)
}
inline ::std::string* investor_info::mutable_province() {
  
  // @@protoc_insertion_point(field_mutable:manager.investor_info.province)
  return province_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* investor_info::release_province() {
  // @@protoc_insertion_point(field_release:manager.investor_info.province)
  
  return province_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void investor_info::set_allocated_province(::std::string* province) {
  if (province != NULL) {
    
  } else {
    
  }
  province_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), province);
  // @@protoc_insertion_point(field_set_allocated:manager.investor_info.province)
}

// string city = 9;
inline void investor_info::clear_city() {
  city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& investor_info::city() const {
  // @@protoc_insertion_point(field_get:manager.investor_info.city)
  return city_.GetNoArena();
}
inline void investor_info::set_city(const ::std::string& value) {
  
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manager.investor_info.city)
}
#if LANG_CXX11
inline void investor_info::set_city(::std::string&& value) {
  
  city_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manager.investor_info.city)
}
#endif
inline void investor_info::set_city(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manager.investor_info.city)
}
inline void investor_info::set_city(const char* value, size_t size) {
  
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manager.investor_info.city)
}
inline ::std::string* investor_info::mutable_city() {
  
  // @@protoc_insertion_point(field_mutable:manager.investor_info.city)
  return city_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* investor_info::release_city() {
  // @@protoc_insertion_point(field_release:manager.investor_info.city)
  
  return city_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void investor_info::set_allocated_city(::std::string* city) {
  if (city != NULL) {
    
  } else {
    
  }
  city_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), city);
  // @@protoc_insertion_point(field_set_allocated:manager.investor_info.city)
}

// string birthday = 10;
inline void investor_info::clear_birthday() {
  birthday_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& investor_info::birthday() const {
  // @@protoc_insertion_point(field_get:manager.investor_info.birthday)
  return birthday_.GetNoArena();
}
inline void investor_info::set_birthday(const ::std::string& value) {
  
  birthday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manager.investor_info.birthday)
}
#if LANG_CXX11
inline void investor_info::set_birthday(::std::string&& value) {
  
  birthday_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manager.investor_info.birthday)
}
#endif
inline void investor_info::set_birthday(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  birthday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manager.investor_info.birthday)
}
inline void investor_info::set_birthday(const char* value, size_t size) {
  
  birthday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manager.investor_info.birthday)
}
inline ::std::string* investor_info::mutable_birthday() {
  
  // @@protoc_insertion_point(field_mutable:manager.investor_info.birthday)
  return birthday_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* investor_info::release_birthday() {
  // @@protoc_insertion_point(field_release:manager.investor_info.birthday)
  
  return birthday_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void investor_info::set_allocated_birthday(::std::string* birthday) {
  if (birthday != NULL) {
    
  } else {
    
  }
  birthday_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), birthday);
  // @@protoc_insertion_point(field_set_allocated:manager.investor_info.birthday)
}

// string sex = 11;
inline void investor_info::clear_sex() {
  sex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& investor_info::sex() const {
  // @@protoc_insertion_point(field_get:manager.investor_info.sex)
  return sex_.GetNoArena();
}
inline void investor_info::set_sex(const ::std::string& value) {
  
  sex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manager.investor_info.sex)
}
#if LANG_CXX11
inline void investor_info::set_sex(::std::string&& value) {
  
  sex_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manager.investor_info.sex)
}
#endif
inline void investor_info::set_sex(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manager.investor_info.sex)
}
inline void investor_info::set_sex(const char* value, size_t size) {
  
  sex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manager.investor_info.sex)
}
inline ::std::string* investor_info::mutable_sex() {
  
  // @@protoc_insertion_point(field_mutable:manager.investor_info.sex)
  return sex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* investor_info::release_sex() {
  // @@protoc_insertion_point(field_release:manager.investor_info.sex)
  
  return sex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void investor_info::set_allocated_sex(::std::string* sex) {
  if (sex != NULL) {
    
  } else {
    
  }
  sex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sex);
  // @@protoc_insertion_point(field_set_allocated:manager.investor_info.sex)
}

// string profession = 12;
inline void investor_info::clear_profession() {
  profession_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& investor_info::profession() const {
  // @@protoc_insertion_point(field_get:manager.investor_info.profession)
  return profession_.GetNoArena();
}
inline void investor_info::set_profession(const ::std::string& value) {
  
  profession_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manager.investor_info.profession)
}
#if LANG_CXX11
inline void investor_info::set_profession(::std::string&& value) {
  
  profession_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manager.investor_info.profession)
}
#endif
inline void investor_info::set_profession(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  profession_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manager.investor_info.profession)
}
inline void investor_info::set_profession(const char* value, size_t size) {
  
  profession_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manager.investor_info.profession)
}
inline ::std::string* investor_info::mutable_profession() {
  
  // @@protoc_insertion_point(field_mutable:manager.investor_info.profession)
  return profession_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* investor_info::release_profession() {
  // @@protoc_insertion_point(field_release:manager.investor_info.profession)
  
  return profession_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void investor_info::set_allocated_profession(::std::string* profession) {
  if (profession != NULL) {
    
  } else {
    
  }
  profession_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), profession);
  // @@protoc_insertion_point(field_set_allocated:manager.investor_info.profession)
}

// string national = 13;
inline void investor_info::clear_national() {
  national_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& investor_info::national() const {
  // @@protoc_insertion_point(field_get:manager.investor_info.national)
  return national_.GetNoArena();
}
inline void investor_info::set_national(const ::std::string& value) {
  
  national_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manager.investor_info.national)
}
#if LANG_CXX11
inline void investor_info::set_national(::std::string&& value) {
  
  national_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manager.investor_info.national)
}
#endif
inline void investor_info::set_national(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  national_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manager.investor_info.national)
}
inline void investor_info::set_national(const char* value, size_t size) {
  
  national_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manager.investor_info.national)
}
inline ::std::string* investor_info::mutable_national() {
  
  // @@protoc_insertion_point(field_mutable:manager.investor_info.national)
  return national_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* investor_info::release_national() {
  // @@protoc_insertion_point(field_release:manager.investor_info.national)
  
  return national_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void investor_info::set_allocated_national(::std::string* national) {
  if (national != NULL) {
    
  } else {
    
  }
  national_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), national);
  // @@protoc_insertion_point(field_set_allocated:manager.investor_info.national)
}

// double capital = 14;
inline void investor_info::clear_capital() {
  capital_ = 0;
}
inline double investor_info::capital() const {
  // @@protoc_insertion_point(field_get:manager.investor_info.capital)
  return capital_;
}
inline void investor_info::set_capital(double value) {
  
  capital_ = value;
  // @@protoc_insertion_point(field_set:manager.investor_info.capital)
}

// string capitalcurrency = 15;
inline void investor_info::clear_capitalcurrency() {
  capitalcurrency_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& investor_info::capitalcurrency() const {
  // @@protoc_insertion_point(field_get:manager.investor_info.capitalcurrency)
  return capitalcurrency_.GetNoArena();
}
inline void investor_info::set_capitalcurrency(const ::std::string& value) {
  
  capitalcurrency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manager.investor_info.capitalcurrency)
}
#if LANG_CXX11
inline void investor_info::set_capitalcurrency(::std::string&& value) {
  
  capitalcurrency_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manager.investor_info.capitalcurrency)
}
#endif
inline void investor_info::set_capitalcurrency(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  capitalcurrency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manager.investor_info.capitalcurrency)
}
inline void investor_info::set_capitalcurrency(const char* value, size_t size) {
  
  capitalcurrency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manager.investor_info.capitalcurrency)
}
inline ::std::string* investor_info::mutable_capitalcurrency() {
  
  // @@protoc_insertion_point(field_mutable:manager.investor_info.capitalcurrency)
  return capitalcurrency_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* investor_info::release_capitalcurrency() {
  // @@protoc_insertion_point(field_release:manager.investor_info.capitalcurrency)
  
  return capitalcurrency_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void investor_info::set_allocated_capitalcurrency(::std::string* capitalcurrency) {
  if (capitalcurrency != NULL) {
    
  } else {
    
  }
  capitalcurrency_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), capitalcurrency);
  // @@protoc_insertion_point(field_set_allocated:manager.investor_info.capitalcurrency)
}

// string telephone = 16;
inline void investor_info::clear_telephone() {
  telephone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& investor_info::telephone() const {
  // @@protoc_insertion_point(field_get:manager.investor_info.telephone)
  return telephone_.GetNoArena();
}
inline void investor_info::set_telephone(const ::std::string& value) {
  
  telephone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manager.investor_info.telephone)
}
#if LANG_CXX11
inline void investor_info::set_telephone(::std::string&& value) {
  
  telephone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manager.investor_info.telephone)
}
#endif
inline void investor_info::set_telephone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  telephone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manager.investor_info.telephone)
}
inline void investor_info::set_telephone(const char* value, size_t size) {
  
  telephone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manager.investor_info.telephone)
}
inline ::std::string* investor_info::mutable_telephone() {
  
  // @@protoc_insertion_point(field_mutable:manager.investor_info.telephone)
  return telephone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* investor_info::release_telephone() {
  // @@protoc_insertion_point(field_release:manager.investor_info.telephone)
  
  return telephone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void investor_info::set_allocated_telephone(::std::string* telephone) {
  if (telephone != NULL) {
    
  } else {
    
  }
  telephone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), telephone);
  // @@protoc_insertion_point(field_set_allocated:manager.investor_info.telephone)
}

// string address = 17;
inline void investor_info::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& investor_info::address() const {
  // @@protoc_insertion_point(field_get:manager.investor_info.address)
  return address_.GetNoArena();
}
inline void investor_info::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manager.investor_info.address)
}
#if LANG_CXX11
inline void investor_info::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manager.investor_info.address)
}
#endif
inline void investor_info::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manager.investor_info.address)
}
inline void investor_info::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manager.investor_info.address)
}
inline ::std::string* investor_info::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:manager.investor_info.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* investor_info::release_address() {
  // @@protoc_insertion_point(field_release:manager.investor_info.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void investor_info::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:manager.investor_info.address)
}

// string zipcode = 18;
inline void investor_info::clear_zipcode() {
  zipcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& investor_info::zipcode() const {
  // @@protoc_insertion_point(field_get:manager.investor_info.zipcode)
  return zipcode_.GetNoArena();
}
inline void investor_info::set_zipcode(const ::std::string& value) {
  
  zipcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manager.investor_info.zipcode)
}
#if LANG_CXX11
inline void investor_info::set_zipcode(::std::string&& value) {
  
  zipcode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manager.investor_info.zipcode)
}
#endif
inline void investor_info::set_zipcode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zipcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manager.investor_info.zipcode)
}
inline void investor_info::set_zipcode(const char* value, size_t size) {
  
  zipcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manager.investor_info.zipcode)
}
inline ::std::string* investor_info::mutable_zipcode() {
  
  // @@protoc_insertion_point(field_mutable:manager.investor_info.zipcode)
  return zipcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* investor_info::release_zipcode() {
  // @@protoc_insertion_point(field_release:manager.investor_info.zipcode)
  
  return zipcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void investor_info::set_allocated_zipcode(::std::string* zipcode) {
  if (zipcode != NULL) {
    
  } else {
    
  }
  zipcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zipcode);
  // @@protoc_insertion_point(field_set_allocated:manager.investor_info.zipcode)
}

// string email = 19;
inline void investor_info::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& investor_info::email() const {
  // @@protoc_insertion_point(field_get:manager.investor_info.email)
  return email_.GetNoArena();
}
inline void investor_info::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manager.investor_info.email)
}
#if LANG_CXX11
inline void investor_info::set_email(::std::string&& value) {
  
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manager.investor_info.email)
}
#endif
inline void investor_info::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manager.investor_info.email)
}
inline void investor_info::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manager.investor_info.email)
}
inline ::std::string* investor_info::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:manager.investor_info.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* investor_info::release_email() {
  // @@protoc_insertion_point(field_release:manager.investor_info.email)
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void investor_info::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:manager.investor_info.email)
}

// string memo = 20;
inline void investor_info::clear_memo() {
  memo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& investor_info::memo() const {
  // @@protoc_insertion_point(field_get:manager.investor_info.memo)
  return memo_.GetNoArena();
}
inline void investor_info::set_memo(const ::std::string& value) {
  
  memo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manager.investor_info.memo)
}
#if LANG_CXX11
inline void investor_info::set_memo(::std::string&& value) {
  
  memo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manager.investor_info.memo)
}
#endif
inline void investor_info::set_memo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  memo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manager.investor_info.memo)
}
inline void investor_info::set_memo(const char* value, size_t size) {
  
  memo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manager.investor_info.memo)
}
inline ::std::string* investor_info::mutable_memo() {
  
  // @@protoc_insertion_point(field_mutable:manager.investor_info.memo)
  return memo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* investor_info::release_memo() {
  // @@protoc_insertion_point(field_release:manager.investor_info.memo)
  
  return memo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void investor_info::set_allocated_memo(::std::string* memo) {
  if (memo != NULL) {
    
  } else {
    
  }
  memo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), memo);
  // @@protoc_insertion_point(field_set_allocated:manager.investor_info.memo)
}

// string openinvestorname = 21;
inline void investor_info::clear_openinvestorname() {
  openinvestorname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& investor_info::openinvestorname() const {
  // @@protoc_insertion_point(field_get:manager.investor_info.openinvestorname)
  return openinvestorname_.GetNoArena();
}
inline void investor_info::set_openinvestorname(const ::std::string& value) {
  
  openinvestorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manager.investor_info.openinvestorname)
}
#if LANG_CXX11
inline void investor_info::set_openinvestorname(::std::string&& value) {
  
  openinvestorname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manager.investor_info.openinvestorname)
}
#endif
inline void investor_info::set_openinvestorname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  openinvestorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manager.investor_info.openinvestorname)
}
inline void investor_info::set_openinvestorname(const char* value, size_t size) {
  
  openinvestorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manager.investor_info.openinvestorname)
}
inline ::std::string* investor_info::mutable_openinvestorname() {
  
  // @@protoc_insertion_point(field_mutable:manager.investor_info.openinvestorname)
  return openinvestorname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* investor_info::release_openinvestorname() {
  // @@protoc_insertion_point(field_release:manager.investor_info.openinvestorname)
  
  return openinvestorname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void investor_info::set_allocated_openinvestorname(::std::string* openinvestorname) {
  if (openinvestorname != NULL) {
    
  } else {
    
  }
  openinvestorname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), openinvestorname);
  // @@protoc_insertion_point(field_set_allocated:manager.investor_info.openinvestorname)
}

// string orderinvestorname = 22;
inline void investor_info::clear_orderinvestorname() {
  orderinvestorname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& investor_info::orderinvestorname() const {
  // @@protoc_insertion_point(field_get:manager.investor_info.orderinvestorname)
  return orderinvestorname_.GetNoArena();
}
inline void investor_info::set_orderinvestorname(const ::std::string& value) {
  
  orderinvestorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manager.investor_info.orderinvestorname)
}
#if LANG_CXX11
inline void investor_info::set_orderinvestorname(::std::string&& value) {
  
  orderinvestorname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manager.investor_info.orderinvestorname)
}
#endif
inline void investor_info::set_orderinvestorname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  orderinvestorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manager.investor_info.orderinvestorname)
}
inline void investor_info::set_orderinvestorname(const char* value, size_t size) {
  
  orderinvestorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manager.investor_info.orderinvestorname)
}
inline ::std::string* investor_info::mutable_orderinvestorname() {
  
  // @@protoc_insertion_point(field_mutable:manager.investor_info.orderinvestorname)
  return orderinvestorname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* investor_info::release_orderinvestorname() {
  // @@protoc_insertion_point(field_release:manager.investor_info.orderinvestorname)
  
  return orderinvestorname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void investor_info::set_allocated_orderinvestorname(::std::string* orderinvestorname) {
  if (orderinvestorname != NULL) {
    
  } else {
    
  }
  orderinvestorname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderinvestorname);
  // @@protoc_insertion_point(field_set_allocated:manager.investor_info.orderinvestorname)
}

// string fundinvestorname = 23;
inline void investor_info::clear_fundinvestorname() {
  fundinvestorname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& investor_info::fundinvestorname() const {
  // @@protoc_insertion_point(field_get:manager.investor_info.fundinvestorname)
  return fundinvestorname_.GetNoArena();
}
inline void investor_info::set_fundinvestorname(const ::std::string& value) {
  
  fundinvestorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manager.investor_info.fundinvestorname)
}
#if LANG_CXX11
inline void investor_info::set_fundinvestorname(::std::string&& value) {
  
  fundinvestorname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manager.investor_info.fundinvestorname)
}
#endif
inline void investor_info::set_fundinvestorname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fundinvestorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manager.investor_info.fundinvestorname)
}
inline void investor_info::set_fundinvestorname(const char* value, size_t size) {
  
  fundinvestorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manager.investor_info.fundinvestorname)
}
inline ::std::string* investor_info::mutable_fundinvestorname() {
  
  // @@protoc_insertion_point(field_mutable:manager.investor_info.fundinvestorname)
  return fundinvestorname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* investor_info::release_fundinvestorname() {
  // @@protoc_insertion_point(field_release:manager.investor_info.fundinvestorname)
  
  return fundinvestorname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void investor_info::set_allocated_fundinvestorname(::std::string* fundinvestorname) {
  if (fundinvestorname != NULL) {
    
  } else {
    
  }
  fundinvestorname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fundinvestorname);
  // @@protoc_insertion_point(field_set_allocated:manager.investor_info.fundinvestorname)
}

// string settleinvestorname = 24;
inline void investor_info::clear_settleinvestorname() {
  settleinvestorname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& investor_info::settleinvestorname() const {
  // @@protoc_insertion_point(field_get:manager.investor_info.settleinvestorname)
  return settleinvestorname_.GetNoArena();
}
inline void investor_info::set_settleinvestorname(const ::std::string& value) {
  
  settleinvestorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manager.investor_info.settleinvestorname)
}
#if LANG_CXX11
inline void investor_info::set_settleinvestorname(::std::string&& value) {
  
  settleinvestorname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manager.investor_info.settleinvestorname)
}
#endif
inline void investor_info::set_settleinvestorname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  settleinvestorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manager.investor_info.settleinvestorname)
}
inline void investor_info::set_settleinvestorname(const char* value, size_t size) {
  
  settleinvestorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manager.investor_info.settleinvestorname)
}
inline ::std::string* investor_info::mutable_settleinvestorname() {
  
  // @@protoc_insertion_point(field_mutable:manager.investor_info.settleinvestorname)
  return settleinvestorname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* investor_info::release_settleinvestorname() {
  // @@protoc_insertion_point(field_release:manager.investor_info.settleinvestorname)
  
  return settleinvestorname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void investor_info::set_allocated_settleinvestorname(::std::string* settleinvestorname) {
  if (settleinvestorname != NULL) {
    
  } else {
    
  }
  settleinvestorname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), settleinvestorname);
  // @@protoc_insertion_point(field_set_allocated:manager.investor_info.settleinvestorname)
}

// int32 isactive = 25;
inline void investor_info::clear_isactive() {
  isactive_ = 0;
}
inline ::google::protobuf::int32 investor_info::isactive() const {
  // @@protoc_insertion_point(field_get:manager.investor_info.isactive)
  return isactive_;
}
inline void investor_info::set_isactive(::google::protobuf::int32 value) {
  
  isactive_ = value;
  // @@protoc_insertion_point(field_set:manager.investor_info.isactive)
}

// string departmentid = 26;
inline void investor_info::clear_departmentid() {
  departmentid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& investor_info::departmentid() const {
  // @@protoc_insertion_point(field_get:manager.investor_info.departmentid)
  return departmentid_.GetNoArena();
}
inline void investor_info::set_departmentid(const ::std::string& value) {
  
  departmentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manager.investor_info.departmentid)
}
#if LANG_CXX11
inline void investor_info::set_departmentid(::std::string&& value) {
  
  departmentid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manager.investor_info.departmentid)
}
#endif
inline void investor_info::set_departmentid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  departmentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manager.investor_info.departmentid)
}
inline void investor_info::set_departmentid(const char* value, size_t size) {
  
  departmentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manager.investor_info.departmentid)
}
inline ::std::string* investor_info::mutable_departmentid() {
  
  // @@protoc_insertion_point(field_mutable:manager.investor_info.departmentid)
  return departmentid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* investor_info::release_departmentid() {
  // @@protoc_insertion_point(field_release:manager.investor_info.departmentid)
  
  return departmentid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void investor_info::set_allocated_departmentid(::std::string* departmentid) {
  if (departmentid != NULL) {
    
  } else {
    
  }
  departmentid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), departmentid);
  // @@protoc_insertion_point(field_set_allocated:manager.investor_info.departmentid)
}

// string investorfullname = 27;
inline void investor_info::clear_investorfullname() {
  investorfullname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& investor_info::investorfullname() const {
  // @@protoc_insertion_point(field_get:manager.investor_info.investorfullname)
  return investorfullname_.GetNoArena();
}
inline void investor_info::set_investorfullname(const ::std::string& value) {
  
  investorfullname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manager.investor_info.investorfullname)
}
#if LANG_CXX11
inline void investor_info::set_investorfullname(::std::string&& value) {
  
  investorfullname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manager.investor_info.investorfullname)
}
#endif
inline void investor_info::set_investorfullname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  investorfullname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manager.investor_info.investorfullname)
}
inline void investor_info::set_investorfullname(const char* value, size_t size) {
  
  investorfullname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manager.investor_info.investorfullname)
}
inline ::std::string* investor_info::mutable_investorfullname() {
  
  // @@protoc_insertion_point(field_mutable:manager.investor_info.investorfullname)
  return investorfullname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* investor_info::release_investorfullname() {
  // @@protoc_insertion_point(field_release:manager.investor_info.investorfullname)
  
  return investorfullname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void investor_info::set_allocated_investorfullname(::std::string* investorfullname) {
  if (investorfullname != NULL) {
    
  } else {
    
  }
  investorfullname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), investorfullname);
  // @@protoc_insertion_point(field_set_allocated:manager.investor_info.investorfullname)
}

// int32 isemail = 28;
inline void investor_info::clear_isemail() {
  isemail_ = 0;
}
inline ::google::protobuf::int32 investor_info::isemail() const {
  // @@protoc_insertion_point(field_get:manager.investor_info.isemail)
  return isemail_;
}
inline void investor_info::set_isemail(::google::protobuf::int32 value) {
  
  isemail_ = value;
  // @@protoc_insertion_point(field_set:manager.investor_info.isemail)
}

// int32 issms = 29;
inline void investor_info::clear_issms() {
  issms_ = 0;
}
inline ::google::protobuf::int32 investor_info::issms() const {
  // @@protoc_insertion_point(field_get:manager.investor_info.issms)
  return issms_;
}
inline void investor_info::set_issms(::google::protobuf::int32 value) {
  
  issms_ = value;
  // @@protoc_insertion_point(field_set:manager.investor_info.issms)
}

// int32 isusingotp = 30;
inline void investor_info::clear_isusingotp() {
  isusingotp_ = 0;
}
inline ::google::protobuf::int32 investor_info::isusingotp() const {
  // @@protoc_insertion_point(field_get:manager.investor_info.isusingotp)
  return isusingotp_;
}
inline void investor_info::set_isusingotp(::google::protobuf::int32 value) {
  
  isusingotp_ = value;
  // @@protoc_insertion_point(field_set:manager.investor_info.isusingotp)
}

// string clientregion = 31;
inline void investor_info::clear_clientregion() {
  clientregion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& investor_info::clientregion() const {
  // @@protoc_insertion_point(field_get:manager.investor_info.clientregion)
  return clientregion_.GetNoArena();
}
inline void investor_info::set_clientregion(const ::std::string& value) {
  
  clientregion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:manager.investor_info.clientregion)
}
#if LANG_CXX11
inline void investor_info::set_clientregion(::std::string&& value) {
  
  clientregion_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:manager.investor_info.clientregion)
}
#endif
inline void investor_info::set_clientregion(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  clientregion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:manager.investor_info.clientregion)
}
inline void investor_info::set_clientregion(const char* value, size_t size) {
  
  clientregion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:manager.investor_info.clientregion)
}
inline ::std::string* investor_info::mutable_clientregion() {
  
  // @@protoc_insertion_point(field_mutable:manager.investor_info.clientregion)
  return clientregion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* investor_info::release_clientregion() {
  // @@protoc_insertion_point(field_release:manager.investor_info.clientregion)
  
  return clientregion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void investor_info::set_allocated_clientregion(::std::string* clientregion) {
  if (clientregion != NULL) {
    
  } else {
    
  }
  clientregion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientregion);
  // @@protoc_insertion_point(field_set_allocated:manager.investor_info.clientregion)
}

// -------------------------------------------------------------------

// rsp_investor_info

// .manager.rsp_head_info header = 1;
inline bool rsp_investor_info::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void rsp_investor_info::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::manager::rsp_head_info& rsp_investor_info::header() const {
  const ::manager::rsp_head_info* p = header_;
  // @@protoc_insertion_point(field_get:manager.rsp_investor_info.header)
  return p != NULL ? *p : *reinterpret_cast<const ::manager::rsp_head_info*>(
      &::manager::_rsp_head_info_default_instance_);
}
inline ::manager::rsp_head_info* rsp_investor_info::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::manager::rsp_head_info;
  }
  // @@protoc_insertion_point(field_mutable:manager.rsp_investor_info.header)
  return header_;
}
inline ::manager::rsp_head_info* rsp_investor_info::release_header() {
  // @@protoc_insertion_point(field_release:manager.rsp_investor_info.header)
  
  ::manager::rsp_head_info* temp = header_;
  header_ = NULL;
  return temp;
}
inline void rsp_investor_info::set_allocated_header(::manager::rsp_head_info* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:manager.rsp_investor_info.header)
}

// repeated .manager.investor_info infos = 2;
inline int rsp_investor_info::infos_size() const {
  return infos_.size();
}
inline void rsp_investor_info::clear_infos() {
  infos_.Clear();
}
inline const ::manager::investor_info& rsp_investor_info::infos(int index) const {
  // @@protoc_insertion_point(field_get:manager.rsp_investor_info.infos)
  return infos_.Get(index);
}
inline ::manager::investor_info* rsp_investor_info::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:manager.rsp_investor_info.infos)
  return infos_.Mutable(index);
}
inline ::manager::investor_info* rsp_investor_info::add_infos() {
  // @@protoc_insertion_point(field_add:manager.rsp_investor_info.infos)
  return infos_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::manager::investor_info >*
rsp_investor_info::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:manager.rsp_investor_info.infos)
  return &infos_;
}
inline const ::google::protobuf::RepeatedPtrField< ::manager::investor_info >&
rsp_investor_info::infos() const {
  // @@protoc_insertion_point(field_list:manager.rsp_investor_info.infos)
  return infos_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace manager

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_manager_5fprotocal_2eproto__INCLUDED
