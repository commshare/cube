// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: riskapi_data_protocal.proto

#ifndef PROTOBUF_riskapi_5fdata_5fprotocal_2eproto__INCLUDED
#define PROTOBUF_riskapi_5fdata_5fprotocal_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "trade_protocal.pb.h"
#include "quote_protocal.pb.h"
#include "riskapi_action_protocal.pb.h"
// @@protoc_insertion_point(includes)
namespace risk {
class cffex_margin_field;
class cffex_margin_fieldDefaultTypeInternal;
extern cffex_margin_fieldDefaultTypeInternal _cffex_margin_field_default_instance_;
class czce_margin_field;
class czce_margin_fieldDefaultTypeInternal;
extern czce_margin_fieldDefaultTypeInternal _czce_margin_field_default_instance_;
class dce_margin_field;
class dce_margin_fieldDefaultTypeInternal;
extern dce_margin_fieldDefaultTypeInternal _dce_margin_field_default_instance_;
class delivery_margin_field;
class delivery_margin_fieldDefaultTypeInternal;
extern delivery_margin_fieldDefaultTypeInternal _delivery_margin_field_default_instance_;
class error_info;
class error_infoDefaultTypeInternal;
extern error_infoDefaultTypeInternal _error_info_default_instance_;
class ine_margin_field;
class ine_margin_fieldDefaultTypeInternal;
extern ine_margin_fieldDefaultTypeInternal _ine_margin_field_default_instance_;
class instrument_info;
class instrument_infoDefaultTypeInternal;
extern instrument_infoDefaultTypeInternal _instrument_info_default_instance_;
class rsp_action_info;
class rsp_action_infoDefaultTypeInternal;
extern rsp_action_infoDefaultTypeInternal _rsp_action_info_default_instance_;
class rsp_groups;
class rsp_groupsDefaultTypeInternal;
extern rsp_groupsDefaultTypeInternal _rsp_groups_default_instance_;
class rsp_head_info;
class rsp_head_infoDefaultTypeInternal;
extern rsp_head_infoDefaultTypeInternal _rsp_head_info_default_instance_;
class rsp_instrument_field;
class rsp_instrument_fieldDefaultTypeInternal;
extern rsp_instrument_fieldDefaultTypeInternal _rsp_instrument_field_default_instance_;
class rsp_investor_list;
class rsp_investor_listDefaultTypeInternal;
extern rsp_investor_listDefaultTypeInternal _rsp_investor_list_default_instance_;
class rsp_margin_field;
class rsp_margin_fieldDefaultTypeInternal;
extern rsp_margin_fieldDefaultTypeInternal _rsp_margin_field_default_instance_;
class rsp_order_field;
class rsp_order_fieldDefaultTypeInternal;
extern rsp_order_fieldDefaultTypeInternal _rsp_order_field_default_instance_;
class rsp_position_field;
class rsp_position_fieldDefaultTypeInternal;
extern rsp_position_fieldDefaultTypeInternal _rsp_position_field_default_instance_;
class rsp_risker_investor;
class rsp_risker_investorDefaultTypeInternal;
extern rsp_risker_investorDefaultTypeInternal _rsp_risker_investor_default_instance_;
class rsp_risker_login;
class rsp_risker_loginDefaultTypeInternal;
extern rsp_risker_loginDefaultTypeInternal _rsp_risker_login_default_instance_;
class rsp_sync_account_field;
class rsp_sync_account_fieldDefaultTypeInternal;
extern rsp_sync_account_fieldDefaultTypeInternal _rsp_sync_account_field_default_instance_;
class rsp_trade_field;
class rsp_trade_fieldDefaultTypeInternal;
extern rsp_trade_fieldDefaultTypeInternal _rsp_trade_field_default_instance_;
class rtn_change_risker;
class rtn_change_riskerDefaultTypeInternal;
extern rtn_change_riskerDefaultTypeInternal _rtn_change_risker_default_instance_;
class rtn_margin_field;
class rtn_margin_fieldDefaultTypeInternal;
extern rtn_margin_fieldDefaultTypeInternal _rtn_margin_field_default_instance_;
class rtn_order_field;
class rtn_order_fieldDefaultTypeInternal;
extern rtn_order_fieldDefaultTypeInternal _rtn_order_field_default_instance_;
class rtn_position_field;
class rtn_position_fieldDefaultTypeInternal;
extern rtn_position_fieldDefaultTypeInternal _rtn_position_field_default_instance_;
class rtn_quote_field;
class rtn_quote_fieldDefaultTypeInternal;
extern rtn_quote_fieldDefaultTypeInternal _rtn_quote_field_default_instance_;
class rtn_sync_account_field;
class rtn_sync_account_fieldDefaultTypeInternal;
extern rtn_sync_account_fieldDefaultTypeInternal _rtn_sync_account_field_default_instance_;
class rtn_trade_field;
class rtn_trade_fieldDefaultTypeInternal;
extern rtn_trade_fieldDefaultTypeInternal _rtn_trade_field_default_instance_;
class shfe_margin_field;
class shfe_margin_fieldDefaultTypeInternal;
extern shfe_margin_fieldDefaultTypeInternal _shfe_margin_field_default_instance_;
}  // namespace risk

namespace risk {

namespace protobuf_riskapi_5fdata_5fprotocal_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_riskapi_5fdata_5fprotocal_2eproto

// ===================================================================

class error_info : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.error_info) */ {
 public:
  error_info();
  virtual ~error_info();

  error_info(const error_info& from);

  inline error_info& operator=(const error_info& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  error_info(error_info&& from) noexcept
    : error_info() {
    *this = ::std::move(from);
  }

  inline error_info& operator=(error_info&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const error_info& default_instance();

  static inline const error_info* internal_default_instance() {
    return reinterpret_cast<const error_info*>(
               &_error_info_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(error_info* other);
  friend void swap(error_info& a, error_info& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline error_info* New() const PROTOBUF_FINAL { return New(NULL); }

  error_info* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const error_info& from);
  void MergeFrom(const error_info& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(error_info* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string errormsg = 2;
  void clear_errormsg();
  static const int kErrormsgFieldNumber = 2;
  const ::std::string& errormsg() const;
  void set_errormsg(const ::std::string& value);
  #if LANG_CXX11
  void set_errormsg(::std::string&& value);
  #endif
  void set_errormsg(const char* value);
  void set_errormsg(const char* value, size_t size);
  ::std::string* mutable_errormsg();
  ::std::string* release_errormsg();
  void set_allocated_errormsg(::std::string* errormsg);

  // sint32 errorid = 1;
  void clear_errorid();
  static const int kErroridFieldNumber = 1;
  ::google::protobuf::int32 errorid() const;
  void set_errorid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:risk.error_info)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr errormsg_;
  ::google::protobuf::int32 errorid_;
  mutable int _cached_size_;
  friend struct protobuf_riskapi_5fdata_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rsp_head_info : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.rsp_head_info) */ {
 public:
  rsp_head_info();
  virtual ~rsp_head_info();

  rsp_head_info(const rsp_head_info& from);

  inline rsp_head_info& operator=(const rsp_head_info& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rsp_head_info(rsp_head_info&& from) noexcept
    : rsp_head_info() {
    *this = ::std::move(from);
  }

  inline rsp_head_info& operator=(rsp_head_info&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rsp_head_info& default_instance();

  static inline const rsp_head_info* internal_default_instance() {
    return reinterpret_cast<const rsp_head_info*>(
               &_rsp_head_info_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(rsp_head_info* other);
  friend void swap(rsp_head_info& a, rsp_head_info& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rsp_head_info* New() const PROTOBUF_FINAL { return New(NULL); }

  rsp_head_info* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rsp_head_info& from);
  void MergeFrom(const rsp_head_info& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rsp_head_info* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .risk.error_info info = 2;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 2;
  const ::risk::error_info& info() const;
  ::risk::error_info* mutable_info();
  ::risk::error_info* release_info();
  void set_allocated_info(::risk::error_info* info);

  // int32 requestid = 1;
  void clear_requestid();
  static const int kRequestidFieldNumber = 1;
  ::google::protobuf::int32 requestid() const;
  void set_requestid(::google::protobuf::int32 value);

  // bool islast = 3;
  void clear_islast();
  static const int kIslastFieldNumber = 3;
  bool islast() const;
  void set_islast(bool value);

  // @@protoc_insertion_point(class_scope:risk.rsp_head_info)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::risk::error_info* info_;
  ::google::protobuf::int32 requestid_;
  bool islast_;
  mutable int _cached_size_;
  friend struct protobuf_riskapi_5fdata_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rsp_risker_login : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.rsp_risker_login) */ {
 public:
  rsp_risker_login();
  virtual ~rsp_risker_login();

  rsp_risker_login(const rsp_risker_login& from);

  inline rsp_risker_login& operator=(const rsp_risker_login& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rsp_risker_login(rsp_risker_login&& from) noexcept
    : rsp_risker_login() {
    *this = ::std::move(from);
  }

  inline rsp_risker_login& operator=(rsp_risker_login&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rsp_risker_login& default_instance();

  static inline const rsp_risker_login* internal_default_instance() {
    return reinterpret_cast<const rsp_risker_login*>(
               &_rsp_risker_login_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(rsp_risker_login* other);
  friend void swap(rsp_risker_login& a, rsp_risker_login& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rsp_risker_login* New() const PROTOBUF_FINAL { return New(NULL); }

  rsp_risker_login* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rsp_risker_login& from);
  void MergeFrom(const rsp_risker_login& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rsp_risker_login* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .risk.error_info info = 2;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 2;
  const ::risk::error_info& info() const;
  ::risk::error_info* mutable_info();
  ::risk::error_info* release_info();
  void set_allocated_info(::risk::error_info* info);

  // int32 requestid = 1;
  void clear_requestid();
  static const int kRequestidFieldNumber = 1;
  ::google::protobuf::int32 requestid() const;
  void set_requestid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:risk.rsp_risker_login)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::risk::error_info* info_;
  ::google::protobuf::int32 requestid_;
  mutable int _cached_size_;
  friend struct protobuf_riskapi_5fdata_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rsp_investor_list : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.rsp_investor_list) */ {
 public:
  rsp_investor_list();
  virtual ~rsp_investor_list();

  rsp_investor_list(const rsp_investor_list& from);

  inline rsp_investor_list& operator=(const rsp_investor_list& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rsp_investor_list(rsp_investor_list&& from) noexcept
    : rsp_investor_list() {
    *this = ::std::move(from);
  }

  inline rsp_investor_list& operator=(rsp_investor_list&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rsp_investor_list& default_instance();

  static inline const rsp_investor_list* internal_default_instance() {
    return reinterpret_cast<const rsp_investor_list*>(
               &_rsp_investor_list_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(rsp_investor_list* other);
  friend void swap(rsp_investor_list& a, rsp_investor_list& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rsp_investor_list* New() const PROTOBUF_FINAL { return New(NULL); }

  rsp_investor_list* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rsp_investor_list& from);
  void MergeFrom(const rsp_investor_list& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rsp_investor_list* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string investorid = 2;
  void clear_investorid();
  static const int kInvestoridFieldNumber = 2;
  const ::std::string& investorid() const;
  void set_investorid(const ::std::string& value);
  #if LANG_CXX11
  void set_investorid(::std::string&& value);
  #endif
  void set_investorid(const char* value);
  void set_investorid(const char* value, size_t size);
  ::std::string* mutable_investorid();
  ::std::string* release_investorid();
  void set_allocated_investorid(::std::string* investorid);

  // .risk.rsp_head_info header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::risk::rsp_head_info& header() const;
  ::risk::rsp_head_info* mutable_header();
  ::risk::rsp_head_info* release_header();
  void set_allocated_header(::risk::rsp_head_info* header);

  // @@protoc_insertion_point(class_scope:risk.rsp_investor_list)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr investorid_;
  ::risk::rsp_head_info* header_;
  mutable int _cached_size_;
  friend struct protobuf_riskapi_5fdata_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class instrument_info : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.instrument_info) */ {
 public:
  instrument_info();
  virtual ~instrument_info();

  instrument_info(const instrument_info& from);

  inline instrument_info& operator=(const instrument_info& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  instrument_info(instrument_info&& from) noexcept
    : instrument_info() {
    *this = ::std::move(from);
  }

  inline instrument_info& operator=(instrument_info&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const instrument_info& default_instance();

  static inline const instrument_info* internal_default_instance() {
    return reinterpret_cast<const instrument_info*>(
               &_instrument_info_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(instrument_info* other);
  friend void swap(instrument_info& a, instrument_info& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline instrument_info* New() const PROTOBUF_FINAL { return New(NULL); }

  instrument_info* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const instrument_info& from);
  void MergeFrom(const instrument_info& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(instrument_info* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string instrumentid = 1;
  void clear_instrumentid();
  static const int kInstrumentidFieldNumber = 1;
  const ::std::string& instrumentid() const;
  void set_instrumentid(const ::std::string& value);
  #if LANG_CXX11
  void set_instrumentid(::std::string&& value);
  #endif
  void set_instrumentid(const char* value);
  void set_instrumentid(const char* value, size_t size);
  ::std::string* mutable_instrumentid();
  ::std::string* release_instrumentid();
  void set_allocated_instrumentid(::std::string* instrumentid);

  // string exchangeid = 2;
  void clear_exchangeid();
  static const int kExchangeidFieldNumber = 2;
  const ::std::string& exchangeid() const;
  void set_exchangeid(const ::std::string& value);
  #if LANG_CXX11
  void set_exchangeid(::std::string&& value);
  #endif
  void set_exchangeid(const char* value);
  void set_exchangeid(const char* value, size_t size);
  ::std::string* mutable_exchangeid();
  ::std::string* release_exchangeid();
  void set_allocated_exchangeid(::std::string* exchangeid);

  // string instrumentname = 3;
  void clear_instrumentname();
  static const int kInstrumentnameFieldNumber = 3;
  const ::std::string& instrumentname() const;
  void set_instrumentname(const ::std::string& value);
  #if LANG_CXX11
  void set_instrumentname(::std::string&& value);
  #endif
  void set_instrumentname(const char* value);
  void set_instrumentname(const char* value, size_t size);
  ::std::string* mutable_instrumentname();
  ::std::string* release_instrumentname();
  void set_allocated_instrumentname(::std::string* instrumentname);

  // string exchangeinstid = 4;
  void clear_exchangeinstid();
  static const int kExchangeinstidFieldNumber = 4;
  const ::std::string& exchangeinstid() const;
  void set_exchangeinstid(const ::std::string& value);
  #if LANG_CXX11
  void set_exchangeinstid(::std::string&& value);
  #endif
  void set_exchangeinstid(const char* value);
  void set_exchangeinstid(const char* value, size_t size);
  ::std::string* mutable_exchangeinstid();
  ::std::string* release_exchangeinstid();
  void set_allocated_exchangeinstid(::std::string* exchangeinstid);

  // string productid = 5;
  void clear_productid();
  static const int kProductidFieldNumber = 5;
  const ::std::string& productid() const;
  void set_productid(const ::std::string& value);
  #if LANG_CXX11
  void set_productid(::std::string&& value);
  #endif
  void set_productid(const char* value);
  void set_productid(const char* value, size_t size);
  ::std::string* mutable_productid();
  ::std::string* release_productid();
  void set_allocated_productid(::std::string* productid);

  // string productclass = 6;
  void clear_productclass();
  static const int kProductclassFieldNumber = 6;
  const ::std::string& productclass() const;
  void set_productclass(const ::std::string& value);
  #if LANG_CXX11
  void set_productclass(::std::string&& value);
  #endif
  void set_productclass(const char* value);
  void set_productclass(const char* value, size_t size);
  ::std::string* mutable_productclass();
  ::std::string* release_productclass();
  void set_allocated_productclass(::std::string* productclass);

  // string createdate = 15;
  void clear_createdate();
  static const int kCreatedateFieldNumber = 15;
  const ::std::string& createdate() const;
  void set_createdate(const ::std::string& value);
  #if LANG_CXX11
  void set_createdate(::std::string&& value);
  #endif
  void set_createdate(const char* value);
  void set_createdate(const char* value, size_t size);
  ::std::string* mutable_createdate();
  ::std::string* release_createdate();
  void set_allocated_createdate(::std::string* createdate);

  // string opendate = 16;
  void clear_opendate();
  static const int kOpendateFieldNumber = 16;
  const ::std::string& opendate() const;
  void set_opendate(const ::std::string& value);
  #if LANG_CXX11
  void set_opendate(::std::string&& value);
  #endif
  void set_opendate(const char* value);
  void set_opendate(const char* value, size_t size);
  ::std::string* mutable_opendate();
  ::std::string* release_opendate();
  void set_allocated_opendate(::std::string* opendate);

  // string expiredate = 17;
  void clear_expiredate();
  static const int kExpiredateFieldNumber = 17;
  const ::std::string& expiredate() const;
  void set_expiredate(const ::std::string& value);
  #if LANG_CXX11
  void set_expiredate(::std::string&& value);
  #endif
  void set_expiredate(const char* value);
  void set_expiredate(const char* value, size_t size);
  ::std::string* mutable_expiredate();
  ::std::string* release_expiredate();
  void set_allocated_expiredate(::std::string* expiredate);

  // string startdelivdate = 18;
  void clear_startdelivdate();
  static const int kStartdelivdateFieldNumber = 18;
  const ::std::string& startdelivdate() const;
  void set_startdelivdate(const ::std::string& value);
  #if LANG_CXX11
  void set_startdelivdate(::std::string&& value);
  #endif
  void set_startdelivdate(const char* value);
  void set_startdelivdate(const char* value, size_t size);
  ::std::string* mutable_startdelivdate();
  ::std::string* release_startdelivdate();
  void set_allocated_startdelivdate(::std::string* startdelivdate);

  // string enddelivdate = 19;
  void clear_enddelivdate();
  static const int kEnddelivdateFieldNumber = 19;
  const ::std::string& enddelivdate() const;
  void set_enddelivdate(const ::std::string& value);
  #if LANG_CXX11
  void set_enddelivdate(::std::string&& value);
  #endif
  void set_enddelivdate(const char* value);
  void set_enddelivdate(const char* value, size_t size);
  ::std::string* mutable_enddelivdate();
  ::std::string* release_enddelivdate();
  void set_allocated_enddelivdate(::std::string* enddelivdate);

  // string instlifephase = 20;
  void clear_instlifephase();
  static const int kInstlifephaseFieldNumber = 20;
  const ::std::string& instlifephase() const;
  void set_instlifephase(const ::std::string& value);
  #if LANG_CXX11
  void set_instlifephase(::std::string&& value);
  #endif
  void set_instlifephase(const char* value);
  void set_instlifephase(const char* value, size_t size);
  ::std::string* mutable_instlifephase();
  ::std::string* release_instlifephase();
  void set_allocated_instlifephase(::std::string* instlifephase);

  // string positiontype = 22;
  void clear_positiontype();
  static const int kPositiontypeFieldNumber = 22;
  const ::std::string& positiontype() const;
  void set_positiontype(const ::std::string& value);
  #if LANG_CXX11
  void set_positiontype(::std::string&& value);
  #endif
  void set_positiontype(const char* value);
  void set_positiontype(const char* value, size_t size);
  ::std::string* mutable_positiontype();
  ::std::string* release_positiontype();
  void set_allocated_positiontype(::std::string* positiontype);

  // string positiondatetype = 23;
  void clear_positiondatetype();
  static const int kPositiondatetypeFieldNumber = 23;
  const ::std::string& positiondatetype() const;
  void set_positiondatetype(const ::std::string& value);
  #if LANG_CXX11
  void set_positiondatetype(::std::string&& value);
  #endif
  void set_positiondatetype(const char* value);
  void set_positiondatetype(const char* value, size_t size);
  ::std::string* mutable_positiondatetype();
  ::std::string* release_positiondatetype();
  void set_allocated_positiondatetype(::std::string* positiondatetype);

  // string maxmarginsidealgorithm = 26;
  void clear_maxmarginsidealgorithm();
  static const int kMaxmarginsidealgorithmFieldNumber = 26;
  const ::std::string& maxmarginsidealgorithm() const;
  void set_maxmarginsidealgorithm(const ::std::string& value);
  #if LANG_CXX11
  void set_maxmarginsidealgorithm(::std::string&& value);
  #endif
  void set_maxmarginsidealgorithm(const char* value);
  void set_maxmarginsidealgorithm(const char* value, size_t size);
  ::std::string* mutable_maxmarginsidealgorithm();
  ::std::string* release_maxmarginsidealgorithm();
  void set_allocated_maxmarginsidealgorithm(::std::string* maxmarginsidealgorithm);

  // string underlyinginstrid = 27;
  void clear_underlyinginstrid();
  static const int kUnderlyinginstridFieldNumber = 27;
  const ::std::string& underlyinginstrid() const;
  void set_underlyinginstrid(const ::std::string& value);
  #if LANG_CXX11
  void set_underlyinginstrid(::std::string&& value);
  #endif
  void set_underlyinginstrid(const char* value);
  void set_underlyinginstrid(const char* value, size_t size);
  ::std::string* mutable_underlyinginstrid();
  ::std::string* release_underlyinginstrid();
  void set_allocated_underlyinginstrid(::std::string* underlyinginstrid);

  // string optionstype = 29;
  void clear_optionstype();
  static const int kOptionstypeFieldNumber = 29;
  const ::std::string& optionstype() const;
  void set_optionstype(const ::std::string& value);
  #if LANG_CXX11
  void set_optionstype(::std::string&& value);
  #endif
  void set_optionstype(const char* value);
  void set_optionstype(const char* value, size_t size);
  ::std::string* mutable_optionstype();
  ::std::string* release_optionstype();
  void set_allocated_optionstype(::std::string* optionstype);

  // string combinationtype = 31;
  void clear_combinationtype();
  static const int kCombinationtypeFieldNumber = 31;
  const ::std::string& combinationtype() const;
  void set_combinationtype(const ::std::string& value);
  #if LANG_CXX11
  void set_combinationtype(::std::string&& value);
  #endif
  void set_combinationtype(const char* value);
  void set_combinationtype(const char* value, size_t size);
  ::std::string* mutable_combinationtype();
  ::std::string* release_combinationtype();
  void set_allocated_combinationtype(::std::string* combinationtype);

  // string productgroupid = 32;
  void clear_productgroupid();
  static const int kProductgroupidFieldNumber = 32;
  const ::std::string& productgroupid() const;
  void set_productgroupid(const ::std::string& value);
  #if LANG_CXX11
  void set_productgroupid(::std::string&& value);
  #endif
  void set_productgroupid(const char* value);
  void set_productgroupid(const char* value, size_t size);
  ::std::string* mutable_productgroupid();
  ::std::string* release_productgroupid();
  void set_allocated_productgroupid(::std::string* productgroupid);

  // int32 deliveryyear = 7;
  void clear_deliveryyear();
  static const int kDeliveryyearFieldNumber = 7;
  ::google::protobuf::int32 deliveryyear() const;
  void set_deliveryyear(::google::protobuf::int32 value);

  // int32 deliverymonth = 8;
  void clear_deliverymonth();
  static const int kDeliverymonthFieldNumber = 8;
  ::google::protobuf::int32 deliverymonth() const;
  void set_deliverymonth(::google::protobuf::int32 value);

  // int32 maxmarketordervolume = 9;
  void clear_maxmarketordervolume();
  static const int kMaxmarketordervolumeFieldNumber = 9;
  ::google::protobuf::int32 maxmarketordervolume() const;
  void set_maxmarketordervolume(::google::protobuf::int32 value);

  // int32 minmarketordervolume = 10;
  void clear_minmarketordervolume();
  static const int kMinmarketordervolumeFieldNumber = 10;
  ::google::protobuf::int32 minmarketordervolume() const;
  void set_minmarketordervolume(::google::protobuf::int32 value);

  // int32 maxlimitordervolume = 11;
  void clear_maxlimitordervolume();
  static const int kMaxlimitordervolumeFieldNumber = 11;
  ::google::protobuf::int32 maxlimitordervolume() const;
  void set_maxlimitordervolume(::google::protobuf::int32 value);

  // int32 minlimitordervolume = 12;
  void clear_minlimitordervolume();
  static const int kMinlimitordervolumeFieldNumber = 12;
  ::google::protobuf::int32 minlimitordervolume() const;
  void set_minlimitordervolume(::google::protobuf::int32 value);

  // double pricetick = 14;
  void clear_pricetick();
  static const int kPricetickFieldNumber = 14;
  double pricetick() const;
  void set_pricetick(double value);

  // int32 volumemultiple = 13;
  void clear_volumemultiple();
  static const int kVolumemultipleFieldNumber = 13;
  ::google::protobuf::int32 volumemultiple() const;
  void set_volumemultiple(::google::protobuf::int32 value);

  // int32 istrading = 21;
  void clear_istrading();
  static const int kIstradingFieldNumber = 21;
  ::google::protobuf::int32 istrading() const;
  void set_istrading(::google::protobuf::int32 value);

  // double longmarginratio = 24;
  void clear_longmarginratio();
  static const int kLongmarginratioFieldNumber = 24;
  double longmarginratio() const;
  void set_longmarginratio(double value);

  // double shortmarginratio = 25;
  void clear_shortmarginratio();
  static const int kShortmarginratioFieldNumber = 25;
  double shortmarginratio() const;
  void set_shortmarginratio(double value);

  // double strikeprice = 28;
  void clear_strikeprice();
  static const int kStrikepriceFieldNumber = 28;
  double strikeprice() const;
  void set_strikeprice(double value);

  // double underlyingmultiple = 30;
  void clear_underlyingmultiple();
  static const int kUnderlyingmultipleFieldNumber = 30;
  double underlyingmultiple() const;
  void set_underlyingmultiple(double value);

  // @@protoc_insertion_point(class_scope:risk.instrument_info)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr instrumentid_;
  ::google::protobuf::internal::ArenaStringPtr exchangeid_;
  ::google::protobuf::internal::ArenaStringPtr instrumentname_;
  ::google::protobuf::internal::ArenaStringPtr exchangeinstid_;
  ::google::protobuf::internal::ArenaStringPtr productid_;
  ::google::protobuf::internal::ArenaStringPtr productclass_;
  ::google::protobuf::internal::ArenaStringPtr createdate_;
  ::google::protobuf::internal::ArenaStringPtr opendate_;
  ::google::protobuf::internal::ArenaStringPtr expiredate_;
  ::google::protobuf::internal::ArenaStringPtr startdelivdate_;
  ::google::protobuf::internal::ArenaStringPtr enddelivdate_;
  ::google::protobuf::internal::ArenaStringPtr instlifephase_;
  ::google::protobuf::internal::ArenaStringPtr positiontype_;
  ::google::protobuf::internal::ArenaStringPtr positiondatetype_;
  ::google::protobuf::internal::ArenaStringPtr maxmarginsidealgorithm_;
  ::google::protobuf::internal::ArenaStringPtr underlyinginstrid_;
  ::google::protobuf::internal::ArenaStringPtr optionstype_;
  ::google::protobuf::internal::ArenaStringPtr combinationtype_;
  ::google::protobuf::internal::ArenaStringPtr productgroupid_;
  ::google::protobuf::int32 deliveryyear_;
  ::google::protobuf::int32 deliverymonth_;
  ::google::protobuf::int32 maxmarketordervolume_;
  ::google::protobuf::int32 minmarketordervolume_;
  ::google::protobuf::int32 maxlimitordervolume_;
  ::google::protobuf::int32 minlimitordervolume_;
  double pricetick_;
  ::google::protobuf::int32 volumemultiple_;
  ::google::protobuf::int32 istrading_;
  double longmarginratio_;
  double shortmarginratio_;
  double strikeprice_;
  double underlyingmultiple_;
  mutable int _cached_size_;
  friend struct protobuf_riskapi_5fdata_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rsp_instrument_field : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.rsp_instrument_field) */ {
 public:
  rsp_instrument_field();
  virtual ~rsp_instrument_field();

  rsp_instrument_field(const rsp_instrument_field& from);

  inline rsp_instrument_field& operator=(const rsp_instrument_field& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rsp_instrument_field(rsp_instrument_field&& from) noexcept
    : rsp_instrument_field() {
    *this = ::std::move(from);
  }

  inline rsp_instrument_field& operator=(rsp_instrument_field&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rsp_instrument_field& default_instance();

  static inline const rsp_instrument_field* internal_default_instance() {
    return reinterpret_cast<const rsp_instrument_field*>(
               &_rsp_instrument_field_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(rsp_instrument_field* other);
  friend void swap(rsp_instrument_field& a, rsp_instrument_field& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rsp_instrument_field* New() const PROTOBUF_FINAL { return New(NULL); }

  rsp_instrument_field* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rsp_instrument_field& from);
  void MergeFrom(const rsp_instrument_field& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rsp_instrument_field* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .risk.rsp_head_info header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::risk::rsp_head_info& header() const;
  ::risk::rsp_head_info* mutable_header();
  ::risk::rsp_head_info* release_header();
  void set_allocated_header(::risk::rsp_head_info* header);

  // .risk.instrument_info field = 2;
  bool has_field() const;
  void clear_field();
  static const int kFieldFieldNumber = 2;
  const ::risk::instrument_info& field() const;
  ::risk::instrument_info* mutable_field();
  ::risk::instrument_info* release_field();
  void set_allocated_field(::risk::instrument_info* field);

  // @@protoc_insertion_point(class_scope:risk.rsp_instrument_field)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::risk::rsp_head_info* header_;
  ::risk::instrument_info* field_;
  mutable int _cached_size_;
  friend struct protobuf_riskapi_5fdata_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rtn_quote_field : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.rtn_quote_field) */ {
 public:
  rtn_quote_field();
  virtual ~rtn_quote_field();

  rtn_quote_field(const rtn_quote_field& from);

  inline rtn_quote_field& operator=(const rtn_quote_field& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rtn_quote_field(rtn_quote_field&& from) noexcept
    : rtn_quote_field() {
    *this = ::std::move(from);
  }

  inline rtn_quote_field& operator=(rtn_quote_field&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rtn_quote_field& default_instance();

  static inline const rtn_quote_field* internal_default_instance() {
    return reinterpret_cast<const rtn_quote_field*>(
               &_rtn_quote_field_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(rtn_quote_field* other);
  friend void swap(rtn_quote_field& a, rtn_quote_field& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rtn_quote_field* New() const PROTOBUF_FINAL { return New(NULL); }

  rtn_quote_field* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rtn_quote_field& from);
  void MergeFrom(const rtn_quote_field& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rtn_quote_field* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .risk.quote_gateway_market_field field = 1;
  bool has_field() const;
  void clear_field();
  static const int kFieldFieldNumber = 1;
  const ::risk::quote_gateway_market_field& field() const;
  ::risk::quote_gateway_market_field* mutable_field();
  ::risk::quote_gateway_market_field* release_field();
  void set_allocated_field(::risk::quote_gateway_market_field* field);

  // @@protoc_insertion_point(class_scope:risk.rtn_quote_field)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::risk::quote_gateway_market_field* field_;
  mutable int _cached_size_;
  friend struct protobuf_riskapi_5fdata_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rsp_position_field : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.rsp_position_field) */ {
 public:
  rsp_position_field();
  virtual ~rsp_position_field();

  rsp_position_field(const rsp_position_field& from);

  inline rsp_position_field& operator=(const rsp_position_field& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rsp_position_field(rsp_position_field&& from) noexcept
    : rsp_position_field() {
    *this = ::std::move(from);
  }

  inline rsp_position_field& operator=(rsp_position_field&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rsp_position_field& default_instance();

  static inline const rsp_position_field* internal_default_instance() {
    return reinterpret_cast<const rsp_position_field*>(
               &_rsp_position_field_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(rsp_position_field* other);
  friend void swap(rsp_position_field& a, rsp_position_field& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rsp_position_field* New() const PROTOBUF_FINAL { return New(NULL); }

  rsp_position_field* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rsp_position_field& from);
  void MergeFrom(const rsp_position_field& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rsp_position_field* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .risk.rsp_head_info header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::risk::rsp_head_info& header() const;
  ::risk::rsp_head_info* mutable_header();
  ::risk::rsp_head_info* release_header();
  void set_allocated_header(::risk::rsp_head_info* header);

  // .risk.trade_gateway_position_field field = 2;
  bool has_field() const;
  void clear_field();
  static const int kFieldFieldNumber = 2;
  const ::risk::trade_gateway_position_field& field() const;
  ::risk::trade_gateway_position_field* mutable_field();
  ::risk::trade_gateway_position_field* release_field();
  void set_allocated_field(::risk::trade_gateway_position_field* field);

  // double trypositionprofit = 3;
  void clear_trypositionprofit();
  static const int kTrypositionprofitFieldNumber = 3;
  double trypositionprofit() const;
  void set_trypositionprofit(double value);

  // @@protoc_insertion_point(class_scope:risk.rsp_position_field)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::risk::rsp_head_info* header_;
  ::risk::trade_gateway_position_field* field_;
  double trypositionprofit_;
  mutable int _cached_size_;
  friend struct protobuf_riskapi_5fdata_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rtn_position_field : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.rtn_position_field) */ {
 public:
  rtn_position_field();
  virtual ~rtn_position_field();

  rtn_position_field(const rtn_position_field& from);

  inline rtn_position_field& operator=(const rtn_position_field& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rtn_position_field(rtn_position_field&& from) noexcept
    : rtn_position_field() {
    *this = ::std::move(from);
  }

  inline rtn_position_field& operator=(rtn_position_field&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rtn_position_field& default_instance();

  static inline const rtn_position_field* internal_default_instance() {
    return reinterpret_cast<const rtn_position_field*>(
               &_rtn_position_field_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(rtn_position_field* other);
  friend void swap(rtn_position_field& a, rtn_position_field& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rtn_position_field* New() const PROTOBUF_FINAL { return New(NULL); }

  rtn_position_field* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rtn_position_field& from);
  void MergeFrom(const rtn_position_field& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rtn_position_field* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .risk.trade_gateway_position_field field = 1;
  bool has_field() const;
  void clear_field();
  static const int kFieldFieldNumber = 1;
  const ::risk::trade_gateway_position_field& field() const;
  ::risk::trade_gateway_position_field* mutable_field();
  ::risk::trade_gateway_position_field* release_field();
  void set_allocated_field(::risk::trade_gateway_position_field* field);

  // double trypositionprofit = 2;
  void clear_trypositionprofit();
  static const int kTrypositionprofitFieldNumber = 2;
  double trypositionprofit() const;
  void set_trypositionprofit(double value);

  // @@protoc_insertion_point(class_scope:risk.rtn_position_field)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::risk::trade_gateway_position_field* field_;
  double trypositionprofit_;
  mutable int _cached_size_;
  friend struct protobuf_riskapi_5fdata_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rsp_trade_field : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.rsp_trade_field) */ {
 public:
  rsp_trade_field();
  virtual ~rsp_trade_field();

  rsp_trade_field(const rsp_trade_field& from);

  inline rsp_trade_field& operator=(const rsp_trade_field& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rsp_trade_field(rsp_trade_field&& from) noexcept
    : rsp_trade_field() {
    *this = ::std::move(from);
  }

  inline rsp_trade_field& operator=(rsp_trade_field&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rsp_trade_field& default_instance();

  static inline const rsp_trade_field* internal_default_instance() {
    return reinterpret_cast<const rsp_trade_field*>(
               &_rsp_trade_field_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(rsp_trade_field* other);
  friend void swap(rsp_trade_field& a, rsp_trade_field& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rsp_trade_field* New() const PROTOBUF_FINAL { return New(NULL); }

  rsp_trade_field* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rsp_trade_field& from);
  void MergeFrom(const rsp_trade_field& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rsp_trade_field* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .risk.rsp_head_info header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::risk::rsp_head_info& header() const;
  ::risk::rsp_head_info* mutable_header();
  ::risk::rsp_head_info* release_header();
  void set_allocated_header(::risk::rsp_head_info* header);

  // .risk.trade_gateway_trade_field field = 2;
  bool has_field() const;
  void clear_field();
  static const int kFieldFieldNumber = 2;
  const ::risk::trade_gateway_trade_field& field() const;
  ::risk::trade_gateway_trade_field* mutable_field();
  ::risk::trade_gateway_trade_field* release_field();
  void set_allocated_field(::risk::trade_gateway_trade_field* field);

  // @@protoc_insertion_point(class_scope:risk.rsp_trade_field)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::risk::rsp_head_info* header_;
  ::risk::trade_gateway_trade_field* field_;
  mutable int _cached_size_;
  friend struct protobuf_riskapi_5fdata_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rsp_order_field : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.rsp_order_field) */ {
 public:
  rsp_order_field();
  virtual ~rsp_order_field();

  rsp_order_field(const rsp_order_field& from);

  inline rsp_order_field& operator=(const rsp_order_field& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rsp_order_field(rsp_order_field&& from) noexcept
    : rsp_order_field() {
    *this = ::std::move(from);
  }

  inline rsp_order_field& operator=(rsp_order_field&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rsp_order_field& default_instance();

  static inline const rsp_order_field* internal_default_instance() {
    return reinterpret_cast<const rsp_order_field*>(
               &_rsp_order_field_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(rsp_order_field* other);
  friend void swap(rsp_order_field& a, rsp_order_field& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rsp_order_field* New() const PROTOBUF_FINAL { return New(NULL); }

  rsp_order_field* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rsp_order_field& from);
  void MergeFrom(const rsp_order_field& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rsp_order_field* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .risk.rsp_head_info header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::risk::rsp_head_info& header() const;
  ::risk::rsp_head_info* mutable_header();
  ::risk::rsp_head_info* release_header();
  void set_allocated_header(::risk::rsp_head_info* header);

  // .risk.trade_gateway_order_field field = 2;
  bool has_field() const;
  void clear_field();
  static const int kFieldFieldNumber = 2;
  const ::risk::trade_gateway_order_field& field() const;
  ::risk::trade_gateway_order_field* mutable_field();
  ::risk::trade_gateway_order_field* release_field();
  void set_allocated_field(::risk::trade_gateway_order_field* field);

  // @@protoc_insertion_point(class_scope:risk.rsp_order_field)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::risk::rsp_head_info* header_;
  ::risk::trade_gateway_order_field* field_;
  mutable int _cached_size_;
  friend struct protobuf_riskapi_5fdata_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rtn_trade_field : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.rtn_trade_field) */ {
 public:
  rtn_trade_field();
  virtual ~rtn_trade_field();

  rtn_trade_field(const rtn_trade_field& from);

  inline rtn_trade_field& operator=(const rtn_trade_field& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rtn_trade_field(rtn_trade_field&& from) noexcept
    : rtn_trade_field() {
    *this = ::std::move(from);
  }

  inline rtn_trade_field& operator=(rtn_trade_field&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rtn_trade_field& default_instance();

  static inline const rtn_trade_field* internal_default_instance() {
    return reinterpret_cast<const rtn_trade_field*>(
               &_rtn_trade_field_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(rtn_trade_field* other);
  friend void swap(rtn_trade_field& a, rtn_trade_field& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rtn_trade_field* New() const PROTOBUF_FINAL { return New(NULL); }

  rtn_trade_field* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rtn_trade_field& from);
  void MergeFrom(const rtn_trade_field& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rtn_trade_field* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .risk.trade_gateway_trade_field field = 1;
  bool has_field() const;
  void clear_field();
  static const int kFieldFieldNumber = 1;
  const ::risk::trade_gateway_trade_field& field() const;
  ::risk::trade_gateway_trade_field* mutable_field();
  ::risk::trade_gateway_trade_field* release_field();
  void set_allocated_field(::risk::trade_gateway_trade_field* field);

  // @@protoc_insertion_point(class_scope:risk.rtn_trade_field)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::risk::trade_gateway_trade_field* field_;
  mutable int _cached_size_;
  friend struct protobuf_riskapi_5fdata_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rtn_order_field : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.rtn_order_field) */ {
 public:
  rtn_order_field();
  virtual ~rtn_order_field();

  rtn_order_field(const rtn_order_field& from);

  inline rtn_order_field& operator=(const rtn_order_field& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rtn_order_field(rtn_order_field&& from) noexcept
    : rtn_order_field() {
    *this = ::std::move(from);
  }

  inline rtn_order_field& operator=(rtn_order_field&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rtn_order_field& default_instance();

  static inline const rtn_order_field* internal_default_instance() {
    return reinterpret_cast<const rtn_order_field*>(
               &_rtn_order_field_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(rtn_order_field* other);
  friend void swap(rtn_order_field& a, rtn_order_field& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rtn_order_field* New() const PROTOBUF_FINAL { return New(NULL); }

  rtn_order_field* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rtn_order_field& from);
  void MergeFrom(const rtn_order_field& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rtn_order_field* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .risk.trade_gateway_order_field field = 1;
  bool has_field() const;
  void clear_field();
  static const int kFieldFieldNumber = 1;
  const ::risk::trade_gateway_order_field& field() const;
  ::risk::trade_gateway_order_field* mutable_field();
  ::risk::trade_gateway_order_field* release_field();
  void set_allocated_field(::risk::trade_gateway_order_field* field);

  // @@protoc_insertion_point(class_scope:risk.rtn_order_field)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::risk::trade_gateway_order_field* field_;
  mutable int _cached_size_;
  friend struct protobuf_riskapi_5fdata_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rsp_sync_account_field : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.rsp_sync_account_field) */ {
 public:
  rsp_sync_account_field();
  virtual ~rsp_sync_account_field();

  rsp_sync_account_field(const rsp_sync_account_field& from);

  inline rsp_sync_account_field& operator=(const rsp_sync_account_field& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rsp_sync_account_field(rsp_sync_account_field&& from) noexcept
    : rsp_sync_account_field() {
    *this = ::std::move(from);
  }

  inline rsp_sync_account_field& operator=(rsp_sync_account_field&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rsp_sync_account_field& default_instance();

  static inline const rsp_sync_account_field* internal_default_instance() {
    return reinterpret_cast<const rsp_sync_account_field*>(
               &_rsp_sync_account_field_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(rsp_sync_account_field* other);
  friend void swap(rsp_sync_account_field& a, rsp_sync_account_field& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rsp_sync_account_field* New() const PROTOBUF_FINAL { return New(NULL); }

  rsp_sync_account_field* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rsp_sync_account_field& from);
  void MergeFrom(const rsp_sync_account_field& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rsp_sync_account_field* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .risk.rsp_head_info header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::risk::rsp_head_info& header() const;
  ::risk::rsp_head_info* mutable_header();
  ::risk::rsp_head_info* release_header();
  void set_allocated_header(::risk::rsp_head_info* header);

  // .risk.trade_gateway_sync_account_field field = 2;
  bool has_field() const;
  void clear_field();
  static const int kFieldFieldNumber = 2;
  const ::risk::trade_gateway_sync_account_field& field() const;
  ::risk::trade_gateway_sync_account_field* mutable_field();
  ::risk::trade_gateway_sync_account_field* release_field();
  void set_allocated_field(::risk::trade_gateway_sync_account_field* field);

  // @@protoc_insertion_point(class_scope:risk.rsp_sync_account_field)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::risk::rsp_head_info* header_;
  ::risk::trade_gateway_sync_account_field* field_;
  mutable int _cached_size_;
  friend struct protobuf_riskapi_5fdata_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rtn_sync_account_field : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.rtn_sync_account_field) */ {
 public:
  rtn_sync_account_field();
  virtual ~rtn_sync_account_field();

  rtn_sync_account_field(const rtn_sync_account_field& from);

  inline rtn_sync_account_field& operator=(const rtn_sync_account_field& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rtn_sync_account_field(rtn_sync_account_field&& from) noexcept
    : rtn_sync_account_field() {
    *this = ::std::move(from);
  }

  inline rtn_sync_account_field& operator=(rtn_sync_account_field&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rtn_sync_account_field& default_instance();

  static inline const rtn_sync_account_field* internal_default_instance() {
    return reinterpret_cast<const rtn_sync_account_field*>(
               &_rtn_sync_account_field_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(rtn_sync_account_field* other);
  friend void swap(rtn_sync_account_field& a, rtn_sync_account_field& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rtn_sync_account_field* New() const PROTOBUF_FINAL { return New(NULL); }

  rtn_sync_account_field* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rtn_sync_account_field& from);
  void MergeFrom(const rtn_sync_account_field& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rtn_sync_account_field* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .risk.trade_gateway_sync_account_field field = 1;
  bool has_field() const;
  void clear_field();
  static const int kFieldFieldNumber = 1;
  const ::risk::trade_gateway_sync_account_field& field() const;
  ::risk::trade_gateway_sync_account_field* mutable_field();
  ::risk::trade_gateway_sync_account_field* release_field();
  void set_allocated_field(::risk::trade_gateway_sync_account_field* field);

  // @@protoc_insertion_point(class_scope:risk.rtn_sync_account_field)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::risk::trade_gateway_sync_account_field* field_;
  mutable int _cached_size_;
  friend struct protobuf_riskapi_5fdata_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class shfe_margin_field : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.shfe_margin_field) */ {
 public:
  shfe_margin_field();
  virtual ~shfe_margin_field();

  shfe_margin_field(const shfe_margin_field& from);

  inline shfe_margin_field& operator=(const shfe_margin_field& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  shfe_margin_field(shfe_margin_field&& from) noexcept
    : shfe_margin_field() {
    *this = ::std::move(from);
  }

  inline shfe_margin_field& operator=(shfe_margin_field&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const shfe_margin_field& default_instance();

  static inline const shfe_margin_field* internal_default_instance() {
    return reinterpret_cast<const shfe_margin_field*>(
               &_shfe_margin_field_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(shfe_margin_field* other);
  friend void swap(shfe_margin_field& a, shfe_margin_field& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline shfe_margin_field* New() const PROTOBUF_FINAL { return New(NULL); }

  shfe_margin_field* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const shfe_margin_field& from);
  void MergeFrom(const shfe_margin_field& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(shfe_margin_field* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double pre_favorable = 1;
  void clear_pre_favorable();
  static const int kPreFavorableFieldNumber = 1;
  double pre_favorable() const;
  void set_pre_favorable(double value);

  // double big_side_favorable = 2;
  void clear_big_side_favorable();
  static const int kBigSideFavorableFieldNumber = 2;
  double big_side_favorable() const;
  void set_big_side_favorable(double value);

  // @@protoc_insertion_point(class_scope:risk.shfe_margin_field)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double pre_favorable_;
  double big_side_favorable_;
  mutable int _cached_size_;
  friend struct protobuf_riskapi_5fdata_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class cffex_margin_field : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.cffex_margin_field) */ {
 public:
  cffex_margin_field();
  virtual ~cffex_margin_field();

  cffex_margin_field(const cffex_margin_field& from);

  inline cffex_margin_field& operator=(const cffex_margin_field& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  cffex_margin_field(cffex_margin_field&& from) noexcept
    : cffex_margin_field() {
    *this = ::std::move(from);
  }

  inline cffex_margin_field& operator=(cffex_margin_field&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const cffex_margin_field& default_instance();

  static inline const cffex_margin_field* internal_default_instance() {
    return reinterpret_cast<const cffex_margin_field*>(
               &_cffex_margin_field_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(cffex_margin_field* other);
  friend void swap(cffex_margin_field& a, cffex_margin_field& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline cffex_margin_field* New() const PROTOBUF_FINAL { return New(NULL); }

  cffex_margin_field* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const cffex_margin_field& from);
  void MergeFrom(const cffex_margin_field& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(cffex_margin_field* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double pre_favorable = 1;
  void clear_pre_favorable();
  static const int kPreFavorableFieldNumber = 1;
  double pre_favorable() const;
  void set_pre_favorable(double value);

  // double speculation_favorable = 2;
  void clear_speculation_favorable();
  static const int kSpeculationFavorableFieldNumber = 2;
  double speculation_favorable() const;
  void set_speculation_favorable(double value);

  // double hedging_favorable = 3;
  void clear_hedging_favorable();
  static const int kHedgingFavorableFieldNumber = 3;
  double hedging_favorable() const;
  void set_hedging_favorable(double value);

  // double arbitrage_favorable = 4;
  void clear_arbitrage_favorable();
  static const int kArbitrageFavorableFieldNumber = 4;
  double arbitrage_favorable() const;
  void set_arbitrage_favorable(double value);

  // double market_favorable = 5;
  void clear_market_favorable();
  static const int kMarketFavorableFieldNumber = 5;
  double market_favorable() const;
  void set_market_favorable(double value);

  // @@protoc_insertion_point(class_scope:risk.cffex_margin_field)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double pre_favorable_;
  double speculation_favorable_;
  double hedging_favorable_;
  double arbitrage_favorable_;
  double market_favorable_;
  mutable int _cached_size_;
  friend struct protobuf_riskapi_5fdata_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class dce_margin_field : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.dce_margin_field) */ {
 public:
  dce_margin_field();
  virtual ~dce_margin_field();

  dce_margin_field(const dce_margin_field& from);

  inline dce_margin_field& operator=(const dce_margin_field& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  dce_margin_field(dce_margin_field&& from) noexcept
    : dce_margin_field() {
    *this = ::std::move(from);
  }

  inline dce_margin_field& operator=(dce_margin_field&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const dce_margin_field& default_instance();

  static inline const dce_margin_field* internal_default_instance() {
    return reinterpret_cast<const dce_margin_field*>(
               &_dce_margin_field_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(dce_margin_field* other);
  friend void swap(dce_margin_field& a, dce_margin_field& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline dce_margin_field* New() const PROTOBUF_FINAL { return New(NULL); }

  dce_margin_field* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const dce_margin_field& from);
  void MergeFrom(const dce_margin_field& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(dce_margin_field* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double pre_favorable = 1;
  void clear_pre_favorable();
  static const int kPreFavorableFieldNumber = 1;
  double pre_favorable() const;
  void set_pre_favorable(double value);

  // double sp_favorable = 2;
  void clear_sp_favorable();
  static const int kSpFavorableFieldNumber = 2;
  double sp_favorable() const;
  void set_sp_favorable(double value);

  // double spc_favorable = 3;
  void clear_spc_favorable();
  static const int kSpcFavorableFieldNumber = 3;
  double spc_favorable() const;
  void set_spc_favorable(double value);

  // double locked_favorable = 4;
  void clear_locked_favorable();
  static const int kLockedFavorableFieldNumber = 4;
  double locked_favorable() const;
  void set_locked_favorable(double value);

  // @@protoc_insertion_point(class_scope:risk.dce_margin_field)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double pre_favorable_;
  double sp_favorable_;
  double spc_favorable_;
  double locked_favorable_;
  mutable int _cached_size_;
  friend struct protobuf_riskapi_5fdata_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class czce_margin_field : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.czce_margin_field) */ {
 public:
  czce_margin_field();
  virtual ~czce_margin_field();

  czce_margin_field(const czce_margin_field& from);

  inline czce_margin_field& operator=(const czce_margin_field& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  czce_margin_field(czce_margin_field&& from) noexcept
    : czce_margin_field() {
    *this = ::std::move(from);
  }

  inline czce_margin_field& operator=(czce_margin_field&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const czce_margin_field& default_instance();

  static inline const czce_margin_field* internal_default_instance() {
    return reinterpret_cast<const czce_margin_field*>(
               &_czce_margin_field_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(czce_margin_field* other);
  friend void swap(czce_margin_field& a, czce_margin_field& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline czce_margin_field* New() const PROTOBUF_FINAL { return New(NULL); }

  czce_margin_field* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const czce_margin_field& from);
  void MergeFrom(const czce_margin_field& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(czce_margin_field* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double pre_favorable = 1;
  void clear_pre_favorable();
  static const int kPreFavorableFieldNumber = 1;
  double pre_favorable() const;
  void set_pre_favorable(double value);

  // double spd_favorable = 2;
  void clear_spd_favorable();
  static const int kSpdFavorableFieldNumber = 2;
  double spd_favorable() const;
  void set_spd_favorable(double value);

  // double ips_favorable = 3;
  void clear_ips_favorable();
  static const int kIpsFavorableFieldNumber = 3;
  double ips_favorable() const;
  void set_ips_favorable(double value);

  // double prt_favorable = 4;
  void clear_prt_favorable();
  static const int kPrtFavorableFieldNumber = 4;
  double prt_favorable() const;
  void set_prt_favorable(double value);

  // double std_favorable = 5;
  void clear_std_favorable();
  static const int kStdFavorableFieldNumber = 5;
  double std_favorable() const;
  void set_std_favorable(double value);

  // double stg_favorable = 6;
  void clear_stg_favorable();
  static const int kStgFavorableFieldNumber = 6;
  double stg_favorable() const;
  void set_stg_favorable(double value);

  // double zprt_favorable = 7;
  void clear_zprt_favorable();
  static const int kZprtFavorableFieldNumber = 7;
  double zprt_favorable() const;
  void set_zprt_favorable(double value);

  // double locked_favorable = 8;
  void clear_locked_favorable();
  static const int kLockedFavorableFieldNumber = 8;
  double locked_favorable() const;
  void set_locked_favorable(double value);

  // @@protoc_insertion_point(class_scope:risk.czce_margin_field)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double pre_favorable_;
  double spd_favorable_;
  double ips_favorable_;
  double prt_favorable_;
  double std_favorable_;
  double stg_favorable_;
  double zprt_favorable_;
  double locked_favorable_;
  mutable int _cached_size_;
  friend struct protobuf_riskapi_5fdata_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ine_margin_field : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.ine_margin_field) */ {
 public:
  ine_margin_field();
  virtual ~ine_margin_field();

  ine_margin_field(const ine_margin_field& from);

  inline ine_margin_field& operator=(const ine_margin_field& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ine_margin_field(ine_margin_field&& from) noexcept
    : ine_margin_field() {
    *this = ::std::move(from);
  }

  inline ine_margin_field& operator=(ine_margin_field&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ine_margin_field& default_instance();

  static inline const ine_margin_field* internal_default_instance() {
    return reinterpret_cast<const ine_margin_field*>(
               &_ine_margin_field_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(ine_margin_field* other);
  friend void swap(ine_margin_field& a, ine_margin_field& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ine_margin_field* New() const PROTOBUF_FINAL { return New(NULL); }

  ine_margin_field* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ine_margin_field& from);
  void MergeFrom(const ine_margin_field& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ine_margin_field* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double pre_favorable = 1;
  void clear_pre_favorable();
  static const int kPreFavorableFieldNumber = 1;
  double pre_favorable() const;
  void set_pre_favorable(double value);

  // double big_side_favorable = 2;
  void clear_big_side_favorable();
  static const int kBigSideFavorableFieldNumber = 2;
  double big_side_favorable() const;
  void set_big_side_favorable(double value);

  // @@protoc_insertion_point(class_scope:risk.ine_margin_field)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double pre_favorable_;
  double big_side_favorable_;
  mutable int _cached_size_;
  friend struct protobuf_riskapi_5fdata_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class delivery_margin_field : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.delivery_margin_field) */ {
 public:
  delivery_margin_field();
  virtual ~delivery_margin_field();

  delivery_margin_field(const delivery_margin_field& from);

  inline delivery_margin_field& operator=(const delivery_margin_field& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  delivery_margin_field(delivery_margin_field&& from) noexcept
    : delivery_margin_field() {
    *this = ::std::move(from);
  }

  inline delivery_margin_field& operator=(delivery_margin_field&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const delivery_margin_field& default_instance();

  static inline const delivery_margin_field* internal_default_instance() {
    return reinterpret_cast<const delivery_margin_field*>(
               &_delivery_margin_field_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(delivery_margin_field* other);
  friend void swap(delivery_margin_field& a, delivery_margin_field& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline delivery_margin_field* New() const PROTOBUF_FINAL { return New(NULL); }

  delivery_margin_field* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const delivery_margin_field& from);
  void MergeFrom(const delivery_margin_field& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(delivery_margin_field* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double shfe_margin = 1;
  void clear_shfe_margin();
  static const int kShfeMarginFieldNumber = 1;
  double shfe_margin() const;
  void set_shfe_margin(double value);

  // double cffex_margin = 2;
  void clear_cffex_margin();
  static const int kCffexMarginFieldNumber = 2;
  double cffex_margin() const;
  void set_cffex_margin(double value);

  // double dce_margin = 3;
  void clear_dce_margin();
  static const int kDceMarginFieldNumber = 3;
  double dce_margin() const;
  void set_dce_margin(double value);

  // double czce_margin = 4;
  void clear_czce_margin();
  static const int kCzceMarginFieldNumber = 4;
  double czce_margin() const;
  void set_czce_margin(double value);

  // double ine_margin = 5;
  void clear_ine_margin();
  static const int kIneMarginFieldNumber = 5;
  double ine_margin() const;
  void set_ine_margin(double value);

  // @@protoc_insertion_point(class_scope:risk.delivery_margin_field)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double shfe_margin_;
  double cffex_margin_;
  double dce_margin_;
  double czce_margin_;
  double ine_margin_;
  mutable int _cached_size_;
  friend struct protobuf_riskapi_5fdata_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rtn_margin_field : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.rtn_margin_field) */ {
 public:
  rtn_margin_field();
  virtual ~rtn_margin_field();

  rtn_margin_field(const rtn_margin_field& from);

  inline rtn_margin_field& operator=(const rtn_margin_field& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rtn_margin_field(rtn_margin_field&& from) noexcept
    : rtn_margin_field() {
    *this = ::std::move(from);
  }

  inline rtn_margin_field& operator=(rtn_margin_field&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rtn_margin_field& default_instance();

  static inline const rtn_margin_field* internal_default_instance() {
    return reinterpret_cast<const rtn_margin_field*>(
               &_rtn_margin_field_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(rtn_margin_field* other);
  friend void swap(rtn_margin_field& a, rtn_margin_field& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rtn_margin_field* New() const PROTOBUF_FINAL { return New(NULL); }

  rtn_margin_field* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rtn_margin_field& from);
  void MergeFrom(const rtn_margin_field& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rtn_margin_field* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string investor = 2;
  void clear_investor();
  static const int kInvestorFieldNumber = 2;
  const ::std::string& investor() const;
  void set_investor(const ::std::string& value);
  #if LANG_CXX11
  void set_investor(::std::string&& value);
  #endif
  void set_investor(const char* value);
  void set_investor(const char* value, size_t size);
  ::std::string* mutable_investor();
  ::std::string* release_investor();
  void set_allocated_investor(::std::string* investor);

  // .risk.shfe_margin_field shfe_margin = 3;
  bool has_shfe_margin() const;
  void clear_shfe_margin();
  static const int kShfeMarginFieldNumber = 3;
  const ::risk::shfe_margin_field& shfe_margin() const;
  ::risk::shfe_margin_field* mutable_shfe_margin();
  ::risk::shfe_margin_field* release_shfe_margin();
  void set_allocated_shfe_margin(::risk::shfe_margin_field* shfe_margin);

  // .risk.cffex_margin_field cffex_margin = 4;
  bool has_cffex_margin() const;
  void clear_cffex_margin();
  static const int kCffexMarginFieldNumber = 4;
  const ::risk::cffex_margin_field& cffex_margin() const;
  ::risk::cffex_margin_field* mutable_cffex_margin();
  ::risk::cffex_margin_field* release_cffex_margin();
  void set_allocated_cffex_margin(::risk::cffex_margin_field* cffex_margin);

  // .risk.dce_margin_field dce_margin = 5;
  bool has_dce_margin() const;
  void clear_dce_margin();
  static const int kDceMarginFieldNumber = 5;
  const ::risk::dce_margin_field& dce_margin() const;
  ::risk::dce_margin_field* mutable_dce_margin();
  ::risk::dce_margin_field* release_dce_margin();
  void set_allocated_dce_margin(::risk::dce_margin_field* dce_margin);

  // .risk.czce_margin_field czce_margin = 6;
  bool has_czce_margin() const;
  void clear_czce_margin();
  static const int kCzceMarginFieldNumber = 6;
  const ::risk::czce_margin_field& czce_margin() const;
  ::risk::czce_margin_field* mutable_czce_margin();
  ::risk::czce_margin_field* release_czce_margin();
  void set_allocated_czce_margin(::risk::czce_margin_field* czce_margin);

  // .risk.ine_margin_field ine_margin = 7;
  bool has_ine_margin() const;
  void clear_ine_margin();
  static const int kIneMarginFieldNumber = 7;
  const ::risk::ine_margin_field& ine_margin() const;
  ::risk::ine_margin_field* mutable_ine_margin();
  ::risk::ine_margin_field* release_ine_margin();
  void set_allocated_ine_margin(::risk::ine_margin_field* ine_margin);

  // .risk.delivery_margin_field delivery_margin = 8;
  bool has_delivery_margin() const;
  void clear_delivery_margin();
  static const int kDeliveryMarginFieldNumber = 8;
  const ::risk::delivery_margin_field& delivery_margin() const;
  ::risk::delivery_margin_field* mutable_delivery_margin();
  ::risk::delivery_margin_field* release_delivery_margin();
  void set_allocated_delivery_margin(::risk::delivery_margin_field* delivery_margin);

  // uint32 timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::uint32 timestamp() const;
  void set_timestamp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:risk.rtn_margin_field)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr investor_;
  ::risk::shfe_margin_field* shfe_margin_;
  ::risk::cffex_margin_field* cffex_margin_;
  ::risk::dce_margin_field* dce_margin_;
  ::risk::czce_margin_field* czce_margin_;
  ::risk::ine_margin_field* ine_margin_;
  ::risk::delivery_margin_field* delivery_margin_;
  ::google::protobuf::uint32 timestamp_;
  mutable int _cached_size_;
  friend struct protobuf_riskapi_5fdata_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rsp_margin_field : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.rsp_margin_field) */ {
 public:
  rsp_margin_field();
  virtual ~rsp_margin_field();

  rsp_margin_field(const rsp_margin_field& from);

  inline rsp_margin_field& operator=(const rsp_margin_field& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rsp_margin_field(rsp_margin_field&& from) noexcept
    : rsp_margin_field() {
    *this = ::std::move(from);
  }

  inline rsp_margin_field& operator=(rsp_margin_field&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rsp_margin_field& default_instance();

  static inline const rsp_margin_field* internal_default_instance() {
    return reinterpret_cast<const rsp_margin_field*>(
               &_rsp_margin_field_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(rsp_margin_field* other);
  friend void swap(rsp_margin_field& a, rsp_margin_field& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rsp_margin_field* New() const PROTOBUF_FINAL { return New(NULL); }

  rsp_margin_field* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rsp_margin_field& from);
  void MergeFrom(const rsp_margin_field& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rsp_margin_field* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .risk.rsp_head_info header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::risk::rsp_head_info& header() const;
  ::risk::rsp_head_info* mutable_header();
  ::risk::rsp_head_info* release_header();
  void set_allocated_header(::risk::rsp_head_info* header);

  // .risk.rtn_margin_field field = 2;
  bool has_field() const;
  void clear_field();
  static const int kFieldFieldNumber = 2;
  const ::risk::rtn_margin_field& field() const;
  ::risk::rtn_margin_field* mutable_field();
  ::risk::rtn_margin_field* release_field();
  void set_allocated_field(::risk::rtn_margin_field* field);

  // @@protoc_insertion_point(class_scope:risk.rsp_margin_field)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::risk::rsp_head_info* header_;
  ::risk::rtn_margin_field* field_;
  mutable int _cached_size_;
  friend struct protobuf_riskapi_5fdata_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rsp_risker_investor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.rsp_risker_investor) */ {
 public:
  rsp_risker_investor();
  virtual ~rsp_risker_investor();

  rsp_risker_investor(const rsp_risker_investor& from);

  inline rsp_risker_investor& operator=(const rsp_risker_investor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rsp_risker_investor(rsp_risker_investor&& from) noexcept
    : rsp_risker_investor() {
    *this = ::std::move(from);
  }

  inline rsp_risker_investor& operator=(rsp_risker_investor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rsp_risker_investor& default_instance();

  static inline const rsp_risker_investor* internal_default_instance() {
    return reinterpret_cast<const rsp_risker_investor*>(
               &_rsp_risker_investor_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(rsp_risker_investor* other);
  friend void swap(rsp_risker_investor& a, rsp_risker_investor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rsp_risker_investor* New() const PROTOBUF_FINAL { return New(NULL); }

  rsp_risker_investor* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rsp_risker_investor& from);
  void MergeFrom(const rsp_risker_investor& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rsp_risker_investor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string investorid = 3;
  void clear_investorid();
  static const int kInvestoridFieldNumber = 3;
  const ::std::string& investorid() const;
  void set_investorid(const ::std::string& value);
  #if LANG_CXX11
  void set_investorid(::std::string&& value);
  #endif
  void set_investorid(const char* value);
  void set_investorid(const char* value, size_t size);
  ::std::string* mutable_investorid();
  ::std::string* release_investorid();
  void set_allocated_investorid(::std::string* investorid);

  // .risk.rsp_head_info header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::risk::rsp_head_info& header() const;
  ::risk::rsp_head_info* mutable_header();
  ::risk::rsp_head_info* release_header();
  void set_allocated_header(::risk::rsp_head_info* header);

  // int32 riskgroupid = 2;
  void clear_riskgroupid();
  static const int kRiskgroupidFieldNumber = 2;
  ::google::protobuf::int32 riskgroupid() const;
  void set_riskgroupid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:risk.rsp_risker_investor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr investorid_;
  ::risk::rsp_head_info* header_;
  ::google::protobuf::int32 riskgroupid_;
  mutable int _cached_size_;
  friend struct protobuf_riskapi_5fdata_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rsp_groups : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.rsp_groups) */ {
 public:
  rsp_groups();
  virtual ~rsp_groups();

  rsp_groups(const rsp_groups& from);

  inline rsp_groups& operator=(const rsp_groups& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rsp_groups(rsp_groups&& from) noexcept
    : rsp_groups() {
    *this = ::std::move(from);
  }

  inline rsp_groups& operator=(rsp_groups&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rsp_groups& default_instance();

  static inline const rsp_groups* internal_default_instance() {
    return reinterpret_cast<const rsp_groups*>(
               &_rsp_groups_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(rsp_groups* other);
  friend void swap(rsp_groups& a, rsp_groups& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rsp_groups* New() const PROTOBUF_FINAL { return New(NULL); }

  rsp_groups* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rsp_groups& from);
  void MergeFrom(const rsp_groups& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rsp_groups* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .risk.sys_group infos = 2;
  int infos_size() const;
  void clear_infos();
  static const int kInfosFieldNumber = 2;
  const ::risk::sys_group& infos(int index) const;
  ::risk::sys_group* mutable_infos(int index);
  ::risk::sys_group* add_infos();
  ::google::protobuf::RepeatedPtrField< ::risk::sys_group >*
      mutable_infos();
  const ::google::protobuf::RepeatedPtrField< ::risk::sys_group >&
      infos() const;

  // .risk.rsp_head_info header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::risk::rsp_head_info& header() const;
  ::risk::rsp_head_info* mutable_header();
  ::risk::rsp_head_info* release_header();
  void set_allocated_header(::risk::rsp_head_info* header);

  // @@protoc_insertion_point(class_scope:risk.rsp_groups)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::risk::sys_group > infos_;
  ::risk::rsp_head_info* header_;
  mutable int _cached_size_;
  friend struct protobuf_riskapi_5fdata_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rsp_action_info : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.rsp_action_info) */ {
 public:
  rsp_action_info();
  virtual ~rsp_action_info();

  rsp_action_info(const rsp_action_info& from);

  inline rsp_action_info& operator=(const rsp_action_info& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rsp_action_info(rsp_action_info&& from) noexcept
    : rsp_action_info() {
    *this = ::std::move(from);
  }

  inline rsp_action_info& operator=(rsp_action_info&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rsp_action_info& default_instance();

  static inline const rsp_action_info* internal_default_instance() {
    return reinterpret_cast<const rsp_action_info*>(
               &_rsp_action_info_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(rsp_action_info* other);
  friend void swap(rsp_action_info& a, rsp_action_info& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rsp_action_info* New() const PROTOBUF_FINAL { return New(NULL); }

  rsp_action_info* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rsp_action_info& from);
  void MergeFrom(const rsp_action_info& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rsp_action_info* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .risk.error_info info = 2;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 2;
  const ::risk::error_info& info() const;
  ::risk::error_info* mutable_info();
  ::risk::error_info* release_info();
  void set_allocated_info(::risk::error_info* info);

  // int32 requestid = 1;
  void clear_requestid();
  static const int kRequestidFieldNumber = 1;
  ::google::protobuf::int32 requestid() const;
  void set_requestid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:risk.rsp_action_info)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::risk::error_info* info_;
  ::google::protobuf::int32 requestid_;
  mutable int _cached_size_;
  friend struct protobuf_riskapi_5fdata_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rtn_change_risker : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.rtn_change_risker) */ {
 public:
  rtn_change_risker();
  virtual ~rtn_change_risker();

  rtn_change_risker(const rtn_change_risker& from);

  inline rtn_change_risker& operator=(const rtn_change_risker& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rtn_change_risker(rtn_change_risker&& from) noexcept
    : rtn_change_risker() {
    *this = ::std::move(from);
  }

  inline rtn_change_risker& operator=(rtn_change_risker&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rtn_change_risker& default_instance();

  static inline const rtn_change_risker* internal_default_instance() {
    return reinterpret_cast<const rtn_change_risker*>(
               &_rtn_change_risker_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void Swap(rtn_change_risker* other);
  friend void swap(rtn_change_risker& a, rtn_change_risker& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rtn_change_risker* New() const PROTOBUF_FINAL { return New(NULL); }

  rtn_change_risker* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rtn_change_risker& from);
  void MergeFrom(const rtn_change_risker& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rtn_change_risker* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string investor = 4;
  int investor_size() const;
  void clear_investor();
  static const int kInvestorFieldNumber = 4;
  const ::std::string& investor(int index) const;
  ::std::string* mutable_investor(int index);
  void set_investor(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_investor(int index, ::std::string&& value);
  #endif
  void set_investor(int index, const char* value);
  void set_investor(int index, const char* value, size_t size);
  ::std::string* add_investor();
  void add_investor(const ::std::string& value);
  #if LANG_CXX11
  void add_investor(::std::string&& value);
  #endif
  void add_investor(const char* value);
  void add_investor(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& investor() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_investor();

  // int32 operatorid = 1;
  void clear_operatorid();
  static const int kOperatoridFieldNumber = 1;
  ::google::protobuf::int32 operatorid() const;
  void set_operatorid(::google::protobuf::int32 value);

  // int32 userid = 2;
  void clear_userid();
  static const int kUseridFieldNumber = 2;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // int32 riskgroupid = 3;
  void clear_riskgroupid();
  static const int kRiskgroupidFieldNumber = 3;
  ::google::protobuf::int32 riskgroupid() const;
  void set_riskgroupid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:risk.rtn_change_risker)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> investor_;
  ::google::protobuf::int32 operatorid_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 riskgroupid_;
  mutable int _cached_size_;
  friend struct protobuf_riskapi_5fdata_5fprotocal_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// error_info

// sint32 errorid = 1;
inline void error_info::clear_errorid() {
  errorid_ = 0;
}
inline ::google::protobuf::int32 error_info::errorid() const {
  // @@protoc_insertion_point(field_get:risk.error_info.errorid)
  return errorid_;
}
inline void error_info::set_errorid(::google::protobuf::int32 value) {
  
  errorid_ = value;
  // @@protoc_insertion_point(field_set:risk.error_info.errorid)
}

// string errormsg = 2;
inline void error_info::clear_errormsg() {
  errormsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& error_info::errormsg() const {
  // @@protoc_insertion_point(field_get:risk.error_info.errormsg)
  return errormsg_.GetNoArena();
}
inline void error_info::set_errormsg(const ::std::string& value) {
  
  errormsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.error_info.errormsg)
}
#if LANG_CXX11
inline void error_info::set_errormsg(::std::string&& value) {
  
  errormsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.error_info.errormsg)
}
#endif
inline void error_info::set_errormsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  errormsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.error_info.errormsg)
}
inline void error_info::set_errormsg(const char* value, size_t size) {
  
  errormsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.error_info.errormsg)
}
inline ::std::string* error_info::mutable_errormsg() {
  
  // @@protoc_insertion_point(field_mutable:risk.error_info.errormsg)
  return errormsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* error_info::release_errormsg() {
  // @@protoc_insertion_point(field_release:risk.error_info.errormsg)
  
  return errormsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void error_info::set_allocated_errormsg(::std::string* errormsg) {
  if (errormsg != NULL) {
    
  } else {
    
  }
  errormsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errormsg);
  // @@protoc_insertion_point(field_set_allocated:risk.error_info.errormsg)
}

// -------------------------------------------------------------------

// rsp_head_info

// int32 requestid = 1;
inline void rsp_head_info::clear_requestid() {
  requestid_ = 0;
}
inline ::google::protobuf::int32 rsp_head_info::requestid() const {
  // @@protoc_insertion_point(field_get:risk.rsp_head_info.requestid)
  return requestid_;
}
inline void rsp_head_info::set_requestid(::google::protobuf::int32 value) {
  
  requestid_ = value;
  // @@protoc_insertion_point(field_set:risk.rsp_head_info.requestid)
}

// .risk.error_info info = 2;
inline bool rsp_head_info::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
inline void rsp_head_info::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
inline const ::risk::error_info& rsp_head_info::info() const {
  const ::risk::error_info* p = info_;
  // @@protoc_insertion_point(field_get:risk.rsp_head_info.info)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::error_info*>(
      &::risk::_error_info_default_instance_);
}
inline ::risk::error_info* rsp_head_info::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::risk::error_info;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_head_info.info)
  return info_;
}
inline ::risk::error_info* rsp_head_info::release_info() {
  // @@protoc_insertion_point(field_release:risk.rsp_head_info.info)
  
  ::risk::error_info* temp = info_;
  info_ = NULL;
  return temp;
}
inline void rsp_head_info::set_allocated_info(::risk::error_info* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_head_info.info)
}

// bool islast = 3;
inline void rsp_head_info::clear_islast() {
  islast_ = false;
}
inline bool rsp_head_info::islast() const {
  // @@protoc_insertion_point(field_get:risk.rsp_head_info.islast)
  return islast_;
}
inline void rsp_head_info::set_islast(bool value) {
  
  islast_ = value;
  // @@protoc_insertion_point(field_set:risk.rsp_head_info.islast)
}

// -------------------------------------------------------------------

// rsp_risker_login

// int32 requestid = 1;
inline void rsp_risker_login::clear_requestid() {
  requestid_ = 0;
}
inline ::google::protobuf::int32 rsp_risker_login::requestid() const {
  // @@protoc_insertion_point(field_get:risk.rsp_risker_login.requestid)
  return requestid_;
}
inline void rsp_risker_login::set_requestid(::google::protobuf::int32 value) {
  
  requestid_ = value;
  // @@protoc_insertion_point(field_set:risk.rsp_risker_login.requestid)
}

// .risk.error_info info = 2;
inline bool rsp_risker_login::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
inline void rsp_risker_login::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
inline const ::risk::error_info& rsp_risker_login::info() const {
  const ::risk::error_info* p = info_;
  // @@protoc_insertion_point(field_get:risk.rsp_risker_login.info)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::error_info*>(
      &::risk::_error_info_default_instance_);
}
inline ::risk::error_info* rsp_risker_login::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::risk::error_info;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_risker_login.info)
  return info_;
}
inline ::risk::error_info* rsp_risker_login::release_info() {
  // @@protoc_insertion_point(field_release:risk.rsp_risker_login.info)
  
  ::risk::error_info* temp = info_;
  info_ = NULL;
  return temp;
}
inline void rsp_risker_login::set_allocated_info(::risk::error_info* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_risker_login.info)
}

// -------------------------------------------------------------------

// rsp_investor_list

// .risk.rsp_head_info header = 1;
inline bool rsp_investor_list::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void rsp_investor_list::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::risk::rsp_head_info& rsp_investor_list::header() const {
  const ::risk::rsp_head_info* p = header_;
  // @@protoc_insertion_point(field_get:risk.rsp_investor_list.header)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::rsp_head_info*>(
      &::risk::_rsp_head_info_default_instance_);
}
inline ::risk::rsp_head_info* rsp_investor_list::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::risk::rsp_head_info;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_investor_list.header)
  return header_;
}
inline ::risk::rsp_head_info* rsp_investor_list::release_header() {
  // @@protoc_insertion_point(field_release:risk.rsp_investor_list.header)
  
  ::risk::rsp_head_info* temp = header_;
  header_ = NULL;
  return temp;
}
inline void rsp_investor_list::set_allocated_header(::risk::rsp_head_info* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_investor_list.header)
}

// string investorid = 2;
inline void rsp_investor_list::clear_investorid() {
  investorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& rsp_investor_list::investorid() const {
  // @@protoc_insertion_point(field_get:risk.rsp_investor_list.investorid)
  return investorid_.GetNoArena();
}
inline void rsp_investor_list::set_investorid(const ::std::string& value) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.rsp_investor_list.investorid)
}
#if LANG_CXX11
inline void rsp_investor_list::set_investorid(::std::string&& value) {
  
  investorid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.rsp_investor_list.investorid)
}
#endif
inline void rsp_investor_list::set_investorid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.rsp_investor_list.investorid)
}
inline void rsp_investor_list::set_investorid(const char* value, size_t size) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.rsp_investor_list.investorid)
}
inline ::std::string* rsp_investor_list::mutable_investorid() {
  
  // @@protoc_insertion_point(field_mutable:risk.rsp_investor_list.investorid)
  return investorid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* rsp_investor_list::release_investorid() {
  // @@protoc_insertion_point(field_release:risk.rsp_investor_list.investorid)
  
  return investorid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void rsp_investor_list::set_allocated_investorid(::std::string* investorid) {
  if (investorid != NULL) {
    
  } else {
    
  }
  investorid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), investorid);
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_investor_list.investorid)
}

// -------------------------------------------------------------------

// instrument_info

// string instrumentid = 1;
inline void instrument_info::clear_instrumentid() {
  instrumentid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& instrument_info::instrumentid() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.instrumentid)
  return instrumentid_.GetNoArena();
}
inline void instrument_info::set_instrumentid(const ::std::string& value) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.instrumentid)
}
#if LANG_CXX11
inline void instrument_info::set_instrumentid(::std::string&& value) {
  
  instrumentid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.instrumentid)
}
#endif
inline void instrument_info::set_instrumentid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.instrumentid)
}
inline void instrument_info::set_instrumentid(const char* value, size_t size) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.instrumentid)
}
inline ::std::string* instrument_info::mutable_instrumentid() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.instrumentid)
  return instrumentid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* instrument_info::release_instrumentid() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.instrumentid)
  
  return instrumentid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void instrument_info::set_allocated_instrumentid(::std::string* instrumentid) {
  if (instrumentid != NULL) {
    
  } else {
    
  }
  instrumentid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrumentid);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.instrumentid)
}

// string exchangeid = 2;
inline void instrument_info::clear_exchangeid() {
  exchangeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& instrument_info::exchangeid() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.exchangeid)
  return exchangeid_.GetNoArena();
}
inline void instrument_info::set_exchangeid(const ::std::string& value) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.exchangeid)
}
#if LANG_CXX11
inline void instrument_info::set_exchangeid(::std::string&& value) {
  
  exchangeid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.exchangeid)
}
#endif
inline void instrument_info::set_exchangeid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.exchangeid)
}
inline void instrument_info::set_exchangeid(const char* value, size_t size) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.exchangeid)
}
inline ::std::string* instrument_info::mutable_exchangeid() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.exchangeid)
  return exchangeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* instrument_info::release_exchangeid() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.exchangeid)
  
  return exchangeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void instrument_info::set_allocated_exchangeid(::std::string* exchangeid) {
  if (exchangeid != NULL) {
    
  } else {
    
  }
  exchangeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchangeid);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.exchangeid)
}

// string instrumentname = 3;
inline void instrument_info::clear_instrumentname() {
  instrumentname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& instrument_info::instrumentname() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.instrumentname)
  return instrumentname_.GetNoArena();
}
inline void instrument_info::set_instrumentname(const ::std::string& value) {
  
  instrumentname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.instrumentname)
}
#if LANG_CXX11
inline void instrument_info::set_instrumentname(::std::string&& value) {
  
  instrumentname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.instrumentname)
}
#endif
inline void instrument_info::set_instrumentname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  instrumentname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.instrumentname)
}
inline void instrument_info::set_instrumentname(const char* value, size_t size) {
  
  instrumentname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.instrumentname)
}
inline ::std::string* instrument_info::mutable_instrumentname() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.instrumentname)
  return instrumentname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* instrument_info::release_instrumentname() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.instrumentname)
  
  return instrumentname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void instrument_info::set_allocated_instrumentname(::std::string* instrumentname) {
  if (instrumentname != NULL) {
    
  } else {
    
  }
  instrumentname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrumentname);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.instrumentname)
}

// string exchangeinstid = 4;
inline void instrument_info::clear_exchangeinstid() {
  exchangeinstid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& instrument_info::exchangeinstid() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.exchangeinstid)
  return exchangeinstid_.GetNoArena();
}
inline void instrument_info::set_exchangeinstid(const ::std::string& value) {
  
  exchangeinstid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.exchangeinstid)
}
#if LANG_CXX11
inline void instrument_info::set_exchangeinstid(::std::string&& value) {
  
  exchangeinstid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.exchangeinstid)
}
#endif
inline void instrument_info::set_exchangeinstid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exchangeinstid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.exchangeinstid)
}
inline void instrument_info::set_exchangeinstid(const char* value, size_t size) {
  
  exchangeinstid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.exchangeinstid)
}
inline ::std::string* instrument_info::mutable_exchangeinstid() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.exchangeinstid)
  return exchangeinstid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* instrument_info::release_exchangeinstid() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.exchangeinstid)
  
  return exchangeinstid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void instrument_info::set_allocated_exchangeinstid(::std::string* exchangeinstid) {
  if (exchangeinstid != NULL) {
    
  } else {
    
  }
  exchangeinstid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchangeinstid);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.exchangeinstid)
}

// string productid = 5;
inline void instrument_info::clear_productid() {
  productid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& instrument_info::productid() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.productid)
  return productid_.GetNoArena();
}
inline void instrument_info::set_productid(const ::std::string& value) {
  
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.productid)
}
#if LANG_CXX11
inline void instrument_info::set_productid(::std::string&& value) {
  
  productid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.productid)
}
#endif
inline void instrument_info::set_productid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.productid)
}
inline void instrument_info::set_productid(const char* value, size_t size) {
  
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.productid)
}
inline ::std::string* instrument_info::mutable_productid() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.productid)
  return productid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* instrument_info::release_productid() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.productid)
  
  return productid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void instrument_info::set_allocated_productid(::std::string* productid) {
  if (productid != NULL) {
    
  } else {
    
  }
  productid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productid);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.productid)
}

// string productclass = 6;
inline void instrument_info::clear_productclass() {
  productclass_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& instrument_info::productclass() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.productclass)
  return productclass_.GetNoArena();
}
inline void instrument_info::set_productclass(const ::std::string& value) {
  
  productclass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.productclass)
}
#if LANG_CXX11
inline void instrument_info::set_productclass(::std::string&& value) {
  
  productclass_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.productclass)
}
#endif
inline void instrument_info::set_productclass(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  productclass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.productclass)
}
inline void instrument_info::set_productclass(const char* value, size_t size) {
  
  productclass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.productclass)
}
inline ::std::string* instrument_info::mutable_productclass() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.productclass)
  return productclass_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* instrument_info::release_productclass() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.productclass)
  
  return productclass_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void instrument_info::set_allocated_productclass(::std::string* productclass) {
  if (productclass != NULL) {
    
  } else {
    
  }
  productclass_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productclass);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.productclass)
}

// int32 deliveryyear = 7;
inline void instrument_info::clear_deliveryyear() {
  deliveryyear_ = 0;
}
inline ::google::protobuf::int32 instrument_info::deliveryyear() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.deliveryyear)
  return deliveryyear_;
}
inline void instrument_info::set_deliveryyear(::google::protobuf::int32 value) {
  
  deliveryyear_ = value;
  // @@protoc_insertion_point(field_set:risk.instrument_info.deliveryyear)
}

// int32 deliverymonth = 8;
inline void instrument_info::clear_deliverymonth() {
  deliverymonth_ = 0;
}
inline ::google::protobuf::int32 instrument_info::deliverymonth() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.deliverymonth)
  return deliverymonth_;
}
inline void instrument_info::set_deliverymonth(::google::protobuf::int32 value) {
  
  deliverymonth_ = value;
  // @@protoc_insertion_point(field_set:risk.instrument_info.deliverymonth)
}

// int32 maxmarketordervolume = 9;
inline void instrument_info::clear_maxmarketordervolume() {
  maxmarketordervolume_ = 0;
}
inline ::google::protobuf::int32 instrument_info::maxmarketordervolume() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.maxmarketordervolume)
  return maxmarketordervolume_;
}
inline void instrument_info::set_maxmarketordervolume(::google::protobuf::int32 value) {
  
  maxmarketordervolume_ = value;
  // @@protoc_insertion_point(field_set:risk.instrument_info.maxmarketordervolume)
}

// int32 minmarketordervolume = 10;
inline void instrument_info::clear_minmarketordervolume() {
  minmarketordervolume_ = 0;
}
inline ::google::protobuf::int32 instrument_info::minmarketordervolume() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.minmarketordervolume)
  return minmarketordervolume_;
}
inline void instrument_info::set_minmarketordervolume(::google::protobuf::int32 value) {
  
  minmarketordervolume_ = value;
  // @@protoc_insertion_point(field_set:risk.instrument_info.minmarketordervolume)
}

// int32 maxlimitordervolume = 11;
inline void instrument_info::clear_maxlimitordervolume() {
  maxlimitordervolume_ = 0;
}
inline ::google::protobuf::int32 instrument_info::maxlimitordervolume() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.maxlimitordervolume)
  return maxlimitordervolume_;
}
inline void instrument_info::set_maxlimitordervolume(::google::protobuf::int32 value) {
  
  maxlimitordervolume_ = value;
  // @@protoc_insertion_point(field_set:risk.instrument_info.maxlimitordervolume)
}

// int32 minlimitordervolume = 12;
inline void instrument_info::clear_minlimitordervolume() {
  minlimitordervolume_ = 0;
}
inline ::google::protobuf::int32 instrument_info::minlimitordervolume() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.minlimitordervolume)
  return minlimitordervolume_;
}
inline void instrument_info::set_minlimitordervolume(::google::protobuf::int32 value) {
  
  minlimitordervolume_ = value;
  // @@protoc_insertion_point(field_set:risk.instrument_info.minlimitordervolume)
}

// int32 volumemultiple = 13;
inline void instrument_info::clear_volumemultiple() {
  volumemultiple_ = 0;
}
inline ::google::protobuf::int32 instrument_info::volumemultiple() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.volumemultiple)
  return volumemultiple_;
}
inline void instrument_info::set_volumemultiple(::google::protobuf::int32 value) {
  
  volumemultiple_ = value;
  // @@protoc_insertion_point(field_set:risk.instrument_info.volumemultiple)
}

// double pricetick = 14;
inline void instrument_info::clear_pricetick() {
  pricetick_ = 0;
}
inline double instrument_info::pricetick() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.pricetick)
  return pricetick_;
}
inline void instrument_info::set_pricetick(double value) {
  
  pricetick_ = value;
  // @@protoc_insertion_point(field_set:risk.instrument_info.pricetick)
}

// string createdate = 15;
inline void instrument_info::clear_createdate() {
  createdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& instrument_info::createdate() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.createdate)
  return createdate_.GetNoArena();
}
inline void instrument_info::set_createdate(const ::std::string& value) {
  
  createdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.createdate)
}
#if LANG_CXX11
inline void instrument_info::set_createdate(::std::string&& value) {
  
  createdate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.createdate)
}
#endif
inline void instrument_info::set_createdate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  createdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.createdate)
}
inline void instrument_info::set_createdate(const char* value, size_t size) {
  
  createdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.createdate)
}
inline ::std::string* instrument_info::mutable_createdate() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.createdate)
  return createdate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* instrument_info::release_createdate() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.createdate)
  
  return createdate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void instrument_info::set_allocated_createdate(::std::string* createdate) {
  if (createdate != NULL) {
    
  } else {
    
  }
  createdate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), createdate);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.createdate)
}

// string opendate = 16;
inline void instrument_info::clear_opendate() {
  opendate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& instrument_info::opendate() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.opendate)
  return opendate_.GetNoArena();
}
inline void instrument_info::set_opendate(const ::std::string& value) {
  
  opendate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.opendate)
}
#if LANG_CXX11
inline void instrument_info::set_opendate(::std::string&& value) {
  
  opendate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.opendate)
}
#endif
inline void instrument_info::set_opendate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  opendate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.opendate)
}
inline void instrument_info::set_opendate(const char* value, size_t size) {
  
  opendate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.opendate)
}
inline ::std::string* instrument_info::mutable_opendate() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.opendate)
  return opendate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* instrument_info::release_opendate() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.opendate)
  
  return opendate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void instrument_info::set_allocated_opendate(::std::string* opendate) {
  if (opendate != NULL) {
    
  } else {
    
  }
  opendate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), opendate);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.opendate)
}

// string expiredate = 17;
inline void instrument_info::clear_expiredate() {
  expiredate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& instrument_info::expiredate() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.expiredate)
  return expiredate_.GetNoArena();
}
inline void instrument_info::set_expiredate(const ::std::string& value) {
  
  expiredate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.expiredate)
}
#if LANG_CXX11
inline void instrument_info::set_expiredate(::std::string&& value) {
  
  expiredate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.expiredate)
}
#endif
inline void instrument_info::set_expiredate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  expiredate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.expiredate)
}
inline void instrument_info::set_expiredate(const char* value, size_t size) {
  
  expiredate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.expiredate)
}
inline ::std::string* instrument_info::mutable_expiredate() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.expiredate)
  return expiredate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* instrument_info::release_expiredate() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.expiredate)
  
  return expiredate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void instrument_info::set_allocated_expiredate(::std::string* expiredate) {
  if (expiredate != NULL) {
    
  } else {
    
  }
  expiredate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), expiredate);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.expiredate)
}

// string startdelivdate = 18;
inline void instrument_info::clear_startdelivdate() {
  startdelivdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& instrument_info::startdelivdate() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.startdelivdate)
  return startdelivdate_.GetNoArena();
}
inline void instrument_info::set_startdelivdate(const ::std::string& value) {
  
  startdelivdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.startdelivdate)
}
#if LANG_CXX11
inline void instrument_info::set_startdelivdate(::std::string&& value) {
  
  startdelivdate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.startdelivdate)
}
#endif
inline void instrument_info::set_startdelivdate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  startdelivdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.startdelivdate)
}
inline void instrument_info::set_startdelivdate(const char* value, size_t size) {
  
  startdelivdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.startdelivdate)
}
inline ::std::string* instrument_info::mutable_startdelivdate() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.startdelivdate)
  return startdelivdate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* instrument_info::release_startdelivdate() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.startdelivdate)
  
  return startdelivdate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void instrument_info::set_allocated_startdelivdate(::std::string* startdelivdate) {
  if (startdelivdate != NULL) {
    
  } else {
    
  }
  startdelivdate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), startdelivdate);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.startdelivdate)
}

// string enddelivdate = 19;
inline void instrument_info::clear_enddelivdate() {
  enddelivdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& instrument_info::enddelivdate() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.enddelivdate)
  return enddelivdate_.GetNoArena();
}
inline void instrument_info::set_enddelivdate(const ::std::string& value) {
  
  enddelivdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.enddelivdate)
}
#if LANG_CXX11
inline void instrument_info::set_enddelivdate(::std::string&& value) {
  
  enddelivdate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.enddelivdate)
}
#endif
inline void instrument_info::set_enddelivdate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  enddelivdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.enddelivdate)
}
inline void instrument_info::set_enddelivdate(const char* value, size_t size) {
  
  enddelivdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.enddelivdate)
}
inline ::std::string* instrument_info::mutable_enddelivdate() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.enddelivdate)
  return enddelivdate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* instrument_info::release_enddelivdate() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.enddelivdate)
  
  return enddelivdate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void instrument_info::set_allocated_enddelivdate(::std::string* enddelivdate) {
  if (enddelivdate != NULL) {
    
  } else {
    
  }
  enddelivdate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), enddelivdate);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.enddelivdate)
}

// string instlifephase = 20;
inline void instrument_info::clear_instlifephase() {
  instlifephase_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& instrument_info::instlifephase() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.instlifephase)
  return instlifephase_.GetNoArena();
}
inline void instrument_info::set_instlifephase(const ::std::string& value) {
  
  instlifephase_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.instlifephase)
}
#if LANG_CXX11
inline void instrument_info::set_instlifephase(::std::string&& value) {
  
  instlifephase_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.instlifephase)
}
#endif
inline void instrument_info::set_instlifephase(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  instlifephase_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.instlifephase)
}
inline void instrument_info::set_instlifephase(const char* value, size_t size) {
  
  instlifephase_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.instlifephase)
}
inline ::std::string* instrument_info::mutable_instlifephase() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.instlifephase)
  return instlifephase_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* instrument_info::release_instlifephase() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.instlifephase)
  
  return instlifephase_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void instrument_info::set_allocated_instlifephase(::std::string* instlifephase) {
  if (instlifephase != NULL) {
    
  } else {
    
  }
  instlifephase_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instlifephase);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.instlifephase)
}

// int32 istrading = 21;
inline void instrument_info::clear_istrading() {
  istrading_ = 0;
}
inline ::google::protobuf::int32 instrument_info::istrading() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.istrading)
  return istrading_;
}
inline void instrument_info::set_istrading(::google::protobuf::int32 value) {
  
  istrading_ = value;
  // @@protoc_insertion_point(field_set:risk.instrument_info.istrading)
}

// string positiontype = 22;
inline void instrument_info::clear_positiontype() {
  positiontype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& instrument_info::positiontype() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.positiontype)
  return positiontype_.GetNoArena();
}
inline void instrument_info::set_positiontype(const ::std::string& value) {
  
  positiontype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.positiontype)
}
#if LANG_CXX11
inline void instrument_info::set_positiontype(::std::string&& value) {
  
  positiontype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.positiontype)
}
#endif
inline void instrument_info::set_positiontype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  positiontype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.positiontype)
}
inline void instrument_info::set_positiontype(const char* value, size_t size) {
  
  positiontype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.positiontype)
}
inline ::std::string* instrument_info::mutable_positiontype() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.positiontype)
  return positiontype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* instrument_info::release_positiontype() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.positiontype)
  
  return positiontype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void instrument_info::set_allocated_positiontype(::std::string* positiontype) {
  if (positiontype != NULL) {
    
  } else {
    
  }
  positiontype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), positiontype);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.positiontype)
}

// string positiondatetype = 23;
inline void instrument_info::clear_positiondatetype() {
  positiondatetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& instrument_info::positiondatetype() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.positiondatetype)
  return positiondatetype_.GetNoArena();
}
inline void instrument_info::set_positiondatetype(const ::std::string& value) {
  
  positiondatetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.positiondatetype)
}
#if LANG_CXX11
inline void instrument_info::set_positiondatetype(::std::string&& value) {
  
  positiondatetype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.positiondatetype)
}
#endif
inline void instrument_info::set_positiondatetype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  positiondatetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.positiondatetype)
}
inline void instrument_info::set_positiondatetype(const char* value, size_t size) {
  
  positiondatetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.positiondatetype)
}
inline ::std::string* instrument_info::mutable_positiondatetype() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.positiondatetype)
  return positiondatetype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* instrument_info::release_positiondatetype() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.positiondatetype)
  
  return positiondatetype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void instrument_info::set_allocated_positiondatetype(::std::string* positiondatetype) {
  if (positiondatetype != NULL) {
    
  } else {
    
  }
  positiondatetype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), positiondatetype);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.positiondatetype)
}

// double longmarginratio = 24;
inline void instrument_info::clear_longmarginratio() {
  longmarginratio_ = 0;
}
inline double instrument_info::longmarginratio() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.longmarginratio)
  return longmarginratio_;
}
inline void instrument_info::set_longmarginratio(double value) {
  
  longmarginratio_ = value;
  // @@protoc_insertion_point(field_set:risk.instrument_info.longmarginratio)
}

// double shortmarginratio = 25;
inline void instrument_info::clear_shortmarginratio() {
  shortmarginratio_ = 0;
}
inline double instrument_info::shortmarginratio() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.shortmarginratio)
  return shortmarginratio_;
}
inline void instrument_info::set_shortmarginratio(double value) {
  
  shortmarginratio_ = value;
  // @@protoc_insertion_point(field_set:risk.instrument_info.shortmarginratio)
}

// string maxmarginsidealgorithm = 26;
inline void instrument_info::clear_maxmarginsidealgorithm() {
  maxmarginsidealgorithm_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& instrument_info::maxmarginsidealgorithm() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.maxmarginsidealgorithm)
  return maxmarginsidealgorithm_.GetNoArena();
}
inline void instrument_info::set_maxmarginsidealgorithm(const ::std::string& value) {
  
  maxmarginsidealgorithm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.maxmarginsidealgorithm)
}
#if LANG_CXX11
inline void instrument_info::set_maxmarginsidealgorithm(::std::string&& value) {
  
  maxmarginsidealgorithm_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.maxmarginsidealgorithm)
}
#endif
inline void instrument_info::set_maxmarginsidealgorithm(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  maxmarginsidealgorithm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.maxmarginsidealgorithm)
}
inline void instrument_info::set_maxmarginsidealgorithm(const char* value, size_t size) {
  
  maxmarginsidealgorithm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.maxmarginsidealgorithm)
}
inline ::std::string* instrument_info::mutable_maxmarginsidealgorithm() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.maxmarginsidealgorithm)
  return maxmarginsidealgorithm_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* instrument_info::release_maxmarginsidealgorithm() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.maxmarginsidealgorithm)
  
  return maxmarginsidealgorithm_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void instrument_info::set_allocated_maxmarginsidealgorithm(::std::string* maxmarginsidealgorithm) {
  if (maxmarginsidealgorithm != NULL) {
    
  } else {
    
  }
  maxmarginsidealgorithm_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), maxmarginsidealgorithm);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.maxmarginsidealgorithm)
}

// string underlyinginstrid = 27;
inline void instrument_info::clear_underlyinginstrid() {
  underlyinginstrid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& instrument_info::underlyinginstrid() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.underlyinginstrid)
  return underlyinginstrid_.GetNoArena();
}
inline void instrument_info::set_underlyinginstrid(const ::std::string& value) {
  
  underlyinginstrid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.underlyinginstrid)
}
#if LANG_CXX11
inline void instrument_info::set_underlyinginstrid(::std::string&& value) {
  
  underlyinginstrid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.underlyinginstrid)
}
#endif
inline void instrument_info::set_underlyinginstrid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  underlyinginstrid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.underlyinginstrid)
}
inline void instrument_info::set_underlyinginstrid(const char* value, size_t size) {
  
  underlyinginstrid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.underlyinginstrid)
}
inline ::std::string* instrument_info::mutable_underlyinginstrid() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.underlyinginstrid)
  return underlyinginstrid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* instrument_info::release_underlyinginstrid() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.underlyinginstrid)
  
  return underlyinginstrid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void instrument_info::set_allocated_underlyinginstrid(::std::string* underlyinginstrid) {
  if (underlyinginstrid != NULL) {
    
  } else {
    
  }
  underlyinginstrid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), underlyinginstrid);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.underlyinginstrid)
}

// double strikeprice = 28;
inline void instrument_info::clear_strikeprice() {
  strikeprice_ = 0;
}
inline double instrument_info::strikeprice() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.strikeprice)
  return strikeprice_;
}
inline void instrument_info::set_strikeprice(double value) {
  
  strikeprice_ = value;
  // @@protoc_insertion_point(field_set:risk.instrument_info.strikeprice)
}

// string optionstype = 29;
inline void instrument_info::clear_optionstype() {
  optionstype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& instrument_info::optionstype() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.optionstype)
  return optionstype_.GetNoArena();
}
inline void instrument_info::set_optionstype(const ::std::string& value) {
  
  optionstype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.optionstype)
}
#if LANG_CXX11
inline void instrument_info::set_optionstype(::std::string&& value) {
  
  optionstype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.optionstype)
}
#endif
inline void instrument_info::set_optionstype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  optionstype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.optionstype)
}
inline void instrument_info::set_optionstype(const char* value, size_t size) {
  
  optionstype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.optionstype)
}
inline ::std::string* instrument_info::mutable_optionstype() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.optionstype)
  return optionstype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* instrument_info::release_optionstype() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.optionstype)
  
  return optionstype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void instrument_info::set_allocated_optionstype(::std::string* optionstype) {
  if (optionstype != NULL) {
    
  } else {
    
  }
  optionstype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), optionstype);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.optionstype)
}

// double underlyingmultiple = 30;
inline void instrument_info::clear_underlyingmultiple() {
  underlyingmultiple_ = 0;
}
inline double instrument_info::underlyingmultiple() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.underlyingmultiple)
  return underlyingmultiple_;
}
inline void instrument_info::set_underlyingmultiple(double value) {
  
  underlyingmultiple_ = value;
  // @@protoc_insertion_point(field_set:risk.instrument_info.underlyingmultiple)
}

// string combinationtype = 31;
inline void instrument_info::clear_combinationtype() {
  combinationtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& instrument_info::combinationtype() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.combinationtype)
  return combinationtype_.GetNoArena();
}
inline void instrument_info::set_combinationtype(const ::std::string& value) {
  
  combinationtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.combinationtype)
}
#if LANG_CXX11
inline void instrument_info::set_combinationtype(::std::string&& value) {
  
  combinationtype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.combinationtype)
}
#endif
inline void instrument_info::set_combinationtype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  combinationtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.combinationtype)
}
inline void instrument_info::set_combinationtype(const char* value, size_t size) {
  
  combinationtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.combinationtype)
}
inline ::std::string* instrument_info::mutable_combinationtype() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.combinationtype)
  return combinationtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* instrument_info::release_combinationtype() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.combinationtype)
  
  return combinationtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void instrument_info::set_allocated_combinationtype(::std::string* combinationtype) {
  if (combinationtype != NULL) {
    
  } else {
    
  }
  combinationtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), combinationtype);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.combinationtype)
}

// string productgroupid = 32;
inline void instrument_info::clear_productgroupid() {
  productgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& instrument_info::productgroupid() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.productgroupid)
  return productgroupid_.GetNoArena();
}
inline void instrument_info::set_productgroupid(const ::std::string& value) {
  
  productgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.productgroupid)
}
#if LANG_CXX11
inline void instrument_info::set_productgroupid(::std::string&& value) {
  
  productgroupid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.productgroupid)
}
#endif
inline void instrument_info::set_productgroupid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  productgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.productgroupid)
}
inline void instrument_info::set_productgroupid(const char* value, size_t size) {
  
  productgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.productgroupid)
}
inline ::std::string* instrument_info::mutable_productgroupid() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.productgroupid)
  return productgroupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* instrument_info::release_productgroupid() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.productgroupid)
  
  return productgroupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void instrument_info::set_allocated_productgroupid(::std::string* productgroupid) {
  if (productgroupid != NULL) {
    
  } else {
    
  }
  productgroupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productgroupid);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.productgroupid)
}

// -------------------------------------------------------------------

// rsp_instrument_field

// .risk.rsp_head_info header = 1;
inline bool rsp_instrument_field::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void rsp_instrument_field::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::risk::rsp_head_info& rsp_instrument_field::header() const {
  const ::risk::rsp_head_info* p = header_;
  // @@protoc_insertion_point(field_get:risk.rsp_instrument_field.header)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::rsp_head_info*>(
      &::risk::_rsp_head_info_default_instance_);
}
inline ::risk::rsp_head_info* rsp_instrument_field::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::risk::rsp_head_info;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_instrument_field.header)
  return header_;
}
inline ::risk::rsp_head_info* rsp_instrument_field::release_header() {
  // @@protoc_insertion_point(field_release:risk.rsp_instrument_field.header)
  
  ::risk::rsp_head_info* temp = header_;
  header_ = NULL;
  return temp;
}
inline void rsp_instrument_field::set_allocated_header(::risk::rsp_head_info* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_instrument_field.header)
}

// .risk.instrument_info field = 2;
inline bool rsp_instrument_field::has_field() const {
  return this != internal_default_instance() && field_ != NULL;
}
inline void rsp_instrument_field::clear_field() {
  if (GetArenaNoVirtual() == NULL && field_ != NULL) delete field_;
  field_ = NULL;
}
inline const ::risk::instrument_info& rsp_instrument_field::field() const {
  const ::risk::instrument_info* p = field_;
  // @@protoc_insertion_point(field_get:risk.rsp_instrument_field.field)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::instrument_info*>(
      &::risk::_instrument_info_default_instance_);
}
inline ::risk::instrument_info* rsp_instrument_field::mutable_field() {
  
  if (field_ == NULL) {
    field_ = new ::risk::instrument_info;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_instrument_field.field)
  return field_;
}
inline ::risk::instrument_info* rsp_instrument_field::release_field() {
  // @@protoc_insertion_point(field_release:risk.rsp_instrument_field.field)
  
  ::risk::instrument_info* temp = field_;
  field_ = NULL;
  return temp;
}
inline void rsp_instrument_field::set_allocated_field(::risk::instrument_info* field) {
  delete field_;
  field_ = field;
  if (field) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_instrument_field.field)
}

// -------------------------------------------------------------------

// rtn_quote_field

// .risk.quote_gateway_market_field field = 1;
inline bool rtn_quote_field::has_field() const {
  return this != internal_default_instance() && field_ != NULL;
}
inline void rtn_quote_field::clear_field() {
  if (GetArenaNoVirtual() == NULL && field_ != NULL) delete field_;
  field_ = NULL;
}
inline const ::risk::quote_gateway_market_field& rtn_quote_field::field() const {
  const ::risk::quote_gateway_market_field* p = field_;
  // @@protoc_insertion_point(field_get:risk.rtn_quote_field.field)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::quote_gateway_market_field*>(
      &::risk::_quote_gateway_market_field_default_instance_);
}
inline ::risk::quote_gateway_market_field* rtn_quote_field::mutable_field() {
  
  if (field_ == NULL) {
    field_ = new ::risk::quote_gateway_market_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.rtn_quote_field.field)
  return field_;
}
inline ::risk::quote_gateway_market_field* rtn_quote_field::release_field() {
  // @@protoc_insertion_point(field_release:risk.rtn_quote_field.field)
  
  ::risk::quote_gateway_market_field* temp = field_;
  field_ = NULL;
  return temp;
}
inline void rtn_quote_field::set_allocated_field(::risk::quote_gateway_market_field* field) {
  delete field_;
  field_ = field;
  if (field) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rtn_quote_field.field)
}

// -------------------------------------------------------------------

// rsp_position_field

// .risk.rsp_head_info header = 1;
inline bool rsp_position_field::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void rsp_position_field::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::risk::rsp_head_info& rsp_position_field::header() const {
  const ::risk::rsp_head_info* p = header_;
  // @@protoc_insertion_point(field_get:risk.rsp_position_field.header)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::rsp_head_info*>(
      &::risk::_rsp_head_info_default_instance_);
}
inline ::risk::rsp_head_info* rsp_position_field::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::risk::rsp_head_info;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_position_field.header)
  return header_;
}
inline ::risk::rsp_head_info* rsp_position_field::release_header() {
  // @@protoc_insertion_point(field_release:risk.rsp_position_field.header)
  
  ::risk::rsp_head_info* temp = header_;
  header_ = NULL;
  return temp;
}
inline void rsp_position_field::set_allocated_header(::risk::rsp_head_info* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_position_field.header)
}

// .risk.trade_gateway_position_field field = 2;
inline bool rsp_position_field::has_field() const {
  return this != internal_default_instance() && field_ != NULL;
}
inline void rsp_position_field::clear_field() {
  if (GetArenaNoVirtual() == NULL && field_ != NULL) delete field_;
  field_ = NULL;
}
inline const ::risk::trade_gateway_position_field& rsp_position_field::field() const {
  const ::risk::trade_gateway_position_field* p = field_;
  // @@protoc_insertion_point(field_get:risk.rsp_position_field.field)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::trade_gateway_position_field*>(
      &::risk::_trade_gateway_position_field_default_instance_);
}
inline ::risk::trade_gateway_position_field* rsp_position_field::mutable_field() {
  
  if (field_ == NULL) {
    field_ = new ::risk::trade_gateway_position_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_position_field.field)
  return field_;
}
inline ::risk::trade_gateway_position_field* rsp_position_field::release_field() {
  // @@protoc_insertion_point(field_release:risk.rsp_position_field.field)
  
  ::risk::trade_gateway_position_field* temp = field_;
  field_ = NULL;
  return temp;
}
inline void rsp_position_field::set_allocated_field(::risk::trade_gateway_position_field* field) {
  delete field_;
  field_ = field;
  if (field) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_position_field.field)
}

// double trypositionprofit = 3;
inline void rsp_position_field::clear_trypositionprofit() {
  trypositionprofit_ = 0;
}
inline double rsp_position_field::trypositionprofit() const {
  // @@protoc_insertion_point(field_get:risk.rsp_position_field.trypositionprofit)
  return trypositionprofit_;
}
inline void rsp_position_field::set_trypositionprofit(double value) {
  
  trypositionprofit_ = value;
  // @@protoc_insertion_point(field_set:risk.rsp_position_field.trypositionprofit)
}

// -------------------------------------------------------------------

// rtn_position_field

// .risk.trade_gateway_position_field field = 1;
inline bool rtn_position_field::has_field() const {
  return this != internal_default_instance() && field_ != NULL;
}
inline void rtn_position_field::clear_field() {
  if (GetArenaNoVirtual() == NULL && field_ != NULL) delete field_;
  field_ = NULL;
}
inline const ::risk::trade_gateway_position_field& rtn_position_field::field() const {
  const ::risk::trade_gateway_position_field* p = field_;
  // @@protoc_insertion_point(field_get:risk.rtn_position_field.field)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::trade_gateway_position_field*>(
      &::risk::_trade_gateway_position_field_default_instance_);
}
inline ::risk::trade_gateway_position_field* rtn_position_field::mutable_field() {
  
  if (field_ == NULL) {
    field_ = new ::risk::trade_gateway_position_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.rtn_position_field.field)
  return field_;
}
inline ::risk::trade_gateway_position_field* rtn_position_field::release_field() {
  // @@protoc_insertion_point(field_release:risk.rtn_position_field.field)
  
  ::risk::trade_gateway_position_field* temp = field_;
  field_ = NULL;
  return temp;
}
inline void rtn_position_field::set_allocated_field(::risk::trade_gateway_position_field* field) {
  delete field_;
  field_ = field;
  if (field) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rtn_position_field.field)
}

// double trypositionprofit = 2;
inline void rtn_position_field::clear_trypositionprofit() {
  trypositionprofit_ = 0;
}
inline double rtn_position_field::trypositionprofit() const {
  // @@protoc_insertion_point(field_get:risk.rtn_position_field.trypositionprofit)
  return trypositionprofit_;
}
inline void rtn_position_field::set_trypositionprofit(double value) {
  
  trypositionprofit_ = value;
  // @@protoc_insertion_point(field_set:risk.rtn_position_field.trypositionprofit)
}

// -------------------------------------------------------------------

// rsp_trade_field

// .risk.rsp_head_info header = 1;
inline bool rsp_trade_field::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void rsp_trade_field::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::risk::rsp_head_info& rsp_trade_field::header() const {
  const ::risk::rsp_head_info* p = header_;
  // @@protoc_insertion_point(field_get:risk.rsp_trade_field.header)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::rsp_head_info*>(
      &::risk::_rsp_head_info_default_instance_);
}
inline ::risk::rsp_head_info* rsp_trade_field::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::risk::rsp_head_info;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_trade_field.header)
  return header_;
}
inline ::risk::rsp_head_info* rsp_trade_field::release_header() {
  // @@protoc_insertion_point(field_release:risk.rsp_trade_field.header)
  
  ::risk::rsp_head_info* temp = header_;
  header_ = NULL;
  return temp;
}
inline void rsp_trade_field::set_allocated_header(::risk::rsp_head_info* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_trade_field.header)
}

// .risk.trade_gateway_trade_field field = 2;
inline bool rsp_trade_field::has_field() const {
  return this != internal_default_instance() && field_ != NULL;
}
inline void rsp_trade_field::clear_field() {
  if (GetArenaNoVirtual() == NULL && field_ != NULL) delete field_;
  field_ = NULL;
}
inline const ::risk::trade_gateway_trade_field& rsp_trade_field::field() const {
  const ::risk::trade_gateway_trade_field* p = field_;
  // @@protoc_insertion_point(field_get:risk.rsp_trade_field.field)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::trade_gateway_trade_field*>(
      &::risk::_trade_gateway_trade_field_default_instance_);
}
inline ::risk::trade_gateway_trade_field* rsp_trade_field::mutable_field() {
  
  if (field_ == NULL) {
    field_ = new ::risk::trade_gateway_trade_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_trade_field.field)
  return field_;
}
inline ::risk::trade_gateway_trade_field* rsp_trade_field::release_field() {
  // @@protoc_insertion_point(field_release:risk.rsp_trade_field.field)
  
  ::risk::trade_gateway_trade_field* temp = field_;
  field_ = NULL;
  return temp;
}
inline void rsp_trade_field::set_allocated_field(::risk::trade_gateway_trade_field* field) {
  delete field_;
  field_ = field;
  if (field) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_trade_field.field)
}

// -------------------------------------------------------------------

// rsp_order_field

// .risk.rsp_head_info header = 1;
inline bool rsp_order_field::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void rsp_order_field::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::risk::rsp_head_info& rsp_order_field::header() const {
  const ::risk::rsp_head_info* p = header_;
  // @@protoc_insertion_point(field_get:risk.rsp_order_field.header)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::rsp_head_info*>(
      &::risk::_rsp_head_info_default_instance_);
}
inline ::risk::rsp_head_info* rsp_order_field::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::risk::rsp_head_info;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_order_field.header)
  return header_;
}
inline ::risk::rsp_head_info* rsp_order_field::release_header() {
  // @@protoc_insertion_point(field_release:risk.rsp_order_field.header)
  
  ::risk::rsp_head_info* temp = header_;
  header_ = NULL;
  return temp;
}
inline void rsp_order_field::set_allocated_header(::risk::rsp_head_info* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_order_field.header)
}

// .risk.trade_gateway_order_field field = 2;
inline bool rsp_order_field::has_field() const {
  return this != internal_default_instance() && field_ != NULL;
}
inline void rsp_order_field::clear_field() {
  if (GetArenaNoVirtual() == NULL && field_ != NULL) delete field_;
  field_ = NULL;
}
inline const ::risk::trade_gateway_order_field& rsp_order_field::field() const {
  const ::risk::trade_gateway_order_field* p = field_;
  // @@protoc_insertion_point(field_get:risk.rsp_order_field.field)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::trade_gateway_order_field*>(
      &::risk::_trade_gateway_order_field_default_instance_);
}
inline ::risk::trade_gateway_order_field* rsp_order_field::mutable_field() {
  
  if (field_ == NULL) {
    field_ = new ::risk::trade_gateway_order_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_order_field.field)
  return field_;
}
inline ::risk::trade_gateway_order_field* rsp_order_field::release_field() {
  // @@protoc_insertion_point(field_release:risk.rsp_order_field.field)
  
  ::risk::trade_gateway_order_field* temp = field_;
  field_ = NULL;
  return temp;
}
inline void rsp_order_field::set_allocated_field(::risk::trade_gateway_order_field* field) {
  delete field_;
  field_ = field;
  if (field) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_order_field.field)
}

// -------------------------------------------------------------------

// rtn_trade_field

// .risk.trade_gateway_trade_field field = 1;
inline bool rtn_trade_field::has_field() const {
  return this != internal_default_instance() && field_ != NULL;
}
inline void rtn_trade_field::clear_field() {
  if (GetArenaNoVirtual() == NULL && field_ != NULL) delete field_;
  field_ = NULL;
}
inline const ::risk::trade_gateway_trade_field& rtn_trade_field::field() const {
  const ::risk::trade_gateway_trade_field* p = field_;
  // @@protoc_insertion_point(field_get:risk.rtn_trade_field.field)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::trade_gateway_trade_field*>(
      &::risk::_trade_gateway_trade_field_default_instance_);
}
inline ::risk::trade_gateway_trade_field* rtn_trade_field::mutable_field() {
  
  if (field_ == NULL) {
    field_ = new ::risk::trade_gateway_trade_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.rtn_trade_field.field)
  return field_;
}
inline ::risk::trade_gateway_trade_field* rtn_trade_field::release_field() {
  // @@protoc_insertion_point(field_release:risk.rtn_trade_field.field)
  
  ::risk::trade_gateway_trade_field* temp = field_;
  field_ = NULL;
  return temp;
}
inline void rtn_trade_field::set_allocated_field(::risk::trade_gateway_trade_field* field) {
  delete field_;
  field_ = field;
  if (field) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rtn_trade_field.field)
}

// -------------------------------------------------------------------

// rtn_order_field

// .risk.trade_gateway_order_field field = 1;
inline bool rtn_order_field::has_field() const {
  return this != internal_default_instance() && field_ != NULL;
}
inline void rtn_order_field::clear_field() {
  if (GetArenaNoVirtual() == NULL && field_ != NULL) delete field_;
  field_ = NULL;
}
inline const ::risk::trade_gateway_order_field& rtn_order_field::field() const {
  const ::risk::trade_gateway_order_field* p = field_;
  // @@protoc_insertion_point(field_get:risk.rtn_order_field.field)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::trade_gateway_order_field*>(
      &::risk::_trade_gateway_order_field_default_instance_);
}
inline ::risk::trade_gateway_order_field* rtn_order_field::mutable_field() {
  
  if (field_ == NULL) {
    field_ = new ::risk::trade_gateway_order_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.rtn_order_field.field)
  return field_;
}
inline ::risk::trade_gateway_order_field* rtn_order_field::release_field() {
  // @@protoc_insertion_point(field_release:risk.rtn_order_field.field)
  
  ::risk::trade_gateway_order_field* temp = field_;
  field_ = NULL;
  return temp;
}
inline void rtn_order_field::set_allocated_field(::risk::trade_gateway_order_field* field) {
  delete field_;
  field_ = field;
  if (field) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rtn_order_field.field)
}

// -------------------------------------------------------------------

// rsp_sync_account_field

// .risk.rsp_head_info header = 1;
inline bool rsp_sync_account_field::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void rsp_sync_account_field::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::risk::rsp_head_info& rsp_sync_account_field::header() const {
  const ::risk::rsp_head_info* p = header_;
  // @@protoc_insertion_point(field_get:risk.rsp_sync_account_field.header)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::rsp_head_info*>(
      &::risk::_rsp_head_info_default_instance_);
}
inline ::risk::rsp_head_info* rsp_sync_account_field::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::risk::rsp_head_info;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_sync_account_field.header)
  return header_;
}
inline ::risk::rsp_head_info* rsp_sync_account_field::release_header() {
  // @@protoc_insertion_point(field_release:risk.rsp_sync_account_field.header)
  
  ::risk::rsp_head_info* temp = header_;
  header_ = NULL;
  return temp;
}
inline void rsp_sync_account_field::set_allocated_header(::risk::rsp_head_info* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_sync_account_field.header)
}

// .risk.trade_gateway_sync_account_field field = 2;
inline bool rsp_sync_account_field::has_field() const {
  return this != internal_default_instance() && field_ != NULL;
}
inline void rsp_sync_account_field::clear_field() {
  if (GetArenaNoVirtual() == NULL && field_ != NULL) delete field_;
  field_ = NULL;
}
inline const ::risk::trade_gateway_sync_account_field& rsp_sync_account_field::field() const {
  const ::risk::trade_gateway_sync_account_field* p = field_;
  // @@protoc_insertion_point(field_get:risk.rsp_sync_account_field.field)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::trade_gateway_sync_account_field*>(
      &::risk::_trade_gateway_sync_account_field_default_instance_);
}
inline ::risk::trade_gateway_sync_account_field* rsp_sync_account_field::mutable_field() {
  
  if (field_ == NULL) {
    field_ = new ::risk::trade_gateway_sync_account_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_sync_account_field.field)
  return field_;
}
inline ::risk::trade_gateway_sync_account_field* rsp_sync_account_field::release_field() {
  // @@protoc_insertion_point(field_release:risk.rsp_sync_account_field.field)
  
  ::risk::trade_gateway_sync_account_field* temp = field_;
  field_ = NULL;
  return temp;
}
inline void rsp_sync_account_field::set_allocated_field(::risk::trade_gateway_sync_account_field* field) {
  delete field_;
  field_ = field;
  if (field) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_sync_account_field.field)
}

// -------------------------------------------------------------------

// rtn_sync_account_field

// .risk.trade_gateway_sync_account_field field = 1;
inline bool rtn_sync_account_field::has_field() const {
  return this != internal_default_instance() && field_ != NULL;
}
inline void rtn_sync_account_field::clear_field() {
  if (GetArenaNoVirtual() == NULL && field_ != NULL) delete field_;
  field_ = NULL;
}
inline const ::risk::trade_gateway_sync_account_field& rtn_sync_account_field::field() const {
  const ::risk::trade_gateway_sync_account_field* p = field_;
  // @@protoc_insertion_point(field_get:risk.rtn_sync_account_field.field)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::trade_gateway_sync_account_field*>(
      &::risk::_trade_gateway_sync_account_field_default_instance_);
}
inline ::risk::trade_gateway_sync_account_field* rtn_sync_account_field::mutable_field() {
  
  if (field_ == NULL) {
    field_ = new ::risk::trade_gateway_sync_account_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.rtn_sync_account_field.field)
  return field_;
}
inline ::risk::trade_gateway_sync_account_field* rtn_sync_account_field::release_field() {
  // @@protoc_insertion_point(field_release:risk.rtn_sync_account_field.field)
  
  ::risk::trade_gateway_sync_account_field* temp = field_;
  field_ = NULL;
  return temp;
}
inline void rtn_sync_account_field::set_allocated_field(::risk::trade_gateway_sync_account_field* field) {
  delete field_;
  field_ = field;
  if (field) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rtn_sync_account_field.field)
}

// -------------------------------------------------------------------

// shfe_margin_field

// double pre_favorable = 1;
inline void shfe_margin_field::clear_pre_favorable() {
  pre_favorable_ = 0;
}
inline double shfe_margin_field::pre_favorable() const {
  // @@protoc_insertion_point(field_get:risk.shfe_margin_field.pre_favorable)
  return pre_favorable_;
}
inline void shfe_margin_field::set_pre_favorable(double value) {
  
  pre_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.shfe_margin_field.pre_favorable)
}

// double big_side_favorable = 2;
inline void shfe_margin_field::clear_big_side_favorable() {
  big_side_favorable_ = 0;
}
inline double shfe_margin_field::big_side_favorable() const {
  // @@protoc_insertion_point(field_get:risk.shfe_margin_field.big_side_favorable)
  return big_side_favorable_;
}
inline void shfe_margin_field::set_big_side_favorable(double value) {
  
  big_side_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.shfe_margin_field.big_side_favorable)
}

// -------------------------------------------------------------------

// cffex_margin_field

// double pre_favorable = 1;
inline void cffex_margin_field::clear_pre_favorable() {
  pre_favorable_ = 0;
}
inline double cffex_margin_field::pre_favorable() const {
  // @@protoc_insertion_point(field_get:risk.cffex_margin_field.pre_favorable)
  return pre_favorable_;
}
inline void cffex_margin_field::set_pre_favorable(double value) {
  
  pre_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.cffex_margin_field.pre_favorable)
}

// double speculation_favorable = 2;
inline void cffex_margin_field::clear_speculation_favorable() {
  speculation_favorable_ = 0;
}
inline double cffex_margin_field::speculation_favorable() const {
  // @@protoc_insertion_point(field_get:risk.cffex_margin_field.speculation_favorable)
  return speculation_favorable_;
}
inline void cffex_margin_field::set_speculation_favorable(double value) {
  
  speculation_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.cffex_margin_field.speculation_favorable)
}

// double hedging_favorable = 3;
inline void cffex_margin_field::clear_hedging_favorable() {
  hedging_favorable_ = 0;
}
inline double cffex_margin_field::hedging_favorable() const {
  // @@protoc_insertion_point(field_get:risk.cffex_margin_field.hedging_favorable)
  return hedging_favorable_;
}
inline void cffex_margin_field::set_hedging_favorable(double value) {
  
  hedging_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.cffex_margin_field.hedging_favorable)
}

// double arbitrage_favorable = 4;
inline void cffex_margin_field::clear_arbitrage_favorable() {
  arbitrage_favorable_ = 0;
}
inline double cffex_margin_field::arbitrage_favorable() const {
  // @@protoc_insertion_point(field_get:risk.cffex_margin_field.arbitrage_favorable)
  return arbitrage_favorable_;
}
inline void cffex_margin_field::set_arbitrage_favorable(double value) {
  
  arbitrage_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.cffex_margin_field.arbitrage_favorable)
}

// double market_favorable = 5;
inline void cffex_margin_field::clear_market_favorable() {
  market_favorable_ = 0;
}
inline double cffex_margin_field::market_favorable() const {
  // @@protoc_insertion_point(field_get:risk.cffex_margin_field.market_favorable)
  return market_favorable_;
}
inline void cffex_margin_field::set_market_favorable(double value) {
  
  market_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.cffex_margin_field.market_favorable)
}

// -------------------------------------------------------------------

// dce_margin_field

// double pre_favorable = 1;
inline void dce_margin_field::clear_pre_favorable() {
  pre_favorable_ = 0;
}
inline double dce_margin_field::pre_favorable() const {
  // @@protoc_insertion_point(field_get:risk.dce_margin_field.pre_favorable)
  return pre_favorable_;
}
inline void dce_margin_field::set_pre_favorable(double value) {
  
  pre_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.dce_margin_field.pre_favorable)
}

// double sp_favorable = 2;
inline void dce_margin_field::clear_sp_favorable() {
  sp_favorable_ = 0;
}
inline double dce_margin_field::sp_favorable() const {
  // @@protoc_insertion_point(field_get:risk.dce_margin_field.sp_favorable)
  return sp_favorable_;
}
inline void dce_margin_field::set_sp_favorable(double value) {
  
  sp_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.dce_margin_field.sp_favorable)
}

// double spc_favorable = 3;
inline void dce_margin_field::clear_spc_favorable() {
  spc_favorable_ = 0;
}
inline double dce_margin_field::spc_favorable() const {
  // @@protoc_insertion_point(field_get:risk.dce_margin_field.spc_favorable)
  return spc_favorable_;
}
inline void dce_margin_field::set_spc_favorable(double value) {
  
  spc_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.dce_margin_field.spc_favorable)
}

// double locked_favorable = 4;
inline void dce_margin_field::clear_locked_favorable() {
  locked_favorable_ = 0;
}
inline double dce_margin_field::locked_favorable() const {
  // @@protoc_insertion_point(field_get:risk.dce_margin_field.locked_favorable)
  return locked_favorable_;
}
inline void dce_margin_field::set_locked_favorable(double value) {
  
  locked_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.dce_margin_field.locked_favorable)
}

// -------------------------------------------------------------------

// czce_margin_field

// double pre_favorable = 1;
inline void czce_margin_field::clear_pre_favorable() {
  pre_favorable_ = 0;
}
inline double czce_margin_field::pre_favorable() const {
  // @@protoc_insertion_point(field_get:risk.czce_margin_field.pre_favorable)
  return pre_favorable_;
}
inline void czce_margin_field::set_pre_favorable(double value) {
  
  pre_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.czce_margin_field.pre_favorable)
}

// double spd_favorable = 2;
inline void czce_margin_field::clear_spd_favorable() {
  spd_favorable_ = 0;
}
inline double czce_margin_field::spd_favorable() const {
  // @@protoc_insertion_point(field_get:risk.czce_margin_field.spd_favorable)
  return spd_favorable_;
}
inline void czce_margin_field::set_spd_favorable(double value) {
  
  spd_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.czce_margin_field.spd_favorable)
}

// double ips_favorable = 3;
inline void czce_margin_field::clear_ips_favorable() {
  ips_favorable_ = 0;
}
inline double czce_margin_field::ips_favorable() const {
  // @@protoc_insertion_point(field_get:risk.czce_margin_field.ips_favorable)
  return ips_favorable_;
}
inline void czce_margin_field::set_ips_favorable(double value) {
  
  ips_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.czce_margin_field.ips_favorable)
}

// double prt_favorable = 4;
inline void czce_margin_field::clear_prt_favorable() {
  prt_favorable_ = 0;
}
inline double czce_margin_field::prt_favorable() const {
  // @@protoc_insertion_point(field_get:risk.czce_margin_field.prt_favorable)
  return prt_favorable_;
}
inline void czce_margin_field::set_prt_favorable(double value) {
  
  prt_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.czce_margin_field.prt_favorable)
}

// double std_favorable = 5;
inline void czce_margin_field::clear_std_favorable() {
  std_favorable_ = 0;
}
inline double czce_margin_field::std_favorable() const {
  // @@protoc_insertion_point(field_get:risk.czce_margin_field.std_favorable)
  return std_favorable_;
}
inline void czce_margin_field::set_std_favorable(double value) {
  
  std_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.czce_margin_field.std_favorable)
}

// double stg_favorable = 6;
inline void czce_margin_field::clear_stg_favorable() {
  stg_favorable_ = 0;
}
inline double czce_margin_field::stg_favorable() const {
  // @@protoc_insertion_point(field_get:risk.czce_margin_field.stg_favorable)
  return stg_favorable_;
}
inline void czce_margin_field::set_stg_favorable(double value) {
  
  stg_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.czce_margin_field.stg_favorable)
}

// double zprt_favorable = 7;
inline void czce_margin_field::clear_zprt_favorable() {
  zprt_favorable_ = 0;
}
inline double czce_margin_field::zprt_favorable() const {
  // @@protoc_insertion_point(field_get:risk.czce_margin_field.zprt_favorable)
  return zprt_favorable_;
}
inline void czce_margin_field::set_zprt_favorable(double value) {
  
  zprt_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.czce_margin_field.zprt_favorable)
}

// double locked_favorable = 8;
inline void czce_margin_field::clear_locked_favorable() {
  locked_favorable_ = 0;
}
inline double czce_margin_field::locked_favorable() const {
  // @@protoc_insertion_point(field_get:risk.czce_margin_field.locked_favorable)
  return locked_favorable_;
}
inline void czce_margin_field::set_locked_favorable(double value) {
  
  locked_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.czce_margin_field.locked_favorable)
}

// -------------------------------------------------------------------

// ine_margin_field

// double pre_favorable = 1;
inline void ine_margin_field::clear_pre_favorable() {
  pre_favorable_ = 0;
}
inline double ine_margin_field::pre_favorable() const {
  // @@protoc_insertion_point(field_get:risk.ine_margin_field.pre_favorable)
  return pre_favorable_;
}
inline void ine_margin_field::set_pre_favorable(double value) {
  
  pre_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.ine_margin_field.pre_favorable)
}

// double big_side_favorable = 2;
inline void ine_margin_field::clear_big_side_favorable() {
  big_side_favorable_ = 0;
}
inline double ine_margin_field::big_side_favorable() const {
  // @@protoc_insertion_point(field_get:risk.ine_margin_field.big_side_favorable)
  return big_side_favorable_;
}
inline void ine_margin_field::set_big_side_favorable(double value) {
  
  big_side_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.ine_margin_field.big_side_favorable)
}

// -------------------------------------------------------------------

// delivery_margin_field

// double shfe_margin = 1;
inline void delivery_margin_field::clear_shfe_margin() {
  shfe_margin_ = 0;
}
inline double delivery_margin_field::shfe_margin() const {
  // @@protoc_insertion_point(field_get:risk.delivery_margin_field.shfe_margin)
  return shfe_margin_;
}
inline void delivery_margin_field::set_shfe_margin(double value) {
  
  shfe_margin_ = value;
  // @@protoc_insertion_point(field_set:risk.delivery_margin_field.shfe_margin)
}

// double cffex_margin = 2;
inline void delivery_margin_field::clear_cffex_margin() {
  cffex_margin_ = 0;
}
inline double delivery_margin_field::cffex_margin() const {
  // @@protoc_insertion_point(field_get:risk.delivery_margin_field.cffex_margin)
  return cffex_margin_;
}
inline void delivery_margin_field::set_cffex_margin(double value) {
  
  cffex_margin_ = value;
  // @@protoc_insertion_point(field_set:risk.delivery_margin_field.cffex_margin)
}

// double dce_margin = 3;
inline void delivery_margin_field::clear_dce_margin() {
  dce_margin_ = 0;
}
inline double delivery_margin_field::dce_margin() const {
  // @@protoc_insertion_point(field_get:risk.delivery_margin_field.dce_margin)
  return dce_margin_;
}
inline void delivery_margin_field::set_dce_margin(double value) {
  
  dce_margin_ = value;
  // @@protoc_insertion_point(field_set:risk.delivery_margin_field.dce_margin)
}

// double czce_margin = 4;
inline void delivery_margin_field::clear_czce_margin() {
  czce_margin_ = 0;
}
inline double delivery_margin_field::czce_margin() const {
  // @@protoc_insertion_point(field_get:risk.delivery_margin_field.czce_margin)
  return czce_margin_;
}
inline void delivery_margin_field::set_czce_margin(double value) {
  
  czce_margin_ = value;
  // @@protoc_insertion_point(field_set:risk.delivery_margin_field.czce_margin)
}

// double ine_margin = 5;
inline void delivery_margin_field::clear_ine_margin() {
  ine_margin_ = 0;
}
inline double delivery_margin_field::ine_margin() const {
  // @@protoc_insertion_point(field_get:risk.delivery_margin_field.ine_margin)
  return ine_margin_;
}
inline void delivery_margin_field::set_ine_margin(double value) {
  
  ine_margin_ = value;
  // @@protoc_insertion_point(field_set:risk.delivery_margin_field.ine_margin)
}

// -------------------------------------------------------------------

// rtn_margin_field

// uint32 timestamp = 1;
inline void rtn_margin_field::clear_timestamp() {
  timestamp_ = 0u;
}
inline ::google::protobuf::uint32 rtn_margin_field::timestamp() const {
  // @@protoc_insertion_point(field_get:risk.rtn_margin_field.timestamp)
  return timestamp_;
}
inline void rtn_margin_field::set_timestamp(::google::protobuf::uint32 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:risk.rtn_margin_field.timestamp)
}

// string investor = 2;
inline void rtn_margin_field::clear_investor() {
  investor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& rtn_margin_field::investor() const {
  // @@protoc_insertion_point(field_get:risk.rtn_margin_field.investor)
  return investor_.GetNoArena();
}
inline void rtn_margin_field::set_investor(const ::std::string& value) {
  
  investor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.rtn_margin_field.investor)
}
#if LANG_CXX11
inline void rtn_margin_field::set_investor(::std::string&& value) {
  
  investor_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.rtn_margin_field.investor)
}
#endif
inline void rtn_margin_field::set_investor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  investor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.rtn_margin_field.investor)
}
inline void rtn_margin_field::set_investor(const char* value, size_t size) {
  
  investor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.rtn_margin_field.investor)
}
inline ::std::string* rtn_margin_field::mutable_investor() {
  
  // @@protoc_insertion_point(field_mutable:risk.rtn_margin_field.investor)
  return investor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* rtn_margin_field::release_investor() {
  // @@protoc_insertion_point(field_release:risk.rtn_margin_field.investor)
  
  return investor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void rtn_margin_field::set_allocated_investor(::std::string* investor) {
  if (investor != NULL) {
    
  } else {
    
  }
  investor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), investor);
  // @@protoc_insertion_point(field_set_allocated:risk.rtn_margin_field.investor)
}

// .risk.shfe_margin_field shfe_margin = 3;
inline bool rtn_margin_field::has_shfe_margin() const {
  return this != internal_default_instance() && shfe_margin_ != NULL;
}
inline void rtn_margin_field::clear_shfe_margin() {
  if (GetArenaNoVirtual() == NULL && shfe_margin_ != NULL) delete shfe_margin_;
  shfe_margin_ = NULL;
}
inline const ::risk::shfe_margin_field& rtn_margin_field::shfe_margin() const {
  const ::risk::shfe_margin_field* p = shfe_margin_;
  // @@protoc_insertion_point(field_get:risk.rtn_margin_field.shfe_margin)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::shfe_margin_field*>(
      &::risk::_shfe_margin_field_default_instance_);
}
inline ::risk::shfe_margin_field* rtn_margin_field::mutable_shfe_margin() {
  
  if (shfe_margin_ == NULL) {
    shfe_margin_ = new ::risk::shfe_margin_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.rtn_margin_field.shfe_margin)
  return shfe_margin_;
}
inline ::risk::shfe_margin_field* rtn_margin_field::release_shfe_margin() {
  // @@protoc_insertion_point(field_release:risk.rtn_margin_field.shfe_margin)
  
  ::risk::shfe_margin_field* temp = shfe_margin_;
  shfe_margin_ = NULL;
  return temp;
}
inline void rtn_margin_field::set_allocated_shfe_margin(::risk::shfe_margin_field* shfe_margin) {
  delete shfe_margin_;
  shfe_margin_ = shfe_margin;
  if (shfe_margin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rtn_margin_field.shfe_margin)
}

// .risk.cffex_margin_field cffex_margin = 4;
inline bool rtn_margin_field::has_cffex_margin() const {
  return this != internal_default_instance() && cffex_margin_ != NULL;
}
inline void rtn_margin_field::clear_cffex_margin() {
  if (GetArenaNoVirtual() == NULL && cffex_margin_ != NULL) delete cffex_margin_;
  cffex_margin_ = NULL;
}
inline const ::risk::cffex_margin_field& rtn_margin_field::cffex_margin() const {
  const ::risk::cffex_margin_field* p = cffex_margin_;
  // @@protoc_insertion_point(field_get:risk.rtn_margin_field.cffex_margin)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::cffex_margin_field*>(
      &::risk::_cffex_margin_field_default_instance_);
}
inline ::risk::cffex_margin_field* rtn_margin_field::mutable_cffex_margin() {
  
  if (cffex_margin_ == NULL) {
    cffex_margin_ = new ::risk::cffex_margin_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.rtn_margin_field.cffex_margin)
  return cffex_margin_;
}
inline ::risk::cffex_margin_field* rtn_margin_field::release_cffex_margin() {
  // @@protoc_insertion_point(field_release:risk.rtn_margin_field.cffex_margin)
  
  ::risk::cffex_margin_field* temp = cffex_margin_;
  cffex_margin_ = NULL;
  return temp;
}
inline void rtn_margin_field::set_allocated_cffex_margin(::risk::cffex_margin_field* cffex_margin) {
  delete cffex_margin_;
  cffex_margin_ = cffex_margin;
  if (cffex_margin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rtn_margin_field.cffex_margin)
}

// .risk.dce_margin_field dce_margin = 5;
inline bool rtn_margin_field::has_dce_margin() const {
  return this != internal_default_instance() && dce_margin_ != NULL;
}
inline void rtn_margin_field::clear_dce_margin() {
  if (GetArenaNoVirtual() == NULL && dce_margin_ != NULL) delete dce_margin_;
  dce_margin_ = NULL;
}
inline const ::risk::dce_margin_field& rtn_margin_field::dce_margin() const {
  const ::risk::dce_margin_field* p = dce_margin_;
  // @@protoc_insertion_point(field_get:risk.rtn_margin_field.dce_margin)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::dce_margin_field*>(
      &::risk::_dce_margin_field_default_instance_);
}
inline ::risk::dce_margin_field* rtn_margin_field::mutable_dce_margin() {
  
  if (dce_margin_ == NULL) {
    dce_margin_ = new ::risk::dce_margin_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.rtn_margin_field.dce_margin)
  return dce_margin_;
}
inline ::risk::dce_margin_field* rtn_margin_field::release_dce_margin() {
  // @@protoc_insertion_point(field_release:risk.rtn_margin_field.dce_margin)
  
  ::risk::dce_margin_field* temp = dce_margin_;
  dce_margin_ = NULL;
  return temp;
}
inline void rtn_margin_field::set_allocated_dce_margin(::risk::dce_margin_field* dce_margin) {
  delete dce_margin_;
  dce_margin_ = dce_margin;
  if (dce_margin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rtn_margin_field.dce_margin)
}

// .risk.czce_margin_field czce_margin = 6;
inline bool rtn_margin_field::has_czce_margin() const {
  return this != internal_default_instance() && czce_margin_ != NULL;
}
inline void rtn_margin_field::clear_czce_margin() {
  if (GetArenaNoVirtual() == NULL && czce_margin_ != NULL) delete czce_margin_;
  czce_margin_ = NULL;
}
inline const ::risk::czce_margin_field& rtn_margin_field::czce_margin() const {
  const ::risk::czce_margin_field* p = czce_margin_;
  // @@protoc_insertion_point(field_get:risk.rtn_margin_field.czce_margin)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::czce_margin_field*>(
      &::risk::_czce_margin_field_default_instance_);
}
inline ::risk::czce_margin_field* rtn_margin_field::mutable_czce_margin() {
  
  if (czce_margin_ == NULL) {
    czce_margin_ = new ::risk::czce_margin_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.rtn_margin_field.czce_margin)
  return czce_margin_;
}
inline ::risk::czce_margin_field* rtn_margin_field::release_czce_margin() {
  // @@protoc_insertion_point(field_release:risk.rtn_margin_field.czce_margin)
  
  ::risk::czce_margin_field* temp = czce_margin_;
  czce_margin_ = NULL;
  return temp;
}
inline void rtn_margin_field::set_allocated_czce_margin(::risk::czce_margin_field* czce_margin) {
  delete czce_margin_;
  czce_margin_ = czce_margin;
  if (czce_margin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rtn_margin_field.czce_margin)
}

// .risk.ine_margin_field ine_margin = 7;
inline bool rtn_margin_field::has_ine_margin() const {
  return this != internal_default_instance() && ine_margin_ != NULL;
}
inline void rtn_margin_field::clear_ine_margin() {
  if (GetArenaNoVirtual() == NULL && ine_margin_ != NULL) delete ine_margin_;
  ine_margin_ = NULL;
}
inline const ::risk::ine_margin_field& rtn_margin_field::ine_margin() const {
  const ::risk::ine_margin_field* p = ine_margin_;
  // @@protoc_insertion_point(field_get:risk.rtn_margin_field.ine_margin)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::ine_margin_field*>(
      &::risk::_ine_margin_field_default_instance_);
}
inline ::risk::ine_margin_field* rtn_margin_field::mutable_ine_margin() {
  
  if (ine_margin_ == NULL) {
    ine_margin_ = new ::risk::ine_margin_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.rtn_margin_field.ine_margin)
  return ine_margin_;
}
inline ::risk::ine_margin_field* rtn_margin_field::release_ine_margin() {
  // @@protoc_insertion_point(field_release:risk.rtn_margin_field.ine_margin)
  
  ::risk::ine_margin_field* temp = ine_margin_;
  ine_margin_ = NULL;
  return temp;
}
inline void rtn_margin_field::set_allocated_ine_margin(::risk::ine_margin_field* ine_margin) {
  delete ine_margin_;
  ine_margin_ = ine_margin;
  if (ine_margin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rtn_margin_field.ine_margin)
}

// .risk.delivery_margin_field delivery_margin = 8;
inline bool rtn_margin_field::has_delivery_margin() const {
  return this != internal_default_instance() && delivery_margin_ != NULL;
}
inline void rtn_margin_field::clear_delivery_margin() {
  if (GetArenaNoVirtual() == NULL && delivery_margin_ != NULL) delete delivery_margin_;
  delivery_margin_ = NULL;
}
inline const ::risk::delivery_margin_field& rtn_margin_field::delivery_margin() const {
  const ::risk::delivery_margin_field* p = delivery_margin_;
  // @@protoc_insertion_point(field_get:risk.rtn_margin_field.delivery_margin)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::delivery_margin_field*>(
      &::risk::_delivery_margin_field_default_instance_);
}
inline ::risk::delivery_margin_field* rtn_margin_field::mutable_delivery_margin() {
  
  if (delivery_margin_ == NULL) {
    delivery_margin_ = new ::risk::delivery_margin_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.rtn_margin_field.delivery_margin)
  return delivery_margin_;
}
inline ::risk::delivery_margin_field* rtn_margin_field::release_delivery_margin() {
  // @@protoc_insertion_point(field_release:risk.rtn_margin_field.delivery_margin)
  
  ::risk::delivery_margin_field* temp = delivery_margin_;
  delivery_margin_ = NULL;
  return temp;
}
inline void rtn_margin_field::set_allocated_delivery_margin(::risk::delivery_margin_field* delivery_margin) {
  delete delivery_margin_;
  delivery_margin_ = delivery_margin;
  if (delivery_margin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rtn_margin_field.delivery_margin)
}

// -------------------------------------------------------------------

// rsp_margin_field

// .risk.rsp_head_info header = 1;
inline bool rsp_margin_field::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void rsp_margin_field::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::risk::rsp_head_info& rsp_margin_field::header() const {
  const ::risk::rsp_head_info* p = header_;
  // @@protoc_insertion_point(field_get:risk.rsp_margin_field.header)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::rsp_head_info*>(
      &::risk::_rsp_head_info_default_instance_);
}
inline ::risk::rsp_head_info* rsp_margin_field::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::risk::rsp_head_info;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_margin_field.header)
  return header_;
}
inline ::risk::rsp_head_info* rsp_margin_field::release_header() {
  // @@protoc_insertion_point(field_release:risk.rsp_margin_field.header)
  
  ::risk::rsp_head_info* temp = header_;
  header_ = NULL;
  return temp;
}
inline void rsp_margin_field::set_allocated_header(::risk::rsp_head_info* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_margin_field.header)
}

// .risk.rtn_margin_field field = 2;
inline bool rsp_margin_field::has_field() const {
  return this != internal_default_instance() && field_ != NULL;
}
inline void rsp_margin_field::clear_field() {
  if (GetArenaNoVirtual() == NULL && field_ != NULL) delete field_;
  field_ = NULL;
}
inline const ::risk::rtn_margin_field& rsp_margin_field::field() const {
  const ::risk::rtn_margin_field* p = field_;
  // @@protoc_insertion_point(field_get:risk.rsp_margin_field.field)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::rtn_margin_field*>(
      &::risk::_rtn_margin_field_default_instance_);
}
inline ::risk::rtn_margin_field* rsp_margin_field::mutable_field() {
  
  if (field_ == NULL) {
    field_ = new ::risk::rtn_margin_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_margin_field.field)
  return field_;
}
inline ::risk::rtn_margin_field* rsp_margin_field::release_field() {
  // @@protoc_insertion_point(field_release:risk.rsp_margin_field.field)
  
  ::risk::rtn_margin_field* temp = field_;
  field_ = NULL;
  return temp;
}
inline void rsp_margin_field::set_allocated_field(::risk::rtn_margin_field* field) {
  delete field_;
  field_ = field;
  if (field) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_margin_field.field)
}

// -------------------------------------------------------------------

// rsp_risker_investor

// .risk.rsp_head_info header = 1;
inline bool rsp_risker_investor::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void rsp_risker_investor::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::risk::rsp_head_info& rsp_risker_investor::header() const {
  const ::risk::rsp_head_info* p = header_;
  // @@protoc_insertion_point(field_get:risk.rsp_risker_investor.header)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::rsp_head_info*>(
      &::risk::_rsp_head_info_default_instance_);
}
inline ::risk::rsp_head_info* rsp_risker_investor::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::risk::rsp_head_info;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_risker_investor.header)
  return header_;
}
inline ::risk::rsp_head_info* rsp_risker_investor::release_header() {
  // @@protoc_insertion_point(field_release:risk.rsp_risker_investor.header)
  
  ::risk::rsp_head_info* temp = header_;
  header_ = NULL;
  return temp;
}
inline void rsp_risker_investor::set_allocated_header(::risk::rsp_head_info* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_risker_investor.header)
}

// int32 riskgroupid = 2;
inline void rsp_risker_investor::clear_riskgroupid() {
  riskgroupid_ = 0;
}
inline ::google::protobuf::int32 rsp_risker_investor::riskgroupid() const {
  // @@protoc_insertion_point(field_get:risk.rsp_risker_investor.riskgroupid)
  return riskgroupid_;
}
inline void rsp_risker_investor::set_riskgroupid(::google::protobuf::int32 value) {
  
  riskgroupid_ = value;
  // @@protoc_insertion_point(field_set:risk.rsp_risker_investor.riskgroupid)
}

// string investorid = 3;
inline void rsp_risker_investor::clear_investorid() {
  investorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& rsp_risker_investor::investorid() const {
  // @@protoc_insertion_point(field_get:risk.rsp_risker_investor.investorid)
  return investorid_.GetNoArena();
}
inline void rsp_risker_investor::set_investorid(const ::std::string& value) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.rsp_risker_investor.investorid)
}
#if LANG_CXX11
inline void rsp_risker_investor::set_investorid(::std::string&& value) {
  
  investorid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.rsp_risker_investor.investorid)
}
#endif
inline void rsp_risker_investor::set_investorid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.rsp_risker_investor.investorid)
}
inline void rsp_risker_investor::set_investorid(const char* value, size_t size) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.rsp_risker_investor.investorid)
}
inline ::std::string* rsp_risker_investor::mutable_investorid() {
  
  // @@protoc_insertion_point(field_mutable:risk.rsp_risker_investor.investorid)
  return investorid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* rsp_risker_investor::release_investorid() {
  // @@protoc_insertion_point(field_release:risk.rsp_risker_investor.investorid)
  
  return investorid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void rsp_risker_investor::set_allocated_investorid(::std::string* investorid) {
  if (investorid != NULL) {
    
  } else {
    
  }
  investorid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), investorid);
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_risker_investor.investorid)
}

// -------------------------------------------------------------------

// rsp_groups

// .risk.rsp_head_info header = 1;
inline bool rsp_groups::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void rsp_groups::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::risk::rsp_head_info& rsp_groups::header() const {
  const ::risk::rsp_head_info* p = header_;
  // @@protoc_insertion_point(field_get:risk.rsp_groups.header)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::rsp_head_info*>(
      &::risk::_rsp_head_info_default_instance_);
}
inline ::risk::rsp_head_info* rsp_groups::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::risk::rsp_head_info;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_groups.header)
  return header_;
}
inline ::risk::rsp_head_info* rsp_groups::release_header() {
  // @@protoc_insertion_point(field_release:risk.rsp_groups.header)
  
  ::risk::rsp_head_info* temp = header_;
  header_ = NULL;
  return temp;
}
inline void rsp_groups::set_allocated_header(::risk::rsp_head_info* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_groups.header)
}

// repeated .risk.sys_group infos = 2;
inline int rsp_groups::infos_size() const {
  return infos_.size();
}
inline void rsp_groups::clear_infos() {
  infos_.Clear();
}
inline const ::risk::sys_group& rsp_groups::infos(int index) const {
  // @@protoc_insertion_point(field_get:risk.rsp_groups.infos)
  return infos_.Get(index);
}
inline ::risk::sys_group* rsp_groups::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:risk.rsp_groups.infos)
  return infos_.Mutable(index);
}
inline ::risk::sys_group* rsp_groups::add_infos() {
  // @@protoc_insertion_point(field_add:risk.rsp_groups.infos)
  return infos_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::risk::sys_group >*
rsp_groups::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:risk.rsp_groups.infos)
  return &infos_;
}
inline const ::google::protobuf::RepeatedPtrField< ::risk::sys_group >&
rsp_groups::infos() const {
  // @@protoc_insertion_point(field_list:risk.rsp_groups.infos)
  return infos_;
}

// -------------------------------------------------------------------

// rsp_action_info

// int32 requestid = 1;
inline void rsp_action_info::clear_requestid() {
  requestid_ = 0;
}
inline ::google::protobuf::int32 rsp_action_info::requestid() const {
  // @@protoc_insertion_point(field_get:risk.rsp_action_info.requestid)
  return requestid_;
}
inline void rsp_action_info::set_requestid(::google::protobuf::int32 value) {
  
  requestid_ = value;
  // @@protoc_insertion_point(field_set:risk.rsp_action_info.requestid)
}

// .risk.error_info info = 2;
inline bool rsp_action_info::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
inline void rsp_action_info::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
inline const ::risk::error_info& rsp_action_info::info() const {
  const ::risk::error_info* p = info_;
  // @@protoc_insertion_point(field_get:risk.rsp_action_info.info)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::error_info*>(
      &::risk::_error_info_default_instance_);
}
inline ::risk::error_info* rsp_action_info::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::risk::error_info;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_action_info.info)
  return info_;
}
inline ::risk::error_info* rsp_action_info::release_info() {
  // @@protoc_insertion_point(field_release:risk.rsp_action_info.info)
  
  ::risk::error_info* temp = info_;
  info_ = NULL;
  return temp;
}
inline void rsp_action_info::set_allocated_info(::risk::error_info* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_action_info.info)
}

// -------------------------------------------------------------------

// rtn_change_risker

// int32 operatorid = 1;
inline void rtn_change_risker::clear_operatorid() {
  operatorid_ = 0;
}
inline ::google::protobuf::int32 rtn_change_risker::operatorid() const {
  // @@protoc_insertion_point(field_get:risk.rtn_change_risker.operatorid)
  return operatorid_;
}
inline void rtn_change_risker::set_operatorid(::google::protobuf::int32 value) {
  
  operatorid_ = value;
  // @@protoc_insertion_point(field_set:risk.rtn_change_risker.operatorid)
}

// int32 userid = 2;
inline void rtn_change_risker::clear_userid() {
  userid_ = 0;
}
inline ::google::protobuf::int32 rtn_change_risker::userid() const {
  // @@protoc_insertion_point(field_get:risk.rtn_change_risker.userid)
  return userid_;
}
inline void rtn_change_risker::set_userid(::google::protobuf::int32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:risk.rtn_change_risker.userid)
}

// int32 riskgroupid = 3;
inline void rtn_change_risker::clear_riskgroupid() {
  riskgroupid_ = 0;
}
inline ::google::protobuf::int32 rtn_change_risker::riskgroupid() const {
  // @@protoc_insertion_point(field_get:risk.rtn_change_risker.riskgroupid)
  return riskgroupid_;
}
inline void rtn_change_risker::set_riskgroupid(::google::protobuf::int32 value) {
  
  riskgroupid_ = value;
  // @@protoc_insertion_point(field_set:risk.rtn_change_risker.riskgroupid)
}

// repeated string investor = 4;
inline int rtn_change_risker::investor_size() const {
  return investor_.size();
}
inline void rtn_change_risker::clear_investor() {
  investor_.Clear();
}
inline const ::std::string& rtn_change_risker::investor(int index) const {
  // @@protoc_insertion_point(field_get:risk.rtn_change_risker.investor)
  return investor_.Get(index);
}
inline ::std::string* rtn_change_risker::mutable_investor(int index) {
  // @@protoc_insertion_point(field_mutable:risk.rtn_change_risker.investor)
  return investor_.Mutable(index);
}
inline void rtn_change_risker::set_investor(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:risk.rtn_change_risker.investor)
  investor_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void rtn_change_risker::set_investor(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:risk.rtn_change_risker.investor)
  investor_.Mutable(index)->assign(std::move(value));
}
#endif
inline void rtn_change_risker::set_investor(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  investor_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:risk.rtn_change_risker.investor)
}
inline void rtn_change_risker::set_investor(int index, const char* value, size_t size) {
  investor_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:risk.rtn_change_risker.investor)
}
inline ::std::string* rtn_change_risker::add_investor() {
  // @@protoc_insertion_point(field_add_mutable:risk.rtn_change_risker.investor)
  return investor_.Add();
}
inline void rtn_change_risker::add_investor(const ::std::string& value) {
  investor_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:risk.rtn_change_risker.investor)
}
#if LANG_CXX11
inline void rtn_change_risker::add_investor(::std::string&& value) {
  investor_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:risk.rtn_change_risker.investor)
}
#endif
inline void rtn_change_risker::add_investor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  investor_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:risk.rtn_change_risker.investor)
}
inline void rtn_change_risker::add_investor(const char* value, size_t size) {
  investor_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:risk.rtn_change_risker.investor)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
rtn_change_risker::investor() const {
  // @@protoc_insertion_point(field_list:risk.rtn_change_risker.investor)
  return investor_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
rtn_change_risker::mutable_investor() {
  // @@protoc_insertion_point(field_mutable_list:risk.rtn_change_risker.investor)
  return &investor_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace risk

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_riskapi_5fdata_5fprotocal_2eproto__INCLUDED
