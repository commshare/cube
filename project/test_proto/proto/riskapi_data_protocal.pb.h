// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: riskapi_data_protocal.proto

#ifndef PROTOBUF_riskapi_5fdata_5fprotocal_2eproto__INCLUDED
#define PROTOBUF_riskapi_5fdata_5fprotocal_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "trade_protocal.pb.h"
#include "quote_protocal.pb.h"
#include "riskapi_action_protocal.pb.h"
// @@protoc_insertion_point(includes)
namespace risk {
class cffex_margin_field;
class cffex_margin_fieldDefaultTypeInternal;
extern cffex_margin_fieldDefaultTypeInternal _cffex_margin_field_default_instance_;
class czce_margin_field;
class czce_margin_fieldDefaultTypeInternal;
extern czce_margin_fieldDefaultTypeInternal _czce_margin_field_default_instance_;
class dce_margin_field;
class dce_margin_fieldDefaultTypeInternal;
extern dce_margin_fieldDefaultTypeInternal _dce_margin_field_default_instance_;
class delivery_margin_field;
class delivery_margin_fieldDefaultTypeInternal;
extern delivery_margin_fieldDefaultTypeInternal _delivery_margin_field_default_instance_;
class error_info;
class error_infoDefaultTypeInternal;
extern error_infoDefaultTypeInternal _error_info_default_instance_;
class ine_margin_field;
class ine_margin_fieldDefaultTypeInternal;
extern ine_margin_fieldDefaultTypeInternal _ine_margin_field_default_instance_;
class instrument_info;
class instrument_infoDefaultTypeInternal;
extern instrument_infoDefaultTypeInternal _instrument_info_default_instance_;
class investor_info;
class investor_infoDefaultTypeInternal;
extern investor_infoDefaultTypeInternal _investor_info_default_instance_;
class option_argv;
class option_argvDefaultTypeInternal;
extern option_argvDefaultTypeInternal _option_argv_default_instance_;
class rsp_action_info;
class rsp_action_infoDefaultTypeInternal;
extern rsp_action_infoDefaultTypeInternal _rsp_action_info_default_instance_;
class rsp_groups;
class rsp_groupsDefaultTypeInternal;
extern rsp_groupsDefaultTypeInternal _rsp_groups_default_instance_;
class rsp_head_info;
class rsp_head_infoDefaultTypeInternal;
extern rsp_head_infoDefaultTypeInternal _rsp_head_info_default_instance_;
class rsp_instrument_field;
class rsp_instrument_fieldDefaultTypeInternal;
extern rsp_instrument_fieldDefaultTypeInternal _rsp_instrument_field_default_instance_;
class rsp_investor_info;
class rsp_investor_infoDefaultTypeInternal;
extern rsp_investor_infoDefaultTypeInternal _rsp_investor_info_default_instance_;
class rsp_margin_field;
class rsp_margin_fieldDefaultTypeInternal;
extern rsp_margin_fieldDefaultTypeInternal _rsp_margin_field_default_instance_;
class rsp_option_argv;
class rsp_option_argvDefaultTypeInternal;
extern rsp_option_argvDefaultTypeInternal _rsp_option_argv_default_instance_;
class rsp_order_field;
class rsp_order_fieldDefaultTypeInternal;
extern rsp_order_fieldDefaultTypeInternal _rsp_order_field_default_instance_;
class rsp_position_field;
class rsp_position_fieldDefaultTypeInternal;
extern rsp_position_fieldDefaultTypeInternal _rsp_position_field_default_instance_;
class rsp_risker_investor;
class rsp_risker_investorDefaultTypeInternal;
extern rsp_risker_investorDefaultTypeInternal _rsp_risker_investor_default_instance_;
class rsp_risker_login;
class rsp_risker_loginDefaultTypeInternal;
extern rsp_risker_loginDefaultTypeInternal _rsp_risker_login_default_instance_;
class rsp_sync_account_field;
class rsp_sync_account_fieldDefaultTypeInternal;
extern rsp_sync_account_fieldDefaultTypeInternal _rsp_sync_account_field_default_instance_;
class rsp_trade_field;
class rsp_trade_fieldDefaultTypeInternal;
extern rsp_trade_fieldDefaultTypeInternal _rsp_trade_field_default_instance_;
class rsp_whatif;
class rsp_whatifDefaultTypeInternal;
extern rsp_whatifDefaultTypeInternal _rsp_whatif_default_instance_;
class rtn_change_risker;
class rtn_change_riskerDefaultTypeInternal;
extern rtn_change_riskerDefaultTypeInternal _rtn_change_risker_default_instance_;
class rtn_margin_field;
class rtn_margin_fieldDefaultTypeInternal;
extern rtn_margin_fieldDefaultTypeInternal _rtn_margin_field_default_instance_;
class rtn_option_position_risk;
class rtn_option_position_riskDefaultTypeInternal;
extern rtn_option_position_riskDefaultTypeInternal _rtn_option_position_risk_default_instance_;
class rtn_order_field;
class rtn_order_fieldDefaultTypeInternal;
extern rtn_order_fieldDefaultTypeInternal _rtn_order_field_default_instance_;
class rtn_position_field;
class rtn_position_fieldDefaultTypeInternal;
extern rtn_position_fieldDefaultTypeInternal _rtn_position_field_default_instance_;
class rtn_quote_field;
class rtn_quote_fieldDefaultTypeInternal;
extern rtn_quote_fieldDefaultTypeInternal _rtn_quote_field_default_instance_;
class rtn_sync_account_field;
class rtn_sync_account_fieldDefaultTypeInternal;
extern rtn_sync_account_fieldDefaultTypeInternal _rtn_sync_account_field_default_instance_;
class rtn_trade_field;
class rtn_trade_fieldDefaultTypeInternal;
extern rtn_trade_fieldDefaultTypeInternal _rtn_trade_field_default_instance_;
class rtn_whatif;
class rtn_whatifDefaultTypeInternal;
extern rtn_whatifDefaultTypeInternal _rtn_whatif_default_instance_;
class shfe_margin_field;
class shfe_margin_fieldDefaultTypeInternal;
extern shfe_margin_fieldDefaultTypeInternal _shfe_margin_field_default_instance_;
}  // namespace risk

namespace risk {

namespace protobuf_riskapi_5fdata_5fprotocal_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_riskapi_5fdata_5fprotocal_2eproto

// ===================================================================

class error_info : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.error_info) */ {
 public:
  error_info();
  virtual ~error_info();

  error_info(const error_info& from);

  inline error_info& operator=(const error_info& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  error_info(error_info&& from) noexcept
    : error_info() {
    *this = ::std::move(from);
  }

  inline error_info& operator=(error_info&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const error_info& default_instance();

  static inline const error_info* internal_default_instance() {
    return reinterpret_cast<const error_info*>(
               &_error_info_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(error_info* other);
  friend void swap(error_info& a, error_info& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline error_info* New() const PROTOBUF_FINAL { return New(NULL); }

  error_info* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const error_info& from);
  void MergeFrom(const error_info& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(error_info* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string errormsg = 2;
  void clear_errormsg();
  static const int kErrormsgFieldNumber = 2;
  const ::std::string& errormsg() const;
  void set_errormsg(const ::std::string& value);
  #if LANG_CXX11
  void set_errormsg(::std::string&& value);
  #endif
  void set_errormsg(const char* value);
  void set_errormsg(const char* value, size_t size);
  ::std::string* mutable_errormsg();
  ::std::string* release_errormsg();
  void set_allocated_errormsg(::std::string* errormsg);

  // sint32 errorid = 1;
  void clear_errorid();
  static const int kErroridFieldNumber = 1;
  ::google::protobuf::int32 errorid() const;
  void set_errorid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:risk.error_info)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr errormsg_;
  ::google::protobuf::int32 errorid_;
  mutable int _cached_size_;
  friend struct protobuf_riskapi_5fdata_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rsp_head_info : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.rsp_head_info) */ {
 public:
  rsp_head_info();
  virtual ~rsp_head_info();

  rsp_head_info(const rsp_head_info& from);

  inline rsp_head_info& operator=(const rsp_head_info& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rsp_head_info(rsp_head_info&& from) noexcept
    : rsp_head_info() {
    *this = ::std::move(from);
  }

  inline rsp_head_info& operator=(rsp_head_info&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rsp_head_info& default_instance();

  static inline const rsp_head_info* internal_default_instance() {
    return reinterpret_cast<const rsp_head_info*>(
               &_rsp_head_info_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(rsp_head_info* other);
  friend void swap(rsp_head_info& a, rsp_head_info& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rsp_head_info* New() const PROTOBUF_FINAL { return New(NULL); }

  rsp_head_info* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rsp_head_info& from);
  void MergeFrom(const rsp_head_info& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rsp_head_info* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .risk.error_info info = 2;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 2;
  const ::risk::error_info& info() const;
  ::risk::error_info* mutable_info();
  ::risk::error_info* release_info();
  void set_allocated_info(::risk::error_info* info);

  // int32 requestid = 1;
  void clear_requestid();
  static const int kRequestidFieldNumber = 1;
  ::google::protobuf::int32 requestid() const;
  void set_requestid(::google::protobuf::int32 value);

  // bool islast = 3;
  void clear_islast();
  static const int kIslastFieldNumber = 3;
  bool islast() const;
  void set_islast(bool value);

  // @@protoc_insertion_point(class_scope:risk.rsp_head_info)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::risk::error_info* info_;
  ::google::protobuf::int32 requestid_;
  bool islast_;
  mutable int _cached_size_;
  friend struct protobuf_riskapi_5fdata_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rsp_risker_login : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.rsp_risker_login) */ {
 public:
  rsp_risker_login();
  virtual ~rsp_risker_login();

  rsp_risker_login(const rsp_risker_login& from);

  inline rsp_risker_login& operator=(const rsp_risker_login& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rsp_risker_login(rsp_risker_login&& from) noexcept
    : rsp_risker_login() {
    *this = ::std::move(from);
  }

  inline rsp_risker_login& operator=(rsp_risker_login&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rsp_risker_login& default_instance();

  static inline const rsp_risker_login* internal_default_instance() {
    return reinterpret_cast<const rsp_risker_login*>(
               &_rsp_risker_login_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(rsp_risker_login* other);
  friend void swap(rsp_risker_login& a, rsp_risker_login& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rsp_risker_login* New() const PROTOBUF_FINAL { return New(NULL); }

  rsp_risker_login* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rsp_risker_login& from);
  void MergeFrom(const rsp_risker_login& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rsp_risker_login* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .risk.error_info info = 2;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 2;
  const ::risk::error_info& info() const;
  ::risk::error_info* mutable_info();
  ::risk::error_info* release_info();
  void set_allocated_info(::risk::error_info* info);

  // int32 requestid = 1;
  void clear_requestid();
  static const int kRequestidFieldNumber = 1;
  ::google::protobuf::int32 requestid() const;
  void set_requestid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:risk.rsp_risker_login)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::risk::error_info* info_;
  ::google::protobuf::int32 requestid_;
  mutable int _cached_size_;
  friend struct protobuf_riskapi_5fdata_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class instrument_info : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.instrument_info) */ {
 public:
  instrument_info();
  virtual ~instrument_info();

  instrument_info(const instrument_info& from);

  inline instrument_info& operator=(const instrument_info& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  instrument_info(instrument_info&& from) noexcept
    : instrument_info() {
    *this = ::std::move(from);
  }

  inline instrument_info& operator=(instrument_info&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const instrument_info& default_instance();

  static inline const instrument_info* internal_default_instance() {
    return reinterpret_cast<const instrument_info*>(
               &_instrument_info_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(instrument_info* other);
  friend void swap(instrument_info& a, instrument_info& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline instrument_info* New() const PROTOBUF_FINAL { return New(NULL); }

  instrument_info* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const instrument_info& from);
  void MergeFrom(const instrument_info& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(instrument_info* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string contractcode = 1;
  void clear_contractcode();
  static const int kContractcodeFieldNumber = 1;
  const ::std::string& contractcode() const;
  void set_contractcode(const ::std::string& value);
  #if LANG_CXX11
  void set_contractcode(::std::string&& value);
  #endif
  void set_contractcode(const char* value);
  void set_contractcode(const char* value, size_t size);
  ::std::string* mutable_contractcode();
  ::std::string* release_contractcode();
  void set_allocated_contractcode(::std::string* contractcode);

  // string productcode = 2;
  void clear_productcode();
  static const int kProductcodeFieldNumber = 2;
  const ::std::string& productcode() const;
  void set_productcode(const ::std::string& value);
  #if LANG_CXX11
  void set_productcode(::std::string&& value);
  #endif
  void set_productcode(const char* value);
  void set_productcode(const char* value, size_t size);
  ::std::string* mutable_productcode();
  ::std::string* release_productcode();
  void set_allocated_productcode(::std::string* productcode);

  // string productkind = 3;
  void clear_productkind();
  static const int kProductkindFieldNumber = 3;
  const ::std::string& productkind() const;
  void set_productkind(const ::std::string& value);
  #if LANG_CXX11
  void set_productkind(::std::string&& value);
  #endif
  void set_productkind(const char* value);
  void set_productkind(const char* value, size_t size);
  ::std::string* mutable_productkind();
  ::std::string* release_productkind();
  void set_allocated_productkind(::std::string* productkind);

  // string exchangecode = 4;
  void clear_exchangecode();
  static const int kExchangecodeFieldNumber = 4;
  const ::std::string& exchangecode() const;
  void set_exchangecode(const ::std::string& value);
  #if LANG_CXX11
  void set_exchangecode(::std::string&& value);
  #endif
  void set_exchangecode(const char* value);
  void set_exchangecode(const char* value, size_t size);
  ::std::string* mutable_exchangecode();
  ::std::string* release_exchangecode();
  void set_allocated_exchangecode(::std::string* exchangecode);

  // string marketcode = 5;
  void clear_marketcode();
  static const int kMarketcodeFieldNumber = 5;
  const ::std::string& marketcode() const;
  void set_marketcode(const ::std::string& value);
  #if LANG_CXX11
  void set_marketcode(::std::string&& value);
  #endif
  void set_marketcode(const char* value);
  void set_marketcode(const char* value, size_t size);
  ::std::string* mutable_marketcode();
  ::std::string* release_marketcode();
  void set_allocated_marketcode(::std::string* marketcode);

  // string createdate = 6;
  void clear_createdate();
  static const int kCreatedateFieldNumber = 6;
  const ::std::string& createdate() const;
  void set_createdate(const ::std::string& value);
  #if LANG_CXX11
  void set_createdate(::std::string&& value);
  #endif
  void set_createdate(const char* value);
  void set_createdate(const char* value, size_t size);
  ::std::string* mutable_createdate();
  ::std::string* release_createdate();
  void set_allocated_createdate(::std::string* createdate);

  // string opendate = 7;
  void clear_opendate();
  static const int kOpendateFieldNumber = 7;
  const ::std::string& opendate() const;
  void set_opendate(const ::std::string& value);
  #if LANG_CXX11
  void set_opendate(::std::string&& value);
  #endif
  void set_opendate(const char* value);
  void set_opendate(const char* value, size_t size);
  ::std::string* mutable_opendate();
  ::std::string* release_opendate();
  void set_allocated_opendate(::std::string* opendate);

  // string expiredate = 8;
  void clear_expiredate();
  static const int kExpiredateFieldNumber = 8;
  const ::std::string& expiredate() const;
  void set_expiredate(const ::std::string& value);
  #if LANG_CXX11
  void set_expiredate(::std::string&& value);
  #endif
  void set_expiredate(const char* value);
  void set_expiredate(const char* value, size_t size);
  ::std::string* mutable_expiredate();
  ::std::string* release_expiredate();
  void set_allocated_expiredate(::std::string* expiredate);

  // string contractname = 11;
  void clear_contractname();
  static const int kContractnameFieldNumber = 11;
  const ::std::string& contractname() const;
  void set_contractname(const ::std::string& value);
  #if LANG_CXX11
  void set_contractname(::std::string&& value);
  #endif
  void set_contractname(const char* value);
  void set_contractname(const char* value, size_t size);
  ::std::string* mutable_contractname();
  ::std::string* release_contractname();
  void set_allocated_contractname(::std::string* contractname);

  // string delivbegindate = 12;
  void clear_delivbegindate();
  static const int kDelivbegindateFieldNumber = 12;
  const ::std::string& delivbegindate() const;
  void set_delivbegindate(const ::std::string& value);
  #if LANG_CXX11
  void set_delivbegindate(::std::string&& value);
  #endif
  void set_delivbegindate(const char* value);
  void set_delivbegindate(const char* value, size_t size);
  ::std::string* mutable_delivbegindate();
  ::std::string* release_delivbegindate();
  void set_allocated_delivbegindate(::std::string* delivbegindate);

  // string delivenddate = 13;
  void clear_delivenddate();
  static const int kDelivenddateFieldNumber = 13;
  const ::std::string& delivenddate() const;
  void set_delivenddate(const ::std::string& value);
  #if LANG_CXX11
  void set_delivenddate(::std::string&& value);
  #endif
  void set_delivenddate(const char* value);
  void set_delivenddate(const char* value, size_t size);
  ::std::string* mutable_delivenddate();
  ::std::string* release_delivenddate();
  void set_allocated_delivenddate(::std::string* delivenddate);

  // string excontractname = 14;
  void clear_excontractname();
  static const int kExcontractnameFieldNumber = 14;
  const ::std::string& excontractname() const;
  void set_excontractname(const ::std::string& value);
  #if LANG_CXX11
  void set_excontractname(::std::string&& value);
  #endif
  void set_excontractname(const char* value);
  void set_excontractname(const char* value, size_t size);
  ::std::string* mutable_excontractname();
  ::std::string* release_excontractname();
  void set_allocated_excontractname(::std::string* excontractname);

  // string exproductname = 15;
  void clear_exproductname();
  static const int kExproductnameFieldNumber = 15;
  const ::std::string& exproductname() const;
  void set_exproductname(const ::std::string& value);
  #if LANG_CXX11
  void set_exproductname(::std::string&& value);
  #endif
  void set_exproductname(const char* value);
  void set_exproductname(const char* value, size_t size);
  ::std::string* mutable_exproductname();
  ::std::string* release_exproductname();
  void set_allocated_exproductname(::std::string* exproductname);

  // string ismrgndisc = 16;
  void clear_ismrgndisc();
  static const int kIsmrgndiscFieldNumber = 16;
  const ::std::string& ismrgndisc() const;
  void set_ismrgndisc(const ::std::string& value);
  #if LANG_CXX11
  void set_ismrgndisc(::std::string&& value);
  #endif
  void set_ismrgndisc(const char* value);
  void set_ismrgndisc(const char* value, size_t size);
  ::std::string* mutable_ismrgndisc();
  ::std::string* release_ismrgndisc();
  void set_allocated_ismrgndisc(::std::string* ismrgndisc);

  // string productclass = 17;
  void clear_productclass();
  static const int kProductclassFieldNumber = 17;
  const ::std::string& productclass() const;
  void set_productclass(const ::std::string& value);
  #if LANG_CXX11
  void set_productclass(::std::string&& value);
  #endif
  void set_productclass(const char* value);
  void set_productclass(const char* value, size_t size);
  ::std::string* mutable_productclass();
  ::std::string* release_productclass();
  void set_allocated_productclass(::std::string* productclass);

  // string optionstype = 19;
  void clear_optionstype();
  static const int kOptionstypeFieldNumber = 19;
  const ::std::string& optionstype() const;
  void set_optionstype(const ::std::string& value);
  #if LANG_CXX11
  void set_optionstype(::std::string&& value);
  #endif
  void set_optionstype(const char* value);
  void set_optionstype(const char* value, size_t size);
  ::std::string* mutable_optionstype();
  ::std::string* release_optionstype();
  void set_allocated_optionstype(::std::string* optionstype);

  // string underlyinginstrid = 21;
  void clear_underlyinginstrid();
  static const int kUnderlyinginstridFieldNumber = 21;
  const ::std::string& underlyinginstrid() const;
  void set_underlyinginstrid(const ::std::string& value);
  #if LANG_CXX11
  void set_underlyinginstrid(::std::string&& value);
  #endif
  void set_underlyinginstrid(const char* value);
  void set_underlyinginstrid(const char* value, size_t size);
  ::std::string* mutable_underlyinginstrid();
  ::std::string* release_underlyinginstrid();
  void set_allocated_underlyinginstrid(::std::string* underlyinginstrid);

  // string strikemode = 22;
  void clear_strikemode();
  static const int kStrikemodeFieldNumber = 22;
  const ::std::string& strikemode() const;
  void set_strikemode(const ::std::string& value);
  #if LANG_CXX11
  void set_strikemode(::std::string&& value);
  #endif
  void set_strikemode(const char* value);
  void set_strikemode(const char* value, size_t size);
  ::std::string* mutable_strikemode();
  ::std::string* release_strikemode();
  void set_allocated_strikemode(::std::string* strikemode);

  // double pricetick = 10;
  void clear_pricetick();
  static const int kPricetickFieldNumber = 10;
  double pricetick() const;
  void set_pricetick(double value);

  // double baseprice = 18;
  void clear_baseprice();
  static const int kBasepriceFieldNumber = 18;
  double baseprice() const;
  void set_baseprice(double value);

  // double strikeprice = 20;
  void clear_strikeprice();
  static const int kStrikepriceFieldNumber = 20;
  double strikeprice() const;
  void set_strikeprice(double value);

  // double underlyingmultiple = 23;
  void clear_underlyingmultiple();
  static const int kUnderlyingmultipleFieldNumber = 23;
  double underlyingmultiple() const;
  void set_underlyingmultiple(double value);

  // int32 multiplier = 9;
  void clear_multiplier();
  static const int kMultiplierFieldNumber = 9;
  ::google::protobuf::int32 multiplier() const;
  void set_multiplier(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:risk.instrument_info)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr contractcode_;
  ::google::protobuf::internal::ArenaStringPtr productcode_;
  ::google::protobuf::internal::ArenaStringPtr productkind_;
  ::google::protobuf::internal::ArenaStringPtr exchangecode_;
  ::google::protobuf::internal::ArenaStringPtr marketcode_;
  ::google::protobuf::internal::ArenaStringPtr createdate_;
  ::google::protobuf::internal::ArenaStringPtr opendate_;
  ::google::protobuf::internal::ArenaStringPtr expiredate_;
  ::google::protobuf::internal::ArenaStringPtr contractname_;
  ::google::protobuf::internal::ArenaStringPtr delivbegindate_;
  ::google::protobuf::internal::ArenaStringPtr delivenddate_;
  ::google::protobuf::internal::ArenaStringPtr excontractname_;
  ::google::protobuf::internal::ArenaStringPtr exproductname_;
  ::google::protobuf::internal::ArenaStringPtr ismrgndisc_;
  ::google::protobuf::internal::ArenaStringPtr productclass_;
  ::google::protobuf::internal::ArenaStringPtr optionstype_;
  ::google::protobuf::internal::ArenaStringPtr underlyinginstrid_;
  ::google::protobuf::internal::ArenaStringPtr strikemode_;
  double pricetick_;
  double baseprice_;
  double strikeprice_;
  double underlyingmultiple_;
  ::google::protobuf::int32 multiplier_;
  mutable int _cached_size_;
  friend struct protobuf_riskapi_5fdata_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rsp_instrument_field : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.rsp_instrument_field) */ {
 public:
  rsp_instrument_field();
  virtual ~rsp_instrument_field();

  rsp_instrument_field(const rsp_instrument_field& from);

  inline rsp_instrument_field& operator=(const rsp_instrument_field& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rsp_instrument_field(rsp_instrument_field&& from) noexcept
    : rsp_instrument_field() {
    *this = ::std::move(from);
  }

  inline rsp_instrument_field& operator=(rsp_instrument_field&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rsp_instrument_field& default_instance();

  static inline const rsp_instrument_field* internal_default_instance() {
    return reinterpret_cast<const rsp_instrument_field*>(
               &_rsp_instrument_field_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(rsp_instrument_field* other);
  friend void swap(rsp_instrument_field& a, rsp_instrument_field& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rsp_instrument_field* New() const PROTOBUF_FINAL { return New(NULL); }

  rsp_instrument_field* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rsp_instrument_field& from);
  void MergeFrom(const rsp_instrument_field& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rsp_instrument_field* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .risk.rsp_head_info header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::risk::rsp_head_info& header() const;
  ::risk::rsp_head_info* mutable_header();
  ::risk::rsp_head_info* release_header();
  void set_allocated_header(::risk::rsp_head_info* header);

  // .risk.instrument_info field = 2;
  bool has_field() const;
  void clear_field();
  static const int kFieldFieldNumber = 2;
  const ::risk::instrument_info& field() const;
  ::risk::instrument_info* mutable_field();
  ::risk::instrument_info* release_field();
  void set_allocated_field(::risk::instrument_info* field);

  // @@protoc_insertion_point(class_scope:risk.rsp_instrument_field)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::risk::rsp_head_info* header_;
  ::risk::instrument_info* field_;
  mutable int _cached_size_;
  friend struct protobuf_riskapi_5fdata_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rtn_quote_field : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.rtn_quote_field) */ {
 public:
  rtn_quote_field();
  virtual ~rtn_quote_field();

  rtn_quote_field(const rtn_quote_field& from);

  inline rtn_quote_field& operator=(const rtn_quote_field& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rtn_quote_field(rtn_quote_field&& from) noexcept
    : rtn_quote_field() {
    *this = ::std::move(from);
  }

  inline rtn_quote_field& operator=(rtn_quote_field&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rtn_quote_field& default_instance();

  static inline const rtn_quote_field* internal_default_instance() {
    return reinterpret_cast<const rtn_quote_field*>(
               &_rtn_quote_field_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(rtn_quote_field* other);
  friend void swap(rtn_quote_field& a, rtn_quote_field& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rtn_quote_field* New() const PROTOBUF_FINAL { return New(NULL); }

  rtn_quote_field* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rtn_quote_field& from);
  void MergeFrom(const rtn_quote_field& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rtn_quote_field* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .risk.quote_gateway_market_field field = 1;
  bool has_field() const;
  void clear_field();
  static const int kFieldFieldNumber = 1;
  const ::risk::quote_gateway_market_field& field() const;
  ::risk::quote_gateway_market_field* mutable_field();
  ::risk::quote_gateway_market_field* release_field();
  void set_allocated_field(::risk::quote_gateway_market_field* field);

  // @@protoc_insertion_point(class_scope:risk.rtn_quote_field)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::risk::quote_gateway_market_field* field_;
  mutable int _cached_size_;
  friend struct protobuf_riskapi_5fdata_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rsp_position_field : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.rsp_position_field) */ {
 public:
  rsp_position_field();
  virtual ~rsp_position_field();

  rsp_position_field(const rsp_position_field& from);

  inline rsp_position_field& operator=(const rsp_position_field& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rsp_position_field(rsp_position_field&& from) noexcept
    : rsp_position_field() {
    *this = ::std::move(from);
  }

  inline rsp_position_field& operator=(rsp_position_field&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rsp_position_field& default_instance();

  static inline const rsp_position_field* internal_default_instance() {
    return reinterpret_cast<const rsp_position_field*>(
               &_rsp_position_field_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(rsp_position_field* other);
  friend void swap(rsp_position_field& a, rsp_position_field& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rsp_position_field* New() const PROTOBUF_FINAL { return New(NULL); }

  rsp_position_field* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rsp_position_field& from);
  void MergeFrom(const rsp_position_field& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rsp_position_field* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .risk.rsp_head_info header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::risk::rsp_head_info& header() const;
  ::risk::rsp_head_info* mutable_header();
  ::risk::rsp_head_info* release_header();
  void set_allocated_header(::risk::rsp_head_info* header);

  // .risk.trade_gateway_position_field field = 2;
  bool has_field() const;
  void clear_field();
  static const int kFieldFieldNumber = 2;
  const ::risk::trade_gateway_position_field& field() const;
  ::risk::trade_gateway_position_field* mutable_field();
  ::risk::trade_gateway_position_field* release_field();
  void set_allocated_field(::risk::trade_gateway_position_field* field);

  // double trypositionprofit = 3;
  void clear_trypositionprofit();
  static const int kTrypositionprofitFieldNumber = 3;
  double trypositionprofit() const;
  void set_trypositionprofit(double value);

  // @@protoc_insertion_point(class_scope:risk.rsp_position_field)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::risk::rsp_head_info* header_;
  ::risk::trade_gateway_position_field* field_;
  double trypositionprofit_;
  mutable int _cached_size_;
  friend struct protobuf_riskapi_5fdata_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rtn_position_field : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.rtn_position_field) */ {
 public:
  rtn_position_field();
  virtual ~rtn_position_field();

  rtn_position_field(const rtn_position_field& from);

  inline rtn_position_field& operator=(const rtn_position_field& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rtn_position_field(rtn_position_field&& from) noexcept
    : rtn_position_field() {
    *this = ::std::move(from);
  }

  inline rtn_position_field& operator=(rtn_position_field&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rtn_position_field& default_instance();

  static inline const rtn_position_field* internal_default_instance() {
    return reinterpret_cast<const rtn_position_field*>(
               &_rtn_position_field_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(rtn_position_field* other);
  friend void swap(rtn_position_field& a, rtn_position_field& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rtn_position_field* New() const PROTOBUF_FINAL { return New(NULL); }

  rtn_position_field* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rtn_position_field& from);
  void MergeFrom(const rtn_position_field& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rtn_position_field* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .risk.trade_gateway_position_field field = 1;
  bool has_field() const;
  void clear_field();
  static const int kFieldFieldNumber = 1;
  const ::risk::trade_gateway_position_field& field() const;
  ::risk::trade_gateway_position_field* mutable_field();
  ::risk::trade_gateway_position_field* release_field();
  void set_allocated_field(::risk::trade_gateway_position_field* field);

  // double trypositionprofit = 2;
  void clear_trypositionprofit();
  static const int kTrypositionprofitFieldNumber = 2;
  double trypositionprofit() const;
  void set_trypositionprofit(double value);

  // @@protoc_insertion_point(class_scope:risk.rtn_position_field)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::risk::trade_gateway_position_field* field_;
  double trypositionprofit_;
  mutable int _cached_size_;
  friend struct protobuf_riskapi_5fdata_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rsp_trade_field : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.rsp_trade_field) */ {
 public:
  rsp_trade_field();
  virtual ~rsp_trade_field();

  rsp_trade_field(const rsp_trade_field& from);

  inline rsp_trade_field& operator=(const rsp_trade_field& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rsp_trade_field(rsp_trade_field&& from) noexcept
    : rsp_trade_field() {
    *this = ::std::move(from);
  }

  inline rsp_trade_field& operator=(rsp_trade_field&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rsp_trade_field& default_instance();

  static inline const rsp_trade_field* internal_default_instance() {
    return reinterpret_cast<const rsp_trade_field*>(
               &_rsp_trade_field_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(rsp_trade_field* other);
  friend void swap(rsp_trade_field& a, rsp_trade_field& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rsp_trade_field* New() const PROTOBUF_FINAL { return New(NULL); }

  rsp_trade_field* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rsp_trade_field& from);
  void MergeFrom(const rsp_trade_field& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rsp_trade_field* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .risk.rsp_head_info header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::risk::rsp_head_info& header() const;
  ::risk::rsp_head_info* mutable_header();
  ::risk::rsp_head_info* release_header();
  void set_allocated_header(::risk::rsp_head_info* header);

  // .risk.trade_gateway_trade_field field = 2;
  bool has_field() const;
  void clear_field();
  static const int kFieldFieldNumber = 2;
  const ::risk::trade_gateway_trade_field& field() const;
  ::risk::trade_gateway_trade_field* mutable_field();
  ::risk::trade_gateway_trade_field* release_field();
  void set_allocated_field(::risk::trade_gateway_trade_field* field);

  // @@protoc_insertion_point(class_scope:risk.rsp_trade_field)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::risk::rsp_head_info* header_;
  ::risk::trade_gateway_trade_field* field_;
  mutable int _cached_size_;
  friend struct protobuf_riskapi_5fdata_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rsp_order_field : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.rsp_order_field) */ {
 public:
  rsp_order_field();
  virtual ~rsp_order_field();

  rsp_order_field(const rsp_order_field& from);

  inline rsp_order_field& operator=(const rsp_order_field& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rsp_order_field(rsp_order_field&& from) noexcept
    : rsp_order_field() {
    *this = ::std::move(from);
  }

  inline rsp_order_field& operator=(rsp_order_field&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rsp_order_field& default_instance();

  static inline const rsp_order_field* internal_default_instance() {
    return reinterpret_cast<const rsp_order_field*>(
               &_rsp_order_field_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(rsp_order_field* other);
  friend void swap(rsp_order_field& a, rsp_order_field& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rsp_order_field* New() const PROTOBUF_FINAL { return New(NULL); }

  rsp_order_field* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rsp_order_field& from);
  void MergeFrom(const rsp_order_field& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rsp_order_field* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .risk.rsp_head_info header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::risk::rsp_head_info& header() const;
  ::risk::rsp_head_info* mutable_header();
  ::risk::rsp_head_info* release_header();
  void set_allocated_header(::risk::rsp_head_info* header);

  // .risk.trade_gateway_order_field field = 2;
  bool has_field() const;
  void clear_field();
  static const int kFieldFieldNumber = 2;
  const ::risk::trade_gateway_order_field& field() const;
  ::risk::trade_gateway_order_field* mutable_field();
  ::risk::trade_gateway_order_field* release_field();
  void set_allocated_field(::risk::trade_gateway_order_field* field);

  // @@protoc_insertion_point(class_scope:risk.rsp_order_field)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::risk::rsp_head_info* header_;
  ::risk::trade_gateway_order_field* field_;
  mutable int _cached_size_;
  friend struct protobuf_riskapi_5fdata_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rtn_trade_field : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.rtn_trade_field) */ {
 public:
  rtn_trade_field();
  virtual ~rtn_trade_field();

  rtn_trade_field(const rtn_trade_field& from);

  inline rtn_trade_field& operator=(const rtn_trade_field& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rtn_trade_field(rtn_trade_field&& from) noexcept
    : rtn_trade_field() {
    *this = ::std::move(from);
  }

  inline rtn_trade_field& operator=(rtn_trade_field&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rtn_trade_field& default_instance();

  static inline const rtn_trade_field* internal_default_instance() {
    return reinterpret_cast<const rtn_trade_field*>(
               &_rtn_trade_field_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(rtn_trade_field* other);
  friend void swap(rtn_trade_field& a, rtn_trade_field& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rtn_trade_field* New() const PROTOBUF_FINAL { return New(NULL); }

  rtn_trade_field* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rtn_trade_field& from);
  void MergeFrom(const rtn_trade_field& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rtn_trade_field* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .risk.trade_gateway_trade_field field = 1;
  bool has_field() const;
  void clear_field();
  static const int kFieldFieldNumber = 1;
  const ::risk::trade_gateway_trade_field& field() const;
  ::risk::trade_gateway_trade_field* mutable_field();
  ::risk::trade_gateway_trade_field* release_field();
  void set_allocated_field(::risk::trade_gateway_trade_field* field);

  // @@protoc_insertion_point(class_scope:risk.rtn_trade_field)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::risk::trade_gateway_trade_field* field_;
  mutable int _cached_size_;
  friend struct protobuf_riskapi_5fdata_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rtn_order_field : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.rtn_order_field) */ {
 public:
  rtn_order_field();
  virtual ~rtn_order_field();

  rtn_order_field(const rtn_order_field& from);

  inline rtn_order_field& operator=(const rtn_order_field& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rtn_order_field(rtn_order_field&& from) noexcept
    : rtn_order_field() {
    *this = ::std::move(from);
  }

  inline rtn_order_field& operator=(rtn_order_field&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rtn_order_field& default_instance();

  static inline const rtn_order_field* internal_default_instance() {
    return reinterpret_cast<const rtn_order_field*>(
               &_rtn_order_field_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(rtn_order_field* other);
  friend void swap(rtn_order_field& a, rtn_order_field& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rtn_order_field* New() const PROTOBUF_FINAL { return New(NULL); }

  rtn_order_field* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rtn_order_field& from);
  void MergeFrom(const rtn_order_field& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rtn_order_field* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .risk.trade_gateway_order_field field = 1;
  bool has_field() const;
  void clear_field();
  static const int kFieldFieldNumber = 1;
  const ::risk::trade_gateway_order_field& field() const;
  ::risk::trade_gateway_order_field* mutable_field();
  ::risk::trade_gateway_order_field* release_field();
  void set_allocated_field(::risk::trade_gateway_order_field* field);

  // @@protoc_insertion_point(class_scope:risk.rtn_order_field)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::risk::trade_gateway_order_field* field_;
  mutable int _cached_size_;
  friend struct protobuf_riskapi_5fdata_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rsp_sync_account_field : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.rsp_sync_account_field) */ {
 public:
  rsp_sync_account_field();
  virtual ~rsp_sync_account_field();

  rsp_sync_account_field(const rsp_sync_account_field& from);

  inline rsp_sync_account_field& operator=(const rsp_sync_account_field& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rsp_sync_account_field(rsp_sync_account_field&& from) noexcept
    : rsp_sync_account_field() {
    *this = ::std::move(from);
  }

  inline rsp_sync_account_field& operator=(rsp_sync_account_field&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rsp_sync_account_field& default_instance();

  static inline const rsp_sync_account_field* internal_default_instance() {
    return reinterpret_cast<const rsp_sync_account_field*>(
               &_rsp_sync_account_field_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(rsp_sync_account_field* other);
  friend void swap(rsp_sync_account_field& a, rsp_sync_account_field& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rsp_sync_account_field* New() const PROTOBUF_FINAL { return New(NULL); }

  rsp_sync_account_field* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rsp_sync_account_field& from);
  void MergeFrom(const rsp_sync_account_field& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rsp_sync_account_field* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .risk.rsp_head_info header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::risk::rsp_head_info& header() const;
  ::risk::rsp_head_info* mutable_header();
  ::risk::rsp_head_info* release_header();
  void set_allocated_header(::risk::rsp_head_info* header);

  // .risk.trade_gateway_sync_account_field field = 2;
  bool has_field() const;
  void clear_field();
  static const int kFieldFieldNumber = 2;
  const ::risk::trade_gateway_sync_account_field& field() const;
  ::risk::trade_gateway_sync_account_field* mutable_field();
  ::risk::trade_gateway_sync_account_field* release_field();
  void set_allocated_field(::risk::trade_gateway_sync_account_field* field);

  // @@protoc_insertion_point(class_scope:risk.rsp_sync_account_field)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::risk::rsp_head_info* header_;
  ::risk::trade_gateway_sync_account_field* field_;
  mutable int _cached_size_;
  friend struct protobuf_riskapi_5fdata_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rtn_sync_account_field : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.rtn_sync_account_field) */ {
 public:
  rtn_sync_account_field();
  virtual ~rtn_sync_account_field();

  rtn_sync_account_field(const rtn_sync_account_field& from);

  inline rtn_sync_account_field& operator=(const rtn_sync_account_field& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rtn_sync_account_field(rtn_sync_account_field&& from) noexcept
    : rtn_sync_account_field() {
    *this = ::std::move(from);
  }

  inline rtn_sync_account_field& operator=(rtn_sync_account_field&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rtn_sync_account_field& default_instance();

  static inline const rtn_sync_account_field* internal_default_instance() {
    return reinterpret_cast<const rtn_sync_account_field*>(
               &_rtn_sync_account_field_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(rtn_sync_account_field* other);
  friend void swap(rtn_sync_account_field& a, rtn_sync_account_field& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rtn_sync_account_field* New() const PROTOBUF_FINAL { return New(NULL); }

  rtn_sync_account_field* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rtn_sync_account_field& from);
  void MergeFrom(const rtn_sync_account_field& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rtn_sync_account_field* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .risk.trade_gateway_sync_account_field field = 1;
  bool has_field() const;
  void clear_field();
  static const int kFieldFieldNumber = 1;
  const ::risk::trade_gateway_sync_account_field& field() const;
  ::risk::trade_gateway_sync_account_field* mutable_field();
  ::risk::trade_gateway_sync_account_field* release_field();
  void set_allocated_field(::risk::trade_gateway_sync_account_field* field);

  // @@protoc_insertion_point(class_scope:risk.rtn_sync_account_field)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::risk::trade_gateway_sync_account_field* field_;
  mutable int _cached_size_;
  friend struct protobuf_riskapi_5fdata_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class shfe_margin_field : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.shfe_margin_field) */ {
 public:
  shfe_margin_field();
  virtual ~shfe_margin_field();

  shfe_margin_field(const shfe_margin_field& from);

  inline shfe_margin_field& operator=(const shfe_margin_field& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  shfe_margin_field(shfe_margin_field&& from) noexcept
    : shfe_margin_field() {
    *this = ::std::move(from);
  }

  inline shfe_margin_field& operator=(shfe_margin_field&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const shfe_margin_field& default_instance();

  static inline const shfe_margin_field* internal_default_instance() {
    return reinterpret_cast<const shfe_margin_field*>(
               &_shfe_margin_field_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(shfe_margin_field* other);
  friend void swap(shfe_margin_field& a, shfe_margin_field& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline shfe_margin_field* New() const PROTOBUF_FINAL { return New(NULL); }

  shfe_margin_field* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const shfe_margin_field& from);
  void MergeFrom(const shfe_margin_field& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(shfe_margin_field* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double pre_favorable = 1;
  void clear_pre_favorable();
  static const int kPreFavorableFieldNumber = 1;
  double pre_favorable() const;
  void set_pre_favorable(double value);

  // double big_side_favorable = 2;
  void clear_big_side_favorable();
  static const int kBigSideFavorableFieldNumber = 2;
  double big_side_favorable() const;
  void set_big_side_favorable(double value);

  // @@protoc_insertion_point(class_scope:risk.shfe_margin_field)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double pre_favorable_;
  double big_side_favorable_;
  mutable int _cached_size_;
  friend struct protobuf_riskapi_5fdata_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class cffex_margin_field : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.cffex_margin_field) */ {
 public:
  cffex_margin_field();
  virtual ~cffex_margin_field();

  cffex_margin_field(const cffex_margin_field& from);

  inline cffex_margin_field& operator=(const cffex_margin_field& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  cffex_margin_field(cffex_margin_field&& from) noexcept
    : cffex_margin_field() {
    *this = ::std::move(from);
  }

  inline cffex_margin_field& operator=(cffex_margin_field&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const cffex_margin_field& default_instance();

  static inline const cffex_margin_field* internal_default_instance() {
    return reinterpret_cast<const cffex_margin_field*>(
               &_cffex_margin_field_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(cffex_margin_field* other);
  friend void swap(cffex_margin_field& a, cffex_margin_field& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline cffex_margin_field* New() const PROTOBUF_FINAL { return New(NULL); }

  cffex_margin_field* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const cffex_margin_field& from);
  void MergeFrom(const cffex_margin_field& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(cffex_margin_field* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double pre_favorable = 1;
  void clear_pre_favorable();
  static const int kPreFavorableFieldNumber = 1;
  double pre_favorable() const;
  void set_pre_favorable(double value);

  // double speculation_favorable = 2;
  void clear_speculation_favorable();
  static const int kSpeculationFavorableFieldNumber = 2;
  double speculation_favorable() const;
  void set_speculation_favorable(double value);

  // double hedging_favorable = 3;
  void clear_hedging_favorable();
  static const int kHedgingFavorableFieldNumber = 3;
  double hedging_favorable() const;
  void set_hedging_favorable(double value);

  // double arbitrage_favorable = 4;
  void clear_arbitrage_favorable();
  static const int kArbitrageFavorableFieldNumber = 4;
  double arbitrage_favorable() const;
  void set_arbitrage_favorable(double value);

  // double market_favorable = 5;
  void clear_market_favorable();
  static const int kMarketFavorableFieldNumber = 5;
  double market_favorable() const;
  void set_market_favorable(double value);

  // @@protoc_insertion_point(class_scope:risk.cffex_margin_field)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double pre_favorable_;
  double speculation_favorable_;
  double hedging_favorable_;
  double arbitrage_favorable_;
  double market_favorable_;
  mutable int _cached_size_;
  friend struct protobuf_riskapi_5fdata_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class dce_margin_field : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.dce_margin_field) */ {
 public:
  dce_margin_field();
  virtual ~dce_margin_field();

  dce_margin_field(const dce_margin_field& from);

  inline dce_margin_field& operator=(const dce_margin_field& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  dce_margin_field(dce_margin_field&& from) noexcept
    : dce_margin_field() {
    *this = ::std::move(from);
  }

  inline dce_margin_field& operator=(dce_margin_field&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const dce_margin_field& default_instance();

  static inline const dce_margin_field* internal_default_instance() {
    return reinterpret_cast<const dce_margin_field*>(
               &_dce_margin_field_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(dce_margin_field* other);
  friend void swap(dce_margin_field& a, dce_margin_field& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline dce_margin_field* New() const PROTOBUF_FINAL { return New(NULL); }

  dce_margin_field* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const dce_margin_field& from);
  void MergeFrom(const dce_margin_field& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(dce_margin_field* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double pre_favorable = 1;
  void clear_pre_favorable();
  static const int kPreFavorableFieldNumber = 1;
  double pre_favorable() const;
  void set_pre_favorable(double value);

  // double sp_favorable = 2;
  void clear_sp_favorable();
  static const int kSpFavorableFieldNumber = 2;
  double sp_favorable() const;
  void set_sp_favorable(double value);

  // double spc_favorable = 3;
  void clear_spc_favorable();
  static const int kSpcFavorableFieldNumber = 3;
  double spc_favorable() const;
  void set_spc_favorable(double value);

  // double locked_favorable = 4;
  void clear_locked_favorable();
  static const int kLockedFavorableFieldNumber = 4;
  double locked_favorable() const;
  void set_locked_favorable(double value);

  // @@protoc_insertion_point(class_scope:risk.dce_margin_field)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double pre_favorable_;
  double sp_favorable_;
  double spc_favorable_;
  double locked_favorable_;
  mutable int _cached_size_;
  friend struct protobuf_riskapi_5fdata_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class czce_margin_field : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.czce_margin_field) */ {
 public:
  czce_margin_field();
  virtual ~czce_margin_field();

  czce_margin_field(const czce_margin_field& from);

  inline czce_margin_field& operator=(const czce_margin_field& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  czce_margin_field(czce_margin_field&& from) noexcept
    : czce_margin_field() {
    *this = ::std::move(from);
  }

  inline czce_margin_field& operator=(czce_margin_field&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const czce_margin_field& default_instance();

  static inline const czce_margin_field* internal_default_instance() {
    return reinterpret_cast<const czce_margin_field*>(
               &_czce_margin_field_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(czce_margin_field* other);
  friend void swap(czce_margin_field& a, czce_margin_field& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline czce_margin_field* New() const PROTOBUF_FINAL { return New(NULL); }

  czce_margin_field* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const czce_margin_field& from);
  void MergeFrom(const czce_margin_field& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(czce_margin_field* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double pre_favorable = 1;
  void clear_pre_favorable();
  static const int kPreFavorableFieldNumber = 1;
  double pre_favorable() const;
  void set_pre_favorable(double value);

  // double spd_favorable = 2;
  void clear_spd_favorable();
  static const int kSpdFavorableFieldNumber = 2;
  double spd_favorable() const;
  void set_spd_favorable(double value);

  // double ips_favorable = 3;
  void clear_ips_favorable();
  static const int kIpsFavorableFieldNumber = 3;
  double ips_favorable() const;
  void set_ips_favorable(double value);

  // double prt_favorable = 4;
  void clear_prt_favorable();
  static const int kPrtFavorableFieldNumber = 4;
  double prt_favorable() const;
  void set_prt_favorable(double value);

  // double std_favorable = 5;
  void clear_std_favorable();
  static const int kStdFavorableFieldNumber = 5;
  double std_favorable() const;
  void set_std_favorable(double value);

  // double stg_favorable = 6;
  void clear_stg_favorable();
  static const int kStgFavorableFieldNumber = 6;
  double stg_favorable() const;
  void set_stg_favorable(double value);

  // double zprt_favorable = 7;
  void clear_zprt_favorable();
  static const int kZprtFavorableFieldNumber = 7;
  double zprt_favorable() const;
  void set_zprt_favorable(double value);

  // double locked_favorable = 8;
  void clear_locked_favorable();
  static const int kLockedFavorableFieldNumber = 8;
  double locked_favorable() const;
  void set_locked_favorable(double value);

  // @@protoc_insertion_point(class_scope:risk.czce_margin_field)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double pre_favorable_;
  double spd_favorable_;
  double ips_favorable_;
  double prt_favorable_;
  double std_favorable_;
  double stg_favorable_;
  double zprt_favorable_;
  double locked_favorable_;
  mutable int _cached_size_;
  friend struct protobuf_riskapi_5fdata_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ine_margin_field : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.ine_margin_field) */ {
 public:
  ine_margin_field();
  virtual ~ine_margin_field();

  ine_margin_field(const ine_margin_field& from);

  inline ine_margin_field& operator=(const ine_margin_field& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ine_margin_field(ine_margin_field&& from) noexcept
    : ine_margin_field() {
    *this = ::std::move(from);
  }

  inline ine_margin_field& operator=(ine_margin_field&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ine_margin_field& default_instance();

  static inline const ine_margin_field* internal_default_instance() {
    return reinterpret_cast<const ine_margin_field*>(
               &_ine_margin_field_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(ine_margin_field* other);
  friend void swap(ine_margin_field& a, ine_margin_field& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ine_margin_field* New() const PROTOBUF_FINAL { return New(NULL); }

  ine_margin_field* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ine_margin_field& from);
  void MergeFrom(const ine_margin_field& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ine_margin_field* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double pre_favorable = 1;
  void clear_pre_favorable();
  static const int kPreFavorableFieldNumber = 1;
  double pre_favorable() const;
  void set_pre_favorable(double value);

  // double big_side_favorable = 2;
  void clear_big_side_favorable();
  static const int kBigSideFavorableFieldNumber = 2;
  double big_side_favorable() const;
  void set_big_side_favorable(double value);

  // @@protoc_insertion_point(class_scope:risk.ine_margin_field)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double pre_favorable_;
  double big_side_favorable_;
  mutable int _cached_size_;
  friend struct protobuf_riskapi_5fdata_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class delivery_margin_field : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.delivery_margin_field) */ {
 public:
  delivery_margin_field();
  virtual ~delivery_margin_field();

  delivery_margin_field(const delivery_margin_field& from);

  inline delivery_margin_field& operator=(const delivery_margin_field& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  delivery_margin_field(delivery_margin_field&& from) noexcept
    : delivery_margin_field() {
    *this = ::std::move(from);
  }

  inline delivery_margin_field& operator=(delivery_margin_field&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const delivery_margin_field& default_instance();

  static inline const delivery_margin_field* internal_default_instance() {
    return reinterpret_cast<const delivery_margin_field*>(
               &_delivery_margin_field_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(delivery_margin_field* other);
  friend void swap(delivery_margin_field& a, delivery_margin_field& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline delivery_margin_field* New() const PROTOBUF_FINAL { return New(NULL); }

  delivery_margin_field* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const delivery_margin_field& from);
  void MergeFrom(const delivery_margin_field& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(delivery_margin_field* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double shfe_margin = 1;
  void clear_shfe_margin();
  static const int kShfeMarginFieldNumber = 1;
  double shfe_margin() const;
  void set_shfe_margin(double value);

  // double cffex_margin = 2;
  void clear_cffex_margin();
  static const int kCffexMarginFieldNumber = 2;
  double cffex_margin() const;
  void set_cffex_margin(double value);

  // double dce_margin = 3;
  void clear_dce_margin();
  static const int kDceMarginFieldNumber = 3;
  double dce_margin() const;
  void set_dce_margin(double value);

  // double czce_margin = 4;
  void clear_czce_margin();
  static const int kCzceMarginFieldNumber = 4;
  double czce_margin() const;
  void set_czce_margin(double value);

  // double ine_margin = 5;
  void clear_ine_margin();
  static const int kIneMarginFieldNumber = 5;
  double ine_margin() const;
  void set_ine_margin(double value);

  // @@protoc_insertion_point(class_scope:risk.delivery_margin_field)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double shfe_margin_;
  double cffex_margin_;
  double dce_margin_;
  double czce_margin_;
  double ine_margin_;
  mutable int _cached_size_;
  friend struct protobuf_riskapi_5fdata_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rtn_margin_field : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.rtn_margin_field) */ {
 public:
  rtn_margin_field();
  virtual ~rtn_margin_field();

  rtn_margin_field(const rtn_margin_field& from);

  inline rtn_margin_field& operator=(const rtn_margin_field& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rtn_margin_field(rtn_margin_field&& from) noexcept
    : rtn_margin_field() {
    *this = ::std::move(from);
  }

  inline rtn_margin_field& operator=(rtn_margin_field&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rtn_margin_field& default_instance();

  static inline const rtn_margin_field* internal_default_instance() {
    return reinterpret_cast<const rtn_margin_field*>(
               &_rtn_margin_field_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(rtn_margin_field* other);
  friend void swap(rtn_margin_field& a, rtn_margin_field& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rtn_margin_field* New() const PROTOBUF_FINAL { return New(NULL); }

  rtn_margin_field* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rtn_margin_field& from);
  void MergeFrom(const rtn_margin_field& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rtn_margin_field* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string investor = 2;
  void clear_investor();
  static const int kInvestorFieldNumber = 2;
  const ::std::string& investor() const;
  void set_investor(const ::std::string& value);
  #if LANG_CXX11
  void set_investor(::std::string&& value);
  #endif
  void set_investor(const char* value);
  void set_investor(const char* value, size_t size);
  ::std::string* mutable_investor();
  ::std::string* release_investor();
  void set_allocated_investor(::std::string* investor);

  // .risk.shfe_margin_field shfe_margin = 3;
  bool has_shfe_margin() const;
  void clear_shfe_margin();
  static const int kShfeMarginFieldNumber = 3;
  const ::risk::shfe_margin_field& shfe_margin() const;
  ::risk::shfe_margin_field* mutable_shfe_margin();
  ::risk::shfe_margin_field* release_shfe_margin();
  void set_allocated_shfe_margin(::risk::shfe_margin_field* shfe_margin);

  // .risk.cffex_margin_field cffex_margin = 4;
  bool has_cffex_margin() const;
  void clear_cffex_margin();
  static const int kCffexMarginFieldNumber = 4;
  const ::risk::cffex_margin_field& cffex_margin() const;
  ::risk::cffex_margin_field* mutable_cffex_margin();
  ::risk::cffex_margin_field* release_cffex_margin();
  void set_allocated_cffex_margin(::risk::cffex_margin_field* cffex_margin);

  // .risk.dce_margin_field dce_margin = 5;
  bool has_dce_margin() const;
  void clear_dce_margin();
  static const int kDceMarginFieldNumber = 5;
  const ::risk::dce_margin_field& dce_margin() const;
  ::risk::dce_margin_field* mutable_dce_margin();
  ::risk::dce_margin_field* release_dce_margin();
  void set_allocated_dce_margin(::risk::dce_margin_field* dce_margin);

  // .risk.czce_margin_field czce_margin = 6;
  bool has_czce_margin() const;
  void clear_czce_margin();
  static const int kCzceMarginFieldNumber = 6;
  const ::risk::czce_margin_field& czce_margin() const;
  ::risk::czce_margin_field* mutable_czce_margin();
  ::risk::czce_margin_field* release_czce_margin();
  void set_allocated_czce_margin(::risk::czce_margin_field* czce_margin);

  // .risk.ine_margin_field ine_margin = 7;
  bool has_ine_margin() const;
  void clear_ine_margin();
  static const int kIneMarginFieldNumber = 7;
  const ::risk::ine_margin_field& ine_margin() const;
  ::risk::ine_margin_field* mutable_ine_margin();
  ::risk::ine_margin_field* release_ine_margin();
  void set_allocated_ine_margin(::risk::ine_margin_field* ine_margin);

  // .risk.delivery_margin_field delivery_margin = 8;
  bool has_delivery_margin() const;
  void clear_delivery_margin();
  static const int kDeliveryMarginFieldNumber = 8;
  const ::risk::delivery_margin_field& delivery_margin() const;
  ::risk::delivery_margin_field* mutable_delivery_margin();
  ::risk::delivery_margin_field* release_delivery_margin();
  void set_allocated_delivery_margin(::risk::delivery_margin_field* delivery_margin);

  // uint32 timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::uint32 timestamp() const;
  void set_timestamp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:risk.rtn_margin_field)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr investor_;
  ::risk::shfe_margin_field* shfe_margin_;
  ::risk::cffex_margin_field* cffex_margin_;
  ::risk::dce_margin_field* dce_margin_;
  ::risk::czce_margin_field* czce_margin_;
  ::risk::ine_margin_field* ine_margin_;
  ::risk::delivery_margin_field* delivery_margin_;
  ::google::protobuf::uint32 timestamp_;
  mutable int _cached_size_;
  friend struct protobuf_riskapi_5fdata_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rsp_margin_field : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.rsp_margin_field) */ {
 public:
  rsp_margin_field();
  virtual ~rsp_margin_field();

  rsp_margin_field(const rsp_margin_field& from);

  inline rsp_margin_field& operator=(const rsp_margin_field& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rsp_margin_field(rsp_margin_field&& from) noexcept
    : rsp_margin_field() {
    *this = ::std::move(from);
  }

  inline rsp_margin_field& operator=(rsp_margin_field&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rsp_margin_field& default_instance();

  static inline const rsp_margin_field* internal_default_instance() {
    return reinterpret_cast<const rsp_margin_field*>(
               &_rsp_margin_field_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(rsp_margin_field* other);
  friend void swap(rsp_margin_field& a, rsp_margin_field& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rsp_margin_field* New() const PROTOBUF_FINAL { return New(NULL); }

  rsp_margin_field* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rsp_margin_field& from);
  void MergeFrom(const rsp_margin_field& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rsp_margin_field* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .risk.rsp_head_info header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::risk::rsp_head_info& header() const;
  ::risk::rsp_head_info* mutable_header();
  ::risk::rsp_head_info* release_header();
  void set_allocated_header(::risk::rsp_head_info* header);

  // .risk.rtn_margin_field field = 2;
  bool has_field() const;
  void clear_field();
  static const int kFieldFieldNumber = 2;
  const ::risk::rtn_margin_field& field() const;
  ::risk::rtn_margin_field* mutable_field();
  ::risk::rtn_margin_field* release_field();
  void set_allocated_field(::risk::rtn_margin_field* field);

  // @@protoc_insertion_point(class_scope:risk.rsp_margin_field)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::risk::rsp_head_info* header_;
  ::risk::rtn_margin_field* field_;
  mutable int _cached_size_;
  friend struct protobuf_riskapi_5fdata_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rsp_risker_investor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.rsp_risker_investor) */ {
 public:
  rsp_risker_investor();
  virtual ~rsp_risker_investor();

  rsp_risker_investor(const rsp_risker_investor& from);

  inline rsp_risker_investor& operator=(const rsp_risker_investor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rsp_risker_investor(rsp_risker_investor&& from) noexcept
    : rsp_risker_investor() {
    *this = ::std::move(from);
  }

  inline rsp_risker_investor& operator=(rsp_risker_investor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rsp_risker_investor& default_instance();

  static inline const rsp_risker_investor* internal_default_instance() {
    return reinterpret_cast<const rsp_risker_investor*>(
               &_rsp_risker_investor_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(rsp_risker_investor* other);
  friend void swap(rsp_risker_investor& a, rsp_risker_investor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rsp_risker_investor* New() const PROTOBUF_FINAL { return New(NULL); }

  rsp_risker_investor* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rsp_risker_investor& from);
  void MergeFrom(const rsp_risker_investor& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rsp_risker_investor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string riskgroupid = 2;
  void clear_riskgroupid();
  static const int kRiskgroupidFieldNumber = 2;
  const ::std::string& riskgroupid() const;
  void set_riskgroupid(const ::std::string& value);
  #if LANG_CXX11
  void set_riskgroupid(::std::string&& value);
  #endif
  void set_riskgroupid(const char* value);
  void set_riskgroupid(const char* value, size_t size);
  ::std::string* mutable_riskgroupid();
  ::std::string* release_riskgroupid();
  void set_allocated_riskgroupid(::std::string* riskgroupid);

  // string investorid = 3;
  void clear_investorid();
  static const int kInvestoridFieldNumber = 3;
  const ::std::string& investorid() const;
  void set_investorid(const ::std::string& value);
  #if LANG_CXX11
  void set_investorid(::std::string&& value);
  #endif
  void set_investorid(const char* value);
  void set_investorid(const char* value, size_t size);
  ::std::string* mutable_investorid();
  ::std::string* release_investorid();
  void set_allocated_investorid(::std::string* investorid);

  // .risk.rsp_head_info header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::risk::rsp_head_info& header() const;
  ::risk::rsp_head_info* mutable_header();
  ::risk::rsp_head_info* release_header();
  void set_allocated_header(::risk::rsp_head_info* header);

  // @@protoc_insertion_point(class_scope:risk.rsp_risker_investor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr riskgroupid_;
  ::google::protobuf::internal::ArenaStringPtr investorid_;
  ::risk::rsp_head_info* header_;
  mutable int _cached_size_;
  friend struct protobuf_riskapi_5fdata_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rsp_groups : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.rsp_groups) */ {
 public:
  rsp_groups();
  virtual ~rsp_groups();

  rsp_groups(const rsp_groups& from);

  inline rsp_groups& operator=(const rsp_groups& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rsp_groups(rsp_groups&& from) noexcept
    : rsp_groups() {
    *this = ::std::move(from);
  }

  inline rsp_groups& operator=(rsp_groups&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rsp_groups& default_instance();

  static inline const rsp_groups* internal_default_instance() {
    return reinterpret_cast<const rsp_groups*>(
               &_rsp_groups_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(rsp_groups* other);
  friend void swap(rsp_groups& a, rsp_groups& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rsp_groups* New() const PROTOBUF_FINAL { return New(NULL); }

  rsp_groups* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rsp_groups& from);
  void MergeFrom(const rsp_groups& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rsp_groups* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .risk.sys_group infos = 2;
  int infos_size() const;
  void clear_infos();
  static const int kInfosFieldNumber = 2;
  const ::risk::sys_group& infos(int index) const;
  ::risk::sys_group* mutable_infos(int index);
  ::risk::sys_group* add_infos();
  ::google::protobuf::RepeatedPtrField< ::risk::sys_group >*
      mutable_infos();
  const ::google::protobuf::RepeatedPtrField< ::risk::sys_group >&
      infos() const;

  // .risk.rsp_head_info header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::risk::rsp_head_info& header() const;
  ::risk::rsp_head_info* mutable_header();
  ::risk::rsp_head_info* release_header();
  void set_allocated_header(::risk::rsp_head_info* header);

  // @@protoc_insertion_point(class_scope:risk.rsp_groups)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::risk::sys_group > infos_;
  ::risk::rsp_head_info* header_;
  mutable int _cached_size_;
  friend struct protobuf_riskapi_5fdata_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rsp_action_info : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.rsp_action_info) */ {
 public:
  rsp_action_info();
  virtual ~rsp_action_info();

  rsp_action_info(const rsp_action_info& from);

  inline rsp_action_info& operator=(const rsp_action_info& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rsp_action_info(rsp_action_info&& from) noexcept
    : rsp_action_info() {
    *this = ::std::move(from);
  }

  inline rsp_action_info& operator=(rsp_action_info&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rsp_action_info& default_instance();

  static inline const rsp_action_info* internal_default_instance() {
    return reinterpret_cast<const rsp_action_info*>(
               &_rsp_action_info_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(rsp_action_info* other);
  friend void swap(rsp_action_info& a, rsp_action_info& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rsp_action_info* New() const PROTOBUF_FINAL { return New(NULL); }

  rsp_action_info* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rsp_action_info& from);
  void MergeFrom(const rsp_action_info& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rsp_action_info* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .risk.error_info info = 2;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 2;
  const ::risk::error_info& info() const;
  ::risk::error_info* mutable_info();
  ::risk::error_info* release_info();
  void set_allocated_info(::risk::error_info* info);

  // int32 requestid = 1;
  void clear_requestid();
  static const int kRequestidFieldNumber = 1;
  ::google::protobuf::int32 requestid() const;
  void set_requestid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:risk.rsp_action_info)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::risk::error_info* info_;
  ::google::protobuf::int32 requestid_;
  mutable int _cached_size_;
  friend struct protobuf_riskapi_5fdata_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rtn_change_risker : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.rtn_change_risker) */ {
 public:
  rtn_change_risker();
  virtual ~rtn_change_risker();

  rtn_change_risker(const rtn_change_risker& from);

  inline rtn_change_risker& operator=(const rtn_change_risker& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rtn_change_risker(rtn_change_risker&& from) noexcept
    : rtn_change_risker() {
    *this = ::std::move(from);
  }

  inline rtn_change_risker& operator=(rtn_change_risker&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rtn_change_risker& default_instance();

  static inline const rtn_change_risker* internal_default_instance() {
    return reinterpret_cast<const rtn_change_risker*>(
               &_rtn_change_risker_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(rtn_change_risker* other);
  friend void swap(rtn_change_risker& a, rtn_change_risker& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rtn_change_risker* New() const PROTOBUF_FINAL { return New(NULL); }

  rtn_change_risker* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rtn_change_risker& from);
  void MergeFrom(const rtn_change_risker& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rtn_change_risker* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string investor = 4;
  int investor_size() const;
  void clear_investor();
  static const int kInvestorFieldNumber = 4;
  const ::std::string& investor(int index) const;
  ::std::string* mutable_investor(int index);
  void set_investor(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_investor(int index, ::std::string&& value);
  #endif
  void set_investor(int index, const char* value);
  void set_investor(int index, const char* value, size_t size);
  ::std::string* add_investor();
  void add_investor(const ::std::string& value);
  #if LANG_CXX11
  void add_investor(::std::string&& value);
  #endif
  void add_investor(const char* value);
  void add_investor(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& investor() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_investor();

  // string userid = 2;
  void clear_userid();
  static const int kUseridFieldNumber = 2;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // .risk.sys_group group = 3;
  bool has_group() const;
  void clear_group();
  static const int kGroupFieldNumber = 3;
  const ::risk::sys_group& group() const;
  ::risk::sys_group* mutable_group();
  ::risk::sys_group* release_group();
  void set_allocated_group(::risk::sys_group* group);

  // int32 operatorid = 1;
  void clear_operatorid();
  static const int kOperatoridFieldNumber = 1;
  ::google::protobuf::int32 operatorid() const;
  void set_operatorid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:risk.rtn_change_risker)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> investor_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::risk::sys_group* group_;
  ::google::protobuf::int32 operatorid_;
  mutable int _cached_size_;
  friend struct protobuf_riskapi_5fdata_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rtn_option_position_risk : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.rtn_option_position_risk) */ {
 public:
  rtn_option_position_risk();
  virtual ~rtn_option_position_risk();

  rtn_option_position_risk(const rtn_option_position_risk& from);

  inline rtn_option_position_risk& operator=(const rtn_option_position_risk& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rtn_option_position_risk(rtn_option_position_risk&& from) noexcept
    : rtn_option_position_risk() {
    *this = ::std::move(from);
  }

  inline rtn_option_position_risk& operator=(rtn_option_position_risk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rtn_option_position_risk& default_instance();

  static inline const rtn_option_position_risk* internal_default_instance() {
    return reinterpret_cast<const rtn_option_position_risk*>(
               &_rtn_option_position_risk_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void Swap(rtn_option_position_risk* other);
  friend void swap(rtn_option_position_risk& a, rtn_option_position_risk& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rtn_option_position_risk* New() const PROTOBUF_FINAL { return New(NULL); }

  rtn_option_position_risk* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rtn_option_position_risk& from);
  void MergeFrom(const rtn_option_position_risk& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rtn_option_position_risk* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string instrument = 3;
  void clear_instrument();
  static const int kInstrumentFieldNumber = 3;
  const ::std::string& instrument() const;
  void set_instrument(const ::std::string& value);
  #if LANG_CXX11
  void set_instrument(::std::string&& value);
  #endif
  void set_instrument(const char* value);
  void set_instrument(const char* value, size_t size);
  ::std::string* mutable_instrument();
  ::std::string* release_instrument();
  void set_allocated_instrument(::std::string* instrument);

  // int32 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // int32 model = 2;
  void clear_model();
  static const int kModelFieldNumber = 2;
  ::google::protobuf::int32 model() const;
  void set_model(::google::protobuf::int32 value);

  // double value = 4;
  void clear_value();
  static const int kValueFieldNumber = 4;
  double value() const;
  void set_value(double value);

  // @@protoc_insertion_point(class_scope:risk.rtn_option_position_risk)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr instrument_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 model_;
  double value_;
  mutable int _cached_size_;
  friend struct protobuf_riskapi_5fdata_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rsp_whatif : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.rsp_whatif) */ {
 public:
  rsp_whatif();
  virtual ~rsp_whatif();

  rsp_whatif(const rsp_whatif& from);

  inline rsp_whatif& operator=(const rsp_whatif& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rsp_whatif(rsp_whatif&& from) noexcept
    : rsp_whatif() {
    *this = ::std::move(from);
  }

  inline rsp_whatif& operator=(rsp_whatif&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rsp_whatif& default_instance();

  static inline const rsp_whatif* internal_default_instance() {
    return reinterpret_cast<const rsp_whatif*>(
               &_rsp_whatif_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void Swap(rsp_whatif* other);
  friend void swap(rsp_whatif& a, rsp_whatif& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rsp_whatif* New() const PROTOBUF_FINAL { return New(NULL); }

  rsp_whatif* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rsp_whatif& from);
  void MergeFrom(const rsp_whatif& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rsp_whatif* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string instrument = 4;
  void clear_instrument();
  static const int kInstrumentFieldNumber = 4;
  const ::std::string& instrument() const;
  void set_instrument(const ::std::string& value);
  #if LANG_CXX11
  void set_instrument(::std::string&& value);
  #endif
  void set_instrument(const char* value);
  void set_instrument(const char* value, size_t size);
  ::std::string* mutable_instrument();
  ::std::string* release_instrument();
  void set_allocated_instrument(::std::string* instrument);

  // .risk.rsp_head_info header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::risk::rsp_head_info& header() const;
  ::risk::rsp_head_info* mutable_header();
  ::risk::rsp_head_info* release_header();
  void set_allocated_header(::risk::rsp_head_info* header);

  // int32 type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // int32 model = 3;
  void clear_model();
  static const int kModelFieldNumber = 3;
  ::google::protobuf::int32 model() const;
  void set_model(::google::protobuf::int32 value);

  // double range = 5;
  void clear_range();
  static const int kRangeFieldNumber = 5;
  double range() const;
  void set_range(double value);

  // double option_value = 6;
  void clear_option_value();
  static const int kOptionValueFieldNumber = 6;
  double option_value() const;
  void set_option_value(double value);

  // @@protoc_insertion_point(class_scope:risk.rsp_whatif)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr instrument_;
  ::risk::rsp_head_info* header_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 model_;
  double range_;
  double option_value_;
  mutable int _cached_size_;
  friend struct protobuf_riskapi_5fdata_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class option_argv : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.option_argv) */ {
 public:
  option_argv();
  virtual ~option_argv();

  option_argv(const option_argv& from);

  inline option_argv& operator=(const option_argv& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  option_argv(option_argv&& from) noexcept
    : option_argv() {
    *this = ::std::move(from);
  }

  inline option_argv& operator=(option_argv&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const option_argv& default_instance();

  static inline const option_argv* internal_default_instance() {
    return reinterpret_cast<const option_argv*>(
               &_option_argv_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    28;

  void Swap(option_argv* other);
  friend void swap(option_argv& a, option_argv& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline option_argv* New() const PROTOBUF_FINAL { return New(NULL); }

  option_argv* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const option_argv& from);
  void MergeFrom(const option_argv& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(option_argv* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 model = 1;
  void clear_model();
  static const int kModelFieldNumber = 1;
  ::google::protobuf::int32 model() const;
  void set_model(::google::protobuf::int32 value);

  // int32 price_type = 2;
  void clear_price_type();
  static const int kPriceTypeFieldNumber = 2;
  ::google::protobuf::int32 price_type() const;
  void set_price_type(::google::protobuf::int32 value);

  // double vol = 3;
  void clear_vol();
  static const int kVolFieldNumber = 3;
  double vol() const;
  void set_vol(double value);

  // double rate = 4;
  void clear_rate();
  static const int kRateFieldNumber = 4;
  double rate() const;
  void set_rate(double value);

  // @@protoc_insertion_point(class_scope:risk.option_argv)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 model_;
  ::google::protobuf::int32 price_type_;
  double vol_;
  double rate_;
  mutable int _cached_size_;
  friend struct protobuf_riskapi_5fdata_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rsp_option_argv : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.rsp_option_argv) */ {
 public:
  rsp_option_argv();
  virtual ~rsp_option_argv();

  rsp_option_argv(const rsp_option_argv& from);

  inline rsp_option_argv& operator=(const rsp_option_argv& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rsp_option_argv(rsp_option_argv&& from) noexcept
    : rsp_option_argv() {
    *this = ::std::move(from);
  }

  inline rsp_option_argv& operator=(rsp_option_argv&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rsp_option_argv& default_instance();

  static inline const rsp_option_argv* internal_default_instance() {
    return reinterpret_cast<const rsp_option_argv*>(
               &_rsp_option_argv_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    29;

  void Swap(rsp_option_argv* other);
  friend void swap(rsp_option_argv& a, rsp_option_argv& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rsp_option_argv* New() const PROTOBUF_FINAL { return New(NULL); }

  rsp_option_argv* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rsp_option_argv& from);
  void MergeFrom(const rsp_option_argv& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rsp_option_argv* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .risk.rsp_head_info header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::risk::rsp_head_info& header() const;
  ::risk::rsp_head_info* mutable_header();
  ::risk::rsp_head_info* release_header();
  void set_allocated_header(::risk::rsp_head_info* header);

  // .risk.option_argv info = 2;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 2;
  const ::risk::option_argv& info() const;
  ::risk::option_argv* mutable_info();
  ::risk::option_argv* release_info();
  void set_allocated_info(::risk::option_argv* info);

  // @@protoc_insertion_point(class_scope:risk.rsp_option_argv)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::risk::rsp_head_info* header_;
  ::risk::option_argv* info_;
  mutable int _cached_size_;
  friend struct protobuf_riskapi_5fdata_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rtn_whatif : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.rtn_whatif) */ {
 public:
  rtn_whatif();
  virtual ~rtn_whatif();

  rtn_whatif(const rtn_whatif& from);

  inline rtn_whatif& operator=(const rtn_whatif& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rtn_whatif(rtn_whatif&& from) noexcept
    : rtn_whatif() {
    *this = ::std::move(from);
  }

  inline rtn_whatif& operator=(rtn_whatif&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rtn_whatif& default_instance();

  static inline const rtn_whatif* internal_default_instance() {
    return reinterpret_cast<const rtn_whatif*>(
               &_rtn_whatif_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    30;

  void Swap(rtn_whatif* other);
  friend void swap(rtn_whatif& a, rtn_whatif& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rtn_whatif* New() const PROTOBUF_FINAL { return New(NULL); }

  rtn_whatif* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rtn_whatif& from);
  void MergeFrom(const rtn_whatif& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rtn_whatif* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .risk.whatif_argv field = 1;
  bool has_field() const;
  void clear_field();
  static const int kFieldFieldNumber = 1;
  const ::risk::whatif_argv& field() const;
  ::risk::whatif_argv* mutable_field();
  ::risk::whatif_argv* release_field();
  void set_allocated_field(::risk::whatif_argv* field);

  // double option_value = 2;
  void clear_option_value();
  static const int kOptionValueFieldNumber = 2;
  double option_value() const;
  void set_option_value(double value);

  // @@protoc_insertion_point(class_scope:risk.rtn_whatif)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::risk::whatif_argv* field_;
  double option_value_;
  mutable int _cached_size_;
  friend struct protobuf_riskapi_5fdata_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class investor_info : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.investor_info) */ {
 public:
  investor_info();
  virtual ~investor_info();

  investor_info(const investor_info& from);

  inline investor_info& operator=(const investor_info& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  investor_info(investor_info&& from) noexcept
    : investor_info() {
    *this = ::std::move(from);
  }

  inline investor_info& operator=(investor_info&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const investor_info& default_instance();

  static inline const investor_info* internal_default_instance() {
    return reinterpret_cast<const investor_info*>(
               &_investor_info_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    31;

  void Swap(investor_info* other);
  friend void swap(investor_info& a, investor_info& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline investor_info* New() const PROTOBUF_FINAL { return New(NULL); }

  investor_info* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const investor_info& from);
  void MergeFrom(const investor_info& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(investor_info* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string investorid = 1;
  void clear_investorid();
  static const int kInvestoridFieldNumber = 1;
  const ::std::string& investorid() const;
  void set_investorid(const ::std::string& value);
  #if LANG_CXX11
  void set_investorid(::std::string&& value);
  #endif
  void set_investorid(const char* value);
  void set_investorid(const char* value, size_t size);
  ::std::string* mutable_investorid();
  ::std::string* release_investorid();
  void set_allocated_investorid(::std::string* investorid);

  // string brokerid = 2;
  void clear_brokerid();
  static const int kBrokeridFieldNumber = 2;
  const ::std::string& brokerid() const;
  void set_brokerid(const ::std::string& value);
  #if LANG_CXX11
  void set_brokerid(::std::string&& value);
  #endif
  void set_brokerid(const char* value);
  void set_brokerid(const char* value, size_t size);
  ::std::string* mutable_brokerid();
  ::std::string* release_brokerid();
  void set_allocated_brokerid(::std::string* brokerid);

  // string investortype = 3;
  void clear_investortype();
  static const int kInvestortypeFieldNumber = 3;
  const ::std::string& investortype() const;
  void set_investortype(const ::std::string& value);
  #if LANG_CXX11
  void set_investortype(::std::string&& value);
  #endif
  void set_investortype(const char* value);
  void set_investortype(const char* value, size_t size);
  ::std::string* mutable_investortype();
  ::std::string* release_investortype();
  void set_allocated_investortype(::std::string* investortype);

  // string investorname = 4;
  void clear_investorname();
  static const int kInvestornameFieldNumber = 4;
  const ::std::string& investorname() const;
  void set_investorname(const ::std::string& value);
  #if LANG_CXX11
  void set_investorname(::std::string&& value);
  #endif
  void set_investorname(const char* value);
  void set_investorname(const char* value, size_t size);
  ::std::string* mutable_investorname();
  ::std::string* release_investorname();
  void set_allocated_investorname(::std::string* investorname);

  // string identifiedcardtype = 5;
  void clear_identifiedcardtype();
  static const int kIdentifiedcardtypeFieldNumber = 5;
  const ::std::string& identifiedcardtype() const;
  void set_identifiedcardtype(const ::std::string& value);
  #if LANG_CXX11
  void set_identifiedcardtype(::std::string&& value);
  #endif
  void set_identifiedcardtype(const char* value);
  void set_identifiedcardtype(const char* value, size_t size);
  ::std::string* mutable_identifiedcardtype();
  ::std::string* release_identifiedcardtype();
  void set_allocated_identifiedcardtype(::std::string* identifiedcardtype);

  // string identifiedcardno = 6;
  void clear_identifiedcardno();
  static const int kIdentifiedcardnoFieldNumber = 6;
  const ::std::string& identifiedcardno() const;
  void set_identifiedcardno(const ::std::string& value);
  #if LANG_CXX11
  void set_identifiedcardno(::std::string&& value);
  #endif
  void set_identifiedcardno(const char* value);
  void set_identifiedcardno(const char* value, size_t size);
  ::std::string* mutable_identifiedcardno();
  ::std::string* release_identifiedcardno();
  void set_allocated_identifiedcardno(::std::string* identifiedcardno);

  // string country = 7;
  void clear_country();
  static const int kCountryFieldNumber = 7;
  const ::std::string& country() const;
  void set_country(const ::std::string& value);
  #if LANG_CXX11
  void set_country(::std::string&& value);
  #endif
  void set_country(const char* value);
  void set_country(const char* value, size_t size);
  ::std::string* mutable_country();
  ::std::string* release_country();
  void set_allocated_country(::std::string* country);

  // string province = 8;
  void clear_province();
  static const int kProvinceFieldNumber = 8;
  const ::std::string& province() const;
  void set_province(const ::std::string& value);
  #if LANG_CXX11
  void set_province(::std::string&& value);
  #endif
  void set_province(const char* value);
  void set_province(const char* value, size_t size);
  ::std::string* mutable_province();
  ::std::string* release_province();
  void set_allocated_province(::std::string* province);

  // string city = 9;
  void clear_city();
  static const int kCityFieldNumber = 9;
  const ::std::string& city() const;
  void set_city(const ::std::string& value);
  #if LANG_CXX11
  void set_city(::std::string&& value);
  #endif
  void set_city(const char* value);
  void set_city(const char* value, size_t size);
  ::std::string* mutable_city();
  ::std::string* release_city();
  void set_allocated_city(::std::string* city);

  // string birthday = 10;
  void clear_birthday();
  static const int kBirthdayFieldNumber = 10;
  const ::std::string& birthday() const;
  void set_birthday(const ::std::string& value);
  #if LANG_CXX11
  void set_birthday(::std::string&& value);
  #endif
  void set_birthday(const char* value);
  void set_birthday(const char* value, size_t size);
  ::std::string* mutable_birthday();
  ::std::string* release_birthday();
  void set_allocated_birthday(::std::string* birthday);

  // string sex = 11;
  void clear_sex();
  static const int kSexFieldNumber = 11;
  const ::std::string& sex() const;
  void set_sex(const ::std::string& value);
  #if LANG_CXX11
  void set_sex(::std::string&& value);
  #endif
  void set_sex(const char* value);
  void set_sex(const char* value, size_t size);
  ::std::string* mutable_sex();
  ::std::string* release_sex();
  void set_allocated_sex(::std::string* sex);

  // string profession = 12;
  void clear_profession();
  static const int kProfessionFieldNumber = 12;
  const ::std::string& profession() const;
  void set_profession(const ::std::string& value);
  #if LANG_CXX11
  void set_profession(::std::string&& value);
  #endif
  void set_profession(const char* value);
  void set_profession(const char* value, size_t size);
  ::std::string* mutable_profession();
  ::std::string* release_profession();
  void set_allocated_profession(::std::string* profession);

  // string national = 13;
  void clear_national();
  static const int kNationalFieldNumber = 13;
  const ::std::string& national() const;
  void set_national(const ::std::string& value);
  #if LANG_CXX11
  void set_national(::std::string&& value);
  #endif
  void set_national(const char* value);
  void set_national(const char* value, size_t size);
  ::std::string* mutable_national();
  ::std::string* release_national();
  void set_allocated_national(::std::string* national);

  // string capitalcurrency = 15;
  void clear_capitalcurrency();
  static const int kCapitalcurrencyFieldNumber = 15;
  const ::std::string& capitalcurrency() const;
  void set_capitalcurrency(const ::std::string& value);
  #if LANG_CXX11
  void set_capitalcurrency(::std::string&& value);
  #endif
  void set_capitalcurrency(const char* value);
  void set_capitalcurrency(const char* value, size_t size);
  ::std::string* mutable_capitalcurrency();
  ::std::string* release_capitalcurrency();
  void set_allocated_capitalcurrency(::std::string* capitalcurrency);

  // string telephone = 16;
  void clear_telephone();
  static const int kTelephoneFieldNumber = 16;
  const ::std::string& telephone() const;
  void set_telephone(const ::std::string& value);
  #if LANG_CXX11
  void set_telephone(::std::string&& value);
  #endif
  void set_telephone(const char* value);
  void set_telephone(const char* value, size_t size);
  ::std::string* mutable_telephone();
  ::std::string* release_telephone();
  void set_allocated_telephone(::std::string* telephone);

  // string address = 17;
  void clear_address();
  static const int kAddressFieldNumber = 17;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // string zipcode = 18;
  void clear_zipcode();
  static const int kZipcodeFieldNumber = 18;
  const ::std::string& zipcode() const;
  void set_zipcode(const ::std::string& value);
  #if LANG_CXX11
  void set_zipcode(::std::string&& value);
  #endif
  void set_zipcode(const char* value);
  void set_zipcode(const char* value, size_t size);
  ::std::string* mutable_zipcode();
  ::std::string* release_zipcode();
  void set_allocated_zipcode(::std::string* zipcode);

  // string email = 19;
  void clear_email();
  static const int kEmailFieldNumber = 19;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  #if LANG_CXX11
  void set_email(::std::string&& value);
  #endif
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // string memo = 20;
  void clear_memo();
  static const int kMemoFieldNumber = 20;
  const ::std::string& memo() const;
  void set_memo(const ::std::string& value);
  #if LANG_CXX11
  void set_memo(::std::string&& value);
  #endif
  void set_memo(const char* value);
  void set_memo(const char* value, size_t size);
  ::std::string* mutable_memo();
  ::std::string* release_memo();
  void set_allocated_memo(::std::string* memo);

  // string openinvestorname = 21;
  void clear_openinvestorname();
  static const int kOpeninvestornameFieldNumber = 21;
  const ::std::string& openinvestorname() const;
  void set_openinvestorname(const ::std::string& value);
  #if LANG_CXX11
  void set_openinvestorname(::std::string&& value);
  #endif
  void set_openinvestorname(const char* value);
  void set_openinvestorname(const char* value, size_t size);
  ::std::string* mutable_openinvestorname();
  ::std::string* release_openinvestorname();
  void set_allocated_openinvestorname(::std::string* openinvestorname);

  // string orderinvestorname = 22;
  void clear_orderinvestorname();
  static const int kOrderinvestornameFieldNumber = 22;
  const ::std::string& orderinvestorname() const;
  void set_orderinvestorname(const ::std::string& value);
  #if LANG_CXX11
  void set_orderinvestorname(::std::string&& value);
  #endif
  void set_orderinvestorname(const char* value);
  void set_orderinvestorname(const char* value, size_t size);
  ::std::string* mutable_orderinvestorname();
  ::std::string* release_orderinvestorname();
  void set_allocated_orderinvestorname(::std::string* orderinvestorname);

  // string fundinvestorname = 23;
  void clear_fundinvestorname();
  static const int kFundinvestornameFieldNumber = 23;
  const ::std::string& fundinvestorname() const;
  void set_fundinvestorname(const ::std::string& value);
  #if LANG_CXX11
  void set_fundinvestorname(::std::string&& value);
  #endif
  void set_fundinvestorname(const char* value);
  void set_fundinvestorname(const char* value, size_t size);
  ::std::string* mutable_fundinvestorname();
  ::std::string* release_fundinvestorname();
  void set_allocated_fundinvestorname(::std::string* fundinvestorname);

  // string settleinvestorname = 24;
  void clear_settleinvestorname();
  static const int kSettleinvestornameFieldNumber = 24;
  const ::std::string& settleinvestorname() const;
  void set_settleinvestorname(const ::std::string& value);
  #if LANG_CXX11
  void set_settleinvestorname(::std::string&& value);
  #endif
  void set_settleinvestorname(const char* value);
  void set_settleinvestorname(const char* value, size_t size);
  ::std::string* mutable_settleinvestorname();
  ::std::string* release_settleinvestorname();
  void set_allocated_settleinvestorname(::std::string* settleinvestorname);

  // string departmentid = 26;
  void clear_departmentid();
  static const int kDepartmentidFieldNumber = 26;
  const ::std::string& departmentid() const;
  void set_departmentid(const ::std::string& value);
  #if LANG_CXX11
  void set_departmentid(::std::string&& value);
  #endif
  void set_departmentid(const char* value);
  void set_departmentid(const char* value, size_t size);
  ::std::string* mutable_departmentid();
  ::std::string* release_departmentid();
  void set_allocated_departmentid(::std::string* departmentid);

  // string investorfullname = 27;
  void clear_investorfullname();
  static const int kInvestorfullnameFieldNumber = 27;
  const ::std::string& investorfullname() const;
  void set_investorfullname(const ::std::string& value);
  #if LANG_CXX11
  void set_investorfullname(::std::string&& value);
  #endif
  void set_investorfullname(const char* value);
  void set_investorfullname(const char* value, size_t size);
  ::std::string* mutable_investorfullname();
  ::std::string* release_investorfullname();
  void set_allocated_investorfullname(::std::string* investorfullname);

  // string clientregion = 31;
  void clear_clientregion();
  static const int kClientregionFieldNumber = 31;
  const ::std::string& clientregion() const;
  void set_clientregion(const ::std::string& value);
  #if LANG_CXX11
  void set_clientregion(::std::string&& value);
  #endif
  void set_clientregion(const char* value);
  void set_clientregion(const char* value, size_t size);
  ::std::string* mutable_clientregion();
  ::std::string* release_clientregion();
  void set_allocated_clientregion(::std::string* clientregion);

  // double capital = 14;
  void clear_capital();
  static const int kCapitalFieldNumber = 14;
  double capital() const;
  void set_capital(double value);

  // int32 isactive = 25;
  void clear_isactive();
  static const int kIsactiveFieldNumber = 25;
  ::google::protobuf::int32 isactive() const;
  void set_isactive(::google::protobuf::int32 value);

  // int32 isemail = 28;
  void clear_isemail();
  static const int kIsemailFieldNumber = 28;
  ::google::protobuf::int32 isemail() const;
  void set_isemail(::google::protobuf::int32 value);

  // int32 issms = 29;
  void clear_issms();
  static const int kIssmsFieldNumber = 29;
  ::google::protobuf::int32 issms() const;
  void set_issms(::google::protobuf::int32 value);

  // int32 isusingotp = 30;
  void clear_isusingotp();
  static const int kIsusingotpFieldNumber = 30;
  ::google::protobuf::int32 isusingotp() const;
  void set_isusingotp(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:risk.investor_info)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr investorid_;
  ::google::protobuf::internal::ArenaStringPtr brokerid_;
  ::google::protobuf::internal::ArenaStringPtr investortype_;
  ::google::protobuf::internal::ArenaStringPtr investorname_;
  ::google::protobuf::internal::ArenaStringPtr identifiedcardtype_;
  ::google::protobuf::internal::ArenaStringPtr identifiedcardno_;
  ::google::protobuf::internal::ArenaStringPtr country_;
  ::google::protobuf::internal::ArenaStringPtr province_;
  ::google::protobuf::internal::ArenaStringPtr city_;
  ::google::protobuf::internal::ArenaStringPtr birthday_;
  ::google::protobuf::internal::ArenaStringPtr sex_;
  ::google::protobuf::internal::ArenaStringPtr profession_;
  ::google::protobuf::internal::ArenaStringPtr national_;
  ::google::protobuf::internal::ArenaStringPtr capitalcurrency_;
  ::google::protobuf::internal::ArenaStringPtr telephone_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr zipcode_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::google::protobuf::internal::ArenaStringPtr memo_;
  ::google::protobuf::internal::ArenaStringPtr openinvestorname_;
  ::google::protobuf::internal::ArenaStringPtr orderinvestorname_;
  ::google::protobuf::internal::ArenaStringPtr fundinvestorname_;
  ::google::protobuf::internal::ArenaStringPtr settleinvestorname_;
  ::google::protobuf::internal::ArenaStringPtr departmentid_;
  ::google::protobuf::internal::ArenaStringPtr investorfullname_;
  ::google::protobuf::internal::ArenaStringPtr clientregion_;
  double capital_;
  ::google::protobuf::int32 isactive_;
  ::google::protobuf::int32 isemail_;
  ::google::protobuf::int32 issms_;
  ::google::protobuf::int32 isusingotp_;
  mutable int _cached_size_;
  friend struct protobuf_riskapi_5fdata_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rsp_investor_info : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.rsp_investor_info) */ {
 public:
  rsp_investor_info();
  virtual ~rsp_investor_info();

  rsp_investor_info(const rsp_investor_info& from);

  inline rsp_investor_info& operator=(const rsp_investor_info& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rsp_investor_info(rsp_investor_info&& from) noexcept
    : rsp_investor_info() {
    *this = ::std::move(from);
  }

  inline rsp_investor_info& operator=(rsp_investor_info&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rsp_investor_info& default_instance();

  static inline const rsp_investor_info* internal_default_instance() {
    return reinterpret_cast<const rsp_investor_info*>(
               &_rsp_investor_info_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    32;

  void Swap(rsp_investor_info* other);
  friend void swap(rsp_investor_info& a, rsp_investor_info& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rsp_investor_info* New() const PROTOBUF_FINAL { return New(NULL); }

  rsp_investor_info* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rsp_investor_info& from);
  void MergeFrom(const rsp_investor_info& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rsp_investor_info* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .risk.investor_info infos = 2;
  int infos_size() const;
  void clear_infos();
  static const int kInfosFieldNumber = 2;
  const ::risk::investor_info& infos(int index) const;
  ::risk::investor_info* mutable_infos(int index);
  ::risk::investor_info* add_infos();
  ::google::protobuf::RepeatedPtrField< ::risk::investor_info >*
      mutable_infos();
  const ::google::protobuf::RepeatedPtrField< ::risk::investor_info >&
      infos() const;

  // .risk.rsp_head_info header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::risk::rsp_head_info& header() const;
  ::risk::rsp_head_info* mutable_header();
  ::risk::rsp_head_info* release_header();
  void set_allocated_header(::risk::rsp_head_info* header);

  // @@protoc_insertion_point(class_scope:risk.rsp_investor_info)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::risk::investor_info > infos_;
  ::risk::rsp_head_info* header_;
  mutable int _cached_size_;
  friend struct protobuf_riskapi_5fdata_5fprotocal_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// error_info

// sint32 errorid = 1;
inline void error_info::clear_errorid() {
  errorid_ = 0;
}
inline ::google::protobuf::int32 error_info::errorid() const {
  // @@protoc_insertion_point(field_get:risk.error_info.errorid)
  return errorid_;
}
inline void error_info::set_errorid(::google::protobuf::int32 value) {
  
  errorid_ = value;
  // @@protoc_insertion_point(field_set:risk.error_info.errorid)
}

// string errormsg = 2;
inline void error_info::clear_errormsg() {
  errormsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& error_info::errormsg() const {
  // @@protoc_insertion_point(field_get:risk.error_info.errormsg)
  return errormsg_.GetNoArena();
}
inline void error_info::set_errormsg(const ::std::string& value) {
  
  errormsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.error_info.errormsg)
}
#if LANG_CXX11
inline void error_info::set_errormsg(::std::string&& value) {
  
  errormsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.error_info.errormsg)
}
#endif
inline void error_info::set_errormsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  errormsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.error_info.errormsg)
}
inline void error_info::set_errormsg(const char* value, size_t size) {
  
  errormsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.error_info.errormsg)
}
inline ::std::string* error_info::mutable_errormsg() {
  
  // @@protoc_insertion_point(field_mutable:risk.error_info.errormsg)
  return errormsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* error_info::release_errormsg() {
  // @@protoc_insertion_point(field_release:risk.error_info.errormsg)
  
  return errormsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void error_info::set_allocated_errormsg(::std::string* errormsg) {
  if (errormsg != NULL) {
    
  } else {
    
  }
  errormsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errormsg);
  // @@protoc_insertion_point(field_set_allocated:risk.error_info.errormsg)
}

// -------------------------------------------------------------------

// rsp_head_info

// int32 requestid = 1;
inline void rsp_head_info::clear_requestid() {
  requestid_ = 0;
}
inline ::google::protobuf::int32 rsp_head_info::requestid() const {
  // @@protoc_insertion_point(field_get:risk.rsp_head_info.requestid)
  return requestid_;
}
inline void rsp_head_info::set_requestid(::google::protobuf::int32 value) {
  
  requestid_ = value;
  // @@protoc_insertion_point(field_set:risk.rsp_head_info.requestid)
}

// .risk.error_info info = 2;
inline bool rsp_head_info::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
inline void rsp_head_info::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
inline const ::risk::error_info& rsp_head_info::info() const {
  const ::risk::error_info* p = info_;
  // @@protoc_insertion_point(field_get:risk.rsp_head_info.info)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::error_info*>(
      &::risk::_error_info_default_instance_);
}
inline ::risk::error_info* rsp_head_info::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::risk::error_info;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_head_info.info)
  return info_;
}
inline ::risk::error_info* rsp_head_info::release_info() {
  // @@protoc_insertion_point(field_release:risk.rsp_head_info.info)
  
  ::risk::error_info* temp = info_;
  info_ = NULL;
  return temp;
}
inline void rsp_head_info::set_allocated_info(::risk::error_info* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_head_info.info)
}

// bool islast = 3;
inline void rsp_head_info::clear_islast() {
  islast_ = false;
}
inline bool rsp_head_info::islast() const {
  // @@protoc_insertion_point(field_get:risk.rsp_head_info.islast)
  return islast_;
}
inline void rsp_head_info::set_islast(bool value) {
  
  islast_ = value;
  // @@protoc_insertion_point(field_set:risk.rsp_head_info.islast)
}

// -------------------------------------------------------------------

// rsp_risker_login

// int32 requestid = 1;
inline void rsp_risker_login::clear_requestid() {
  requestid_ = 0;
}
inline ::google::protobuf::int32 rsp_risker_login::requestid() const {
  // @@protoc_insertion_point(field_get:risk.rsp_risker_login.requestid)
  return requestid_;
}
inline void rsp_risker_login::set_requestid(::google::protobuf::int32 value) {
  
  requestid_ = value;
  // @@protoc_insertion_point(field_set:risk.rsp_risker_login.requestid)
}

// .risk.error_info info = 2;
inline bool rsp_risker_login::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
inline void rsp_risker_login::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
inline const ::risk::error_info& rsp_risker_login::info() const {
  const ::risk::error_info* p = info_;
  // @@protoc_insertion_point(field_get:risk.rsp_risker_login.info)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::error_info*>(
      &::risk::_error_info_default_instance_);
}
inline ::risk::error_info* rsp_risker_login::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::risk::error_info;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_risker_login.info)
  return info_;
}
inline ::risk::error_info* rsp_risker_login::release_info() {
  // @@protoc_insertion_point(field_release:risk.rsp_risker_login.info)
  
  ::risk::error_info* temp = info_;
  info_ = NULL;
  return temp;
}
inline void rsp_risker_login::set_allocated_info(::risk::error_info* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_risker_login.info)
}

// -------------------------------------------------------------------

// instrument_info

// string contractcode = 1;
inline void instrument_info::clear_contractcode() {
  contractcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& instrument_info::contractcode() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.contractcode)
  return contractcode_.GetNoArena();
}
inline void instrument_info::set_contractcode(const ::std::string& value) {
  
  contractcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.contractcode)
}
#if LANG_CXX11
inline void instrument_info::set_contractcode(::std::string&& value) {
  
  contractcode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.contractcode)
}
#endif
inline void instrument_info::set_contractcode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  contractcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.contractcode)
}
inline void instrument_info::set_contractcode(const char* value, size_t size) {
  
  contractcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.contractcode)
}
inline ::std::string* instrument_info::mutable_contractcode() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.contractcode)
  return contractcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* instrument_info::release_contractcode() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.contractcode)
  
  return contractcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void instrument_info::set_allocated_contractcode(::std::string* contractcode) {
  if (contractcode != NULL) {
    
  } else {
    
  }
  contractcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contractcode);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.contractcode)
}

// string productcode = 2;
inline void instrument_info::clear_productcode() {
  productcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& instrument_info::productcode() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.productcode)
  return productcode_.GetNoArena();
}
inline void instrument_info::set_productcode(const ::std::string& value) {
  
  productcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.productcode)
}
#if LANG_CXX11
inline void instrument_info::set_productcode(::std::string&& value) {
  
  productcode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.productcode)
}
#endif
inline void instrument_info::set_productcode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  productcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.productcode)
}
inline void instrument_info::set_productcode(const char* value, size_t size) {
  
  productcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.productcode)
}
inline ::std::string* instrument_info::mutable_productcode() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.productcode)
  return productcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* instrument_info::release_productcode() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.productcode)
  
  return productcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void instrument_info::set_allocated_productcode(::std::string* productcode) {
  if (productcode != NULL) {
    
  } else {
    
  }
  productcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productcode);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.productcode)
}

// string productkind = 3;
inline void instrument_info::clear_productkind() {
  productkind_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& instrument_info::productkind() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.productkind)
  return productkind_.GetNoArena();
}
inline void instrument_info::set_productkind(const ::std::string& value) {
  
  productkind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.productkind)
}
#if LANG_CXX11
inline void instrument_info::set_productkind(::std::string&& value) {
  
  productkind_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.productkind)
}
#endif
inline void instrument_info::set_productkind(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  productkind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.productkind)
}
inline void instrument_info::set_productkind(const char* value, size_t size) {
  
  productkind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.productkind)
}
inline ::std::string* instrument_info::mutable_productkind() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.productkind)
  return productkind_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* instrument_info::release_productkind() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.productkind)
  
  return productkind_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void instrument_info::set_allocated_productkind(::std::string* productkind) {
  if (productkind != NULL) {
    
  } else {
    
  }
  productkind_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productkind);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.productkind)
}

// string exchangecode = 4;
inline void instrument_info::clear_exchangecode() {
  exchangecode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& instrument_info::exchangecode() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.exchangecode)
  return exchangecode_.GetNoArena();
}
inline void instrument_info::set_exchangecode(const ::std::string& value) {
  
  exchangecode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.exchangecode)
}
#if LANG_CXX11
inline void instrument_info::set_exchangecode(::std::string&& value) {
  
  exchangecode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.exchangecode)
}
#endif
inline void instrument_info::set_exchangecode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exchangecode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.exchangecode)
}
inline void instrument_info::set_exchangecode(const char* value, size_t size) {
  
  exchangecode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.exchangecode)
}
inline ::std::string* instrument_info::mutable_exchangecode() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.exchangecode)
  return exchangecode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* instrument_info::release_exchangecode() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.exchangecode)
  
  return exchangecode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void instrument_info::set_allocated_exchangecode(::std::string* exchangecode) {
  if (exchangecode != NULL) {
    
  } else {
    
  }
  exchangecode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchangecode);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.exchangecode)
}

// string marketcode = 5;
inline void instrument_info::clear_marketcode() {
  marketcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& instrument_info::marketcode() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.marketcode)
  return marketcode_.GetNoArena();
}
inline void instrument_info::set_marketcode(const ::std::string& value) {
  
  marketcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.marketcode)
}
#if LANG_CXX11
inline void instrument_info::set_marketcode(::std::string&& value) {
  
  marketcode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.marketcode)
}
#endif
inline void instrument_info::set_marketcode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  marketcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.marketcode)
}
inline void instrument_info::set_marketcode(const char* value, size_t size) {
  
  marketcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.marketcode)
}
inline ::std::string* instrument_info::mutable_marketcode() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.marketcode)
  return marketcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* instrument_info::release_marketcode() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.marketcode)
  
  return marketcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void instrument_info::set_allocated_marketcode(::std::string* marketcode) {
  if (marketcode != NULL) {
    
  } else {
    
  }
  marketcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), marketcode);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.marketcode)
}

// string createdate = 6;
inline void instrument_info::clear_createdate() {
  createdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& instrument_info::createdate() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.createdate)
  return createdate_.GetNoArena();
}
inline void instrument_info::set_createdate(const ::std::string& value) {
  
  createdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.createdate)
}
#if LANG_CXX11
inline void instrument_info::set_createdate(::std::string&& value) {
  
  createdate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.createdate)
}
#endif
inline void instrument_info::set_createdate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  createdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.createdate)
}
inline void instrument_info::set_createdate(const char* value, size_t size) {
  
  createdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.createdate)
}
inline ::std::string* instrument_info::mutable_createdate() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.createdate)
  return createdate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* instrument_info::release_createdate() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.createdate)
  
  return createdate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void instrument_info::set_allocated_createdate(::std::string* createdate) {
  if (createdate != NULL) {
    
  } else {
    
  }
  createdate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), createdate);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.createdate)
}

// string opendate = 7;
inline void instrument_info::clear_opendate() {
  opendate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& instrument_info::opendate() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.opendate)
  return opendate_.GetNoArena();
}
inline void instrument_info::set_opendate(const ::std::string& value) {
  
  opendate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.opendate)
}
#if LANG_CXX11
inline void instrument_info::set_opendate(::std::string&& value) {
  
  opendate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.opendate)
}
#endif
inline void instrument_info::set_opendate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  opendate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.opendate)
}
inline void instrument_info::set_opendate(const char* value, size_t size) {
  
  opendate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.opendate)
}
inline ::std::string* instrument_info::mutable_opendate() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.opendate)
  return opendate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* instrument_info::release_opendate() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.opendate)
  
  return opendate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void instrument_info::set_allocated_opendate(::std::string* opendate) {
  if (opendate != NULL) {
    
  } else {
    
  }
  opendate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), opendate);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.opendate)
}

// string expiredate = 8;
inline void instrument_info::clear_expiredate() {
  expiredate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& instrument_info::expiredate() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.expiredate)
  return expiredate_.GetNoArena();
}
inline void instrument_info::set_expiredate(const ::std::string& value) {
  
  expiredate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.expiredate)
}
#if LANG_CXX11
inline void instrument_info::set_expiredate(::std::string&& value) {
  
  expiredate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.expiredate)
}
#endif
inline void instrument_info::set_expiredate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  expiredate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.expiredate)
}
inline void instrument_info::set_expiredate(const char* value, size_t size) {
  
  expiredate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.expiredate)
}
inline ::std::string* instrument_info::mutable_expiredate() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.expiredate)
  return expiredate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* instrument_info::release_expiredate() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.expiredate)
  
  return expiredate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void instrument_info::set_allocated_expiredate(::std::string* expiredate) {
  if (expiredate != NULL) {
    
  } else {
    
  }
  expiredate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), expiredate);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.expiredate)
}

// int32 multiplier = 9;
inline void instrument_info::clear_multiplier() {
  multiplier_ = 0;
}
inline ::google::protobuf::int32 instrument_info::multiplier() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.multiplier)
  return multiplier_;
}
inline void instrument_info::set_multiplier(::google::protobuf::int32 value) {
  
  multiplier_ = value;
  // @@protoc_insertion_point(field_set:risk.instrument_info.multiplier)
}

// double pricetick = 10;
inline void instrument_info::clear_pricetick() {
  pricetick_ = 0;
}
inline double instrument_info::pricetick() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.pricetick)
  return pricetick_;
}
inline void instrument_info::set_pricetick(double value) {
  
  pricetick_ = value;
  // @@protoc_insertion_point(field_set:risk.instrument_info.pricetick)
}

// string contractname = 11;
inline void instrument_info::clear_contractname() {
  contractname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& instrument_info::contractname() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.contractname)
  return contractname_.GetNoArena();
}
inline void instrument_info::set_contractname(const ::std::string& value) {
  
  contractname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.contractname)
}
#if LANG_CXX11
inline void instrument_info::set_contractname(::std::string&& value) {
  
  contractname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.contractname)
}
#endif
inline void instrument_info::set_contractname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  contractname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.contractname)
}
inline void instrument_info::set_contractname(const char* value, size_t size) {
  
  contractname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.contractname)
}
inline ::std::string* instrument_info::mutable_contractname() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.contractname)
  return contractname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* instrument_info::release_contractname() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.contractname)
  
  return contractname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void instrument_info::set_allocated_contractname(::std::string* contractname) {
  if (contractname != NULL) {
    
  } else {
    
  }
  contractname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contractname);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.contractname)
}

// string delivbegindate = 12;
inline void instrument_info::clear_delivbegindate() {
  delivbegindate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& instrument_info::delivbegindate() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.delivbegindate)
  return delivbegindate_.GetNoArena();
}
inline void instrument_info::set_delivbegindate(const ::std::string& value) {
  
  delivbegindate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.delivbegindate)
}
#if LANG_CXX11
inline void instrument_info::set_delivbegindate(::std::string&& value) {
  
  delivbegindate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.delivbegindate)
}
#endif
inline void instrument_info::set_delivbegindate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  delivbegindate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.delivbegindate)
}
inline void instrument_info::set_delivbegindate(const char* value, size_t size) {
  
  delivbegindate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.delivbegindate)
}
inline ::std::string* instrument_info::mutable_delivbegindate() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.delivbegindate)
  return delivbegindate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* instrument_info::release_delivbegindate() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.delivbegindate)
  
  return delivbegindate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void instrument_info::set_allocated_delivbegindate(::std::string* delivbegindate) {
  if (delivbegindate != NULL) {
    
  } else {
    
  }
  delivbegindate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), delivbegindate);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.delivbegindate)
}

// string delivenddate = 13;
inline void instrument_info::clear_delivenddate() {
  delivenddate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& instrument_info::delivenddate() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.delivenddate)
  return delivenddate_.GetNoArena();
}
inline void instrument_info::set_delivenddate(const ::std::string& value) {
  
  delivenddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.delivenddate)
}
#if LANG_CXX11
inline void instrument_info::set_delivenddate(::std::string&& value) {
  
  delivenddate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.delivenddate)
}
#endif
inline void instrument_info::set_delivenddate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  delivenddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.delivenddate)
}
inline void instrument_info::set_delivenddate(const char* value, size_t size) {
  
  delivenddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.delivenddate)
}
inline ::std::string* instrument_info::mutable_delivenddate() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.delivenddate)
  return delivenddate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* instrument_info::release_delivenddate() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.delivenddate)
  
  return delivenddate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void instrument_info::set_allocated_delivenddate(::std::string* delivenddate) {
  if (delivenddate != NULL) {
    
  } else {
    
  }
  delivenddate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), delivenddate);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.delivenddate)
}

// string excontractname = 14;
inline void instrument_info::clear_excontractname() {
  excontractname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& instrument_info::excontractname() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.excontractname)
  return excontractname_.GetNoArena();
}
inline void instrument_info::set_excontractname(const ::std::string& value) {
  
  excontractname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.excontractname)
}
#if LANG_CXX11
inline void instrument_info::set_excontractname(::std::string&& value) {
  
  excontractname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.excontractname)
}
#endif
inline void instrument_info::set_excontractname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  excontractname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.excontractname)
}
inline void instrument_info::set_excontractname(const char* value, size_t size) {
  
  excontractname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.excontractname)
}
inline ::std::string* instrument_info::mutable_excontractname() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.excontractname)
  return excontractname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* instrument_info::release_excontractname() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.excontractname)
  
  return excontractname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void instrument_info::set_allocated_excontractname(::std::string* excontractname) {
  if (excontractname != NULL) {
    
  } else {
    
  }
  excontractname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), excontractname);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.excontractname)
}

// string exproductname = 15;
inline void instrument_info::clear_exproductname() {
  exproductname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& instrument_info::exproductname() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.exproductname)
  return exproductname_.GetNoArena();
}
inline void instrument_info::set_exproductname(const ::std::string& value) {
  
  exproductname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.exproductname)
}
#if LANG_CXX11
inline void instrument_info::set_exproductname(::std::string&& value) {
  
  exproductname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.exproductname)
}
#endif
inline void instrument_info::set_exproductname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exproductname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.exproductname)
}
inline void instrument_info::set_exproductname(const char* value, size_t size) {
  
  exproductname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.exproductname)
}
inline ::std::string* instrument_info::mutable_exproductname() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.exproductname)
  return exproductname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* instrument_info::release_exproductname() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.exproductname)
  
  return exproductname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void instrument_info::set_allocated_exproductname(::std::string* exproductname) {
  if (exproductname != NULL) {
    
  } else {
    
  }
  exproductname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exproductname);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.exproductname)
}

// string ismrgndisc = 16;
inline void instrument_info::clear_ismrgndisc() {
  ismrgndisc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& instrument_info::ismrgndisc() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.ismrgndisc)
  return ismrgndisc_.GetNoArena();
}
inline void instrument_info::set_ismrgndisc(const ::std::string& value) {
  
  ismrgndisc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.ismrgndisc)
}
#if LANG_CXX11
inline void instrument_info::set_ismrgndisc(::std::string&& value) {
  
  ismrgndisc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.ismrgndisc)
}
#endif
inline void instrument_info::set_ismrgndisc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ismrgndisc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.ismrgndisc)
}
inline void instrument_info::set_ismrgndisc(const char* value, size_t size) {
  
  ismrgndisc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.ismrgndisc)
}
inline ::std::string* instrument_info::mutable_ismrgndisc() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.ismrgndisc)
  return ismrgndisc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* instrument_info::release_ismrgndisc() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.ismrgndisc)
  
  return ismrgndisc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void instrument_info::set_allocated_ismrgndisc(::std::string* ismrgndisc) {
  if (ismrgndisc != NULL) {
    
  } else {
    
  }
  ismrgndisc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ismrgndisc);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.ismrgndisc)
}

// string productclass = 17;
inline void instrument_info::clear_productclass() {
  productclass_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& instrument_info::productclass() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.productclass)
  return productclass_.GetNoArena();
}
inline void instrument_info::set_productclass(const ::std::string& value) {
  
  productclass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.productclass)
}
#if LANG_CXX11
inline void instrument_info::set_productclass(::std::string&& value) {
  
  productclass_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.productclass)
}
#endif
inline void instrument_info::set_productclass(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  productclass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.productclass)
}
inline void instrument_info::set_productclass(const char* value, size_t size) {
  
  productclass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.productclass)
}
inline ::std::string* instrument_info::mutable_productclass() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.productclass)
  return productclass_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* instrument_info::release_productclass() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.productclass)
  
  return productclass_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void instrument_info::set_allocated_productclass(::std::string* productclass) {
  if (productclass != NULL) {
    
  } else {
    
  }
  productclass_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productclass);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.productclass)
}

// double baseprice = 18;
inline void instrument_info::clear_baseprice() {
  baseprice_ = 0;
}
inline double instrument_info::baseprice() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.baseprice)
  return baseprice_;
}
inline void instrument_info::set_baseprice(double value) {
  
  baseprice_ = value;
  // @@protoc_insertion_point(field_set:risk.instrument_info.baseprice)
}

// string optionstype = 19;
inline void instrument_info::clear_optionstype() {
  optionstype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& instrument_info::optionstype() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.optionstype)
  return optionstype_.GetNoArena();
}
inline void instrument_info::set_optionstype(const ::std::string& value) {
  
  optionstype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.optionstype)
}
#if LANG_CXX11
inline void instrument_info::set_optionstype(::std::string&& value) {
  
  optionstype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.optionstype)
}
#endif
inline void instrument_info::set_optionstype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  optionstype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.optionstype)
}
inline void instrument_info::set_optionstype(const char* value, size_t size) {
  
  optionstype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.optionstype)
}
inline ::std::string* instrument_info::mutable_optionstype() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.optionstype)
  return optionstype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* instrument_info::release_optionstype() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.optionstype)
  
  return optionstype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void instrument_info::set_allocated_optionstype(::std::string* optionstype) {
  if (optionstype != NULL) {
    
  } else {
    
  }
  optionstype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), optionstype);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.optionstype)
}

// double strikeprice = 20;
inline void instrument_info::clear_strikeprice() {
  strikeprice_ = 0;
}
inline double instrument_info::strikeprice() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.strikeprice)
  return strikeprice_;
}
inline void instrument_info::set_strikeprice(double value) {
  
  strikeprice_ = value;
  // @@protoc_insertion_point(field_set:risk.instrument_info.strikeprice)
}

// string underlyinginstrid = 21;
inline void instrument_info::clear_underlyinginstrid() {
  underlyinginstrid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& instrument_info::underlyinginstrid() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.underlyinginstrid)
  return underlyinginstrid_.GetNoArena();
}
inline void instrument_info::set_underlyinginstrid(const ::std::string& value) {
  
  underlyinginstrid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.underlyinginstrid)
}
#if LANG_CXX11
inline void instrument_info::set_underlyinginstrid(::std::string&& value) {
  
  underlyinginstrid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.underlyinginstrid)
}
#endif
inline void instrument_info::set_underlyinginstrid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  underlyinginstrid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.underlyinginstrid)
}
inline void instrument_info::set_underlyinginstrid(const char* value, size_t size) {
  
  underlyinginstrid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.underlyinginstrid)
}
inline ::std::string* instrument_info::mutable_underlyinginstrid() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.underlyinginstrid)
  return underlyinginstrid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* instrument_info::release_underlyinginstrid() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.underlyinginstrid)
  
  return underlyinginstrid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void instrument_info::set_allocated_underlyinginstrid(::std::string* underlyinginstrid) {
  if (underlyinginstrid != NULL) {
    
  } else {
    
  }
  underlyinginstrid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), underlyinginstrid);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.underlyinginstrid)
}

// string strikemode = 22;
inline void instrument_info::clear_strikemode() {
  strikemode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& instrument_info::strikemode() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.strikemode)
  return strikemode_.GetNoArena();
}
inline void instrument_info::set_strikemode(const ::std::string& value) {
  
  strikemode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.strikemode)
}
#if LANG_CXX11
inline void instrument_info::set_strikemode(::std::string&& value) {
  
  strikemode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.strikemode)
}
#endif
inline void instrument_info::set_strikemode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  strikemode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.strikemode)
}
inline void instrument_info::set_strikemode(const char* value, size_t size) {
  
  strikemode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.strikemode)
}
inline ::std::string* instrument_info::mutable_strikemode() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.strikemode)
  return strikemode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* instrument_info::release_strikemode() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.strikemode)
  
  return strikemode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void instrument_info::set_allocated_strikemode(::std::string* strikemode) {
  if (strikemode != NULL) {
    
  } else {
    
  }
  strikemode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strikemode);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.strikemode)
}

// double underlyingmultiple = 23;
inline void instrument_info::clear_underlyingmultiple() {
  underlyingmultiple_ = 0;
}
inline double instrument_info::underlyingmultiple() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.underlyingmultiple)
  return underlyingmultiple_;
}
inline void instrument_info::set_underlyingmultiple(double value) {
  
  underlyingmultiple_ = value;
  // @@protoc_insertion_point(field_set:risk.instrument_info.underlyingmultiple)
}

// -------------------------------------------------------------------

// rsp_instrument_field

// .risk.rsp_head_info header = 1;
inline bool rsp_instrument_field::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void rsp_instrument_field::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::risk::rsp_head_info& rsp_instrument_field::header() const {
  const ::risk::rsp_head_info* p = header_;
  // @@protoc_insertion_point(field_get:risk.rsp_instrument_field.header)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::rsp_head_info*>(
      &::risk::_rsp_head_info_default_instance_);
}
inline ::risk::rsp_head_info* rsp_instrument_field::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::risk::rsp_head_info;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_instrument_field.header)
  return header_;
}
inline ::risk::rsp_head_info* rsp_instrument_field::release_header() {
  // @@protoc_insertion_point(field_release:risk.rsp_instrument_field.header)
  
  ::risk::rsp_head_info* temp = header_;
  header_ = NULL;
  return temp;
}
inline void rsp_instrument_field::set_allocated_header(::risk::rsp_head_info* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_instrument_field.header)
}

// .risk.instrument_info field = 2;
inline bool rsp_instrument_field::has_field() const {
  return this != internal_default_instance() && field_ != NULL;
}
inline void rsp_instrument_field::clear_field() {
  if (GetArenaNoVirtual() == NULL && field_ != NULL) delete field_;
  field_ = NULL;
}
inline const ::risk::instrument_info& rsp_instrument_field::field() const {
  const ::risk::instrument_info* p = field_;
  // @@protoc_insertion_point(field_get:risk.rsp_instrument_field.field)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::instrument_info*>(
      &::risk::_instrument_info_default_instance_);
}
inline ::risk::instrument_info* rsp_instrument_field::mutable_field() {
  
  if (field_ == NULL) {
    field_ = new ::risk::instrument_info;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_instrument_field.field)
  return field_;
}
inline ::risk::instrument_info* rsp_instrument_field::release_field() {
  // @@protoc_insertion_point(field_release:risk.rsp_instrument_field.field)
  
  ::risk::instrument_info* temp = field_;
  field_ = NULL;
  return temp;
}
inline void rsp_instrument_field::set_allocated_field(::risk::instrument_info* field) {
  delete field_;
  field_ = field;
  if (field) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_instrument_field.field)
}

// -------------------------------------------------------------------

// rtn_quote_field

// .risk.quote_gateway_market_field field = 1;
inline bool rtn_quote_field::has_field() const {
  return this != internal_default_instance() && field_ != NULL;
}
inline void rtn_quote_field::clear_field() {
  if (GetArenaNoVirtual() == NULL && field_ != NULL) delete field_;
  field_ = NULL;
}
inline const ::risk::quote_gateway_market_field& rtn_quote_field::field() const {
  const ::risk::quote_gateway_market_field* p = field_;
  // @@protoc_insertion_point(field_get:risk.rtn_quote_field.field)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::quote_gateway_market_field*>(
      &::risk::_quote_gateway_market_field_default_instance_);
}
inline ::risk::quote_gateway_market_field* rtn_quote_field::mutable_field() {
  
  if (field_ == NULL) {
    field_ = new ::risk::quote_gateway_market_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.rtn_quote_field.field)
  return field_;
}
inline ::risk::quote_gateway_market_field* rtn_quote_field::release_field() {
  // @@protoc_insertion_point(field_release:risk.rtn_quote_field.field)
  
  ::risk::quote_gateway_market_field* temp = field_;
  field_ = NULL;
  return temp;
}
inline void rtn_quote_field::set_allocated_field(::risk::quote_gateway_market_field* field) {
  delete field_;
  field_ = field;
  if (field) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rtn_quote_field.field)
}

// -------------------------------------------------------------------

// rsp_position_field

// .risk.rsp_head_info header = 1;
inline bool rsp_position_field::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void rsp_position_field::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::risk::rsp_head_info& rsp_position_field::header() const {
  const ::risk::rsp_head_info* p = header_;
  // @@protoc_insertion_point(field_get:risk.rsp_position_field.header)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::rsp_head_info*>(
      &::risk::_rsp_head_info_default_instance_);
}
inline ::risk::rsp_head_info* rsp_position_field::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::risk::rsp_head_info;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_position_field.header)
  return header_;
}
inline ::risk::rsp_head_info* rsp_position_field::release_header() {
  // @@protoc_insertion_point(field_release:risk.rsp_position_field.header)
  
  ::risk::rsp_head_info* temp = header_;
  header_ = NULL;
  return temp;
}
inline void rsp_position_field::set_allocated_header(::risk::rsp_head_info* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_position_field.header)
}

// .risk.trade_gateway_position_field field = 2;
inline bool rsp_position_field::has_field() const {
  return this != internal_default_instance() && field_ != NULL;
}
inline void rsp_position_field::clear_field() {
  if (GetArenaNoVirtual() == NULL && field_ != NULL) delete field_;
  field_ = NULL;
}
inline const ::risk::trade_gateway_position_field& rsp_position_field::field() const {
  const ::risk::trade_gateway_position_field* p = field_;
  // @@protoc_insertion_point(field_get:risk.rsp_position_field.field)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::trade_gateway_position_field*>(
      &::risk::_trade_gateway_position_field_default_instance_);
}
inline ::risk::trade_gateway_position_field* rsp_position_field::mutable_field() {
  
  if (field_ == NULL) {
    field_ = new ::risk::trade_gateway_position_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_position_field.field)
  return field_;
}
inline ::risk::trade_gateway_position_field* rsp_position_field::release_field() {
  // @@protoc_insertion_point(field_release:risk.rsp_position_field.field)
  
  ::risk::trade_gateway_position_field* temp = field_;
  field_ = NULL;
  return temp;
}
inline void rsp_position_field::set_allocated_field(::risk::trade_gateway_position_field* field) {
  delete field_;
  field_ = field;
  if (field) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_position_field.field)
}

// double trypositionprofit = 3;
inline void rsp_position_field::clear_trypositionprofit() {
  trypositionprofit_ = 0;
}
inline double rsp_position_field::trypositionprofit() const {
  // @@protoc_insertion_point(field_get:risk.rsp_position_field.trypositionprofit)
  return trypositionprofit_;
}
inline void rsp_position_field::set_trypositionprofit(double value) {
  
  trypositionprofit_ = value;
  // @@protoc_insertion_point(field_set:risk.rsp_position_field.trypositionprofit)
}

// -------------------------------------------------------------------

// rtn_position_field

// .risk.trade_gateway_position_field field = 1;
inline bool rtn_position_field::has_field() const {
  return this != internal_default_instance() && field_ != NULL;
}
inline void rtn_position_field::clear_field() {
  if (GetArenaNoVirtual() == NULL && field_ != NULL) delete field_;
  field_ = NULL;
}
inline const ::risk::trade_gateway_position_field& rtn_position_field::field() const {
  const ::risk::trade_gateway_position_field* p = field_;
  // @@protoc_insertion_point(field_get:risk.rtn_position_field.field)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::trade_gateway_position_field*>(
      &::risk::_trade_gateway_position_field_default_instance_);
}
inline ::risk::trade_gateway_position_field* rtn_position_field::mutable_field() {
  
  if (field_ == NULL) {
    field_ = new ::risk::trade_gateway_position_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.rtn_position_field.field)
  return field_;
}
inline ::risk::trade_gateway_position_field* rtn_position_field::release_field() {
  // @@protoc_insertion_point(field_release:risk.rtn_position_field.field)
  
  ::risk::trade_gateway_position_field* temp = field_;
  field_ = NULL;
  return temp;
}
inline void rtn_position_field::set_allocated_field(::risk::trade_gateway_position_field* field) {
  delete field_;
  field_ = field;
  if (field) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rtn_position_field.field)
}

// double trypositionprofit = 2;
inline void rtn_position_field::clear_trypositionprofit() {
  trypositionprofit_ = 0;
}
inline double rtn_position_field::trypositionprofit() const {
  // @@protoc_insertion_point(field_get:risk.rtn_position_field.trypositionprofit)
  return trypositionprofit_;
}
inline void rtn_position_field::set_trypositionprofit(double value) {
  
  trypositionprofit_ = value;
  // @@protoc_insertion_point(field_set:risk.rtn_position_field.trypositionprofit)
}

// -------------------------------------------------------------------

// rsp_trade_field

// .risk.rsp_head_info header = 1;
inline bool rsp_trade_field::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void rsp_trade_field::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::risk::rsp_head_info& rsp_trade_field::header() const {
  const ::risk::rsp_head_info* p = header_;
  // @@protoc_insertion_point(field_get:risk.rsp_trade_field.header)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::rsp_head_info*>(
      &::risk::_rsp_head_info_default_instance_);
}
inline ::risk::rsp_head_info* rsp_trade_field::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::risk::rsp_head_info;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_trade_field.header)
  return header_;
}
inline ::risk::rsp_head_info* rsp_trade_field::release_header() {
  // @@protoc_insertion_point(field_release:risk.rsp_trade_field.header)
  
  ::risk::rsp_head_info* temp = header_;
  header_ = NULL;
  return temp;
}
inline void rsp_trade_field::set_allocated_header(::risk::rsp_head_info* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_trade_field.header)
}

// .risk.trade_gateway_trade_field field = 2;
inline bool rsp_trade_field::has_field() const {
  return this != internal_default_instance() && field_ != NULL;
}
inline void rsp_trade_field::clear_field() {
  if (GetArenaNoVirtual() == NULL && field_ != NULL) delete field_;
  field_ = NULL;
}
inline const ::risk::trade_gateway_trade_field& rsp_trade_field::field() const {
  const ::risk::trade_gateway_trade_field* p = field_;
  // @@protoc_insertion_point(field_get:risk.rsp_trade_field.field)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::trade_gateway_trade_field*>(
      &::risk::_trade_gateway_trade_field_default_instance_);
}
inline ::risk::trade_gateway_trade_field* rsp_trade_field::mutable_field() {
  
  if (field_ == NULL) {
    field_ = new ::risk::trade_gateway_trade_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_trade_field.field)
  return field_;
}
inline ::risk::trade_gateway_trade_field* rsp_trade_field::release_field() {
  // @@protoc_insertion_point(field_release:risk.rsp_trade_field.field)
  
  ::risk::trade_gateway_trade_field* temp = field_;
  field_ = NULL;
  return temp;
}
inline void rsp_trade_field::set_allocated_field(::risk::trade_gateway_trade_field* field) {
  delete field_;
  field_ = field;
  if (field) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_trade_field.field)
}

// -------------------------------------------------------------------

// rsp_order_field

// .risk.rsp_head_info header = 1;
inline bool rsp_order_field::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void rsp_order_field::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::risk::rsp_head_info& rsp_order_field::header() const {
  const ::risk::rsp_head_info* p = header_;
  // @@protoc_insertion_point(field_get:risk.rsp_order_field.header)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::rsp_head_info*>(
      &::risk::_rsp_head_info_default_instance_);
}
inline ::risk::rsp_head_info* rsp_order_field::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::risk::rsp_head_info;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_order_field.header)
  return header_;
}
inline ::risk::rsp_head_info* rsp_order_field::release_header() {
  // @@protoc_insertion_point(field_release:risk.rsp_order_field.header)
  
  ::risk::rsp_head_info* temp = header_;
  header_ = NULL;
  return temp;
}
inline void rsp_order_field::set_allocated_header(::risk::rsp_head_info* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_order_field.header)
}

// .risk.trade_gateway_order_field field = 2;
inline bool rsp_order_field::has_field() const {
  return this != internal_default_instance() && field_ != NULL;
}
inline void rsp_order_field::clear_field() {
  if (GetArenaNoVirtual() == NULL && field_ != NULL) delete field_;
  field_ = NULL;
}
inline const ::risk::trade_gateway_order_field& rsp_order_field::field() const {
  const ::risk::trade_gateway_order_field* p = field_;
  // @@protoc_insertion_point(field_get:risk.rsp_order_field.field)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::trade_gateway_order_field*>(
      &::risk::_trade_gateway_order_field_default_instance_);
}
inline ::risk::trade_gateway_order_field* rsp_order_field::mutable_field() {
  
  if (field_ == NULL) {
    field_ = new ::risk::trade_gateway_order_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_order_field.field)
  return field_;
}
inline ::risk::trade_gateway_order_field* rsp_order_field::release_field() {
  // @@protoc_insertion_point(field_release:risk.rsp_order_field.field)
  
  ::risk::trade_gateway_order_field* temp = field_;
  field_ = NULL;
  return temp;
}
inline void rsp_order_field::set_allocated_field(::risk::trade_gateway_order_field* field) {
  delete field_;
  field_ = field;
  if (field) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_order_field.field)
}

// -------------------------------------------------------------------

// rtn_trade_field

// .risk.trade_gateway_trade_field field = 1;
inline bool rtn_trade_field::has_field() const {
  return this != internal_default_instance() && field_ != NULL;
}
inline void rtn_trade_field::clear_field() {
  if (GetArenaNoVirtual() == NULL && field_ != NULL) delete field_;
  field_ = NULL;
}
inline const ::risk::trade_gateway_trade_field& rtn_trade_field::field() const {
  const ::risk::trade_gateway_trade_field* p = field_;
  // @@protoc_insertion_point(field_get:risk.rtn_trade_field.field)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::trade_gateway_trade_field*>(
      &::risk::_trade_gateway_trade_field_default_instance_);
}
inline ::risk::trade_gateway_trade_field* rtn_trade_field::mutable_field() {
  
  if (field_ == NULL) {
    field_ = new ::risk::trade_gateway_trade_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.rtn_trade_field.field)
  return field_;
}
inline ::risk::trade_gateway_trade_field* rtn_trade_field::release_field() {
  // @@protoc_insertion_point(field_release:risk.rtn_trade_field.field)
  
  ::risk::trade_gateway_trade_field* temp = field_;
  field_ = NULL;
  return temp;
}
inline void rtn_trade_field::set_allocated_field(::risk::trade_gateway_trade_field* field) {
  delete field_;
  field_ = field;
  if (field) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rtn_trade_field.field)
}

// -------------------------------------------------------------------

// rtn_order_field

// .risk.trade_gateway_order_field field = 1;
inline bool rtn_order_field::has_field() const {
  return this != internal_default_instance() && field_ != NULL;
}
inline void rtn_order_field::clear_field() {
  if (GetArenaNoVirtual() == NULL && field_ != NULL) delete field_;
  field_ = NULL;
}
inline const ::risk::trade_gateway_order_field& rtn_order_field::field() const {
  const ::risk::trade_gateway_order_field* p = field_;
  // @@protoc_insertion_point(field_get:risk.rtn_order_field.field)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::trade_gateway_order_field*>(
      &::risk::_trade_gateway_order_field_default_instance_);
}
inline ::risk::trade_gateway_order_field* rtn_order_field::mutable_field() {
  
  if (field_ == NULL) {
    field_ = new ::risk::trade_gateway_order_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.rtn_order_field.field)
  return field_;
}
inline ::risk::trade_gateway_order_field* rtn_order_field::release_field() {
  // @@protoc_insertion_point(field_release:risk.rtn_order_field.field)
  
  ::risk::trade_gateway_order_field* temp = field_;
  field_ = NULL;
  return temp;
}
inline void rtn_order_field::set_allocated_field(::risk::trade_gateway_order_field* field) {
  delete field_;
  field_ = field;
  if (field) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rtn_order_field.field)
}

// -------------------------------------------------------------------

// rsp_sync_account_field

// .risk.rsp_head_info header = 1;
inline bool rsp_sync_account_field::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void rsp_sync_account_field::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::risk::rsp_head_info& rsp_sync_account_field::header() const {
  const ::risk::rsp_head_info* p = header_;
  // @@protoc_insertion_point(field_get:risk.rsp_sync_account_field.header)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::rsp_head_info*>(
      &::risk::_rsp_head_info_default_instance_);
}
inline ::risk::rsp_head_info* rsp_sync_account_field::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::risk::rsp_head_info;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_sync_account_field.header)
  return header_;
}
inline ::risk::rsp_head_info* rsp_sync_account_field::release_header() {
  // @@protoc_insertion_point(field_release:risk.rsp_sync_account_field.header)
  
  ::risk::rsp_head_info* temp = header_;
  header_ = NULL;
  return temp;
}
inline void rsp_sync_account_field::set_allocated_header(::risk::rsp_head_info* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_sync_account_field.header)
}

// .risk.trade_gateway_sync_account_field field = 2;
inline bool rsp_sync_account_field::has_field() const {
  return this != internal_default_instance() && field_ != NULL;
}
inline void rsp_sync_account_field::clear_field() {
  if (GetArenaNoVirtual() == NULL && field_ != NULL) delete field_;
  field_ = NULL;
}
inline const ::risk::trade_gateway_sync_account_field& rsp_sync_account_field::field() const {
  const ::risk::trade_gateway_sync_account_field* p = field_;
  // @@protoc_insertion_point(field_get:risk.rsp_sync_account_field.field)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::trade_gateway_sync_account_field*>(
      &::risk::_trade_gateway_sync_account_field_default_instance_);
}
inline ::risk::trade_gateway_sync_account_field* rsp_sync_account_field::mutable_field() {
  
  if (field_ == NULL) {
    field_ = new ::risk::trade_gateway_sync_account_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_sync_account_field.field)
  return field_;
}
inline ::risk::trade_gateway_sync_account_field* rsp_sync_account_field::release_field() {
  // @@protoc_insertion_point(field_release:risk.rsp_sync_account_field.field)
  
  ::risk::trade_gateway_sync_account_field* temp = field_;
  field_ = NULL;
  return temp;
}
inline void rsp_sync_account_field::set_allocated_field(::risk::trade_gateway_sync_account_field* field) {
  delete field_;
  field_ = field;
  if (field) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_sync_account_field.field)
}

// -------------------------------------------------------------------

// rtn_sync_account_field

// .risk.trade_gateway_sync_account_field field = 1;
inline bool rtn_sync_account_field::has_field() const {
  return this != internal_default_instance() && field_ != NULL;
}
inline void rtn_sync_account_field::clear_field() {
  if (GetArenaNoVirtual() == NULL && field_ != NULL) delete field_;
  field_ = NULL;
}
inline const ::risk::trade_gateway_sync_account_field& rtn_sync_account_field::field() const {
  const ::risk::trade_gateway_sync_account_field* p = field_;
  // @@protoc_insertion_point(field_get:risk.rtn_sync_account_field.field)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::trade_gateway_sync_account_field*>(
      &::risk::_trade_gateway_sync_account_field_default_instance_);
}
inline ::risk::trade_gateway_sync_account_field* rtn_sync_account_field::mutable_field() {
  
  if (field_ == NULL) {
    field_ = new ::risk::trade_gateway_sync_account_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.rtn_sync_account_field.field)
  return field_;
}
inline ::risk::trade_gateway_sync_account_field* rtn_sync_account_field::release_field() {
  // @@protoc_insertion_point(field_release:risk.rtn_sync_account_field.field)
  
  ::risk::trade_gateway_sync_account_field* temp = field_;
  field_ = NULL;
  return temp;
}
inline void rtn_sync_account_field::set_allocated_field(::risk::trade_gateway_sync_account_field* field) {
  delete field_;
  field_ = field;
  if (field) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rtn_sync_account_field.field)
}

// -------------------------------------------------------------------

// shfe_margin_field

// double pre_favorable = 1;
inline void shfe_margin_field::clear_pre_favorable() {
  pre_favorable_ = 0;
}
inline double shfe_margin_field::pre_favorable() const {
  // @@protoc_insertion_point(field_get:risk.shfe_margin_field.pre_favorable)
  return pre_favorable_;
}
inline void shfe_margin_field::set_pre_favorable(double value) {
  
  pre_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.shfe_margin_field.pre_favorable)
}

// double big_side_favorable = 2;
inline void shfe_margin_field::clear_big_side_favorable() {
  big_side_favorable_ = 0;
}
inline double shfe_margin_field::big_side_favorable() const {
  // @@protoc_insertion_point(field_get:risk.shfe_margin_field.big_side_favorable)
  return big_side_favorable_;
}
inline void shfe_margin_field::set_big_side_favorable(double value) {
  
  big_side_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.shfe_margin_field.big_side_favorable)
}

// -------------------------------------------------------------------

// cffex_margin_field

// double pre_favorable = 1;
inline void cffex_margin_field::clear_pre_favorable() {
  pre_favorable_ = 0;
}
inline double cffex_margin_field::pre_favorable() const {
  // @@protoc_insertion_point(field_get:risk.cffex_margin_field.pre_favorable)
  return pre_favorable_;
}
inline void cffex_margin_field::set_pre_favorable(double value) {
  
  pre_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.cffex_margin_field.pre_favorable)
}

// double speculation_favorable = 2;
inline void cffex_margin_field::clear_speculation_favorable() {
  speculation_favorable_ = 0;
}
inline double cffex_margin_field::speculation_favorable() const {
  // @@protoc_insertion_point(field_get:risk.cffex_margin_field.speculation_favorable)
  return speculation_favorable_;
}
inline void cffex_margin_field::set_speculation_favorable(double value) {
  
  speculation_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.cffex_margin_field.speculation_favorable)
}

// double hedging_favorable = 3;
inline void cffex_margin_field::clear_hedging_favorable() {
  hedging_favorable_ = 0;
}
inline double cffex_margin_field::hedging_favorable() const {
  // @@protoc_insertion_point(field_get:risk.cffex_margin_field.hedging_favorable)
  return hedging_favorable_;
}
inline void cffex_margin_field::set_hedging_favorable(double value) {
  
  hedging_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.cffex_margin_field.hedging_favorable)
}

// double arbitrage_favorable = 4;
inline void cffex_margin_field::clear_arbitrage_favorable() {
  arbitrage_favorable_ = 0;
}
inline double cffex_margin_field::arbitrage_favorable() const {
  // @@protoc_insertion_point(field_get:risk.cffex_margin_field.arbitrage_favorable)
  return arbitrage_favorable_;
}
inline void cffex_margin_field::set_arbitrage_favorable(double value) {
  
  arbitrage_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.cffex_margin_field.arbitrage_favorable)
}

// double market_favorable = 5;
inline void cffex_margin_field::clear_market_favorable() {
  market_favorable_ = 0;
}
inline double cffex_margin_field::market_favorable() const {
  // @@protoc_insertion_point(field_get:risk.cffex_margin_field.market_favorable)
  return market_favorable_;
}
inline void cffex_margin_field::set_market_favorable(double value) {
  
  market_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.cffex_margin_field.market_favorable)
}

// -------------------------------------------------------------------

// dce_margin_field

// double pre_favorable = 1;
inline void dce_margin_field::clear_pre_favorable() {
  pre_favorable_ = 0;
}
inline double dce_margin_field::pre_favorable() const {
  // @@protoc_insertion_point(field_get:risk.dce_margin_field.pre_favorable)
  return pre_favorable_;
}
inline void dce_margin_field::set_pre_favorable(double value) {
  
  pre_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.dce_margin_field.pre_favorable)
}

// double sp_favorable = 2;
inline void dce_margin_field::clear_sp_favorable() {
  sp_favorable_ = 0;
}
inline double dce_margin_field::sp_favorable() const {
  // @@protoc_insertion_point(field_get:risk.dce_margin_field.sp_favorable)
  return sp_favorable_;
}
inline void dce_margin_field::set_sp_favorable(double value) {
  
  sp_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.dce_margin_field.sp_favorable)
}

// double spc_favorable = 3;
inline void dce_margin_field::clear_spc_favorable() {
  spc_favorable_ = 0;
}
inline double dce_margin_field::spc_favorable() const {
  // @@protoc_insertion_point(field_get:risk.dce_margin_field.spc_favorable)
  return spc_favorable_;
}
inline void dce_margin_field::set_spc_favorable(double value) {
  
  spc_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.dce_margin_field.spc_favorable)
}

// double locked_favorable = 4;
inline void dce_margin_field::clear_locked_favorable() {
  locked_favorable_ = 0;
}
inline double dce_margin_field::locked_favorable() const {
  // @@protoc_insertion_point(field_get:risk.dce_margin_field.locked_favorable)
  return locked_favorable_;
}
inline void dce_margin_field::set_locked_favorable(double value) {
  
  locked_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.dce_margin_field.locked_favorable)
}

// -------------------------------------------------------------------

// czce_margin_field

// double pre_favorable = 1;
inline void czce_margin_field::clear_pre_favorable() {
  pre_favorable_ = 0;
}
inline double czce_margin_field::pre_favorable() const {
  // @@protoc_insertion_point(field_get:risk.czce_margin_field.pre_favorable)
  return pre_favorable_;
}
inline void czce_margin_field::set_pre_favorable(double value) {
  
  pre_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.czce_margin_field.pre_favorable)
}

// double spd_favorable = 2;
inline void czce_margin_field::clear_spd_favorable() {
  spd_favorable_ = 0;
}
inline double czce_margin_field::spd_favorable() const {
  // @@protoc_insertion_point(field_get:risk.czce_margin_field.spd_favorable)
  return spd_favorable_;
}
inline void czce_margin_field::set_spd_favorable(double value) {
  
  spd_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.czce_margin_field.spd_favorable)
}

// double ips_favorable = 3;
inline void czce_margin_field::clear_ips_favorable() {
  ips_favorable_ = 0;
}
inline double czce_margin_field::ips_favorable() const {
  // @@protoc_insertion_point(field_get:risk.czce_margin_field.ips_favorable)
  return ips_favorable_;
}
inline void czce_margin_field::set_ips_favorable(double value) {
  
  ips_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.czce_margin_field.ips_favorable)
}

// double prt_favorable = 4;
inline void czce_margin_field::clear_prt_favorable() {
  prt_favorable_ = 0;
}
inline double czce_margin_field::prt_favorable() const {
  // @@protoc_insertion_point(field_get:risk.czce_margin_field.prt_favorable)
  return prt_favorable_;
}
inline void czce_margin_field::set_prt_favorable(double value) {
  
  prt_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.czce_margin_field.prt_favorable)
}

// double std_favorable = 5;
inline void czce_margin_field::clear_std_favorable() {
  std_favorable_ = 0;
}
inline double czce_margin_field::std_favorable() const {
  // @@protoc_insertion_point(field_get:risk.czce_margin_field.std_favorable)
  return std_favorable_;
}
inline void czce_margin_field::set_std_favorable(double value) {
  
  std_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.czce_margin_field.std_favorable)
}

// double stg_favorable = 6;
inline void czce_margin_field::clear_stg_favorable() {
  stg_favorable_ = 0;
}
inline double czce_margin_field::stg_favorable() const {
  // @@protoc_insertion_point(field_get:risk.czce_margin_field.stg_favorable)
  return stg_favorable_;
}
inline void czce_margin_field::set_stg_favorable(double value) {
  
  stg_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.czce_margin_field.stg_favorable)
}

// double zprt_favorable = 7;
inline void czce_margin_field::clear_zprt_favorable() {
  zprt_favorable_ = 0;
}
inline double czce_margin_field::zprt_favorable() const {
  // @@protoc_insertion_point(field_get:risk.czce_margin_field.zprt_favorable)
  return zprt_favorable_;
}
inline void czce_margin_field::set_zprt_favorable(double value) {
  
  zprt_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.czce_margin_field.zprt_favorable)
}

// double locked_favorable = 8;
inline void czce_margin_field::clear_locked_favorable() {
  locked_favorable_ = 0;
}
inline double czce_margin_field::locked_favorable() const {
  // @@protoc_insertion_point(field_get:risk.czce_margin_field.locked_favorable)
  return locked_favorable_;
}
inline void czce_margin_field::set_locked_favorable(double value) {
  
  locked_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.czce_margin_field.locked_favorable)
}

// -------------------------------------------------------------------

// ine_margin_field

// double pre_favorable = 1;
inline void ine_margin_field::clear_pre_favorable() {
  pre_favorable_ = 0;
}
inline double ine_margin_field::pre_favorable() const {
  // @@protoc_insertion_point(field_get:risk.ine_margin_field.pre_favorable)
  return pre_favorable_;
}
inline void ine_margin_field::set_pre_favorable(double value) {
  
  pre_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.ine_margin_field.pre_favorable)
}

// double big_side_favorable = 2;
inline void ine_margin_field::clear_big_side_favorable() {
  big_side_favorable_ = 0;
}
inline double ine_margin_field::big_side_favorable() const {
  // @@protoc_insertion_point(field_get:risk.ine_margin_field.big_side_favorable)
  return big_side_favorable_;
}
inline void ine_margin_field::set_big_side_favorable(double value) {
  
  big_side_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.ine_margin_field.big_side_favorable)
}

// -------------------------------------------------------------------

// delivery_margin_field

// double shfe_margin = 1;
inline void delivery_margin_field::clear_shfe_margin() {
  shfe_margin_ = 0;
}
inline double delivery_margin_field::shfe_margin() const {
  // @@protoc_insertion_point(field_get:risk.delivery_margin_field.shfe_margin)
  return shfe_margin_;
}
inline void delivery_margin_field::set_shfe_margin(double value) {
  
  shfe_margin_ = value;
  // @@protoc_insertion_point(field_set:risk.delivery_margin_field.shfe_margin)
}

// double cffex_margin = 2;
inline void delivery_margin_field::clear_cffex_margin() {
  cffex_margin_ = 0;
}
inline double delivery_margin_field::cffex_margin() const {
  // @@protoc_insertion_point(field_get:risk.delivery_margin_field.cffex_margin)
  return cffex_margin_;
}
inline void delivery_margin_field::set_cffex_margin(double value) {
  
  cffex_margin_ = value;
  // @@protoc_insertion_point(field_set:risk.delivery_margin_field.cffex_margin)
}

// double dce_margin = 3;
inline void delivery_margin_field::clear_dce_margin() {
  dce_margin_ = 0;
}
inline double delivery_margin_field::dce_margin() const {
  // @@protoc_insertion_point(field_get:risk.delivery_margin_field.dce_margin)
  return dce_margin_;
}
inline void delivery_margin_field::set_dce_margin(double value) {
  
  dce_margin_ = value;
  // @@protoc_insertion_point(field_set:risk.delivery_margin_field.dce_margin)
}

// double czce_margin = 4;
inline void delivery_margin_field::clear_czce_margin() {
  czce_margin_ = 0;
}
inline double delivery_margin_field::czce_margin() const {
  // @@protoc_insertion_point(field_get:risk.delivery_margin_field.czce_margin)
  return czce_margin_;
}
inline void delivery_margin_field::set_czce_margin(double value) {
  
  czce_margin_ = value;
  // @@protoc_insertion_point(field_set:risk.delivery_margin_field.czce_margin)
}

// double ine_margin = 5;
inline void delivery_margin_field::clear_ine_margin() {
  ine_margin_ = 0;
}
inline double delivery_margin_field::ine_margin() const {
  // @@protoc_insertion_point(field_get:risk.delivery_margin_field.ine_margin)
  return ine_margin_;
}
inline void delivery_margin_field::set_ine_margin(double value) {
  
  ine_margin_ = value;
  // @@protoc_insertion_point(field_set:risk.delivery_margin_field.ine_margin)
}

// -------------------------------------------------------------------

// rtn_margin_field

// uint32 timestamp = 1;
inline void rtn_margin_field::clear_timestamp() {
  timestamp_ = 0u;
}
inline ::google::protobuf::uint32 rtn_margin_field::timestamp() const {
  // @@protoc_insertion_point(field_get:risk.rtn_margin_field.timestamp)
  return timestamp_;
}
inline void rtn_margin_field::set_timestamp(::google::protobuf::uint32 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:risk.rtn_margin_field.timestamp)
}

// string investor = 2;
inline void rtn_margin_field::clear_investor() {
  investor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& rtn_margin_field::investor() const {
  // @@protoc_insertion_point(field_get:risk.rtn_margin_field.investor)
  return investor_.GetNoArena();
}
inline void rtn_margin_field::set_investor(const ::std::string& value) {
  
  investor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.rtn_margin_field.investor)
}
#if LANG_CXX11
inline void rtn_margin_field::set_investor(::std::string&& value) {
  
  investor_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.rtn_margin_field.investor)
}
#endif
inline void rtn_margin_field::set_investor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  investor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.rtn_margin_field.investor)
}
inline void rtn_margin_field::set_investor(const char* value, size_t size) {
  
  investor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.rtn_margin_field.investor)
}
inline ::std::string* rtn_margin_field::mutable_investor() {
  
  // @@protoc_insertion_point(field_mutable:risk.rtn_margin_field.investor)
  return investor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* rtn_margin_field::release_investor() {
  // @@protoc_insertion_point(field_release:risk.rtn_margin_field.investor)
  
  return investor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void rtn_margin_field::set_allocated_investor(::std::string* investor) {
  if (investor != NULL) {
    
  } else {
    
  }
  investor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), investor);
  // @@protoc_insertion_point(field_set_allocated:risk.rtn_margin_field.investor)
}

// .risk.shfe_margin_field shfe_margin = 3;
inline bool rtn_margin_field::has_shfe_margin() const {
  return this != internal_default_instance() && shfe_margin_ != NULL;
}
inline void rtn_margin_field::clear_shfe_margin() {
  if (GetArenaNoVirtual() == NULL && shfe_margin_ != NULL) delete shfe_margin_;
  shfe_margin_ = NULL;
}
inline const ::risk::shfe_margin_field& rtn_margin_field::shfe_margin() const {
  const ::risk::shfe_margin_field* p = shfe_margin_;
  // @@protoc_insertion_point(field_get:risk.rtn_margin_field.shfe_margin)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::shfe_margin_field*>(
      &::risk::_shfe_margin_field_default_instance_);
}
inline ::risk::shfe_margin_field* rtn_margin_field::mutable_shfe_margin() {
  
  if (shfe_margin_ == NULL) {
    shfe_margin_ = new ::risk::shfe_margin_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.rtn_margin_field.shfe_margin)
  return shfe_margin_;
}
inline ::risk::shfe_margin_field* rtn_margin_field::release_shfe_margin() {
  // @@protoc_insertion_point(field_release:risk.rtn_margin_field.shfe_margin)
  
  ::risk::shfe_margin_field* temp = shfe_margin_;
  shfe_margin_ = NULL;
  return temp;
}
inline void rtn_margin_field::set_allocated_shfe_margin(::risk::shfe_margin_field* shfe_margin) {
  delete shfe_margin_;
  shfe_margin_ = shfe_margin;
  if (shfe_margin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rtn_margin_field.shfe_margin)
}

// .risk.cffex_margin_field cffex_margin = 4;
inline bool rtn_margin_field::has_cffex_margin() const {
  return this != internal_default_instance() && cffex_margin_ != NULL;
}
inline void rtn_margin_field::clear_cffex_margin() {
  if (GetArenaNoVirtual() == NULL && cffex_margin_ != NULL) delete cffex_margin_;
  cffex_margin_ = NULL;
}
inline const ::risk::cffex_margin_field& rtn_margin_field::cffex_margin() const {
  const ::risk::cffex_margin_field* p = cffex_margin_;
  // @@protoc_insertion_point(field_get:risk.rtn_margin_field.cffex_margin)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::cffex_margin_field*>(
      &::risk::_cffex_margin_field_default_instance_);
}
inline ::risk::cffex_margin_field* rtn_margin_field::mutable_cffex_margin() {
  
  if (cffex_margin_ == NULL) {
    cffex_margin_ = new ::risk::cffex_margin_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.rtn_margin_field.cffex_margin)
  return cffex_margin_;
}
inline ::risk::cffex_margin_field* rtn_margin_field::release_cffex_margin() {
  // @@protoc_insertion_point(field_release:risk.rtn_margin_field.cffex_margin)
  
  ::risk::cffex_margin_field* temp = cffex_margin_;
  cffex_margin_ = NULL;
  return temp;
}
inline void rtn_margin_field::set_allocated_cffex_margin(::risk::cffex_margin_field* cffex_margin) {
  delete cffex_margin_;
  cffex_margin_ = cffex_margin;
  if (cffex_margin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rtn_margin_field.cffex_margin)
}

// .risk.dce_margin_field dce_margin = 5;
inline bool rtn_margin_field::has_dce_margin() const {
  return this != internal_default_instance() && dce_margin_ != NULL;
}
inline void rtn_margin_field::clear_dce_margin() {
  if (GetArenaNoVirtual() == NULL && dce_margin_ != NULL) delete dce_margin_;
  dce_margin_ = NULL;
}
inline const ::risk::dce_margin_field& rtn_margin_field::dce_margin() const {
  const ::risk::dce_margin_field* p = dce_margin_;
  // @@protoc_insertion_point(field_get:risk.rtn_margin_field.dce_margin)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::dce_margin_field*>(
      &::risk::_dce_margin_field_default_instance_);
}
inline ::risk::dce_margin_field* rtn_margin_field::mutable_dce_margin() {
  
  if (dce_margin_ == NULL) {
    dce_margin_ = new ::risk::dce_margin_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.rtn_margin_field.dce_margin)
  return dce_margin_;
}
inline ::risk::dce_margin_field* rtn_margin_field::release_dce_margin() {
  // @@protoc_insertion_point(field_release:risk.rtn_margin_field.dce_margin)
  
  ::risk::dce_margin_field* temp = dce_margin_;
  dce_margin_ = NULL;
  return temp;
}
inline void rtn_margin_field::set_allocated_dce_margin(::risk::dce_margin_field* dce_margin) {
  delete dce_margin_;
  dce_margin_ = dce_margin;
  if (dce_margin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rtn_margin_field.dce_margin)
}

// .risk.czce_margin_field czce_margin = 6;
inline bool rtn_margin_field::has_czce_margin() const {
  return this != internal_default_instance() && czce_margin_ != NULL;
}
inline void rtn_margin_field::clear_czce_margin() {
  if (GetArenaNoVirtual() == NULL && czce_margin_ != NULL) delete czce_margin_;
  czce_margin_ = NULL;
}
inline const ::risk::czce_margin_field& rtn_margin_field::czce_margin() const {
  const ::risk::czce_margin_field* p = czce_margin_;
  // @@protoc_insertion_point(field_get:risk.rtn_margin_field.czce_margin)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::czce_margin_field*>(
      &::risk::_czce_margin_field_default_instance_);
}
inline ::risk::czce_margin_field* rtn_margin_field::mutable_czce_margin() {
  
  if (czce_margin_ == NULL) {
    czce_margin_ = new ::risk::czce_margin_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.rtn_margin_field.czce_margin)
  return czce_margin_;
}
inline ::risk::czce_margin_field* rtn_margin_field::release_czce_margin() {
  // @@protoc_insertion_point(field_release:risk.rtn_margin_field.czce_margin)
  
  ::risk::czce_margin_field* temp = czce_margin_;
  czce_margin_ = NULL;
  return temp;
}
inline void rtn_margin_field::set_allocated_czce_margin(::risk::czce_margin_field* czce_margin) {
  delete czce_margin_;
  czce_margin_ = czce_margin;
  if (czce_margin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rtn_margin_field.czce_margin)
}

// .risk.ine_margin_field ine_margin = 7;
inline bool rtn_margin_field::has_ine_margin() const {
  return this != internal_default_instance() && ine_margin_ != NULL;
}
inline void rtn_margin_field::clear_ine_margin() {
  if (GetArenaNoVirtual() == NULL && ine_margin_ != NULL) delete ine_margin_;
  ine_margin_ = NULL;
}
inline const ::risk::ine_margin_field& rtn_margin_field::ine_margin() const {
  const ::risk::ine_margin_field* p = ine_margin_;
  // @@protoc_insertion_point(field_get:risk.rtn_margin_field.ine_margin)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::ine_margin_field*>(
      &::risk::_ine_margin_field_default_instance_);
}
inline ::risk::ine_margin_field* rtn_margin_field::mutable_ine_margin() {
  
  if (ine_margin_ == NULL) {
    ine_margin_ = new ::risk::ine_margin_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.rtn_margin_field.ine_margin)
  return ine_margin_;
}
inline ::risk::ine_margin_field* rtn_margin_field::release_ine_margin() {
  // @@protoc_insertion_point(field_release:risk.rtn_margin_field.ine_margin)
  
  ::risk::ine_margin_field* temp = ine_margin_;
  ine_margin_ = NULL;
  return temp;
}
inline void rtn_margin_field::set_allocated_ine_margin(::risk::ine_margin_field* ine_margin) {
  delete ine_margin_;
  ine_margin_ = ine_margin;
  if (ine_margin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rtn_margin_field.ine_margin)
}

// .risk.delivery_margin_field delivery_margin = 8;
inline bool rtn_margin_field::has_delivery_margin() const {
  return this != internal_default_instance() && delivery_margin_ != NULL;
}
inline void rtn_margin_field::clear_delivery_margin() {
  if (GetArenaNoVirtual() == NULL && delivery_margin_ != NULL) delete delivery_margin_;
  delivery_margin_ = NULL;
}
inline const ::risk::delivery_margin_field& rtn_margin_field::delivery_margin() const {
  const ::risk::delivery_margin_field* p = delivery_margin_;
  // @@protoc_insertion_point(field_get:risk.rtn_margin_field.delivery_margin)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::delivery_margin_field*>(
      &::risk::_delivery_margin_field_default_instance_);
}
inline ::risk::delivery_margin_field* rtn_margin_field::mutable_delivery_margin() {
  
  if (delivery_margin_ == NULL) {
    delivery_margin_ = new ::risk::delivery_margin_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.rtn_margin_field.delivery_margin)
  return delivery_margin_;
}
inline ::risk::delivery_margin_field* rtn_margin_field::release_delivery_margin() {
  // @@protoc_insertion_point(field_release:risk.rtn_margin_field.delivery_margin)
  
  ::risk::delivery_margin_field* temp = delivery_margin_;
  delivery_margin_ = NULL;
  return temp;
}
inline void rtn_margin_field::set_allocated_delivery_margin(::risk::delivery_margin_field* delivery_margin) {
  delete delivery_margin_;
  delivery_margin_ = delivery_margin;
  if (delivery_margin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rtn_margin_field.delivery_margin)
}

// -------------------------------------------------------------------

// rsp_margin_field

// .risk.rsp_head_info header = 1;
inline bool rsp_margin_field::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void rsp_margin_field::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::risk::rsp_head_info& rsp_margin_field::header() const {
  const ::risk::rsp_head_info* p = header_;
  // @@protoc_insertion_point(field_get:risk.rsp_margin_field.header)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::rsp_head_info*>(
      &::risk::_rsp_head_info_default_instance_);
}
inline ::risk::rsp_head_info* rsp_margin_field::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::risk::rsp_head_info;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_margin_field.header)
  return header_;
}
inline ::risk::rsp_head_info* rsp_margin_field::release_header() {
  // @@protoc_insertion_point(field_release:risk.rsp_margin_field.header)
  
  ::risk::rsp_head_info* temp = header_;
  header_ = NULL;
  return temp;
}
inline void rsp_margin_field::set_allocated_header(::risk::rsp_head_info* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_margin_field.header)
}

// .risk.rtn_margin_field field = 2;
inline bool rsp_margin_field::has_field() const {
  return this != internal_default_instance() && field_ != NULL;
}
inline void rsp_margin_field::clear_field() {
  if (GetArenaNoVirtual() == NULL && field_ != NULL) delete field_;
  field_ = NULL;
}
inline const ::risk::rtn_margin_field& rsp_margin_field::field() const {
  const ::risk::rtn_margin_field* p = field_;
  // @@protoc_insertion_point(field_get:risk.rsp_margin_field.field)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::rtn_margin_field*>(
      &::risk::_rtn_margin_field_default_instance_);
}
inline ::risk::rtn_margin_field* rsp_margin_field::mutable_field() {
  
  if (field_ == NULL) {
    field_ = new ::risk::rtn_margin_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_margin_field.field)
  return field_;
}
inline ::risk::rtn_margin_field* rsp_margin_field::release_field() {
  // @@protoc_insertion_point(field_release:risk.rsp_margin_field.field)
  
  ::risk::rtn_margin_field* temp = field_;
  field_ = NULL;
  return temp;
}
inline void rsp_margin_field::set_allocated_field(::risk::rtn_margin_field* field) {
  delete field_;
  field_ = field;
  if (field) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_margin_field.field)
}

// -------------------------------------------------------------------

// rsp_risker_investor

// .risk.rsp_head_info header = 1;
inline bool rsp_risker_investor::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void rsp_risker_investor::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::risk::rsp_head_info& rsp_risker_investor::header() const {
  const ::risk::rsp_head_info* p = header_;
  // @@protoc_insertion_point(field_get:risk.rsp_risker_investor.header)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::rsp_head_info*>(
      &::risk::_rsp_head_info_default_instance_);
}
inline ::risk::rsp_head_info* rsp_risker_investor::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::risk::rsp_head_info;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_risker_investor.header)
  return header_;
}
inline ::risk::rsp_head_info* rsp_risker_investor::release_header() {
  // @@protoc_insertion_point(field_release:risk.rsp_risker_investor.header)
  
  ::risk::rsp_head_info* temp = header_;
  header_ = NULL;
  return temp;
}
inline void rsp_risker_investor::set_allocated_header(::risk::rsp_head_info* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_risker_investor.header)
}

// string riskgroupid = 2;
inline void rsp_risker_investor::clear_riskgroupid() {
  riskgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& rsp_risker_investor::riskgroupid() const {
  // @@protoc_insertion_point(field_get:risk.rsp_risker_investor.riskgroupid)
  return riskgroupid_.GetNoArena();
}
inline void rsp_risker_investor::set_riskgroupid(const ::std::string& value) {
  
  riskgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.rsp_risker_investor.riskgroupid)
}
#if LANG_CXX11
inline void rsp_risker_investor::set_riskgroupid(::std::string&& value) {
  
  riskgroupid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.rsp_risker_investor.riskgroupid)
}
#endif
inline void rsp_risker_investor::set_riskgroupid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  riskgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.rsp_risker_investor.riskgroupid)
}
inline void rsp_risker_investor::set_riskgroupid(const char* value, size_t size) {
  
  riskgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.rsp_risker_investor.riskgroupid)
}
inline ::std::string* rsp_risker_investor::mutable_riskgroupid() {
  
  // @@protoc_insertion_point(field_mutable:risk.rsp_risker_investor.riskgroupid)
  return riskgroupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* rsp_risker_investor::release_riskgroupid() {
  // @@protoc_insertion_point(field_release:risk.rsp_risker_investor.riskgroupid)
  
  return riskgroupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void rsp_risker_investor::set_allocated_riskgroupid(::std::string* riskgroupid) {
  if (riskgroupid != NULL) {
    
  } else {
    
  }
  riskgroupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), riskgroupid);
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_risker_investor.riskgroupid)
}

// string investorid = 3;
inline void rsp_risker_investor::clear_investorid() {
  investorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& rsp_risker_investor::investorid() const {
  // @@protoc_insertion_point(field_get:risk.rsp_risker_investor.investorid)
  return investorid_.GetNoArena();
}
inline void rsp_risker_investor::set_investorid(const ::std::string& value) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.rsp_risker_investor.investorid)
}
#if LANG_CXX11
inline void rsp_risker_investor::set_investorid(::std::string&& value) {
  
  investorid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.rsp_risker_investor.investorid)
}
#endif
inline void rsp_risker_investor::set_investorid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.rsp_risker_investor.investorid)
}
inline void rsp_risker_investor::set_investorid(const char* value, size_t size) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.rsp_risker_investor.investorid)
}
inline ::std::string* rsp_risker_investor::mutable_investorid() {
  
  // @@protoc_insertion_point(field_mutable:risk.rsp_risker_investor.investorid)
  return investorid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* rsp_risker_investor::release_investorid() {
  // @@protoc_insertion_point(field_release:risk.rsp_risker_investor.investorid)
  
  return investorid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void rsp_risker_investor::set_allocated_investorid(::std::string* investorid) {
  if (investorid != NULL) {
    
  } else {
    
  }
  investorid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), investorid);
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_risker_investor.investorid)
}

// -------------------------------------------------------------------

// rsp_groups

// .risk.rsp_head_info header = 1;
inline bool rsp_groups::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void rsp_groups::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::risk::rsp_head_info& rsp_groups::header() const {
  const ::risk::rsp_head_info* p = header_;
  // @@protoc_insertion_point(field_get:risk.rsp_groups.header)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::rsp_head_info*>(
      &::risk::_rsp_head_info_default_instance_);
}
inline ::risk::rsp_head_info* rsp_groups::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::risk::rsp_head_info;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_groups.header)
  return header_;
}
inline ::risk::rsp_head_info* rsp_groups::release_header() {
  // @@protoc_insertion_point(field_release:risk.rsp_groups.header)
  
  ::risk::rsp_head_info* temp = header_;
  header_ = NULL;
  return temp;
}
inline void rsp_groups::set_allocated_header(::risk::rsp_head_info* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_groups.header)
}

// repeated .risk.sys_group infos = 2;
inline int rsp_groups::infos_size() const {
  return infos_.size();
}
inline void rsp_groups::clear_infos() {
  infos_.Clear();
}
inline const ::risk::sys_group& rsp_groups::infos(int index) const {
  // @@protoc_insertion_point(field_get:risk.rsp_groups.infos)
  return infos_.Get(index);
}
inline ::risk::sys_group* rsp_groups::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:risk.rsp_groups.infos)
  return infos_.Mutable(index);
}
inline ::risk::sys_group* rsp_groups::add_infos() {
  // @@protoc_insertion_point(field_add:risk.rsp_groups.infos)
  return infos_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::risk::sys_group >*
rsp_groups::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:risk.rsp_groups.infos)
  return &infos_;
}
inline const ::google::protobuf::RepeatedPtrField< ::risk::sys_group >&
rsp_groups::infos() const {
  // @@protoc_insertion_point(field_list:risk.rsp_groups.infos)
  return infos_;
}

// -------------------------------------------------------------------

// rsp_action_info

// int32 requestid = 1;
inline void rsp_action_info::clear_requestid() {
  requestid_ = 0;
}
inline ::google::protobuf::int32 rsp_action_info::requestid() const {
  // @@protoc_insertion_point(field_get:risk.rsp_action_info.requestid)
  return requestid_;
}
inline void rsp_action_info::set_requestid(::google::protobuf::int32 value) {
  
  requestid_ = value;
  // @@protoc_insertion_point(field_set:risk.rsp_action_info.requestid)
}

// .risk.error_info info = 2;
inline bool rsp_action_info::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
inline void rsp_action_info::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
inline const ::risk::error_info& rsp_action_info::info() const {
  const ::risk::error_info* p = info_;
  // @@protoc_insertion_point(field_get:risk.rsp_action_info.info)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::error_info*>(
      &::risk::_error_info_default_instance_);
}
inline ::risk::error_info* rsp_action_info::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::risk::error_info;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_action_info.info)
  return info_;
}
inline ::risk::error_info* rsp_action_info::release_info() {
  // @@protoc_insertion_point(field_release:risk.rsp_action_info.info)
  
  ::risk::error_info* temp = info_;
  info_ = NULL;
  return temp;
}
inline void rsp_action_info::set_allocated_info(::risk::error_info* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_action_info.info)
}

// -------------------------------------------------------------------

// rtn_change_risker

// int32 operatorid = 1;
inline void rtn_change_risker::clear_operatorid() {
  operatorid_ = 0;
}
inline ::google::protobuf::int32 rtn_change_risker::operatorid() const {
  // @@protoc_insertion_point(field_get:risk.rtn_change_risker.operatorid)
  return operatorid_;
}
inline void rtn_change_risker::set_operatorid(::google::protobuf::int32 value) {
  
  operatorid_ = value;
  // @@protoc_insertion_point(field_set:risk.rtn_change_risker.operatorid)
}

// string userid = 2;
inline void rtn_change_risker::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& rtn_change_risker::userid() const {
  // @@protoc_insertion_point(field_get:risk.rtn_change_risker.userid)
  return userid_.GetNoArena();
}
inline void rtn_change_risker::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.rtn_change_risker.userid)
}
#if LANG_CXX11
inline void rtn_change_risker::set_userid(::std::string&& value) {
  
  userid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.rtn_change_risker.userid)
}
#endif
inline void rtn_change_risker::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.rtn_change_risker.userid)
}
inline void rtn_change_risker::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.rtn_change_risker.userid)
}
inline ::std::string* rtn_change_risker::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:risk.rtn_change_risker.userid)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* rtn_change_risker::release_userid() {
  // @@protoc_insertion_point(field_release:risk.rtn_change_risker.userid)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void rtn_change_risker::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:risk.rtn_change_risker.userid)
}

// .risk.sys_group group = 3;
inline bool rtn_change_risker::has_group() const {
  return this != internal_default_instance() && group_ != NULL;
}
inline void rtn_change_risker::clear_group() {
  if (GetArenaNoVirtual() == NULL && group_ != NULL) delete group_;
  group_ = NULL;
}
inline const ::risk::sys_group& rtn_change_risker::group() const {
  const ::risk::sys_group* p = group_;
  // @@protoc_insertion_point(field_get:risk.rtn_change_risker.group)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::sys_group*>(
      &::risk::_sys_group_default_instance_);
}
inline ::risk::sys_group* rtn_change_risker::mutable_group() {
  
  if (group_ == NULL) {
    group_ = new ::risk::sys_group;
  }
  // @@protoc_insertion_point(field_mutable:risk.rtn_change_risker.group)
  return group_;
}
inline ::risk::sys_group* rtn_change_risker::release_group() {
  // @@protoc_insertion_point(field_release:risk.rtn_change_risker.group)
  
  ::risk::sys_group* temp = group_;
  group_ = NULL;
  return temp;
}
inline void rtn_change_risker::set_allocated_group(::risk::sys_group* group) {
  delete group_;
  group_ = group;
  if (group) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rtn_change_risker.group)
}

// repeated string investor = 4;
inline int rtn_change_risker::investor_size() const {
  return investor_.size();
}
inline void rtn_change_risker::clear_investor() {
  investor_.Clear();
}
inline const ::std::string& rtn_change_risker::investor(int index) const {
  // @@protoc_insertion_point(field_get:risk.rtn_change_risker.investor)
  return investor_.Get(index);
}
inline ::std::string* rtn_change_risker::mutable_investor(int index) {
  // @@protoc_insertion_point(field_mutable:risk.rtn_change_risker.investor)
  return investor_.Mutable(index);
}
inline void rtn_change_risker::set_investor(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:risk.rtn_change_risker.investor)
  investor_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void rtn_change_risker::set_investor(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:risk.rtn_change_risker.investor)
  investor_.Mutable(index)->assign(std::move(value));
}
#endif
inline void rtn_change_risker::set_investor(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  investor_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:risk.rtn_change_risker.investor)
}
inline void rtn_change_risker::set_investor(int index, const char* value, size_t size) {
  investor_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:risk.rtn_change_risker.investor)
}
inline ::std::string* rtn_change_risker::add_investor() {
  // @@protoc_insertion_point(field_add_mutable:risk.rtn_change_risker.investor)
  return investor_.Add();
}
inline void rtn_change_risker::add_investor(const ::std::string& value) {
  investor_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:risk.rtn_change_risker.investor)
}
#if LANG_CXX11
inline void rtn_change_risker::add_investor(::std::string&& value) {
  investor_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:risk.rtn_change_risker.investor)
}
#endif
inline void rtn_change_risker::add_investor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  investor_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:risk.rtn_change_risker.investor)
}
inline void rtn_change_risker::add_investor(const char* value, size_t size) {
  investor_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:risk.rtn_change_risker.investor)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
rtn_change_risker::investor() const {
  // @@protoc_insertion_point(field_list:risk.rtn_change_risker.investor)
  return investor_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
rtn_change_risker::mutable_investor() {
  // @@protoc_insertion_point(field_mutable_list:risk.rtn_change_risker.investor)
  return &investor_;
}

// -------------------------------------------------------------------

// rtn_option_position_risk

// int32 type = 1;
inline void rtn_option_position_risk::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 rtn_option_position_risk::type() const {
  // @@protoc_insertion_point(field_get:risk.rtn_option_position_risk.type)
  return type_;
}
inline void rtn_option_position_risk::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:risk.rtn_option_position_risk.type)
}

// int32 model = 2;
inline void rtn_option_position_risk::clear_model() {
  model_ = 0;
}
inline ::google::protobuf::int32 rtn_option_position_risk::model() const {
  // @@protoc_insertion_point(field_get:risk.rtn_option_position_risk.model)
  return model_;
}
inline void rtn_option_position_risk::set_model(::google::protobuf::int32 value) {
  
  model_ = value;
  // @@protoc_insertion_point(field_set:risk.rtn_option_position_risk.model)
}

// string instrument = 3;
inline void rtn_option_position_risk::clear_instrument() {
  instrument_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& rtn_option_position_risk::instrument() const {
  // @@protoc_insertion_point(field_get:risk.rtn_option_position_risk.instrument)
  return instrument_.GetNoArena();
}
inline void rtn_option_position_risk::set_instrument(const ::std::string& value) {
  
  instrument_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.rtn_option_position_risk.instrument)
}
#if LANG_CXX11
inline void rtn_option_position_risk::set_instrument(::std::string&& value) {
  
  instrument_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.rtn_option_position_risk.instrument)
}
#endif
inline void rtn_option_position_risk::set_instrument(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  instrument_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.rtn_option_position_risk.instrument)
}
inline void rtn_option_position_risk::set_instrument(const char* value, size_t size) {
  
  instrument_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.rtn_option_position_risk.instrument)
}
inline ::std::string* rtn_option_position_risk::mutable_instrument() {
  
  // @@protoc_insertion_point(field_mutable:risk.rtn_option_position_risk.instrument)
  return instrument_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* rtn_option_position_risk::release_instrument() {
  // @@protoc_insertion_point(field_release:risk.rtn_option_position_risk.instrument)
  
  return instrument_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void rtn_option_position_risk::set_allocated_instrument(::std::string* instrument) {
  if (instrument != NULL) {
    
  } else {
    
  }
  instrument_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrument);
  // @@protoc_insertion_point(field_set_allocated:risk.rtn_option_position_risk.instrument)
}

// double value = 4;
inline void rtn_option_position_risk::clear_value() {
  value_ = 0;
}
inline double rtn_option_position_risk::value() const {
  // @@protoc_insertion_point(field_get:risk.rtn_option_position_risk.value)
  return value_;
}
inline void rtn_option_position_risk::set_value(double value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:risk.rtn_option_position_risk.value)
}

// -------------------------------------------------------------------

// rsp_whatif

// .risk.rsp_head_info header = 1;
inline bool rsp_whatif::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void rsp_whatif::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::risk::rsp_head_info& rsp_whatif::header() const {
  const ::risk::rsp_head_info* p = header_;
  // @@protoc_insertion_point(field_get:risk.rsp_whatif.header)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::rsp_head_info*>(
      &::risk::_rsp_head_info_default_instance_);
}
inline ::risk::rsp_head_info* rsp_whatif::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::risk::rsp_head_info;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_whatif.header)
  return header_;
}
inline ::risk::rsp_head_info* rsp_whatif::release_header() {
  // @@protoc_insertion_point(field_release:risk.rsp_whatif.header)
  
  ::risk::rsp_head_info* temp = header_;
  header_ = NULL;
  return temp;
}
inline void rsp_whatif::set_allocated_header(::risk::rsp_head_info* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_whatif.header)
}

// int32 type = 2;
inline void rsp_whatif::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 rsp_whatif::type() const {
  // @@protoc_insertion_point(field_get:risk.rsp_whatif.type)
  return type_;
}
inline void rsp_whatif::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:risk.rsp_whatif.type)
}

// int32 model = 3;
inline void rsp_whatif::clear_model() {
  model_ = 0;
}
inline ::google::protobuf::int32 rsp_whatif::model() const {
  // @@protoc_insertion_point(field_get:risk.rsp_whatif.model)
  return model_;
}
inline void rsp_whatif::set_model(::google::protobuf::int32 value) {
  
  model_ = value;
  // @@protoc_insertion_point(field_set:risk.rsp_whatif.model)
}

// string instrument = 4;
inline void rsp_whatif::clear_instrument() {
  instrument_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& rsp_whatif::instrument() const {
  // @@protoc_insertion_point(field_get:risk.rsp_whatif.instrument)
  return instrument_.GetNoArena();
}
inline void rsp_whatif::set_instrument(const ::std::string& value) {
  
  instrument_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.rsp_whatif.instrument)
}
#if LANG_CXX11
inline void rsp_whatif::set_instrument(::std::string&& value) {
  
  instrument_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.rsp_whatif.instrument)
}
#endif
inline void rsp_whatif::set_instrument(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  instrument_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.rsp_whatif.instrument)
}
inline void rsp_whatif::set_instrument(const char* value, size_t size) {
  
  instrument_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.rsp_whatif.instrument)
}
inline ::std::string* rsp_whatif::mutable_instrument() {
  
  // @@protoc_insertion_point(field_mutable:risk.rsp_whatif.instrument)
  return instrument_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* rsp_whatif::release_instrument() {
  // @@protoc_insertion_point(field_release:risk.rsp_whatif.instrument)
  
  return instrument_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void rsp_whatif::set_allocated_instrument(::std::string* instrument) {
  if (instrument != NULL) {
    
  } else {
    
  }
  instrument_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrument);
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_whatif.instrument)
}

// double range = 5;
inline void rsp_whatif::clear_range() {
  range_ = 0;
}
inline double rsp_whatif::range() const {
  // @@protoc_insertion_point(field_get:risk.rsp_whatif.range)
  return range_;
}
inline void rsp_whatif::set_range(double value) {
  
  range_ = value;
  // @@protoc_insertion_point(field_set:risk.rsp_whatif.range)
}

// double option_value = 6;
inline void rsp_whatif::clear_option_value() {
  option_value_ = 0;
}
inline double rsp_whatif::option_value() const {
  // @@protoc_insertion_point(field_get:risk.rsp_whatif.option_value)
  return option_value_;
}
inline void rsp_whatif::set_option_value(double value) {
  
  option_value_ = value;
  // @@protoc_insertion_point(field_set:risk.rsp_whatif.option_value)
}

// -------------------------------------------------------------------

// option_argv

// int32 model = 1;
inline void option_argv::clear_model() {
  model_ = 0;
}
inline ::google::protobuf::int32 option_argv::model() const {
  // @@protoc_insertion_point(field_get:risk.option_argv.model)
  return model_;
}
inline void option_argv::set_model(::google::protobuf::int32 value) {
  
  model_ = value;
  // @@protoc_insertion_point(field_set:risk.option_argv.model)
}

// int32 price_type = 2;
inline void option_argv::clear_price_type() {
  price_type_ = 0;
}
inline ::google::protobuf::int32 option_argv::price_type() const {
  // @@protoc_insertion_point(field_get:risk.option_argv.price_type)
  return price_type_;
}
inline void option_argv::set_price_type(::google::protobuf::int32 value) {
  
  price_type_ = value;
  // @@protoc_insertion_point(field_set:risk.option_argv.price_type)
}

// double vol = 3;
inline void option_argv::clear_vol() {
  vol_ = 0;
}
inline double option_argv::vol() const {
  // @@protoc_insertion_point(field_get:risk.option_argv.vol)
  return vol_;
}
inline void option_argv::set_vol(double value) {
  
  vol_ = value;
  // @@protoc_insertion_point(field_set:risk.option_argv.vol)
}

// double rate = 4;
inline void option_argv::clear_rate() {
  rate_ = 0;
}
inline double option_argv::rate() const {
  // @@protoc_insertion_point(field_get:risk.option_argv.rate)
  return rate_;
}
inline void option_argv::set_rate(double value) {
  
  rate_ = value;
  // @@protoc_insertion_point(field_set:risk.option_argv.rate)
}

// -------------------------------------------------------------------

// rsp_option_argv

// .risk.rsp_head_info header = 1;
inline bool rsp_option_argv::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void rsp_option_argv::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::risk::rsp_head_info& rsp_option_argv::header() const {
  const ::risk::rsp_head_info* p = header_;
  // @@protoc_insertion_point(field_get:risk.rsp_option_argv.header)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::rsp_head_info*>(
      &::risk::_rsp_head_info_default_instance_);
}
inline ::risk::rsp_head_info* rsp_option_argv::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::risk::rsp_head_info;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_option_argv.header)
  return header_;
}
inline ::risk::rsp_head_info* rsp_option_argv::release_header() {
  // @@protoc_insertion_point(field_release:risk.rsp_option_argv.header)
  
  ::risk::rsp_head_info* temp = header_;
  header_ = NULL;
  return temp;
}
inline void rsp_option_argv::set_allocated_header(::risk::rsp_head_info* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_option_argv.header)
}

// .risk.option_argv info = 2;
inline bool rsp_option_argv::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
inline void rsp_option_argv::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
inline const ::risk::option_argv& rsp_option_argv::info() const {
  const ::risk::option_argv* p = info_;
  // @@protoc_insertion_point(field_get:risk.rsp_option_argv.info)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::option_argv*>(
      &::risk::_option_argv_default_instance_);
}
inline ::risk::option_argv* rsp_option_argv::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::risk::option_argv;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_option_argv.info)
  return info_;
}
inline ::risk::option_argv* rsp_option_argv::release_info() {
  // @@protoc_insertion_point(field_release:risk.rsp_option_argv.info)
  
  ::risk::option_argv* temp = info_;
  info_ = NULL;
  return temp;
}
inline void rsp_option_argv::set_allocated_info(::risk::option_argv* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_option_argv.info)
}

// -------------------------------------------------------------------

// rtn_whatif

// .risk.whatif_argv field = 1;
inline bool rtn_whatif::has_field() const {
  return this != internal_default_instance() && field_ != NULL;
}
inline void rtn_whatif::clear_field() {
  if (GetArenaNoVirtual() == NULL && field_ != NULL) delete field_;
  field_ = NULL;
}
inline const ::risk::whatif_argv& rtn_whatif::field() const {
  const ::risk::whatif_argv* p = field_;
  // @@protoc_insertion_point(field_get:risk.rtn_whatif.field)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::whatif_argv*>(
      &::risk::_whatif_argv_default_instance_);
}
inline ::risk::whatif_argv* rtn_whatif::mutable_field() {
  
  if (field_ == NULL) {
    field_ = new ::risk::whatif_argv;
  }
  // @@protoc_insertion_point(field_mutable:risk.rtn_whatif.field)
  return field_;
}
inline ::risk::whatif_argv* rtn_whatif::release_field() {
  // @@protoc_insertion_point(field_release:risk.rtn_whatif.field)
  
  ::risk::whatif_argv* temp = field_;
  field_ = NULL;
  return temp;
}
inline void rtn_whatif::set_allocated_field(::risk::whatif_argv* field) {
  delete field_;
  field_ = field;
  if (field) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rtn_whatif.field)
}

// double option_value = 2;
inline void rtn_whatif::clear_option_value() {
  option_value_ = 0;
}
inline double rtn_whatif::option_value() const {
  // @@protoc_insertion_point(field_get:risk.rtn_whatif.option_value)
  return option_value_;
}
inline void rtn_whatif::set_option_value(double value) {
  
  option_value_ = value;
  // @@protoc_insertion_point(field_set:risk.rtn_whatif.option_value)
}

// -------------------------------------------------------------------

// investor_info

// string investorid = 1;
inline void investor_info::clear_investorid() {
  investorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& investor_info::investorid() const {
  // @@protoc_insertion_point(field_get:risk.investor_info.investorid)
  return investorid_.GetNoArena();
}
inline void investor_info::set_investorid(const ::std::string& value) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.investor_info.investorid)
}
#if LANG_CXX11
inline void investor_info::set_investorid(::std::string&& value) {
  
  investorid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.investor_info.investorid)
}
#endif
inline void investor_info::set_investorid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.investor_info.investorid)
}
inline void investor_info::set_investorid(const char* value, size_t size) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.investor_info.investorid)
}
inline ::std::string* investor_info::mutable_investorid() {
  
  // @@protoc_insertion_point(field_mutable:risk.investor_info.investorid)
  return investorid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* investor_info::release_investorid() {
  // @@protoc_insertion_point(field_release:risk.investor_info.investorid)
  
  return investorid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void investor_info::set_allocated_investorid(::std::string* investorid) {
  if (investorid != NULL) {
    
  } else {
    
  }
  investorid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), investorid);
  // @@protoc_insertion_point(field_set_allocated:risk.investor_info.investorid)
}

// string brokerid = 2;
inline void investor_info::clear_brokerid() {
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& investor_info::brokerid() const {
  // @@protoc_insertion_point(field_get:risk.investor_info.brokerid)
  return brokerid_.GetNoArena();
}
inline void investor_info::set_brokerid(const ::std::string& value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.investor_info.brokerid)
}
#if LANG_CXX11
inline void investor_info::set_brokerid(::std::string&& value) {
  
  brokerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.investor_info.brokerid)
}
#endif
inline void investor_info::set_brokerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.investor_info.brokerid)
}
inline void investor_info::set_brokerid(const char* value, size_t size) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.investor_info.brokerid)
}
inline ::std::string* investor_info::mutable_brokerid() {
  
  // @@protoc_insertion_point(field_mutable:risk.investor_info.brokerid)
  return brokerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* investor_info::release_brokerid() {
  // @@protoc_insertion_point(field_release:risk.investor_info.brokerid)
  
  return brokerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void investor_info::set_allocated_brokerid(::std::string* brokerid) {
  if (brokerid != NULL) {
    
  } else {
    
  }
  brokerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brokerid);
  // @@protoc_insertion_point(field_set_allocated:risk.investor_info.brokerid)
}

// string investortype = 3;
inline void investor_info::clear_investortype() {
  investortype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& investor_info::investortype() const {
  // @@protoc_insertion_point(field_get:risk.investor_info.investortype)
  return investortype_.GetNoArena();
}
inline void investor_info::set_investortype(const ::std::string& value) {
  
  investortype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.investor_info.investortype)
}
#if LANG_CXX11
inline void investor_info::set_investortype(::std::string&& value) {
  
  investortype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.investor_info.investortype)
}
#endif
inline void investor_info::set_investortype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  investortype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.investor_info.investortype)
}
inline void investor_info::set_investortype(const char* value, size_t size) {
  
  investortype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.investor_info.investortype)
}
inline ::std::string* investor_info::mutable_investortype() {
  
  // @@protoc_insertion_point(field_mutable:risk.investor_info.investortype)
  return investortype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* investor_info::release_investortype() {
  // @@protoc_insertion_point(field_release:risk.investor_info.investortype)
  
  return investortype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void investor_info::set_allocated_investortype(::std::string* investortype) {
  if (investortype != NULL) {
    
  } else {
    
  }
  investortype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), investortype);
  // @@protoc_insertion_point(field_set_allocated:risk.investor_info.investortype)
}

// string investorname = 4;
inline void investor_info::clear_investorname() {
  investorname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& investor_info::investorname() const {
  // @@protoc_insertion_point(field_get:risk.investor_info.investorname)
  return investorname_.GetNoArena();
}
inline void investor_info::set_investorname(const ::std::string& value) {
  
  investorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.investor_info.investorname)
}
#if LANG_CXX11
inline void investor_info::set_investorname(::std::string&& value) {
  
  investorname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.investor_info.investorname)
}
#endif
inline void investor_info::set_investorname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  investorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.investor_info.investorname)
}
inline void investor_info::set_investorname(const char* value, size_t size) {
  
  investorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.investor_info.investorname)
}
inline ::std::string* investor_info::mutable_investorname() {
  
  // @@protoc_insertion_point(field_mutable:risk.investor_info.investorname)
  return investorname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* investor_info::release_investorname() {
  // @@protoc_insertion_point(field_release:risk.investor_info.investorname)
  
  return investorname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void investor_info::set_allocated_investorname(::std::string* investorname) {
  if (investorname != NULL) {
    
  } else {
    
  }
  investorname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), investorname);
  // @@protoc_insertion_point(field_set_allocated:risk.investor_info.investorname)
}

// string identifiedcardtype = 5;
inline void investor_info::clear_identifiedcardtype() {
  identifiedcardtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& investor_info::identifiedcardtype() const {
  // @@protoc_insertion_point(field_get:risk.investor_info.identifiedcardtype)
  return identifiedcardtype_.GetNoArena();
}
inline void investor_info::set_identifiedcardtype(const ::std::string& value) {
  
  identifiedcardtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.investor_info.identifiedcardtype)
}
#if LANG_CXX11
inline void investor_info::set_identifiedcardtype(::std::string&& value) {
  
  identifiedcardtype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.investor_info.identifiedcardtype)
}
#endif
inline void investor_info::set_identifiedcardtype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  identifiedcardtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.investor_info.identifiedcardtype)
}
inline void investor_info::set_identifiedcardtype(const char* value, size_t size) {
  
  identifiedcardtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.investor_info.identifiedcardtype)
}
inline ::std::string* investor_info::mutable_identifiedcardtype() {
  
  // @@protoc_insertion_point(field_mutable:risk.investor_info.identifiedcardtype)
  return identifiedcardtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* investor_info::release_identifiedcardtype() {
  // @@protoc_insertion_point(field_release:risk.investor_info.identifiedcardtype)
  
  return identifiedcardtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void investor_info::set_allocated_identifiedcardtype(::std::string* identifiedcardtype) {
  if (identifiedcardtype != NULL) {
    
  } else {
    
  }
  identifiedcardtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), identifiedcardtype);
  // @@protoc_insertion_point(field_set_allocated:risk.investor_info.identifiedcardtype)
}

// string identifiedcardno = 6;
inline void investor_info::clear_identifiedcardno() {
  identifiedcardno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& investor_info::identifiedcardno() const {
  // @@protoc_insertion_point(field_get:risk.investor_info.identifiedcardno)
  return identifiedcardno_.GetNoArena();
}
inline void investor_info::set_identifiedcardno(const ::std::string& value) {
  
  identifiedcardno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.investor_info.identifiedcardno)
}
#if LANG_CXX11
inline void investor_info::set_identifiedcardno(::std::string&& value) {
  
  identifiedcardno_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.investor_info.identifiedcardno)
}
#endif
inline void investor_info::set_identifiedcardno(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  identifiedcardno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.investor_info.identifiedcardno)
}
inline void investor_info::set_identifiedcardno(const char* value, size_t size) {
  
  identifiedcardno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.investor_info.identifiedcardno)
}
inline ::std::string* investor_info::mutable_identifiedcardno() {
  
  // @@protoc_insertion_point(field_mutable:risk.investor_info.identifiedcardno)
  return identifiedcardno_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* investor_info::release_identifiedcardno() {
  // @@protoc_insertion_point(field_release:risk.investor_info.identifiedcardno)
  
  return identifiedcardno_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void investor_info::set_allocated_identifiedcardno(::std::string* identifiedcardno) {
  if (identifiedcardno != NULL) {
    
  } else {
    
  }
  identifiedcardno_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), identifiedcardno);
  // @@protoc_insertion_point(field_set_allocated:risk.investor_info.identifiedcardno)
}

// string country = 7;
inline void investor_info::clear_country() {
  country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& investor_info::country() const {
  // @@protoc_insertion_point(field_get:risk.investor_info.country)
  return country_.GetNoArena();
}
inline void investor_info::set_country(const ::std::string& value) {
  
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.investor_info.country)
}
#if LANG_CXX11
inline void investor_info::set_country(::std::string&& value) {
  
  country_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.investor_info.country)
}
#endif
inline void investor_info::set_country(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.investor_info.country)
}
inline void investor_info::set_country(const char* value, size_t size) {
  
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.investor_info.country)
}
inline ::std::string* investor_info::mutable_country() {
  
  // @@protoc_insertion_point(field_mutable:risk.investor_info.country)
  return country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* investor_info::release_country() {
  // @@protoc_insertion_point(field_release:risk.investor_info.country)
  
  return country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void investor_info::set_allocated_country(::std::string* country) {
  if (country != NULL) {
    
  } else {
    
  }
  country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:risk.investor_info.country)
}

// string province = 8;
inline void investor_info::clear_province() {
  province_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& investor_info::province() const {
  // @@protoc_insertion_point(field_get:risk.investor_info.province)
  return province_.GetNoArena();
}
inline void investor_info::set_province(const ::std::string& value) {
  
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.investor_info.province)
}
#if LANG_CXX11
inline void investor_info::set_province(::std::string&& value) {
  
  province_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.investor_info.province)
}
#endif
inline void investor_info::set_province(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.investor_info.province)
}
inline void investor_info::set_province(const char* value, size_t size) {
  
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.investor_info.province)
}
inline ::std::string* investor_info::mutable_province() {
  
  // @@protoc_insertion_point(field_mutable:risk.investor_info.province)
  return province_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* investor_info::release_province() {
  // @@protoc_insertion_point(field_release:risk.investor_info.province)
  
  return province_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void investor_info::set_allocated_province(::std::string* province) {
  if (province != NULL) {
    
  } else {
    
  }
  province_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), province);
  // @@protoc_insertion_point(field_set_allocated:risk.investor_info.province)
}

// string city = 9;
inline void investor_info::clear_city() {
  city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& investor_info::city() const {
  // @@protoc_insertion_point(field_get:risk.investor_info.city)
  return city_.GetNoArena();
}
inline void investor_info::set_city(const ::std::string& value) {
  
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.investor_info.city)
}
#if LANG_CXX11
inline void investor_info::set_city(::std::string&& value) {
  
  city_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.investor_info.city)
}
#endif
inline void investor_info::set_city(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.investor_info.city)
}
inline void investor_info::set_city(const char* value, size_t size) {
  
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.investor_info.city)
}
inline ::std::string* investor_info::mutable_city() {
  
  // @@protoc_insertion_point(field_mutable:risk.investor_info.city)
  return city_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* investor_info::release_city() {
  // @@protoc_insertion_point(field_release:risk.investor_info.city)
  
  return city_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void investor_info::set_allocated_city(::std::string* city) {
  if (city != NULL) {
    
  } else {
    
  }
  city_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), city);
  // @@protoc_insertion_point(field_set_allocated:risk.investor_info.city)
}

// string birthday = 10;
inline void investor_info::clear_birthday() {
  birthday_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& investor_info::birthday() const {
  // @@protoc_insertion_point(field_get:risk.investor_info.birthday)
  return birthday_.GetNoArena();
}
inline void investor_info::set_birthday(const ::std::string& value) {
  
  birthday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.investor_info.birthday)
}
#if LANG_CXX11
inline void investor_info::set_birthday(::std::string&& value) {
  
  birthday_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.investor_info.birthday)
}
#endif
inline void investor_info::set_birthday(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  birthday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.investor_info.birthday)
}
inline void investor_info::set_birthday(const char* value, size_t size) {
  
  birthday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.investor_info.birthday)
}
inline ::std::string* investor_info::mutable_birthday() {
  
  // @@protoc_insertion_point(field_mutable:risk.investor_info.birthday)
  return birthday_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* investor_info::release_birthday() {
  // @@protoc_insertion_point(field_release:risk.investor_info.birthday)
  
  return birthday_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void investor_info::set_allocated_birthday(::std::string* birthday) {
  if (birthday != NULL) {
    
  } else {
    
  }
  birthday_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), birthday);
  // @@protoc_insertion_point(field_set_allocated:risk.investor_info.birthday)
}

// string sex = 11;
inline void investor_info::clear_sex() {
  sex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& investor_info::sex() const {
  // @@protoc_insertion_point(field_get:risk.investor_info.sex)
  return sex_.GetNoArena();
}
inline void investor_info::set_sex(const ::std::string& value) {
  
  sex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.investor_info.sex)
}
#if LANG_CXX11
inline void investor_info::set_sex(::std::string&& value) {
  
  sex_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.investor_info.sex)
}
#endif
inline void investor_info::set_sex(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.investor_info.sex)
}
inline void investor_info::set_sex(const char* value, size_t size) {
  
  sex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.investor_info.sex)
}
inline ::std::string* investor_info::mutable_sex() {
  
  // @@protoc_insertion_point(field_mutable:risk.investor_info.sex)
  return sex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* investor_info::release_sex() {
  // @@protoc_insertion_point(field_release:risk.investor_info.sex)
  
  return sex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void investor_info::set_allocated_sex(::std::string* sex) {
  if (sex != NULL) {
    
  } else {
    
  }
  sex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sex);
  // @@protoc_insertion_point(field_set_allocated:risk.investor_info.sex)
}

// string profession = 12;
inline void investor_info::clear_profession() {
  profession_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& investor_info::profession() const {
  // @@protoc_insertion_point(field_get:risk.investor_info.profession)
  return profession_.GetNoArena();
}
inline void investor_info::set_profession(const ::std::string& value) {
  
  profession_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.investor_info.profession)
}
#if LANG_CXX11
inline void investor_info::set_profession(::std::string&& value) {
  
  profession_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.investor_info.profession)
}
#endif
inline void investor_info::set_profession(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  profession_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.investor_info.profession)
}
inline void investor_info::set_profession(const char* value, size_t size) {
  
  profession_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.investor_info.profession)
}
inline ::std::string* investor_info::mutable_profession() {
  
  // @@protoc_insertion_point(field_mutable:risk.investor_info.profession)
  return profession_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* investor_info::release_profession() {
  // @@protoc_insertion_point(field_release:risk.investor_info.profession)
  
  return profession_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void investor_info::set_allocated_profession(::std::string* profession) {
  if (profession != NULL) {
    
  } else {
    
  }
  profession_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), profession);
  // @@protoc_insertion_point(field_set_allocated:risk.investor_info.profession)
}

// string national = 13;
inline void investor_info::clear_national() {
  national_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& investor_info::national() const {
  // @@protoc_insertion_point(field_get:risk.investor_info.national)
  return national_.GetNoArena();
}
inline void investor_info::set_national(const ::std::string& value) {
  
  national_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.investor_info.national)
}
#if LANG_CXX11
inline void investor_info::set_national(::std::string&& value) {
  
  national_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.investor_info.national)
}
#endif
inline void investor_info::set_national(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  national_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.investor_info.national)
}
inline void investor_info::set_national(const char* value, size_t size) {
  
  national_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.investor_info.national)
}
inline ::std::string* investor_info::mutable_national() {
  
  // @@protoc_insertion_point(field_mutable:risk.investor_info.national)
  return national_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* investor_info::release_national() {
  // @@protoc_insertion_point(field_release:risk.investor_info.national)
  
  return national_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void investor_info::set_allocated_national(::std::string* national) {
  if (national != NULL) {
    
  } else {
    
  }
  national_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), national);
  // @@protoc_insertion_point(field_set_allocated:risk.investor_info.national)
}

// double capital = 14;
inline void investor_info::clear_capital() {
  capital_ = 0;
}
inline double investor_info::capital() const {
  // @@protoc_insertion_point(field_get:risk.investor_info.capital)
  return capital_;
}
inline void investor_info::set_capital(double value) {
  
  capital_ = value;
  // @@protoc_insertion_point(field_set:risk.investor_info.capital)
}

// string capitalcurrency = 15;
inline void investor_info::clear_capitalcurrency() {
  capitalcurrency_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& investor_info::capitalcurrency() const {
  // @@protoc_insertion_point(field_get:risk.investor_info.capitalcurrency)
  return capitalcurrency_.GetNoArena();
}
inline void investor_info::set_capitalcurrency(const ::std::string& value) {
  
  capitalcurrency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.investor_info.capitalcurrency)
}
#if LANG_CXX11
inline void investor_info::set_capitalcurrency(::std::string&& value) {
  
  capitalcurrency_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.investor_info.capitalcurrency)
}
#endif
inline void investor_info::set_capitalcurrency(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  capitalcurrency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.investor_info.capitalcurrency)
}
inline void investor_info::set_capitalcurrency(const char* value, size_t size) {
  
  capitalcurrency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.investor_info.capitalcurrency)
}
inline ::std::string* investor_info::mutable_capitalcurrency() {
  
  // @@protoc_insertion_point(field_mutable:risk.investor_info.capitalcurrency)
  return capitalcurrency_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* investor_info::release_capitalcurrency() {
  // @@protoc_insertion_point(field_release:risk.investor_info.capitalcurrency)
  
  return capitalcurrency_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void investor_info::set_allocated_capitalcurrency(::std::string* capitalcurrency) {
  if (capitalcurrency != NULL) {
    
  } else {
    
  }
  capitalcurrency_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), capitalcurrency);
  // @@protoc_insertion_point(field_set_allocated:risk.investor_info.capitalcurrency)
}

// string telephone = 16;
inline void investor_info::clear_telephone() {
  telephone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& investor_info::telephone() const {
  // @@protoc_insertion_point(field_get:risk.investor_info.telephone)
  return telephone_.GetNoArena();
}
inline void investor_info::set_telephone(const ::std::string& value) {
  
  telephone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.investor_info.telephone)
}
#if LANG_CXX11
inline void investor_info::set_telephone(::std::string&& value) {
  
  telephone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.investor_info.telephone)
}
#endif
inline void investor_info::set_telephone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  telephone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.investor_info.telephone)
}
inline void investor_info::set_telephone(const char* value, size_t size) {
  
  telephone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.investor_info.telephone)
}
inline ::std::string* investor_info::mutable_telephone() {
  
  // @@protoc_insertion_point(field_mutable:risk.investor_info.telephone)
  return telephone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* investor_info::release_telephone() {
  // @@protoc_insertion_point(field_release:risk.investor_info.telephone)
  
  return telephone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void investor_info::set_allocated_telephone(::std::string* telephone) {
  if (telephone != NULL) {
    
  } else {
    
  }
  telephone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), telephone);
  // @@protoc_insertion_point(field_set_allocated:risk.investor_info.telephone)
}

// string address = 17;
inline void investor_info::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& investor_info::address() const {
  // @@protoc_insertion_point(field_get:risk.investor_info.address)
  return address_.GetNoArena();
}
inline void investor_info::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.investor_info.address)
}
#if LANG_CXX11
inline void investor_info::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.investor_info.address)
}
#endif
inline void investor_info::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.investor_info.address)
}
inline void investor_info::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.investor_info.address)
}
inline ::std::string* investor_info::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:risk.investor_info.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* investor_info::release_address() {
  // @@protoc_insertion_point(field_release:risk.investor_info.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void investor_info::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:risk.investor_info.address)
}

// string zipcode = 18;
inline void investor_info::clear_zipcode() {
  zipcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& investor_info::zipcode() const {
  // @@protoc_insertion_point(field_get:risk.investor_info.zipcode)
  return zipcode_.GetNoArena();
}
inline void investor_info::set_zipcode(const ::std::string& value) {
  
  zipcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.investor_info.zipcode)
}
#if LANG_CXX11
inline void investor_info::set_zipcode(::std::string&& value) {
  
  zipcode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.investor_info.zipcode)
}
#endif
inline void investor_info::set_zipcode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zipcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.investor_info.zipcode)
}
inline void investor_info::set_zipcode(const char* value, size_t size) {
  
  zipcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.investor_info.zipcode)
}
inline ::std::string* investor_info::mutable_zipcode() {
  
  // @@protoc_insertion_point(field_mutable:risk.investor_info.zipcode)
  return zipcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* investor_info::release_zipcode() {
  // @@protoc_insertion_point(field_release:risk.investor_info.zipcode)
  
  return zipcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void investor_info::set_allocated_zipcode(::std::string* zipcode) {
  if (zipcode != NULL) {
    
  } else {
    
  }
  zipcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zipcode);
  // @@protoc_insertion_point(field_set_allocated:risk.investor_info.zipcode)
}

// string email = 19;
inline void investor_info::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& investor_info::email() const {
  // @@protoc_insertion_point(field_get:risk.investor_info.email)
  return email_.GetNoArena();
}
inline void investor_info::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.investor_info.email)
}
#if LANG_CXX11
inline void investor_info::set_email(::std::string&& value) {
  
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.investor_info.email)
}
#endif
inline void investor_info::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.investor_info.email)
}
inline void investor_info::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.investor_info.email)
}
inline ::std::string* investor_info::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:risk.investor_info.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* investor_info::release_email() {
  // @@protoc_insertion_point(field_release:risk.investor_info.email)
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void investor_info::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:risk.investor_info.email)
}

// string memo = 20;
inline void investor_info::clear_memo() {
  memo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& investor_info::memo() const {
  // @@protoc_insertion_point(field_get:risk.investor_info.memo)
  return memo_.GetNoArena();
}
inline void investor_info::set_memo(const ::std::string& value) {
  
  memo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.investor_info.memo)
}
#if LANG_CXX11
inline void investor_info::set_memo(::std::string&& value) {
  
  memo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.investor_info.memo)
}
#endif
inline void investor_info::set_memo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  memo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.investor_info.memo)
}
inline void investor_info::set_memo(const char* value, size_t size) {
  
  memo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.investor_info.memo)
}
inline ::std::string* investor_info::mutable_memo() {
  
  // @@protoc_insertion_point(field_mutable:risk.investor_info.memo)
  return memo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* investor_info::release_memo() {
  // @@protoc_insertion_point(field_release:risk.investor_info.memo)
  
  return memo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void investor_info::set_allocated_memo(::std::string* memo) {
  if (memo != NULL) {
    
  } else {
    
  }
  memo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), memo);
  // @@protoc_insertion_point(field_set_allocated:risk.investor_info.memo)
}

// string openinvestorname = 21;
inline void investor_info::clear_openinvestorname() {
  openinvestorname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& investor_info::openinvestorname() const {
  // @@protoc_insertion_point(field_get:risk.investor_info.openinvestorname)
  return openinvestorname_.GetNoArena();
}
inline void investor_info::set_openinvestorname(const ::std::string& value) {
  
  openinvestorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.investor_info.openinvestorname)
}
#if LANG_CXX11
inline void investor_info::set_openinvestorname(::std::string&& value) {
  
  openinvestorname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.investor_info.openinvestorname)
}
#endif
inline void investor_info::set_openinvestorname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  openinvestorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.investor_info.openinvestorname)
}
inline void investor_info::set_openinvestorname(const char* value, size_t size) {
  
  openinvestorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.investor_info.openinvestorname)
}
inline ::std::string* investor_info::mutable_openinvestorname() {
  
  // @@protoc_insertion_point(field_mutable:risk.investor_info.openinvestorname)
  return openinvestorname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* investor_info::release_openinvestorname() {
  // @@protoc_insertion_point(field_release:risk.investor_info.openinvestorname)
  
  return openinvestorname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void investor_info::set_allocated_openinvestorname(::std::string* openinvestorname) {
  if (openinvestorname != NULL) {
    
  } else {
    
  }
  openinvestorname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), openinvestorname);
  // @@protoc_insertion_point(field_set_allocated:risk.investor_info.openinvestorname)
}

// string orderinvestorname = 22;
inline void investor_info::clear_orderinvestorname() {
  orderinvestorname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& investor_info::orderinvestorname() const {
  // @@protoc_insertion_point(field_get:risk.investor_info.orderinvestorname)
  return orderinvestorname_.GetNoArena();
}
inline void investor_info::set_orderinvestorname(const ::std::string& value) {
  
  orderinvestorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.investor_info.orderinvestorname)
}
#if LANG_CXX11
inline void investor_info::set_orderinvestorname(::std::string&& value) {
  
  orderinvestorname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.investor_info.orderinvestorname)
}
#endif
inline void investor_info::set_orderinvestorname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  orderinvestorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.investor_info.orderinvestorname)
}
inline void investor_info::set_orderinvestorname(const char* value, size_t size) {
  
  orderinvestorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.investor_info.orderinvestorname)
}
inline ::std::string* investor_info::mutable_orderinvestorname() {
  
  // @@protoc_insertion_point(field_mutable:risk.investor_info.orderinvestorname)
  return orderinvestorname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* investor_info::release_orderinvestorname() {
  // @@protoc_insertion_point(field_release:risk.investor_info.orderinvestorname)
  
  return orderinvestorname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void investor_info::set_allocated_orderinvestorname(::std::string* orderinvestorname) {
  if (orderinvestorname != NULL) {
    
  } else {
    
  }
  orderinvestorname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderinvestorname);
  // @@protoc_insertion_point(field_set_allocated:risk.investor_info.orderinvestorname)
}

// string fundinvestorname = 23;
inline void investor_info::clear_fundinvestorname() {
  fundinvestorname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& investor_info::fundinvestorname() const {
  // @@protoc_insertion_point(field_get:risk.investor_info.fundinvestorname)
  return fundinvestorname_.GetNoArena();
}
inline void investor_info::set_fundinvestorname(const ::std::string& value) {
  
  fundinvestorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.investor_info.fundinvestorname)
}
#if LANG_CXX11
inline void investor_info::set_fundinvestorname(::std::string&& value) {
  
  fundinvestorname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.investor_info.fundinvestorname)
}
#endif
inline void investor_info::set_fundinvestorname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fundinvestorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.investor_info.fundinvestorname)
}
inline void investor_info::set_fundinvestorname(const char* value, size_t size) {
  
  fundinvestorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.investor_info.fundinvestorname)
}
inline ::std::string* investor_info::mutable_fundinvestorname() {
  
  // @@protoc_insertion_point(field_mutable:risk.investor_info.fundinvestorname)
  return fundinvestorname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* investor_info::release_fundinvestorname() {
  // @@protoc_insertion_point(field_release:risk.investor_info.fundinvestorname)
  
  return fundinvestorname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void investor_info::set_allocated_fundinvestorname(::std::string* fundinvestorname) {
  if (fundinvestorname != NULL) {
    
  } else {
    
  }
  fundinvestorname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fundinvestorname);
  // @@protoc_insertion_point(field_set_allocated:risk.investor_info.fundinvestorname)
}

// string settleinvestorname = 24;
inline void investor_info::clear_settleinvestorname() {
  settleinvestorname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& investor_info::settleinvestorname() const {
  // @@protoc_insertion_point(field_get:risk.investor_info.settleinvestorname)
  return settleinvestorname_.GetNoArena();
}
inline void investor_info::set_settleinvestorname(const ::std::string& value) {
  
  settleinvestorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.investor_info.settleinvestorname)
}
#if LANG_CXX11
inline void investor_info::set_settleinvestorname(::std::string&& value) {
  
  settleinvestorname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.investor_info.settleinvestorname)
}
#endif
inline void investor_info::set_settleinvestorname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  settleinvestorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.investor_info.settleinvestorname)
}
inline void investor_info::set_settleinvestorname(const char* value, size_t size) {
  
  settleinvestorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.investor_info.settleinvestorname)
}
inline ::std::string* investor_info::mutable_settleinvestorname() {
  
  // @@protoc_insertion_point(field_mutable:risk.investor_info.settleinvestorname)
  return settleinvestorname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* investor_info::release_settleinvestorname() {
  // @@protoc_insertion_point(field_release:risk.investor_info.settleinvestorname)
  
  return settleinvestorname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void investor_info::set_allocated_settleinvestorname(::std::string* settleinvestorname) {
  if (settleinvestorname != NULL) {
    
  } else {
    
  }
  settleinvestorname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), settleinvestorname);
  // @@protoc_insertion_point(field_set_allocated:risk.investor_info.settleinvestorname)
}

// int32 isactive = 25;
inline void investor_info::clear_isactive() {
  isactive_ = 0;
}
inline ::google::protobuf::int32 investor_info::isactive() const {
  // @@protoc_insertion_point(field_get:risk.investor_info.isactive)
  return isactive_;
}
inline void investor_info::set_isactive(::google::protobuf::int32 value) {
  
  isactive_ = value;
  // @@protoc_insertion_point(field_set:risk.investor_info.isactive)
}

// string departmentid = 26;
inline void investor_info::clear_departmentid() {
  departmentid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& investor_info::departmentid() const {
  // @@protoc_insertion_point(field_get:risk.investor_info.departmentid)
  return departmentid_.GetNoArena();
}
inline void investor_info::set_departmentid(const ::std::string& value) {
  
  departmentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.investor_info.departmentid)
}
#if LANG_CXX11
inline void investor_info::set_departmentid(::std::string&& value) {
  
  departmentid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.investor_info.departmentid)
}
#endif
inline void investor_info::set_departmentid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  departmentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.investor_info.departmentid)
}
inline void investor_info::set_departmentid(const char* value, size_t size) {
  
  departmentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.investor_info.departmentid)
}
inline ::std::string* investor_info::mutable_departmentid() {
  
  // @@protoc_insertion_point(field_mutable:risk.investor_info.departmentid)
  return departmentid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* investor_info::release_departmentid() {
  // @@protoc_insertion_point(field_release:risk.investor_info.departmentid)
  
  return departmentid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void investor_info::set_allocated_departmentid(::std::string* departmentid) {
  if (departmentid != NULL) {
    
  } else {
    
  }
  departmentid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), departmentid);
  // @@protoc_insertion_point(field_set_allocated:risk.investor_info.departmentid)
}

// string investorfullname = 27;
inline void investor_info::clear_investorfullname() {
  investorfullname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& investor_info::investorfullname() const {
  // @@protoc_insertion_point(field_get:risk.investor_info.investorfullname)
  return investorfullname_.GetNoArena();
}
inline void investor_info::set_investorfullname(const ::std::string& value) {
  
  investorfullname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.investor_info.investorfullname)
}
#if LANG_CXX11
inline void investor_info::set_investorfullname(::std::string&& value) {
  
  investorfullname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.investor_info.investorfullname)
}
#endif
inline void investor_info::set_investorfullname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  investorfullname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.investor_info.investorfullname)
}
inline void investor_info::set_investorfullname(const char* value, size_t size) {
  
  investorfullname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.investor_info.investorfullname)
}
inline ::std::string* investor_info::mutable_investorfullname() {
  
  // @@protoc_insertion_point(field_mutable:risk.investor_info.investorfullname)
  return investorfullname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* investor_info::release_investorfullname() {
  // @@protoc_insertion_point(field_release:risk.investor_info.investorfullname)
  
  return investorfullname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void investor_info::set_allocated_investorfullname(::std::string* investorfullname) {
  if (investorfullname != NULL) {
    
  } else {
    
  }
  investorfullname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), investorfullname);
  // @@protoc_insertion_point(field_set_allocated:risk.investor_info.investorfullname)
}

// int32 isemail = 28;
inline void investor_info::clear_isemail() {
  isemail_ = 0;
}
inline ::google::protobuf::int32 investor_info::isemail() const {
  // @@protoc_insertion_point(field_get:risk.investor_info.isemail)
  return isemail_;
}
inline void investor_info::set_isemail(::google::protobuf::int32 value) {
  
  isemail_ = value;
  // @@protoc_insertion_point(field_set:risk.investor_info.isemail)
}

// int32 issms = 29;
inline void investor_info::clear_issms() {
  issms_ = 0;
}
inline ::google::protobuf::int32 investor_info::issms() const {
  // @@protoc_insertion_point(field_get:risk.investor_info.issms)
  return issms_;
}
inline void investor_info::set_issms(::google::protobuf::int32 value) {
  
  issms_ = value;
  // @@protoc_insertion_point(field_set:risk.investor_info.issms)
}

// int32 isusingotp = 30;
inline void investor_info::clear_isusingotp() {
  isusingotp_ = 0;
}
inline ::google::protobuf::int32 investor_info::isusingotp() const {
  // @@protoc_insertion_point(field_get:risk.investor_info.isusingotp)
  return isusingotp_;
}
inline void investor_info::set_isusingotp(::google::protobuf::int32 value) {
  
  isusingotp_ = value;
  // @@protoc_insertion_point(field_set:risk.investor_info.isusingotp)
}

// string clientregion = 31;
inline void investor_info::clear_clientregion() {
  clientregion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& investor_info::clientregion() const {
  // @@protoc_insertion_point(field_get:risk.investor_info.clientregion)
  return clientregion_.GetNoArena();
}
inline void investor_info::set_clientregion(const ::std::string& value) {
  
  clientregion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.investor_info.clientregion)
}
#if LANG_CXX11
inline void investor_info::set_clientregion(::std::string&& value) {
  
  clientregion_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.investor_info.clientregion)
}
#endif
inline void investor_info::set_clientregion(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  clientregion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.investor_info.clientregion)
}
inline void investor_info::set_clientregion(const char* value, size_t size) {
  
  clientregion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.investor_info.clientregion)
}
inline ::std::string* investor_info::mutable_clientregion() {
  
  // @@protoc_insertion_point(field_mutable:risk.investor_info.clientregion)
  return clientregion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* investor_info::release_clientregion() {
  // @@protoc_insertion_point(field_release:risk.investor_info.clientregion)
  
  return clientregion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void investor_info::set_allocated_clientregion(::std::string* clientregion) {
  if (clientregion != NULL) {
    
  } else {
    
  }
  clientregion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientregion);
  // @@protoc_insertion_point(field_set_allocated:risk.investor_info.clientregion)
}

// -------------------------------------------------------------------

// rsp_investor_info

// .risk.rsp_head_info header = 1;
inline bool rsp_investor_info::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void rsp_investor_info::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::risk::rsp_head_info& rsp_investor_info::header() const {
  const ::risk::rsp_head_info* p = header_;
  // @@protoc_insertion_point(field_get:risk.rsp_investor_info.header)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::rsp_head_info*>(
      &::risk::_rsp_head_info_default_instance_);
}
inline ::risk::rsp_head_info* rsp_investor_info::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::risk::rsp_head_info;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_investor_info.header)
  return header_;
}
inline ::risk::rsp_head_info* rsp_investor_info::release_header() {
  // @@protoc_insertion_point(field_release:risk.rsp_investor_info.header)
  
  ::risk::rsp_head_info* temp = header_;
  header_ = NULL;
  return temp;
}
inline void rsp_investor_info::set_allocated_header(::risk::rsp_head_info* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_investor_info.header)
}

// repeated .risk.investor_info infos = 2;
inline int rsp_investor_info::infos_size() const {
  return infos_.size();
}
inline void rsp_investor_info::clear_infos() {
  infos_.Clear();
}
inline const ::risk::investor_info& rsp_investor_info::infos(int index) const {
  // @@protoc_insertion_point(field_get:risk.rsp_investor_info.infos)
  return infos_.Get(index);
}
inline ::risk::investor_info* rsp_investor_info::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:risk.rsp_investor_info.infos)
  return infos_.Mutable(index);
}
inline ::risk::investor_info* rsp_investor_info::add_infos() {
  // @@protoc_insertion_point(field_add:risk.rsp_investor_info.infos)
  return infos_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::risk::investor_info >*
rsp_investor_info::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:risk.rsp_investor_info.infos)
  return &infos_;
}
inline const ::google::protobuf::RepeatedPtrField< ::risk::investor_info >&
rsp_investor_info::infos() const {
  // @@protoc_insertion_point(field_list:risk.rsp_investor_info.infos)
  return infos_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace risk

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_riskapi_5fdata_5fprotocal_2eproto__INCLUDED
