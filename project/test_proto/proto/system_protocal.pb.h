// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: system_protocal.proto

#ifndef PROTOBUF_system_5fprotocal_2eproto__INCLUDED
#define PROTOBUF_system_5fprotocal_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace esunnysystem {
class rtn_status;
class rtn_statusDefaultTypeInternal;
extern rtn_statusDefaultTypeInternal _rtn_status_default_instance_;
}  // namespace esunnysystem

namespace esunnysystem {

namespace protobuf_system_5fprotocal_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_system_5fprotocal_2eproto

// ===================================================================

class rtn_status : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:esunnysystem.rtn_status) */ {
 public:
  rtn_status();
  virtual ~rtn_status();

  rtn_status(const rtn_status& from);

  inline rtn_status& operator=(const rtn_status& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rtn_status(rtn_status&& from) noexcept
    : rtn_status() {
    *this = ::std::move(from);
  }

  inline rtn_status& operator=(rtn_status&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rtn_status& default_instance();

  static inline const rtn_status* internal_default_instance() {
    return reinterpret_cast<const rtn_status*>(
               &_rtn_status_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(rtn_status* other);
  friend void swap(rtn_status& a, rtn_status& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rtn_status* New() const PROTOBUF_FINAL { return New(NULL); }

  rtn_status* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rtn_status& from);
  void MergeFrom(const rtn_status& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rtn_status* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string systemname = 3;
  void clear_systemname();
  static const int kSystemnameFieldNumber = 3;
  const ::std::string& systemname() const;
  void set_systemname(const ::std::string& value);
  #if LANG_CXX11
  void set_systemname(::std::string&& value);
  #endif
  void set_systemname(const char* value);
  void set_systemname(const char* value, size_t size);
  ::std::string* mutable_systemname();
  ::std::string* release_systemname();
  void set_allocated_systemname(::std::string* systemname);

  // string content = 5;
  void clear_content();
  static const int kContentFieldNumber = 5;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // string localIP = 6;
  void clear_localip();
  static const int kLocalIPFieldNumber = 6;
  const ::std::string& localip() const;
  void set_localip(const ::std::string& value);
  #if LANG_CXX11
  void set_localip(::std::string&& value);
  #endif
  void set_localip(const char* value);
  void set_localip(const char* value, size_t size);
  ::std::string* mutable_localip();
  ::std::string* release_localip();
  void set_allocated_localip(::std::string* localip);

  // sint32 systemid = 1;
  void clear_systemid();
  static const int kSystemidFieldNumber = 1;
  ::google::protobuf::int32 systemid() const;
  void set_systemid(::google::protobuf::int32 value);

  // sint32 systemsubid = 2;
  void clear_systemsubid();
  static const int kSystemsubidFieldNumber = 2;
  ::google::protobuf::int32 systemsubid() const;
  void set_systemsubid(::google::protobuf::int32 value);

  // sint32 id = 4;
  void clear_id();
  static const int kIdFieldNumber = 4;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:esunnysystem.rtn_status)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr systemname_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::internal::ArenaStringPtr localip_;
  ::google::protobuf::int32 systemid_;
  ::google::protobuf::int32 systemsubid_;
  ::google::protobuf::int32 id_;
  mutable int _cached_size_;
  friend struct protobuf_system_5fprotocal_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// rtn_status

// sint32 systemid = 1;
inline void rtn_status::clear_systemid() {
  systemid_ = 0;
}
inline ::google::protobuf::int32 rtn_status::systemid() const {
  // @@protoc_insertion_point(field_get:esunnysystem.rtn_status.systemid)
  return systemid_;
}
inline void rtn_status::set_systemid(::google::protobuf::int32 value) {
  
  systemid_ = value;
  // @@protoc_insertion_point(field_set:esunnysystem.rtn_status.systemid)
}

// sint32 systemsubid = 2;
inline void rtn_status::clear_systemsubid() {
  systemsubid_ = 0;
}
inline ::google::protobuf::int32 rtn_status::systemsubid() const {
  // @@protoc_insertion_point(field_get:esunnysystem.rtn_status.systemsubid)
  return systemsubid_;
}
inline void rtn_status::set_systemsubid(::google::protobuf::int32 value) {
  
  systemsubid_ = value;
  // @@protoc_insertion_point(field_set:esunnysystem.rtn_status.systemsubid)
}

// string systemname = 3;
inline void rtn_status::clear_systemname() {
  systemname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& rtn_status::systemname() const {
  // @@protoc_insertion_point(field_get:esunnysystem.rtn_status.systemname)
  return systemname_.GetNoArena();
}
inline void rtn_status::set_systemname(const ::std::string& value) {
  
  systemname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:esunnysystem.rtn_status.systemname)
}
#if LANG_CXX11
inline void rtn_status::set_systemname(::std::string&& value) {
  
  systemname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:esunnysystem.rtn_status.systemname)
}
#endif
inline void rtn_status::set_systemname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  systemname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:esunnysystem.rtn_status.systemname)
}
inline void rtn_status::set_systemname(const char* value, size_t size) {
  
  systemname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:esunnysystem.rtn_status.systemname)
}
inline ::std::string* rtn_status::mutable_systemname() {
  
  // @@protoc_insertion_point(field_mutable:esunnysystem.rtn_status.systemname)
  return systemname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* rtn_status::release_systemname() {
  // @@protoc_insertion_point(field_release:esunnysystem.rtn_status.systemname)
  
  return systemname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void rtn_status::set_allocated_systemname(::std::string* systemname) {
  if (systemname != NULL) {
    
  } else {
    
  }
  systemname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), systemname);
  // @@protoc_insertion_point(field_set_allocated:esunnysystem.rtn_status.systemname)
}

// sint32 id = 4;
inline void rtn_status::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 rtn_status::id() const {
  // @@protoc_insertion_point(field_get:esunnysystem.rtn_status.id)
  return id_;
}
inline void rtn_status::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:esunnysystem.rtn_status.id)
}

// string content = 5;
inline void rtn_status::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& rtn_status::content() const {
  // @@protoc_insertion_point(field_get:esunnysystem.rtn_status.content)
  return content_.GetNoArena();
}
inline void rtn_status::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:esunnysystem.rtn_status.content)
}
#if LANG_CXX11
inline void rtn_status::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:esunnysystem.rtn_status.content)
}
#endif
inline void rtn_status::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:esunnysystem.rtn_status.content)
}
inline void rtn_status::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:esunnysystem.rtn_status.content)
}
inline ::std::string* rtn_status::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:esunnysystem.rtn_status.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* rtn_status::release_content() {
  // @@protoc_insertion_point(field_release:esunnysystem.rtn_status.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void rtn_status::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:esunnysystem.rtn_status.content)
}

// string localIP = 6;
inline void rtn_status::clear_localip() {
  localip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& rtn_status::localip() const {
  // @@protoc_insertion_point(field_get:esunnysystem.rtn_status.localIP)
  return localip_.GetNoArena();
}
inline void rtn_status::set_localip(const ::std::string& value) {
  
  localip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:esunnysystem.rtn_status.localIP)
}
#if LANG_CXX11
inline void rtn_status::set_localip(::std::string&& value) {
  
  localip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:esunnysystem.rtn_status.localIP)
}
#endif
inline void rtn_status::set_localip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  localip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:esunnysystem.rtn_status.localIP)
}
inline void rtn_status::set_localip(const char* value, size_t size) {
  
  localip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:esunnysystem.rtn_status.localIP)
}
inline ::std::string* rtn_status::mutable_localip() {
  
  // @@protoc_insertion_point(field_mutable:esunnysystem.rtn_status.localIP)
  return localip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* rtn_status::release_localip() {
  // @@protoc_insertion_point(field_release:esunnysystem.rtn_status.localIP)
  
  return localip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void rtn_status::set_allocated_localip(::std::string* localip) {
  if (localip != NULL) {
    
  } else {
    
  }
  localip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), localip);
  // @@protoc_insertion_point(field_set_allocated:esunnysystem.rtn_status.localIP)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace esunnysystem

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_system_5fprotocal_2eproto__INCLUDED
