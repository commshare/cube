// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trade_protocal.proto

#ifndef PROTOBUF_trade_5fprotocal_2eproto__INCLUDED
#define PROTOBUF_trade_5fprotocal_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace risk {
class investorID_list;
class investorID_listDefaultTypeInternal;
extern investorID_listDefaultTypeInternal _investorID_list_default_instance_;
class req_trade_login;
class req_trade_loginDefaultTypeInternal;
extern req_trade_loginDefaultTypeInternal _req_trade_login_default_instance_;
class rsp_trade_login;
class rsp_trade_loginDefaultTypeInternal;
extern rsp_trade_loginDefaultTypeInternal _rsp_trade_login_default_instance_;
class trade_gateway_order_field;
class trade_gateway_order_fieldDefaultTypeInternal;
extern trade_gateway_order_fieldDefaultTypeInternal _trade_gateway_order_field_default_instance_;
class trade_gateway_position_field;
class trade_gateway_position_fieldDefaultTypeInternal;
extern trade_gateway_position_fieldDefaultTypeInternal _trade_gateway_position_field_default_instance_;
class trade_gateway_sync_account_field;
class trade_gateway_sync_account_fieldDefaultTypeInternal;
extern trade_gateway_sync_account_fieldDefaultTypeInternal _trade_gateway_sync_account_field_default_instance_;
class trade_gateway_trade_field;
class trade_gateway_trade_fieldDefaultTypeInternal;
extern trade_gateway_trade_fieldDefaultTypeInternal _trade_gateway_trade_field_default_instance_;
}  // namespace risk

namespace risk {

namespace protobuf_trade_5fprotocal_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_trade_5fprotocal_2eproto

// ===================================================================

class trade_gateway_trade_field : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.trade_gateway_trade_field) */ {
 public:
  trade_gateway_trade_field();
  virtual ~trade_gateway_trade_field();

  trade_gateway_trade_field(const trade_gateway_trade_field& from);

  inline trade_gateway_trade_field& operator=(const trade_gateway_trade_field& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  trade_gateway_trade_field(trade_gateway_trade_field&& from) noexcept
    : trade_gateway_trade_field() {
    *this = ::std::move(from);
  }

  inline trade_gateway_trade_field& operator=(trade_gateway_trade_field&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const trade_gateway_trade_field& default_instance();

  static inline const trade_gateway_trade_field* internal_default_instance() {
    return reinterpret_cast<const trade_gateway_trade_field*>(
               &_trade_gateway_trade_field_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(trade_gateway_trade_field* other);
  friend void swap(trade_gateway_trade_field& a, trade_gateway_trade_field& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline trade_gateway_trade_field* New() const PROTOBUF_FINAL { return New(NULL); }

  trade_gateway_trade_field* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const trade_gateway_trade_field& from);
  void MergeFrom(const trade_gateway_trade_field& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(trade_gateway_trade_field* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string BrokerID = 3;
  void clear_brokerid();
  static const int kBrokerIDFieldNumber = 3;
  const ::std::string& brokerid() const;
  void set_brokerid(const ::std::string& value);
  #if LANG_CXX11
  void set_brokerid(::std::string&& value);
  #endif
  void set_brokerid(const char* value);
  void set_brokerid(const char* value, size_t size);
  ::std::string* mutable_brokerid();
  ::std::string* release_brokerid();
  void set_allocated_brokerid(::std::string* brokerid);

  // string InvestorID = 4;
  void clear_investorid();
  static const int kInvestorIDFieldNumber = 4;
  const ::std::string& investorid() const;
  void set_investorid(const ::std::string& value);
  #if LANG_CXX11
  void set_investorid(::std::string&& value);
  #endif
  void set_investorid(const char* value);
  void set_investorid(const char* value, size_t size);
  ::std::string* mutable_investorid();
  ::std::string* release_investorid();
  void set_allocated_investorid(::std::string* investorid);

  // string InstrumentID = 5;
  void clear_instrumentid();
  static const int kInstrumentIDFieldNumber = 5;
  const ::std::string& instrumentid() const;
  void set_instrumentid(const ::std::string& value);
  #if LANG_CXX11
  void set_instrumentid(::std::string&& value);
  #endif
  void set_instrumentid(const char* value);
  void set_instrumentid(const char* value, size_t size);
  ::std::string* mutable_instrumentid();
  ::std::string* release_instrumentid();
  void set_allocated_instrumentid(::std::string* instrumentid);

  // string OrderRef = 6;
  void clear_orderref();
  static const int kOrderRefFieldNumber = 6;
  const ::std::string& orderref() const;
  void set_orderref(const ::std::string& value);
  #if LANG_CXX11
  void set_orderref(::std::string&& value);
  #endif
  void set_orderref(const char* value);
  void set_orderref(const char* value, size_t size);
  ::std::string* mutable_orderref();
  ::std::string* release_orderref();
  void set_allocated_orderref(::std::string* orderref);

  // string ExchangeID = 7;
  void clear_exchangeid();
  static const int kExchangeIDFieldNumber = 7;
  const ::std::string& exchangeid() const;
  void set_exchangeid(const ::std::string& value);
  #if LANG_CXX11
  void set_exchangeid(::std::string&& value);
  #endif
  void set_exchangeid(const char* value);
  void set_exchangeid(const char* value, size_t size);
  ::std::string* mutable_exchangeid();
  ::std::string* release_exchangeid();
  void set_allocated_exchangeid(::std::string* exchangeid);

  // string TradeID = 8;
  void clear_tradeid();
  static const int kTradeIDFieldNumber = 8;
  const ::std::string& tradeid() const;
  void set_tradeid(const ::std::string& value);
  #if LANG_CXX11
  void set_tradeid(::std::string&& value);
  #endif
  void set_tradeid(const char* value);
  void set_tradeid(const char* value, size_t size);
  ::std::string* mutable_tradeid();
  ::std::string* release_tradeid();
  void set_allocated_tradeid(::std::string* tradeid);

  // string OrderSysID = 10;
  void clear_ordersysid();
  static const int kOrderSysIDFieldNumber = 10;
  const ::std::string& ordersysid() const;
  void set_ordersysid(const ::std::string& value);
  #if LANG_CXX11
  void set_ordersysid(::std::string&& value);
  #endif
  void set_ordersysid(const char* value);
  void set_ordersysid(const char* value, size_t size);
  ::std::string* mutable_ordersysid();
  ::std::string* release_ordersysid();
  void set_allocated_ordersysid(::std::string* ordersysid);

  // string TradeDate = 15;
  void clear_tradedate();
  static const int kTradeDateFieldNumber = 15;
  const ::std::string& tradedate() const;
  void set_tradedate(const ::std::string& value);
  #if LANG_CXX11
  void set_tradedate(::std::string&& value);
  #endif
  void set_tradedate(const char* value);
  void set_tradedate(const char* value, size_t size);
  ::std::string* mutable_tradedate();
  ::std::string* release_tradedate();
  void set_allocated_tradedate(::std::string* tradedate);

  // string TradeTime = 16;
  void clear_tradetime();
  static const int kTradeTimeFieldNumber = 16;
  const ::std::string& tradetime() const;
  void set_tradetime(const ::std::string& value);
  #if LANG_CXX11
  void set_tradetime(::std::string&& value);
  #endif
  void set_tradetime(const char* value);
  void set_tradetime(const char* value, size_t size);
  ::std::string* mutable_tradetime();
  ::std::string* release_tradetime();
  void set_allocated_tradetime(::std::string* tradetime);

  // string TradeType = 17;
  void clear_tradetype();
  static const int kTradeTypeFieldNumber = 17;
  const ::std::string& tradetype() const;
  void set_tradetype(const ::std::string& value);
  #if LANG_CXX11
  void set_tradetype(::std::string&& value);
  #endif
  void set_tradetype(const char* value);
  void set_tradetype(const char* value, size_t size);
  ::std::string* mutable_tradetype();
  ::std::string* release_tradetype();
  void set_allocated_tradetype(::std::string* tradetype);

  // string OrderLocalID = 18;
  void clear_orderlocalid();
  static const int kOrderLocalIDFieldNumber = 18;
  const ::std::string& orderlocalid() const;
  void set_orderlocalid(const ::std::string& value);
  #if LANG_CXX11
  void set_orderlocalid(::std::string&& value);
  #endif
  void set_orderlocalid(const char* value);
  void set_orderlocalid(const char* value, size_t size);
  ::std::string* mutable_orderlocalid();
  ::std::string* release_orderlocalid();
  void set_allocated_orderlocalid(::std::string* orderlocalid);

  // string TradingDay = 20;
  void clear_tradingday();
  static const int kTradingDayFieldNumber = 20;
  const ::std::string& tradingday() const;
  void set_tradingday(const ::std::string& value);
  #if LANG_CXX11
  void set_tradingday(::std::string&& value);
  #endif
  void set_tradingday(const char* value);
  void set_tradingday(const char* value, size_t size);
  ::std::string* mutable_tradingday();
  ::std::string* release_tradingday();
  void set_allocated_tradingday(::std::string* tradingday);

  // int32 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // int32 UniqSequenceNo = 2;
  void clear_uniqsequenceno();
  static const int kUniqSequenceNoFieldNumber = 2;
  ::google::protobuf::int32 uniqsequenceno() const;
  void set_uniqsequenceno(::google::protobuf::int32 value);

  // int32 Direction = 9;
  void clear_direction();
  static const int kDirectionFieldNumber = 9;
  ::google::protobuf::int32 direction() const;
  void set_direction(::google::protobuf::int32 value);

  // int32 OffsetFlag = 11;
  void clear_offsetflag();
  static const int kOffsetFlagFieldNumber = 11;
  ::google::protobuf::int32 offsetflag() const;
  void set_offsetflag(::google::protobuf::int32 value);

  // double Price = 13;
  void clear_price();
  static const int kPriceFieldNumber = 13;
  double price() const;
  void set_price(double value);

  // int32 HedgeFlag = 12;
  void clear_hedgeflag();
  static const int kHedgeFlagFieldNumber = 12;
  ::google::protobuf::int32 hedgeflag() const;
  void set_hedgeflag(::google::protobuf::int32 value);

  // int32 Volume = 14;
  void clear_volume();
  static const int kVolumeFieldNumber = 14;
  ::google::protobuf::int32 volume() const;
  void set_volume(::google::protobuf::int32 value);

  // int32 SequenceNo = 19;
  void clear_sequenceno();
  static const int kSequenceNoFieldNumber = 19;
  ::google::protobuf::int32 sequenceno() const;
  void set_sequenceno(::google::protobuf::int32 value);

  // int32 BrokerOrderSeq = 21;
  void clear_brokerorderseq();
  static const int kBrokerOrderSeqFieldNumber = 21;
  ::google::protobuf::int32 brokerorderseq() const;
  void set_brokerorderseq(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:risk.trade_gateway_trade_field)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr brokerid_;
  ::google::protobuf::internal::ArenaStringPtr investorid_;
  ::google::protobuf::internal::ArenaStringPtr instrumentid_;
  ::google::protobuf::internal::ArenaStringPtr orderref_;
  ::google::protobuf::internal::ArenaStringPtr exchangeid_;
  ::google::protobuf::internal::ArenaStringPtr tradeid_;
  ::google::protobuf::internal::ArenaStringPtr ordersysid_;
  ::google::protobuf::internal::ArenaStringPtr tradedate_;
  ::google::protobuf::internal::ArenaStringPtr tradetime_;
  ::google::protobuf::internal::ArenaStringPtr tradetype_;
  ::google::protobuf::internal::ArenaStringPtr orderlocalid_;
  ::google::protobuf::internal::ArenaStringPtr tradingday_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 uniqsequenceno_;
  ::google::protobuf::int32 direction_;
  ::google::protobuf::int32 offsetflag_;
  double price_;
  ::google::protobuf::int32 hedgeflag_;
  ::google::protobuf::int32 volume_;
  ::google::protobuf::int32 sequenceno_;
  ::google::protobuf::int32 brokerorderseq_;
  mutable int _cached_size_;
  friend struct protobuf_trade_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class trade_gateway_order_field : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.trade_gateway_order_field) */ {
 public:
  trade_gateway_order_field();
  virtual ~trade_gateway_order_field();

  trade_gateway_order_field(const trade_gateway_order_field& from);

  inline trade_gateway_order_field& operator=(const trade_gateway_order_field& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  trade_gateway_order_field(trade_gateway_order_field&& from) noexcept
    : trade_gateway_order_field() {
    *this = ::std::move(from);
  }

  inline trade_gateway_order_field& operator=(trade_gateway_order_field&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const trade_gateway_order_field& default_instance();

  static inline const trade_gateway_order_field* internal_default_instance() {
    return reinterpret_cast<const trade_gateway_order_field*>(
               &_trade_gateway_order_field_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(trade_gateway_order_field* other);
  friend void swap(trade_gateway_order_field& a, trade_gateway_order_field& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline trade_gateway_order_field* New() const PROTOBUF_FINAL { return New(NULL); }

  trade_gateway_order_field* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const trade_gateway_order_field& from);
  void MergeFrom(const trade_gateway_order_field& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(trade_gateway_order_field* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string BrokerID = 3;
  void clear_brokerid();
  static const int kBrokerIDFieldNumber = 3;
  const ::std::string& brokerid() const;
  void set_brokerid(const ::std::string& value);
  #if LANG_CXX11
  void set_brokerid(::std::string&& value);
  #endif
  void set_brokerid(const char* value);
  void set_brokerid(const char* value, size_t size);
  ::std::string* mutable_brokerid();
  ::std::string* release_brokerid();
  void set_allocated_brokerid(::std::string* brokerid);

  // string InvestorID = 4;
  void clear_investorid();
  static const int kInvestorIDFieldNumber = 4;
  const ::std::string& investorid() const;
  void set_investorid(const ::std::string& value);
  #if LANG_CXX11
  void set_investorid(::std::string&& value);
  #endif
  void set_investorid(const char* value);
  void set_investorid(const char* value, size_t size);
  ::std::string* mutable_investorid();
  ::std::string* release_investorid();
  void set_allocated_investorid(::std::string* investorid);

  // string InstrumentID = 5;
  void clear_instrumentid();
  static const int kInstrumentIDFieldNumber = 5;
  const ::std::string& instrumentid() const;
  void set_instrumentid(const ::std::string& value);
  #if LANG_CXX11
  void set_instrumentid(::std::string&& value);
  #endif
  void set_instrumentid(const char* value);
  void set_instrumentid(const char* value, size_t size);
  ::std::string* mutable_instrumentid();
  ::std::string* release_instrumentid();
  void set_allocated_instrumentid(::std::string* instrumentid);

  // string OrderRef = 6;
  void clear_orderref();
  static const int kOrderRefFieldNumber = 6;
  const ::std::string& orderref() const;
  void set_orderref(const ::std::string& value);
  #if LANG_CXX11
  void set_orderref(::std::string&& value);
  #endif
  void set_orderref(const char* value);
  void set_orderref(const char* value, size_t size);
  ::std::string* mutable_orderref();
  ::std::string* release_orderref();
  void set_allocated_orderref(::std::string* orderref);

  // string OrderPriceType = 7;
  void clear_orderpricetype();
  static const int kOrderPriceTypeFieldNumber = 7;
  const ::std::string& orderpricetype() const;
  void set_orderpricetype(const ::std::string& value);
  #if LANG_CXX11
  void set_orderpricetype(::std::string&& value);
  #endif
  void set_orderpricetype(const char* value);
  void set_orderpricetype(const char* value, size_t size);
  ::std::string* mutable_orderpricetype();
  ::std::string* release_orderpricetype();
  void set_allocated_orderpricetype(::std::string* orderpricetype);

  // string TimeCondition = 13;
  void clear_timecondition();
  static const int kTimeConditionFieldNumber = 13;
  const ::std::string& timecondition() const;
  void set_timecondition(const ::std::string& value);
  #if LANG_CXX11
  void set_timecondition(::std::string&& value);
  #endif
  void set_timecondition(const char* value);
  void set_timecondition(const char* value, size_t size);
  ::std::string* mutable_timecondition();
  ::std::string* release_timecondition();
  void set_allocated_timecondition(::std::string* timecondition);

  // string GTDDate = 14;
  void clear_gtddate();
  static const int kGTDDateFieldNumber = 14;
  const ::std::string& gtddate() const;
  void set_gtddate(const ::std::string& value);
  #if LANG_CXX11
  void set_gtddate(::std::string&& value);
  #endif
  void set_gtddate(const char* value);
  void set_gtddate(const char* value, size_t size);
  ::std::string* mutable_gtddate();
  ::std::string* release_gtddate();
  void set_allocated_gtddate(::std::string* gtddate);

  // string VolumeCondition = 15;
  void clear_volumecondition();
  static const int kVolumeConditionFieldNumber = 15;
  const ::std::string& volumecondition() const;
  void set_volumecondition(const ::std::string& value);
  #if LANG_CXX11
  void set_volumecondition(::std::string&& value);
  #endif
  void set_volumecondition(const char* value);
  void set_volumecondition(const char* value, size_t size);
  ::std::string* mutable_volumecondition();
  ::std::string* release_volumecondition();
  void set_allocated_volumecondition(::std::string* volumecondition);

  // string ContingentCondition = 17;
  void clear_contingentcondition();
  static const int kContingentConditionFieldNumber = 17;
  const ::std::string& contingentcondition() const;
  void set_contingentcondition(const ::std::string& value);
  #if LANG_CXX11
  void set_contingentcondition(::std::string&& value);
  #endif
  void set_contingentcondition(const char* value);
  void set_contingentcondition(const char* value, size_t size);
  ::std::string* mutable_contingentcondition();
  ::std::string* release_contingentcondition();
  void set_allocated_contingentcondition(::std::string* contingentcondition);

  // string ForceCloseReason = 19;
  void clear_forceclosereason();
  static const int kForceCloseReasonFieldNumber = 19;
  const ::std::string& forceclosereason() const;
  void set_forceclosereason(const ::std::string& value);
  #if LANG_CXX11
  void set_forceclosereason(::std::string&& value);
  #endif
  void set_forceclosereason(const char* value);
  void set_forceclosereason(const char* value, size_t size);
  ::std::string* mutable_forceclosereason();
  ::std::string* release_forceclosereason();
  void set_allocated_forceclosereason(::std::string* forceclosereason);

  // string OrderLocalID = 21;
  void clear_orderlocalid();
  static const int kOrderLocalIDFieldNumber = 21;
  const ::std::string& orderlocalid() const;
  void set_orderlocalid(const ::std::string& value);
  #if LANG_CXX11
  void set_orderlocalid(::std::string&& value);
  #endif
  void set_orderlocalid(const char* value);
  void set_orderlocalid(const char* value, size_t size);
  ::std::string* mutable_orderlocalid();
  ::std::string* release_orderlocalid();
  void set_allocated_orderlocalid(::std::string* orderlocalid);

  // string ExchangeID = 22;
  void clear_exchangeid();
  static const int kExchangeIDFieldNumber = 22;
  const ::std::string& exchangeid() const;
  void set_exchangeid(const ::std::string& value);
  #if LANG_CXX11
  void set_exchangeid(::std::string&& value);
  #endif
  void set_exchangeid(const char* value);
  void set_exchangeid(const char* value, size_t size);
  ::std::string* mutable_exchangeid();
  ::std::string* release_exchangeid();
  void set_allocated_exchangeid(::std::string* exchangeid);

  // string OrderSubmitStatus = 23;
  void clear_ordersubmitstatus();
  static const int kOrderSubmitStatusFieldNumber = 23;
  const ::std::string& ordersubmitstatus() const;
  void set_ordersubmitstatus(const ::std::string& value);
  #if LANG_CXX11
  void set_ordersubmitstatus(::std::string&& value);
  #endif
  void set_ordersubmitstatus(const char* value);
  void set_ordersubmitstatus(const char* value, size_t size);
  ::std::string* mutable_ordersubmitstatus();
  ::std::string* release_ordersubmitstatus();
  void set_allocated_ordersubmitstatus(::std::string* ordersubmitstatus);

  // string TradingDay = 24;
  void clear_tradingday();
  static const int kTradingDayFieldNumber = 24;
  const ::std::string& tradingday() const;
  void set_tradingday(const ::std::string& value);
  #if LANG_CXX11
  void set_tradingday(::std::string&& value);
  #endif
  void set_tradingday(const char* value);
  void set_tradingday(const char* value, size_t size);
  ::std::string* mutable_tradingday();
  ::std::string* release_tradingday();
  void set_allocated_tradingday(::std::string* tradingday);

  // string OrderSysID = 25;
  void clear_ordersysid();
  static const int kOrderSysIDFieldNumber = 25;
  const ::std::string& ordersysid() const;
  void set_ordersysid(const ::std::string& value);
  #if LANG_CXX11
  void set_ordersysid(::std::string&& value);
  #endif
  void set_ordersysid(const char* value);
  void set_ordersysid(const char* value, size_t size);
  ::std::string* mutable_ordersysid();
  ::std::string* release_ordersysid();
  void set_allocated_ordersysid(::std::string* ordersysid);

  // string OrderSource = 26;
  void clear_ordersource();
  static const int kOrderSourceFieldNumber = 26;
  const ::std::string& ordersource() const;
  void set_ordersource(const ::std::string& value);
  #if LANG_CXX11
  void set_ordersource(::std::string&& value);
  #endif
  void set_ordersource(const char* value);
  void set_ordersource(const char* value, size_t size);
  ::std::string* mutable_ordersource();
  ::std::string* release_ordersource();
  void set_allocated_ordersource(::std::string* ordersource);

  // string OrderStatus = 27;
  void clear_orderstatus();
  static const int kOrderStatusFieldNumber = 27;
  const ::std::string& orderstatus() const;
  void set_orderstatus(const ::std::string& value);
  #if LANG_CXX11
  void set_orderstatus(::std::string&& value);
  #endif
  void set_orderstatus(const char* value);
  void set_orderstatus(const char* value, size_t size);
  ::std::string* mutable_orderstatus();
  ::std::string* release_orderstatus();
  void set_allocated_orderstatus(::std::string* orderstatus);

  // string OrderType = 28;
  void clear_ordertype();
  static const int kOrderTypeFieldNumber = 28;
  const ::std::string& ordertype() const;
  void set_ordertype(const ::std::string& value);
  #if LANG_CXX11
  void set_ordertype(::std::string&& value);
  #endif
  void set_ordertype(const char* value);
  void set_ordertype(const char* value, size_t size);
  ::std::string* mutable_ordertype();
  ::std::string* release_ordertype();
  void set_allocated_ordertype(::std::string* ordertype);

  // string InsertDate = 31;
  void clear_insertdate();
  static const int kInsertDateFieldNumber = 31;
  const ::std::string& insertdate() const;
  void set_insertdate(const ::std::string& value);
  #if LANG_CXX11
  void set_insertdate(::std::string&& value);
  #endif
  void set_insertdate(const char* value);
  void set_insertdate(const char* value, size_t size);
  ::std::string* mutable_insertdate();
  ::std::string* release_insertdate();
  void set_allocated_insertdate(::std::string* insertdate);

  // string InsertTime = 32;
  void clear_inserttime();
  static const int kInsertTimeFieldNumber = 32;
  const ::std::string& inserttime() const;
  void set_inserttime(const ::std::string& value);
  #if LANG_CXX11
  void set_inserttime(::std::string&& value);
  #endif
  void set_inserttime(const char* value);
  void set_inserttime(const char* value, size_t size);
  ::std::string* mutable_inserttime();
  ::std::string* release_inserttime();
  void set_allocated_inserttime(::std::string* inserttime);

  // string ActiveTime = 33;
  void clear_activetime();
  static const int kActiveTimeFieldNumber = 33;
  const ::std::string& activetime() const;
  void set_activetime(const ::std::string& value);
  #if LANG_CXX11
  void set_activetime(::std::string&& value);
  #endif
  void set_activetime(const char* value);
  void set_activetime(const char* value, size_t size);
  ::std::string* mutable_activetime();
  ::std::string* release_activetime();
  void set_allocated_activetime(::std::string* activetime);

  // string SuspendTime = 34;
  void clear_suspendtime();
  static const int kSuspendTimeFieldNumber = 34;
  const ::std::string& suspendtime() const;
  void set_suspendtime(const ::std::string& value);
  #if LANG_CXX11
  void set_suspendtime(::std::string&& value);
  #endif
  void set_suspendtime(const char* value);
  void set_suspendtime(const char* value, size_t size);
  ::std::string* mutable_suspendtime();
  ::std::string* release_suspendtime();
  void set_allocated_suspendtime(::std::string* suspendtime);

  // string UpdateTime = 35;
  void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 35;
  const ::std::string& updatetime() const;
  void set_updatetime(const ::std::string& value);
  #if LANG_CXX11
  void set_updatetime(::std::string&& value);
  #endif
  void set_updatetime(const char* value);
  void set_updatetime(const char* value, size_t size);
  ::std::string* mutable_updatetime();
  ::std::string* release_updatetime();
  void set_allocated_updatetime(::std::string* updatetime);

  // string CancelTime = 36;
  void clear_canceltime();
  static const int kCancelTimeFieldNumber = 36;
  const ::std::string& canceltime() const;
  void set_canceltime(const ::std::string& value);
  #if LANG_CXX11
  void set_canceltime(::std::string&& value);
  #endif
  void set_canceltime(const char* value);
  void set_canceltime(const char* value, size_t size);
  ::std::string* mutable_canceltime();
  ::std::string* release_canceltime();
  void set_allocated_canceltime(::std::string* canceltime);

  // string UserProductInfo = 40;
  void clear_userproductinfo();
  static const int kUserProductInfoFieldNumber = 40;
  const ::std::string& userproductinfo() const;
  void set_userproductinfo(const ::std::string& value);
  #if LANG_CXX11
  void set_userproductinfo(::std::string&& value);
  #endif
  void set_userproductinfo(const char* value);
  void set_userproductinfo(const char* value, size_t size);
  ::std::string* mutable_userproductinfo();
  ::std::string* release_userproductinfo();
  void set_allocated_userproductinfo(::std::string* userproductinfo);

  // bytes StatusMsg = 41;
  void clear_statusmsg();
  static const int kStatusMsgFieldNumber = 41;
  const ::std::string& statusmsg() const;
  void set_statusmsg(const ::std::string& value);
  #if LANG_CXX11
  void set_statusmsg(::std::string&& value);
  #endif
  void set_statusmsg(const char* value);
  void set_statusmsg(const void* value, size_t size);
  ::std::string* mutable_statusmsg();
  ::std::string* release_statusmsg();
  void set_allocated_statusmsg(::std::string* statusmsg);

  // bytes BranchID = 46;
  void clear_branchid();
  static const int kBranchIDFieldNumber = 46;
  const ::std::string& branchid() const;
  void set_branchid(const ::std::string& value);
  #if LANG_CXX11
  void set_branchid(::std::string&& value);
  #endif
  void set_branchid(const char* value);
  void set_branchid(const void* value, size_t size);
  ::std::string* mutable_branchid();
  ::std::string* release_branchid();
  void set_allocated_branchid(::std::string* branchid);

  // string CurrencyID = 47;
  void clear_currencyid();
  static const int kCurrencyIDFieldNumber = 47;
  const ::std::string& currencyid() const;
  void set_currencyid(const ::std::string& value);
  #if LANG_CXX11
  void set_currencyid(::std::string&& value);
  #endif
  void set_currencyid(const char* value);
  void set_currencyid(const char* value, size_t size);
  ::std::string* mutable_currencyid();
  ::std::string* release_currencyid();
  void set_allocated_currencyid(::std::string* currencyid);

  // bytes IPAddress = 48;
  void clear_ipaddress();
  static const int kIPAddressFieldNumber = 48;
  const ::std::string& ipaddress() const;
  void set_ipaddress(const ::std::string& value);
  #if LANG_CXX11
  void set_ipaddress(::std::string&& value);
  #endif
  void set_ipaddress(const char* value);
  void set_ipaddress(const void* value, size_t size);
  ::std::string* mutable_ipaddress();
  ::std::string* release_ipaddress();
  void set_allocated_ipaddress(::std::string* ipaddress);

  // bytes MacAddress = 49;
  void clear_macaddress();
  static const int kMacAddressFieldNumber = 49;
  const ::std::string& macaddress() const;
  void set_macaddress(const ::std::string& value);
  #if LANG_CXX11
  void set_macaddress(::std::string&& value);
  #endif
  void set_macaddress(const char* value);
  void set_macaddress(const void* value, size_t size);
  ::std::string* mutable_macaddress();
  ::std::string* release_macaddress();
  void set_allocated_macaddress(::std::string* macaddress);

  // int32 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // int32 UniqSequenceNo = 2;
  void clear_uniqsequenceno();
  static const int kUniqSequenceNoFieldNumber = 2;
  ::google::protobuf::int32 uniqsequenceno() const;
  void set_uniqsequenceno(::google::protobuf::int32 value);

  // int32 Direction = 8;
  void clear_direction();
  static const int kDirectionFieldNumber = 8;
  ::google::protobuf::int32 direction() const;
  void set_direction(::google::protobuf::int32 value);

  // int32 CombOffsetFlag = 9;
  void clear_comboffsetflag();
  static const int kCombOffsetFlagFieldNumber = 9;
  ::google::protobuf::int32 comboffsetflag() const;
  void set_comboffsetflag(::google::protobuf::int32 value);

  // double LimitPrice = 11;
  void clear_limitprice();
  static const int kLimitPriceFieldNumber = 11;
  double limitprice() const;
  void set_limitprice(double value);

  // int32 CombHedgeFlag = 10;
  void clear_combhedgeflag();
  static const int kCombHedgeFlagFieldNumber = 10;
  ::google::protobuf::int32 combhedgeflag() const;
  void set_combhedgeflag(::google::protobuf::int32 value);

  // int32 VolumeTotalOriginal = 12;
  void clear_volumetotaloriginal();
  static const int kVolumeTotalOriginalFieldNumber = 12;
  ::google::protobuf::int32 volumetotaloriginal() const;
  void set_volumetotaloriginal(::google::protobuf::int32 value);

  // double StopPrice = 18;
  void clear_stopprice();
  static const int kStopPriceFieldNumber = 18;
  double stopprice() const;
  void set_stopprice(double value);

  // int32 MinVolume = 16;
  void clear_minvolume();
  static const int kMinVolumeFieldNumber = 16;
  ::google::protobuf::int32 minvolume() const;
  void set_minvolume(::google::protobuf::int32 value);

  // int32 RequestID = 20;
  void clear_requestid();
  static const int kRequestIDFieldNumber = 20;
  ::google::protobuf::int32 requestid() const;
  void set_requestid(::google::protobuf::int32 value);

  // int32 VolumeTraded = 29;
  void clear_volumetraded();
  static const int kVolumeTradedFieldNumber = 29;
  ::google::protobuf::int32 volumetraded() const;
  void set_volumetraded(::google::protobuf::int32 value);

  // int32 VolumeTotal = 30;
  void clear_volumetotal();
  static const int kVolumeTotalFieldNumber = 30;
  ::google::protobuf::int32 volumetotal() const;
  void set_volumetotal(::google::protobuf::int32 value);

  // int32 SequenceNo = 37;
  void clear_sequenceno();
  static const int kSequenceNoFieldNumber = 37;
  ::google::protobuf::int32 sequenceno() const;
  void set_sequenceno(::google::protobuf::int32 value);

  // int32 FrontID = 38;
  void clear_frontid();
  static const int kFrontIDFieldNumber = 38;
  ::google::protobuf::int32 frontid() const;
  void set_frontid(::google::protobuf::int32 value);

  // int32 SessionID = 39;
  void clear_sessionid();
  static const int kSessionIDFieldNumber = 39;
  ::google::protobuf::int32 sessionid() const;
  void set_sessionid(::google::protobuf::int32 value);

  // int32 UserForceClose = 42;
  void clear_userforceclose();
  static const int kUserForceCloseFieldNumber = 42;
  ::google::protobuf::int32 userforceclose() const;
  void set_userforceclose(::google::protobuf::int32 value);

  // int32 BrokerOrderSeq = 43;
  void clear_brokerorderseq();
  static const int kBrokerOrderSeqFieldNumber = 43;
  ::google::protobuf::int32 brokerorderseq() const;
  void set_brokerorderseq(::google::protobuf::int32 value);

  // int32 ZCETotalTradedVolume = 44;
  void clear_zcetotaltradedvolume();
  static const int kZCETotalTradedVolumeFieldNumber = 44;
  ::google::protobuf::int32 zcetotaltradedvolume() const;
  void set_zcetotaltradedvolume(::google::protobuf::int32 value);

  // int32 IsSwapOrder = 45;
  void clear_isswaporder();
  static const int kIsSwapOrderFieldNumber = 45;
  ::google::protobuf::int32 isswaporder() const;
  void set_isswaporder(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:risk.trade_gateway_order_field)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr brokerid_;
  ::google::protobuf::internal::ArenaStringPtr investorid_;
  ::google::protobuf::internal::ArenaStringPtr instrumentid_;
  ::google::protobuf::internal::ArenaStringPtr orderref_;
  ::google::protobuf::internal::ArenaStringPtr orderpricetype_;
  ::google::protobuf::internal::ArenaStringPtr timecondition_;
  ::google::protobuf::internal::ArenaStringPtr gtddate_;
  ::google::protobuf::internal::ArenaStringPtr volumecondition_;
  ::google::protobuf::internal::ArenaStringPtr contingentcondition_;
  ::google::protobuf::internal::ArenaStringPtr forceclosereason_;
  ::google::protobuf::internal::ArenaStringPtr orderlocalid_;
  ::google::protobuf::internal::ArenaStringPtr exchangeid_;
  ::google::protobuf::internal::ArenaStringPtr ordersubmitstatus_;
  ::google::protobuf::internal::ArenaStringPtr tradingday_;
  ::google::protobuf::internal::ArenaStringPtr ordersysid_;
  ::google::protobuf::internal::ArenaStringPtr ordersource_;
  ::google::protobuf::internal::ArenaStringPtr orderstatus_;
  ::google::protobuf::internal::ArenaStringPtr ordertype_;
  ::google::protobuf::internal::ArenaStringPtr insertdate_;
  ::google::protobuf::internal::ArenaStringPtr inserttime_;
  ::google::protobuf::internal::ArenaStringPtr activetime_;
  ::google::protobuf::internal::ArenaStringPtr suspendtime_;
  ::google::protobuf::internal::ArenaStringPtr updatetime_;
  ::google::protobuf::internal::ArenaStringPtr canceltime_;
  ::google::protobuf::internal::ArenaStringPtr userproductinfo_;
  ::google::protobuf::internal::ArenaStringPtr statusmsg_;
  ::google::protobuf::internal::ArenaStringPtr branchid_;
  ::google::protobuf::internal::ArenaStringPtr currencyid_;
  ::google::protobuf::internal::ArenaStringPtr ipaddress_;
  ::google::protobuf::internal::ArenaStringPtr macaddress_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 uniqsequenceno_;
  ::google::protobuf::int32 direction_;
  ::google::protobuf::int32 comboffsetflag_;
  double limitprice_;
  ::google::protobuf::int32 combhedgeflag_;
  ::google::protobuf::int32 volumetotaloriginal_;
  double stopprice_;
  ::google::protobuf::int32 minvolume_;
  ::google::protobuf::int32 requestid_;
  ::google::protobuf::int32 volumetraded_;
  ::google::protobuf::int32 volumetotal_;
  ::google::protobuf::int32 sequenceno_;
  ::google::protobuf::int32 frontid_;
  ::google::protobuf::int32 sessionid_;
  ::google::protobuf::int32 userforceclose_;
  ::google::protobuf::int32 brokerorderseq_;
  ::google::protobuf::int32 zcetotaltradedvolume_;
  ::google::protobuf::int32 isswaporder_;
  mutable int _cached_size_;
  friend struct protobuf_trade_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class trade_gateway_sync_account_field : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.trade_gateway_sync_account_field) */ {
 public:
  trade_gateway_sync_account_field();
  virtual ~trade_gateway_sync_account_field();

  trade_gateway_sync_account_field(const trade_gateway_sync_account_field& from);

  inline trade_gateway_sync_account_field& operator=(const trade_gateway_sync_account_field& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  trade_gateway_sync_account_field(trade_gateway_sync_account_field&& from) noexcept
    : trade_gateway_sync_account_field() {
    *this = ::std::move(from);
  }

  inline trade_gateway_sync_account_field& operator=(trade_gateway_sync_account_field&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const trade_gateway_sync_account_field& default_instance();

  static inline const trade_gateway_sync_account_field* internal_default_instance() {
    return reinterpret_cast<const trade_gateway_sync_account_field*>(
               &_trade_gateway_sync_account_field_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(trade_gateway_sync_account_field* other);
  friend void swap(trade_gateway_sync_account_field& a, trade_gateway_sync_account_field& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline trade_gateway_sync_account_field* New() const PROTOBUF_FINAL { return New(NULL); }

  trade_gateway_sync_account_field* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const trade_gateway_sync_account_field& from);
  void MergeFrom(const trade_gateway_sync_account_field& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(trade_gateway_sync_account_field* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string BrokerID = 1;
  void clear_brokerid();
  static const int kBrokerIDFieldNumber = 1;
  const ::std::string& brokerid() const;
  void set_brokerid(const ::std::string& value);
  #if LANG_CXX11
  void set_brokerid(::std::string&& value);
  #endif
  void set_brokerid(const char* value);
  void set_brokerid(const char* value, size_t size);
  ::std::string* mutable_brokerid();
  ::std::string* release_brokerid();
  void set_allocated_brokerid(::std::string* brokerid);

  // string InvestorID = 2;
  void clear_investorid();
  static const int kInvestorIDFieldNumber = 2;
  const ::std::string& investorid() const;
  void set_investorid(const ::std::string& value);
  #if LANG_CXX11
  void set_investorid(::std::string&& value);
  #endif
  void set_investorid(const char* value);
  void set_investorid(const char* value, size_t size);
  ::std::string* mutable_investorid();
  ::std::string* release_investorid();
  void set_allocated_investorid(::std::string* investorid);

  // string CurrencyID = 15;
  void clear_currencyid();
  static const int kCurrencyIDFieldNumber = 15;
  const ::std::string& currencyid() const;
  void set_currencyid(const ::std::string& value);
  #if LANG_CXX11
  void set_currencyid(::std::string&& value);
  #endif
  void set_currencyid(const char* value);
  void set_currencyid(const char* value, size_t size);
  ::std::string* mutable_currencyid();
  ::std::string* release_currencyid();
  void set_allocated_currencyid(::std::string* currencyid);

  // double Withdraw = 3;
  void clear_withdraw();
  static const int kWithdrawFieldNumber = 3;
  double withdraw() const;
  void set_withdraw(double value);

  // double CurrMargin = 4;
  void clear_currmargin();
  static const int kCurrMarginFieldNumber = 4;
  double currmargin() const;
  void set_currmargin(double value);

  // double Commission = 5;
  void clear_commission();
  static const int kCommissionFieldNumber = 5;
  double commission() const;
  void set_commission(double value);

  // double CloseProfit = 6;
  void clear_closeprofit();
  static const int kCloseProfitFieldNumber = 6;
  double closeprofit() const;
  void set_closeprofit(double value);

  // double PositionProfit = 7;
  void clear_positionprofit();
  static const int kPositionProfitFieldNumber = 7;
  double positionprofit() const;
  void set_positionprofit(double value);

  // double Balance = 8;
  void clear_balance();
  static const int kBalanceFieldNumber = 8;
  double balance() const;
  void set_balance(double value);

  // double Available = 9;
  void clear_available();
  static const int kAvailableFieldNumber = 9;
  double available() const;
  void set_available(double value);

  // double Mortgage = 10;
  void clear_mortgage();
  static const int kMortgageFieldNumber = 10;
  double mortgage() const;
  void set_mortgage(double value);

  // double ExchangeMargin = 11;
  void clear_exchangemargin();
  static const int kExchangeMarginFieldNumber = 11;
  double exchangemargin() const;
  void set_exchangemargin(double value);

  // double WithdrawQuota = 12;
  void clear_withdrawquota();
  static const int kWithdrawQuotaFieldNumber = 12;
  double withdrawquota() const;
  void set_withdrawquota(double value);

  // double FrozenMargin = 13;
  void clear_frozenmargin();
  static const int kFrozenMarginFieldNumber = 13;
  double frozenmargin() const;
  void set_frozenmargin(double value);

  // double FrozenCommission = 14;
  void clear_frozencommission();
  static const int kFrozenCommissionFieldNumber = 14;
  double frozencommission() const;
  void set_frozencommission(double value);

  // double FrozenMarginOnMortgage = 16;
  void clear_frozenmarginonmortgage();
  static const int kFrozenMarginOnMortgageFieldNumber = 16;
  double frozenmarginonmortgage() const;
  void set_frozenmarginonmortgage(double value);

  // double MarginOnMortgage = 17;
  void clear_marginonmortgage();
  static const int kMarginOnMortgageFieldNumber = 17;
  double marginonmortgage() const;
  void set_marginonmortgage(double value);

  // double ExchMarginOnMortgage = 18;
  void clear_exchmarginonmortgage();
  static const int kExchMarginOnMortgageFieldNumber = 18;
  double exchmarginonmortgage() const;
  void set_exchmarginonmortgage(double value);

  // double FrozenCommissionOnMortgage = 19;
  void clear_frozencommissiononmortgage();
  static const int kFrozenCommissionOnMortgageFieldNumber = 19;
  double frozencommissiononmortgage() const;
  void set_frozencommissiononmortgage(double value);

  // double PositionProfitOnMortgage = 20;
  void clear_positionprofitonmortgage();
  static const int kPositionProfitOnMortgageFieldNumber = 20;
  double positionprofitonmortgage() const;
  void set_positionprofitonmortgage(double value);

  // double CommissionOnMortgage = 21;
  void clear_commissiononmortgage();
  static const int kCommissionOnMortgageFieldNumber = 21;
  double commissiononmortgage() const;
  void set_commissiononmortgage(double value);

  // double CloseProfitOnMortgage = 22;
  void clear_closeprofitonmortgage();
  static const int kCloseProfitOnMortgageFieldNumber = 22;
  double closeprofitonmortgage() const;
  void set_closeprofitonmortgage(double value);

  // double OptionCloseProfit = 23;
  void clear_optioncloseprofit();
  static const int kOptionCloseProfitFieldNumber = 23;
  double optioncloseprofit() const;
  void set_optioncloseprofit(double value);

  // double OptionValue = 24;
  void clear_optionvalue();
  static const int kOptionValueFieldNumber = 24;
  double optionvalue() const;
  void set_optionvalue(double value);

  // double FrozenCash = 25;
  void clear_frozencash();
  static const int kFrozenCashFieldNumber = 25;
  double frozencash() const;
  void set_frozencash(double value);

  // double CashIn = 26;
  void clear_cashin();
  static const int kCashInFieldNumber = 26;
  double cashin() const;
  void set_cashin(double value);

  // double Credit = 27;
  void clear_credit();
  static const int kCreditFieldNumber = 27;
  double credit() const;
  void set_credit(double value);

  // @@protoc_insertion_point(class_scope:risk.trade_gateway_sync_account_field)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr brokerid_;
  ::google::protobuf::internal::ArenaStringPtr investorid_;
  ::google::protobuf::internal::ArenaStringPtr currencyid_;
  double withdraw_;
  double currmargin_;
  double commission_;
  double closeprofit_;
  double positionprofit_;
  double balance_;
  double available_;
  double mortgage_;
  double exchangemargin_;
  double withdrawquota_;
  double frozenmargin_;
  double frozencommission_;
  double frozenmarginonmortgage_;
  double marginonmortgage_;
  double exchmarginonmortgage_;
  double frozencommissiononmortgage_;
  double positionprofitonmortgage_;
  double commissiononmortgage_;
  double closeprofitonmortgage_;
  double optioncloseprofit_;
  double optionvalue_;
  double frozencash_;
  double cashin_;
  double credit_;
  mutable int _cached_size_;
  friend struct protobuf_trade_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class trade_gateway_position_field : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.trade_gateway_position_field) */ {
 public:
  trade_gateway_position_field();
  virtual ~trade_gateway_position_field();

  trade_gateway_position_field(const trade_gateway_position_field& from);

  inline trade_gateway_position_field& operator=(const trade_gateway_position_field& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  trade_gateway_position_field(trade_gateway_position_field&& from) noexcept
    : trade_gateway_position_field() {
    *this = ::std::move(from);
  }

  inline trade_gateway_position_field& operator=(trade_gateway_position_field&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const trade_gateway_position_field& default_instance();

  static inline const trade_gateway_position_field* internal_default_instance() {
    return reinterpret_cast<const trade_gateway_position_field*>(
               &_trade_gateway_position_field_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(trade_gateway_position_field* other);
  friend void swap(trade_gateway_position_field& a, trade_gateway_position_field& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline trade_gateway_position_field* New() const PROTOBUF_FINAL { return New(NULL); }

  trade_gateway_position_field* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const trade_gateway_position_field& from);
  void MergeFrom(const trade_gateway_position_field& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(trade_gateway_position_field* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string InstrumentID = 2;
  void clear_instrumentid();
  static const int kInstrumentIDFieldNumber = 2;
  const ::std::string& instrumentid() const;
  void set_instrumentid(const ::std::string& value);
  #if LANG_CXX11
  void set_instrumentid(::std::string&& value);
  #endif
  void set_instrumentid(const char* value);
  void set_instrumentid(const char* value, size_t size);
  ::std::string* mutable_instrumentid();
  ::std::string* release_instrumentid();
  void set_allocated_instrumentid(::std::string* instrumentid);

  // string BrokerID = 3;
  void clear_brokerid();
  static const int kBrokerIDFieldNumber = 3;
  const ::std::string& brokerid() const;
  void set_brokerid(const ::std::string& value);
  #if LANG_CXX11
  void set_brokerid(::std::string&& value);
  #endif
  void set_brokerid(const char* value);
  void set_brokerid(const char* value, size_t size);
  ::std::string* mutable_brokerid();
  ::std::string* release_brokerid();
  void set_allocated_brokerid(::std::string* brokerid);

  // string InvestorID = 4;
  void clear_investorid();
  static const int kInvestorIDFieldNumber = 4;
  const ::std::string& investorid() const;
  void set_investorid(const ::std::string& value);
  #if LANG_CXX11
  void set_investorid(::std::string&& value);
  #endif
  void set_investorid(const char* value);
  void set_investorid(const char* value, size_t size);
  ::std::string* mutable_investorid();
  ::std::string* release_investorid();
  void set_allocated_investorid(::std::string* investorid);

  // string PositionDate = 7;
  void clear_positiondate();
  static const int kPositionDateFieldNumber = 7;
  const ::std::string& positiondate() const;
  void set_positiondate(const ::std::string& value);
  #if LANG_CXX11
  void set_positiondate(::std::string&& value);
  #endif
  void set_positiondate(const char* value);
  void set_positiondate(const char* value, size_t size);
  ::std::string* mutable_positiondate();
  ::std::string* release_positiondate();
  void set_allocated_positiondate(::std::string* positiondate);

  // string TradingDay = 30;
  void clear_tradingday();
  static const int kTradingDayFieldNumber = 30;
  const ::std::string& tradingday() const;
  void set_tradingday(const ::std::string& value);
  #if LANG_CXX11
  void set_tradingday(::std::string&& value);
  #endif
  void set_tradingday(const char* value);
  void set_tradingday(const char* value, size_t size);
  ::std::string* mutable_tradingday();
  ::std::string* release_tradingday();
  void set_allocated_tradingday(::std::string* tradingday);

  // int32 UniqSequenceNo = 1;
  void clear_uniqsequenceno();
  static const int kUniqSequenceNoFieldNumber = 1;
  ::google::protobuf::int32 uniqsequenceno() const;
  void set_uniqsequenceno(::google::protobuf::int32 value);

  // int32 PosiDirection = 5;
  void clear_posidirection();
  static const int kPosiDirectionFieldNumber = 5;
  ::google::protobuf::int32 posidirection() const;
  void set_posidirection(::google::protobuf::int32 value);

  // int32 HedgeFlag = 6;
  void clear_hedgeflag();
  static const int kHedgeFlagFieldNumber = 6;
  ::google::protobuf::int32 hedgeflag() const;
  void set_hedgeflag(::google::protobuf::int32 value);

  // int32 YdPosition = 8;
  void clear_ydposition();
  static const int kYdPositionFieldNumber = 8;
  ::google::protobuf::int32 ydposition() const;
  void set_ydposition(::google::protobuf::int32 value);

  // int32 Position = 9;
  void clear_position();
  static const int kPositionFieldNumber = 9;
  ::google::protobuf::int32 position() const;
  void set_position(::google::protobuf::int32 value);

  // int32 LongFrozen = 10;
  void clear_longfrozen();
  static const int kLongFrozenFieldNumber = 10;
  ::google::protobuf::int32 longfrozen() const;
  void set_longfrozen(::google::protobuf::int32 value);

  // double LongFrozenAmount = 12;
  void clear_longfrozenamount();
  static const int kLongFrozenAmountFieldNumber = 12;
  double longfrozenamount() const;
  void set_longfrozenamount(double value);

  // int32 ShortFrozen = 11;
  void clear_shortfrozen();
  static const int kShortFrozenFieldNumber = 11;
  ::google::protobuf::int32 shortfrozen() const;
  void set_shortfrozen(::google::protobuf::int32 value);

  // int32 OpenVolume = 14;
  void clear_openvolume();
  static const int kOpenVolumeFieldNumber = 14;
  ::google::protobuf::int32 openvolume() const;
  void set_openvolume(::google::protobuf::int32 value);

  // double ShortFrozenAmount = 13;
  void clear_shortfrozenamount();
  static const int kShortFrozenAmountFieldNumber = 13;
  double shortfrozenamount() const;
  void set_shortfrozenamount(double value);

  // double OpenAmount = 16;
  void clear_openamount();
  static const int kOpenAmountFieldNumber = 16;
  double openamount() const;
  void set_openamount(double value);

  // double CloseAmount = 17;
  void clear_closeamount();
  static const int kCloseAmountFieldNumber = 17;
  double closeamount() const;
  void set_closeamount(double value);

  // double PositionCost = 18;
  void clear_positioncost();
  static const int kPositionCostFieldNumber = 18;
  double positioncost() const;
  void set_positioncost(double value);

  // double PreMargin = 19;
  void clear_premargin();
  static const int kPreMarginFieldNumber = 19;
  double premargin() const;
  void set_premargin(double value);

  // double UseMargin = 20;
  void clear_usemargin();
  static const int kUseMarginFieldNumber = 20;
  double usemargin() const;
  void set_usemargin(double value);

  // double FrozenMargin = 21;
  void clear_frozenmargin();
  static const int kFrozenMarginFieldNumber = 21;
  double frozenmargin() const;
  void set_frozenmargin(double value);

  // double FrozenCash = 22;
  void clear_frozencash();
  static const int kFrozenCashFieldNumber = 22;
  double frozencash() const;
  void set_frozencash(double value);

  // double FrozenCommission = 23;
  void clear_frozencommission();
  static const int kFrozenCommissionFieldNumber = 23;
  double frozencommission() const;
  void set_frozencommission(double value);

  // int32 CloseVolume = 15;
  void clear_closevolume();
  static const int kCloseVolumeFieldNumber = 15;
  ::google::protobuf::int32 closevolume() const;
  void set_closevolume(::google::protobuf::int32 value);

  // int32 SettlementID = 31;
  void clear_settlementid();
  static const int kSettlementIDFieldNumber = 31;
  ::google::protobuf::int32 settlementid() const;
  void set_settlementid(::google::protobuf::int32 value);

  // double CashIn = 24;
  void clear_cashin();
  static const int kCashInFieldNumber = 24;
  double cashin() const;
  void set_cashin(double value);

  // double Commission = 25;
  void clear_commission();
  static const int kCommissionFieldNumber = 25;
  double commission() const;
  void set_commission(double value);

  // double CloseProfit = 26;
  void clear_closeprofit();
  static const int kCloseProfitFieldNumber = 26;
  double closeprofit() const;
  void set_closeprofit(double value);

  // double PositionProfit = 27;
  void clear_positionprofit();
  static const int kPositionProfitFieldNumber = 27;
  double positionprofit() const;
  void set_positionprofit(double value);

  // double PreSettlementPrice = 28;
  void clear_presettlementprice();
  static const int kPreSettlementPriceFieldNumber = 28;
  double presettlementprice() const;
  void set_presettlementprice(double value);

  // double SettlementPrice = 29;
  void clear_settlementprice();
  static const int kSettlementPriceFieldNumber = 29;
  double settlementprice() const;
  void set_settlementprice(double value);

  // double OpenCost = 32;
  void clear_opencost();
  static const int kOpenCostFieldNumber = 32;
  double opencost() const;
  void set_opencost(double value);

  // double ExchangeMargin = 33;
  void clear_exchangemargin();
  static const int kExchangeMarginFieldNumber = 33;
  double exchangemargin() const;
  void set_exchangemargin(double value);

  // int32 CombPosition = 34;
  void clear_combposition();
  static const int kCombPositionFieldNumber = 34;
  ::google::protobuf::int32 combposition() const;
  void set_combposition(::google::protobuf::int32 value);

  // int32 CombLongFrozen = 35;
  void clear_comblongfrozen();
  static const int kCombLongFrozenFieldNumber = 35;
  ::google::protobuf::int32 comblongfrozen() const;
  void set_comblongfrozen(::google::protobuf::int32 value);

  // double CloseProfitByDate = 37;
  void clear_closeprofitbydate();
  static const int kCloseProfitByDateFieldNumber = 37;
  double closeprofitbydate() const;
  void set_closeprofitbydate(double value);

  // int32 CombShortFrozen = 36;
  void clear_combshortfrozen();
  static const int kCombShortFrozenFieldNumber = 36;
  ::google::protobuf::int32 combshortfrozen() const;
  void set_combshortfrozen(::google::protobuf::int32 value);

  // int32 TodayPosition = 39;
  void clear_todayposition();
  static const int kTodayPositionFieldNumber = 39;
  ::google::protobuf::int32 todayposition() const;
  void set_todayposition(::google::protobuf::int32 value);

  // double CloseProfitByTrade = 38;
  void clear_closeprofitbytrade();
  static const int kCloseProfitByTradeFieldNumber = 38;
  double closeprofitbytrade() const;
  void set_closeprofitbytrade(double value);

  // double MarginRateByMoney = 40;
  void clear_marginratebymoney();
  static const int kMarginRateByMoneyFieldNumber = 40;
  double marginratebymoney() const;
  void set_marginratebymoney(double value);

  // double MarginRateByVolume = 41;
  void clear_marginratebyvolume();
  static const int kMarginRateByVolumeFieldNumber = 41;
  double marginratebyvolume() const;
  void set_marginratebyvolume(double value);

  // double StrikeFrozenAmount = 43;
  void clear_strikefrozenamount();
  static const int kStrikeFrozenAmountFieldNumber = 43;
  double strikefrozenamount() const;
  void set_strikefrozenamount(double value);

  // int32 StrikeFrozen = 42;
  void clear_strikefrozen();
  static const int kStrikeFrozenFieldNumber = 42;
  ::google::protobuf::int32 strikefrozen() const;
  void set_strikefrozen(::google::protobuf::int32 value);

  // int32 AbandonFrozen = 44;
  void clear_abandonfrozen();
  static const int kAbandonFrozenFieldNumber = 44;
  ::google::protobuf::int32 abandonfrozen() const;
  void set_abandonfrozen(::google::protobuf::int32 value);

  // double OptionValue = 45;
  void clear_optionvalue();
  static const int kOptionValueFieldNumber = 45;
  double optionvalue() const;
  void set_optionvalue(double value);

  // @@protoc_insertion_point(class_scope:risk.trade_gateway_position_field)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr instrumentid_;
  ::google::protobuf::internal::ArenaStringPtr brokerid_;
  ::google::protobuf::internal::ArenaStringPtr investorid_;
  ::google::protobuf::internal::ArenaStringPtr positiondate_;
  ::google::protobuf::internal::ArenaStringPtr tradingday_;
  ::google::protobuf::int32 uniqsequenceno_;
  ::google::protobuf::int32 posidirection_;
  ::google::protobuf::int32 hedgeflag_;
  ::google::protobuf::int32 ydposition_;
  ::google::protobuf::int32 position_;
  ::google::protobuf::int32 longfrozen_;
  double longfrozenamount_;
  ::google::protobuf::int32 shortfrozen_;
  ::google::protobuf::int32 openvolume_;
  double shortfrozenamount_;
  double openamount_;
  double closeamount_;
  double positioncost_;
  double premargin_;
  double usemargin_;
  double frozenmargin_;
  double frozencash_;
  double frozencommission_;
  ::google::protobuf::int32 closevolume_;
  ::google::protobuf::int32 settlementid_;
  double cashin_;
  double commission_;
  double closeprofit_;
  double positionprofit_;
  double presettlementprice_;
  double settlementprice_;
  double opencost_;
  double exchangemargin_;
  ::google::protobuf::int32 combposition_;
  ::google::protobuf::int32 comblongfrozen_;
  double closeprofitbydate_;
  ::google::protobuf::int32 combshortfrozen_;
  ::google::protobuf::int32 todayposition_;
  double closeprofitbytrade_;
  double marginratebymoney_;
  double marginratebyvolume_;
  double strikefrozenamount_;
  ::google::protobuf::int32 strikefrozen_;
  ::google::protobuf::int32 abandonfrozen_;
  double optionvalue_;
  mutable int _cached_size_;
  friend struct protobuf_trade_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class investorID_list : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.investorID_list) */ {
 public:
  investorID_list();
  virtual ~investorID_list();

  investorID_list(const investorID_list& from);

  inline investorID_list& operator=(const investorID_list& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  investorID_list(investorID_list&& from) noexcept
    : investorID_list() {
    *this = ::std::move(from);
  }

  inline investorID_list& operator=(investorID_list&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const investorID_list& default_instance();

  static inline const investorID_list* internal_default_instance() {
    return reinterpret_cast<const investorID_list*>(
               &_investorID_list_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(investorID_list* other);
  friend void swap(investorID_list& a, investorID_list& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline investorID_list* New() const PROTOBUF_FINAL { return New(NULL); }

  investorID_list* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const investorID_list& from);
  void MergeFrom(const investorID_list& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(investorID_list* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string InvestorIDList = 2;
  int investoridlist_size() const;
  void clear_investoridlist();
  static const int kInvestorIDListFieldNumber = 2;
  const ::std::string& investoridlist(int index) const;
  ::std::string* mutable_investoridlist(int index);
  void set_investoridlist(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_investoridlist(int index, ::std::string&& value);
  #endif
  void set_investoridlist(int index, const char* value);
  void set_investoridlist(int index, const char* value, size_t size);
  ::std::string* add_investoridlist();
  void add_investoridlist(const ::std::string& value);
  #if LANG_CXX11
  void add_investoridlist(::std::string&& value);
  #endif
  void add_investoridlist(const char* value);
  void add_investoridlist(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& investoridlist() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_investoridlist();

  // string RiskUser = 1;
  void clear_riskuser();
  static const int kRiskUserFieldNumber = 1;
  const ::std::string& riskuser() const;
  void set_riskuser(const ::std::string& value);
  #if LANG_CXX11
  void set_riskuser(::std::string&& value);
  #endif
  void set_riskuser(const char* value);
  void set_riskuser(const char* value, size_t size);
  ::std::string* mutable_riskuser();
  ::std::string* release_riskuser();
  void set_allocated_riskuser(::std::string* riskuser);

  // bool IsLast = 3;
  void clear_islast();
  static const int kIsLastFieldNumber = 3;
  bool islast() const;
  void set_islast(bool value);

  // @@protoc_insertion_point(class_scope:risk.investorID_list)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> investoridlist_;
  ::google::protobuf::internal::ArenaStringPtr riskuser_;
  bool islast_;
  mutable int _cached_size_;
  friend struct protobuf_trade_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class req_trade_login : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.req_trade_login) */ {
 public:
  req_trade_login();
  virtual ~req_trade_login();

  req_trade_login(const req_trade_login& from);

  inline req_trade_login& operator=(const req_trade_login& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  req_trade_login(req_trade_login&& from) noexcept
    : req_trade_login() {
    *this = ::std::move(from);
  }

  inline req_trade_login& operator=(req_trade_login&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const req_trade_login& default_instance();

  static inline const req_trade_login* internal_default_instance() {
    return reinterpret_cast<const req_trade_login*>(
               &_req_trade_login_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(req_trade_login* other);
  friend void swap(req_trade_login& a, req_trade_login& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline req_trade_login* New() const PROTOBUF_FINAL { return New(NULL); }

  req_trade_login* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const req_trade_login& from);
  void MergeFrom(const req_trade_login& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(req_trade_login* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string riskerid = 1;
  void clear_riskerid();
  static const int kRiskeridFieldNumber = 1;
  const ::std::string& riskerid() const;
  void set_riskerid(const ::std::string& value);
  #if LANG_CXX11
  void set_riskerid(::std::string&& value);
  #endif
  void set_riskerid(const char* value);
  void set_riskerid(const char* value, size_t size);
  ::std::string* mutable_riskerid();
  ::std::string* release_riskerid();
  void set_allocated_riskerid(::std::string* riskerid);

  // string password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:risk.req_trade_login)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr riskerid_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  mutable int _cached_size_;
  friend struct protobuf_trade_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rsp_trade_login : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.rsp_trade_login) */ {
 public:
  rsp_trade_login();
  virtual ~rsp_trade_login();

  rsp_trade_login(const rsp_trade_login& from);

  inline rsp_trade_login& operator=(const rsp_trade_login& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rsp_trade_login(rsp_trade_login&& from) noexcept
    : rsp_trade_login() {
    *this = ::std::move(from);
  }

  inline rsp_trade_login& operator=(rsp_trade_login&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rsp_trade_login& default_instance();

  static inline const rsp_trade_login* internal_default_instance() {
    return reinterpret_cast<const rsp_trade_login*>(
               &_rsp_trade_login_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(rsp_trade_login* other);
  friend void swap(rsp_trade_login& a, rsp_trade_login& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rsp_trade_login* New() const PROTOBUF_FINAL { return New(NULL); }

  rsp_trade_login* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rsp_trade_login& from);
  void MergeFrom(const rsp_trade_login& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rsp_trade_login* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 max_id = 1;
  void clear_max_id();
  static const int kMaxIdFieldNumber = 1;
  ::google::protobuf::int32 max_id() const;
  void set_max_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:risk.rsp_trade_login)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 max_id_;
  mutable int _cached_size_;
  friend struct protobuf_trade_5fprotocal_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// trade_gateway_trade_field

// int32 Id = 1;
inline void trade_gateway_trade_field::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 trade_gateway_trade_field::id() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_trade_field.Id)
  return id_;
}
inline void trade_gateway_trade_field::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_trade_field.Id)
}

// int32 UniqSequenceNo = 2;
inline void trade_gateway_trade_field::clear_uniqsequenceno() {
  uniqsequenceno_ = 0;
}
inline ::google::protobuf::int32 trade_gateway_trade_field::uniqsequenceno() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_trade_field.UniqSequenceNo)
  return uniqsequenceno_;
}
inline void trade_gateway_trade_field::set_uniqsequenceno(::google::protobuf::int32 value) {
  
  uniqsequenceno_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_trade_field.UniqSequenceNo)
}

// string BrokerID = 3;
inline void trade_gateway_trade_field::clear_brokerid() {
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& trade_gateway_trade_field::brokerid() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_trade_field.BrokerID)
  return brokerid_.GetNoArena();
}
inline void trade_gateway_trade_field::set_brokerid(const ::std::string& value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_trade_field.BrokerID)
}
#if LANG_CXX11
inline void trade_gateway_trade_field::set_brokerid(::std::string&& value) {
  
  brokerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_trade_field.BrokerID)
}
#endif
inline void trade_gateway_trade_field::set_brokerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_trade_field.BrokerID)
}
inline void trade_gateway_trade_field::set_brokerid(const char* value, size_t size) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_trade_field.BrokerID)
}
inline ::std::string* trade_gateway_trade_field::mutable_brokerid() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_trade_field.BrokerID)
  return brokerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* trade_gateway_trade_field::release_brokerid() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_trade_field.BrokerID)
  
  return brokerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void trade_gateway_trade_field::set_allocated_brokerid(::std::string* brokerid) {
  if (brokerid != NULL) {
    
  } else {
    
  }
  brokerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brokerid);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_trade_field.BrokerID)
}

// string InvestorID = 4;
inline void trade_gateway_trade_field::clear_investorid() {
  investorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& trade_gateway_trade_field::investorid() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_trade_field.InvestorID)
  return investorid_.GetNoArena();
}
inline void trade_gateway_trade_field::set_investorid(const ::std::string& value) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_trade_field.InvestorID)
}
#if LANG_CXX11
inline void trade_gateway_trade_field::set_investorid(::std::string&& value) {
  
  investorid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_trade_field.InvestorID)
}
#endif
inline void trade_gateway_trade_field::set_investorid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_trade_field.InvestorID)
}
inline void trade_gateway_trade_field::set_investorid(const char* value, size_t size) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_trade_field.InvestorID)
}
inline ::std::string* trade_gateway_trade_field::mutable_investorid() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_trade_field.InvestorID)
  return investorid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* trade_gateway_trade_field::release_investorid() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_trade_field.InvestorID)
  
  return investorid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void trade_gateway_trade_field::set_allocated_investorid(::std::string* investorid) {
  if (investorid != NULL) {
    
  } else {
    
  }
  investorid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), investorid);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_trade_field.InvestorID)
}

// string InstrumentID = 5;
inline void trade_gateway_trade_field::clear_instrumentid() {
  instrumentid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& trade_gateway_trade_field::instrumentid() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_trade_field.InstrumentID)
  return instrumentid_.GetNoArena();
}
inline void trade_gateway_trade_field::set_instrumentid(const ::std::string& value) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_trade_field.InstrumentID)
}
#if LANG_CXX11
inline void trade_gateway_trade_field::set_instrumentid(::std::string&& value) {
  
  instrumentid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_trade_field.InstrumentID)
}
#endif
inline void trade_gateway_trade_field::set_instrumentid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_trade_field.InstrumentID)
}
inline void trade_gateway_trade_field::set_instrumentid(const char* value, size_t size) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_trade_field.InstrumentID)
}
inline ::std::string* trade_gateway_trade_field::mutable_instrumentid() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_trade_field.InstrumentID)
  return instrumentid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* trade_gateway_trade_field::release_instrumentid() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_trade_field.InstrumentID)
  
  return instrumentid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void trade_gateway_trade_field::set_allocated_instrumentid(::std::string* instrumentid) {
  if (instrumentid != NULL) {
    
  } else {
    
  }
  instrumentid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrumentid);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_trade_field.InstrumentID)
}

// string OrderRef = 6;
inline void trade_gateway_trade_field::clear_orderref() {
  orderref_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& trade_gateway_trade_field::orderref() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_trade_field.OrderRef)
  return orderref_.GetNoArena();
}
inline void trade_gateway_trade_field::set_orderref(const ::std::string& value) {
  
  orderref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_trade_field.OrderRef)
}
#if LANG_CXX11
inline void trade_gateway_trade_field::set_orderref(::std::string&& value) {
  
  orderref_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_trade_field.OrderRef)
}
#endif
inline void trade_gateway_trade_field::set_orderref(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  orderref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_trade_field.OrderRef)
}
inline void trade_gateway_trade_field::set_orderref(const char* value, size_t size) {
  
  orderref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_trade_field.OrderRef)
}
inline ::std::string* trade_gateway_trade_field::mutable_orderref() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_trade_field.OrderRef)
  return orderref_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* trade_gateway_trade_field::release_orderref() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_trade_field.OrderRef)
  
  return orderref_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void trade_gateway_trade_field::set_allocated_orderref(::std::string* orderref) {
  if (orderref != NULL) {
    
  } else {
    
  }
  orderref_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderref);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_trade_field.OrderRef)
}

// string ExchangeID = 7;
inline void trade_gateway_trade_field::clear_exchangeid() {
  exchangeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& trade_gateway_trade_field::exchangeid() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_trade_field.ExchangeID)
  return exchangeid_.GetNoArena();
}
inline void trade_gateway_trade_field::set_exchangeid(const ::std::string& value) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_trade_field.ExchangeID)
}
#if LANG_CXX11
inline void trade_gateway_trade_field::set_exchangeid(::std::string&& value) {
  
  exchangeid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_trade_field.ExchangeID)
}
#endif
inline void trade_gateway_trade_field::set_exchangeid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_trade_field.ExchangeID)
}
inline void trade_gateway_trade_field::set_exchangeid(const char* value, size_t size) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_trade_field.ExchangeID)
}
inline ::std::string* trade_gateway_trade_field::mutable_exchangeid() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_trade_field.ExchangeID)
  return exchangeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* trade_gateway_trade_field::release_exchangeid() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_trade_field.ExchangeID)
  
  return exchangeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void trade_gateway_trade_field::set_allocated_exchangeid(::std::string* exchangeid) {
  if (exchangeid != NULL) {
    
  } else {
    
  }
  exchangeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchangeid);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_trade_field.ExchangeID)
}

// string TradeID = 8;
inline void trade_gateway_trade_field::clear_tradeid() {
  tradeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& trade_gateway_trade_field::tradeid() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_trade_field.TradeID)
  return tradeid_.GetNoArena();
}
inline void trade_gateway_trade_field::set_tradeid(const ::std::string& value) {
  
  tradeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_trade_field.TradeID)
}
#if LANG_CXX11
inline void trade_gateway_trade_field::set_tradeid(::std::string&& value) {
  
  tradeid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_trade_field.TradeID)
}
#endif
inline void trade_gateway_trade_field::set_tradeid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tradeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_trade_field.TradeID)
}
inline void trade_gateway_trade_field::set_tradeid(const char* value, size_t size) {
  
  tradeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_trade_field.TradeID)
}
inline ::std::string* trade_gateway_trade_field::mutable_tradeid() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_trade_field.TradeID)
  return tradeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* trade_gateway_trade_field::release_tradeid() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_trade_field.TradeID)
  
  return tradeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void trade_gateway_trade_field::set_allocated_tradeid(::std::string* tradeid) {
  if (tradeid != NULL) {
    
  } else {
    
  }
  tradeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradeid);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_trade_field.TradeID)
}

// int32 Direction = 9;
inline void trade_gateway_trade_field::clear_direction() {
  direction_ = 0;
}
inline ::google::protobuf::int32 trade_gateway_trade_field::direction() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_trade_field.Direction)
  return direction_;
}
inline void trade_gateway_trade_field::set_direction(::google::protobuf::int32 value) {
  
  direction_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_trade_field.Direction)
}

// string OrderSysID = 10;
inline void trade_gateway_trade_field::clear_ordersysid() {
  ordersysid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& trade_gateway_trade_field::ordersysid() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_trade_field.OrderSysID)
  return ordersysid_.GetNoArena();
}
inline void trade_gateway_trade_field::set_ordersysid(const ::std::string& value) {
  
  ordersysid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_trade_field.OrderSysID)
}
#if LANG_CXX11
inline void trade_gateway_trade_field::set_ordersysid(::std::string&& value) {
  
  ordersysid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_trade_field.OrderSysID)
}
#endif
inline void trade_gateway_trade_field::set_ordersysid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ordersysid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_trade_field.OrderSysID)
}
inline void trade_gateway_trade_field::set_ordersysid(const char* value, size_t size) {
  
  ordersysid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_trade_field.OrderSysID)
}
inline ::std::string* trade_gateway_trade_field::mutable_ordersysid() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_trade_field.OrderSysID)
  return ordersysid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* trade_gateway_trade_field::release_ordersysid() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_trade_field.OrderSysID)
  
  return ordersysid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void trade_gateway_trade_field::set_allocated_ordersysid(::std::string* ordersysid) {
  if (ordersysid != NULL) {
    
  } else {
    
  }
  ordersysid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ordersysid);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_trade_field.OrderSysID)
}

// int32 OffsetFlag = 11;
inline void trade_gateway_trade_field::clear_offsetflag() {
  offsetflag_ = 0;
}
inline ::google::protobuf::int32 trade_gateway_trade_field::offsetflag() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_trade_field.OffsetFlag)
  return offsetflag_;
}
inline void trade_gateway_trade_field::set_offsetflag(::google::protobuf::int32 value) {
  
  offsetflag_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_trade_field.OffsetFlag)
}

// int32 HedgeFlag = 12;
inline void trade_gateway_trade_field::clear_hedgeflag() {
  hedgeflag_ = 0;
}
inline ::google::protobuf::int32 trade_gateway_trade_field::hedgeflag() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_trade_field.HedgeFlag)
  return hedgeflag_;
}
inline void trade_gateway_trade_field::set_hedgeflag(::google::protobuf::int32 value) {
  
  hedgeflag_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_trade_field.HedgeFlag)
}

// double Price = 13;
inline void trade_gateway_trade_field::clear_price() {
  price_ = 0;
}
inline double trade_gateway_trade_field::price() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_trade_field.Price)
  return price_;
}
inline void trade_gateway_trade_field::set_price(double value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_trade_field.Price)
}

// int32 Volume = 14;
inline void trade_gateway_trade_field::clear_volume() {
  volume_ = 0;
}
inline ::google::protobuf::int32 trade_gateway_trade_field::volume() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_trade_field.Volume)
  return volume_;
}
inline void trade_gateway_trade_field::set_volume(::google::protobuf::int32 value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_trade_field.Volume)
}

// string TradeDate = 15;
inline void trade_gateway_trade_field::clear_tradedate() {
  tradedate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& trade_gateway_trade_field::tradedate() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_trade_field.TradeDate)
  return tradedate_.GetNoArena();
}
inline void trade_gateway_trade_field::set_tradedate(const ::std::string& value) {
  
  tradedate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_trade_field.TradeDate)
}
#if LANG_CXX11
inline void trade_gateway_trade_field::set_tradedate(::std::string&& value) {
  
  tradedate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_trade_field.TradeDate)
}
#endif
inline void trade_gateway_trade_field::set_tradedate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tradedate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_trade_field.TradeDate)
}
inline void trade_gateway_trade_field::set_tradedate(const char* value, size_t size) {
  
  tradedate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_trade_field.TradeDate)
}
inline ::std::string* trade_gateway_trade_field::mutable_tradedate() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_trade_field.TradeDate)
  return tradedate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* trade_gateway_trade_field::release_tradedate() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_trade_field.TradeDate)
  
  return tradedate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void trade_gateway_trade_field::set_allocated_tradedate(::std::string* tradedate) {
  if (tradedate != NULL) {
    
  } else {
    
  }
  tradedate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradedate);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_trade_field.TradeDate)
}

// string TradeTime = 16;
inline void trade_gateway_trade_field::clear_tradetime() {
  tradetime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& trade_gateway_trade_field::tradetime() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_trade_field.TradeTime)
  return tradetime_.GetNoArena();
}
inline void trade_gateway_trade_field::set_tradetime(const ::std::string& value) {
  
  tradetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_trade_field.TradeTime)
}
#if LANG_CXX11
inline void trade_gateway_trade_field::set_tradetime(::std::string&& value) {
  
  tradetime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_trade_field.TradeTime)
}
#endif
inline void trade_gateway_trade_field::set_tradetime(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tradetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_trade_field.TradeTime)
}
inline void trade_gateway_trade_field::set_tradetime(const char* value, size_t size) {
  
  tradetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_trade_field.TradeTime)
}
inline ::std::string* trade_gateway_trade_field::mutable_tradetime() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_trade_field.TradeTime)
  return tradetime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* trade_gateway_trade_field::release_tradetime() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_trade_field.TradeTime)
  
  return tradetime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void trade_gateway_trade_field::set_allocated_tradetime(::std::string* tradetime) {
  if (tradetime != NULL) {
    
  } else {
    
  }
  tradetime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradetime);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_trade_field.TradeTime)
}

// string TradeType = 17;
inline void trade_gateway_trade_field::clear_tradetype() {
  tradetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& trade_gateway_trade_field::tradetype() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_trade_field.TradeType)
  return tradetype_.GetNoArena();
}
inline void trade_gateway_trade_field::set_tradetype(const ::std::string& value) {
  
  tradetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_trade_field.TradeType)
}
#if LANG_CXX11
inline void trade_gateway_trade_field::set_tradetype(::std::string&& value) {
  
  tradetype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_trade_field.TradeType)
}
#endif
inline void trade_gateway_trade_field::set_tradetype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tradetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_trade_field.TradeType)
}
inline void trade_gateway_trade_field::set_tradetype(const char* value, size_t size) {
  
  tradetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_trade_field.TradeType)
}
inline ::std::string* trade_gateway_trade_field::mutable_tradetype() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_trade_field.TradeType)
  return tradetype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* trade_gateway_trade_field::release_tradetype() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_trade_field.TradeType)
  
  return tradetype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void trade_gateway_trade_field::set_allocated_tradetype(::std::string* tradetype) {
  if (tradetype != NULL) {
    
  } else {
    
  }
  tradetype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradetype);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_trade_field.TradeType)
}

// string OrderLocalID = 18;
inline void trade_gateway_trade_field::clear_orderlocalid() {
  orderlocalid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& trade_gateway_trade_field::orderlocalid() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_trade_field.OrderLocalID)
  return orderlocalid_.GetNoArena();
}
inline void trade_gateway_trade_field::set_orderlocalid(const ::std::string& value) {
  
  orderlocalid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_trade_field.OrderLocalID)
}
#if LANG_CXX11
inline void trade_gateway_trade_field::set_orderlocalid(::std::string&& value) {
  
  orderlocalid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_trade_field.OrderLocalID)
}
#endif
inline void trade_gateway_trade_field::set_orderlocalid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  orderlocalid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_trade_field.OrderLocalID)
}
inline void trade_gateway_trade_field::set_orderlocalid(const char* value, size_t size) {
  
  orderlocalid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_trade_field.OrderLocalID)
}
inline ::std::string* trade_gateway_trade_field::mutable_orderlocalid() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_trade_field.OrderLocalID)
  return orderlocalid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* trade_gateway_trade_field::release_orderlocalid() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_trade_field.OrderLocalID)
  
  return orderlocalid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void trade_gateway_trade_field::set_allocated_orderlocalid(::std::string* orderlocalid) {
  if (orderlocalid != NULL) {
    
  } else {
    
  }
  orderlocalid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderlocalid);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_trade_field.OrderLocalID)
}

// int32 SequenceNo = 19;
inline void trade_gateway_trade_field::clear_sequenceno() {
  sequenceno_ = 0;
}
inline ::google::protobuf::int32 trade_gateway_trade_field::sequenceno() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_trade_field.SequenceNo)
  return sequenceno_;
}
inline void trade_gateway_trade_field::set_sequenceno(::google::protobuf::int32 value) {
  
  sequenceno_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_trade_field.SequenceNo)
}

// string TradingDay = 20;
inline void trade_gateway_trade_field::clear_tradingday() {
  tradingday_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& trade_gateway_trade_field::tradingday() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_trade_field.TradingDay)
  return tradingday_.GetNoArena();
}
inline void trade_gateway_trade_field::set_tradingday(const ::std::string& value) {
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_trade_field.TradingDay)
}
#if LANG_CXX11
inline void trade_gateway_trade_field::set_tradingday(::std::string&& value) {
  
  tradingday_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_trade_field.TradingDay)
}
#endif
inline void trade_gateway_trade_field::set_tradingday(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_trade_field.TradingDay)
}
inline void trade_gateway_trade_field::set_tradingday(const char* value, size_t size) {
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_trade_field.TradingDay)
}
inline ::std::string* trade_gateway_trade_field::mutable_tradingday() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_trade_field.TradingDay)
  return tradingday_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* trade_gateway_trade_field::release_tradingday() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_trade_field.TradingDay)
  
  return tradingday_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void trade_gateway_trade_field::set_allocated_tradingday(::std::string* tradingday) {
  if (tradingday != NULL) {
    
  } else {
    
  }
  tradingday_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradingday);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_trade_field.TradingDay)
}

// int32 BrokerOrderSeq = 21;
inline void trade_gateway_trade_field::clear_brokerorderseq() {
  brokerorderseq_ = 0;
}
inline ::google::protobuf::int32 trade_gateway_trade_field::brokerorderseq() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_trade_field.BrokerOrderSeq)
  return brokerorderseq_;
}
inline void trade_gateway_trade_field::set_brokerorderseq(::google::protobuf::int32 value) {
  
  brokerorderseq_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_trade_field.BrokerOrderSeq)
}

// -------------------------------------------------------------------

// trade_gateway_order_field

// int32 Id = 1;
inline void trade_gateway_order_field::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 trade_gateway_order_field::id() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.Id)
  return id_;
}
inline void trade_gateway_order_field::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.Id)
}

// int32 UniqSequenceNo = 2;
inline void trade_gateway_order_field::clear_uniqsequenceno() {
  uniqsequenceno_ = 0;
}
inline ::google::protobuf::int32 trade_gateway_order_field::uniqsequenceno() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.UniqSequenceNo)
  return uniqsequenceno_;
}
inline void trade_gateway_order_field::set_uniqsequenceno(::google::protobuf::int32 value) {
  
  uniqsequenceno_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.UniqSequenceNo)
}

// string BrokerID = 3;
inline void trade_gateway_order_field::clear_brokerid() {
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& trade_gateway_order_field::brokerid() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.BrokerID)
  return brokerid_.GetNoArena();
}
inline void trade_gateway_order_field::set_brokerid(const ::std::string& value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.BrokerID)
}
#if LANG_CXX11
inline void trade_gateway_order_field::set_brokerid(::std::string&& value) {
  
  brokerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_order_field.BrokerID)
}
#endif
inline void trade_gateway_order_field::set_brokerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_order_field.BrokerID)
}
inline void trade_gateway_order_field::set_brokerid(const char* value, size_t size) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_order_field.BrokerID)
}
inline ::std::string* trade_gateway_order_field::mutable_brokerid() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_order_field.BrokerID)
  return brokerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* trade_gateway_order_field::release_brokerid() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_order_field.BrokerID)
  
  return brokerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void trade_gateway_order_field::set_allocated_brokerid(::std::string* brokerid) {
  if (brokerid != NULL) {
    
  } else {
    
  }
  brokerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brokerid);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_order_field.BrokerID)
}

// string InvestorID = 4;
inline void trade_gateway_order_field::clear_investorid() {
  investorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& trade_gateway_order_field::investorid() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.InvestorID)
  return investorid_.GetNoArena();
}
inline void trade_gateway_order_field::set_investorid(const ::std::string& value) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.InvestorID)
}
#if LANG_CXX11
inline void trade_gateway_order_field::set_investorid(::std::string&& value) {
  
  investorid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_order_field.InvestorID)
}
#endif
inline void trade_gateway_order_field::set_investorid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_order_field.InvestorID)
}
inline void trade_gateway_order_field::set_investorid(const char* value, size_t size) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_order_field.InvestorID)
}
inline ::std::string* trade_gateway_order_field::mutable_investorid() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_order_field.InvestorID)
  return investorid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* trade_gateway_order_field::release_investorid() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_order_field.InvestorID)
  
  return investorid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void trade_gateway_order_field::set_allocated_investorid(::std::string* investorid) {
  if (investorid != NULL) {
    
  } else {
    
  }
  investorid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), investorid);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_order_field.InvestorID)
}

// string InstrumentID = 5;
inline void trade_gateway_order_field::clear_instrumentid() {
  instrumentid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& trade_gateway_order_field::instrumentid() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.InstrumentID)
  return instrumentid_.GetNoArena();
}
inline void trade_gateway_order_field::set_instrumentid(const ::std::string& value) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.InstrumentID)
}
#if LANG_CXX11
inline void trade_gateway_order_field::set_instrumentid(::std::string&& value) {
  
  instrumentid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_order_field.InstrumentID)
}
#endif
inline void trade_gateway_order_field::set_instrumentid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_order_field.InstrumentID)
}
inline void trade_gateway_order_field::set_instrumentid(const char* value, size_t size) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_order_field.InstrumentID)
}
inline ::std::string* trade_gateway_order_field::mutable_instrumentid() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_order_field.InstrumentID)
  return instrumentid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* trade_gateway_order_field::release_instrumentid() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_order_field.InstrumentID)
  
  return instrumentid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void trade_gateway_order_field::set_allocated_instrumentid(::std::string* instrumentid) {
  if (instrumentid != NULL) {
    
  } else {
    
  }
  instrumentid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrumentid);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_order_field.InstrumentID)
}

// string OrderRef = 6;
inline void trade_gateway_order_field::clear_orderref() {
  orderref_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& trade_gateway_order_field::orderref() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.OrderRef)
  return orderref_.GetNoArena();
}
inline void trade_gateway_order_field::set_orderref(const ::std::string& value) {
  
  orderref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.OrderRef)
}
#if LANG_CXX11
inline void trade_gateway_order_field::set_orderref(::std::string&& value) {
  
  orderref_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_order_field.OrderRef)
}
#endif
inline void trade_gateway_order_field::set_orderref(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  orderref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_order_field.OrderRef)
}
inline void trade_gateway_order_field::set_orderref(const char* value, size_t size) {
  
  orderref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_order_field.OrderRef)
}
inline ::std::string* trade_gateway_order_field::mutable_orderref() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_order_field.OrderRef)
  return orderref_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* trade_gateway_order_field::release_orderref() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_order_field.OrderRef)
  
  return orderref_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void trade_gateway_order_field::set_allocated_orderref(::std::string* orderref) {
  if (orderref != NULL) {
    
  } else {
    
  }
  orderref_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderref);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_order_field.OrderRef)
}

// string OrderPriceType = 7;
inline void trade_gateway_order_field::clear_orderpricetype() {
  orderpricetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& trade_gateway_order_field::orderpricetype() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.OrderPriceType)
  return orderpricetype_.GetNoArena();
}
inline void trade_gateway_order_field::set_orderpricetype(const ::std::string& value) {
  
  orderpricetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.OrderPriceType)
}
#if LANG_CXX11
inline void trade_gateway_order_field::set_orderpricetype(::std::string&& value) {
  
  orderpricetype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_order_field.OrderPriceType)
}
#endif
inline void trade_gateway_order_field::set_orderpricetype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  orderpricetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_order_field.OrderPriceType)
}
inline void trade_gateway_order_field::set_orderpricetype(const char* value, size_t size) {
  
  orderpricetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_order_field.OrderPriceType)
}
inline ::std::string* trade_gateway_order_field::mutable_orderpricetype() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_order_field.OrderPriceType)
  return orderpricetype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* trade_gateway_order_field::release_orderpricetype() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_order_field.OrderPriceType)
  
  return orderpricetype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void trade_gateway_order_field::set_allocated_orderpricetype(::std::string* orderpricetype) {
  if (orderpricetype != NULL) {
    
  } else {
    
  }
  orderpricetype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderpricetype);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_order_field.OrderPriceType)
}

// int32 Direction = 8;
inline void trade_gateway_order_field::clear_direction() {
  direction_ = 0;
}
inline ::google::protobuf::int32 trade_gateway_order_field::direction() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.Direction)
  return direction_;
}
inline void trade_gateway_order_field::set_direction(::google::protobuf::int32 value) {
  
  direction_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.Direction)
}

// int32 CombOffsetFlag = 9;
inline void trade_gateway_order_field::clear_comboffsetflag() {
  comboffsetflag_ = 0;
}
inline ::google::protobuf::int32 trade_gateway_order_field::comboffsetflag() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.CombOffsetFlag)
  return comboffsetflag_;
}
inline void trade_gateway_order_field::set_comboffsetflag(::google::protobuf::int32 value) {
  
  comboffsetflag_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.CombOffsetFlag)
}

// int32 CombHedgeFlag = 10;
inline void trade_gateway_order_field::clear_combhedgeflag() {
  combhedgeflag_ = 0;
}
inline ::google::protobuf::int32 trade_gateway_order_field::combhedgeflag() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.CombHedgeFlag)
  return combhedgeflag_;
}
inline void trade_gateway_order_field::set_combhedgeflag(::google::protobuf::int32 value) {
  
  combhedgeflag_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.CombHedgeFlag)
}

// double LimitPrice = 11;
inline void trade_gateway_order_field::clear_limitprice() {
  limitprice_ = 0;
}
inline double trade_gateway_order_field::limitprice() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.LimitPrice)
  return limitprice_;
}
inline void trade_gateway_order_field::set_limitprice(double value) {
  
  limitprice_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.LimitPrice)
}

// int32 VolumeTotalOriginal = 12;
inline void trade_gateway_order_field::clear_volumetotaloriginal() {
  volumetotaloriginal_ = 0;
}
inline ::google::protobuf::int32 trade_gateway_order_field::volumetotaloriginal() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.VolumeTotalOriginal)
  return volumetotaloriginal_;
}
inline void trade_gateway_order_field::set_volumetotaloriginal(::google::protobuf::int32 value) {
  
  volumetotaloriginal_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.VolumeTotalOriginal)
}

// string TimeCondition = 13;
inline void trade_gateway_order_field::clear_timecondition() {
  timecondition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& trade_gateway_order_field::timecondition() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.TimeCondition)
  return timecondition_.GetNoArena();
}
inline void trade_gateway_order_field::set_timecondition(const ::std::string& value) {
  
  timecondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.TimeCondition)
}
#if LANG_CXX11
inline void trade_gateway_order_field::set_timecondition(::std::string&& value) {
  
  timecondition_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_order_field.TimeCondition)
}
#endif
inline void trade_gateway_order_field::set_timecondition(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  timecondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_order_field.TimeCondition)
}
inline void trade_gateway_order_field::set_timecondition(const char* value, size_t size) {
  
  timecondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_order_field.TimeCondition)
}
inline ::std::string* trade_gateway_order_field::mutable_timecondition() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_order_field.TimeCondition)
  return timecondition_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* trade_gateway_order_field::release_timecondition() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_order_field.TimeCondition)
  
  return timecondition_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void trade_gateway_order_field::set_allocated_timecondition(::std::string* timecondition) {
  if (timecondition != NULL) {
    
  } else {
    
  }
  timecondition_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timecondition);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_order_field.TimeCondition)
}

// string GTDDate = 14;
inline void trade_gateway_order_field::clear_gtddate() {
  gtddate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& trade_gateway_order_field::gtddate() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.GTDDate)
  return gtddate_.GetNoArena();
}
inline void trade_gateway_order_field::set_gtddate(const ::std::string& value) {
  
  gtddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.GTDDate)
}
#if LANG_CXX11
inline void trade_gateway_order_field::set_gtddate(::std::string&& value) {
  
  gtddate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_order_field.GTDDate)
}
#endif
inline void trade_gateway_order_field::set_gtddate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gtddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_order_field.GTDDate)
}
inline void trade_gateway_order_field::set_gtddate(const char* value, size_t size) {
  
  gtddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_order_field.GTDDate)
}
inline ::std::string* trade_gateway_order_field::mutable_gtddate() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_order_field.GTDDate)
  return gtddate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* trade_gateway_order_field::release_gtddate() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_order_field.GTDDate)
  
  return gtddate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void trade_gateway_order_field::set_allocated_gtddate(::std::string* gtddate) {
  if (gtddate != NULL) {
    
  } else {
    
  }
  gtddate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gtddate);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_order_field.GTDDate)
}

// string VolumeCondition = 15;
inline void trade_gateway_order_field::clear_volumecondition() {
  volumecondition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& trade_gateway_order_field::volumecondition() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.VolumeCondition)
  return volumecondition_.GetNoArena();
}
inline void trade_gateway_order_field::set_volumecondition(const ::std::string& value) {
  
  volumecondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.VolumeCondition)
}
#if LANG_CXX11
inline void trade_gateway_order_field::set_volumecondition(::std::string&& value) {
  
  volumecondition_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_order_field.VolumeCondition)
}
#endif
inline void trade_gateway_order_field::set_volumecondition(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  volumecondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_order_field.VolumeCondition)
}
inline void trade_gateway_order_field::set_volumecondition(const char* value, size_t size) {
  
  volumecondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_order_field.VolumeCondition)
}
inline ::std::string* trade_gateway_order_field::mutable_volumecondition() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_order_field.VolumeCondition)
  return volumecondition_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* trade_gateway_order_field::release_volumecondition() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_order_field.VolumeCondition)
  
  return volumecondition_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void trade_gateway_order_field::set_allocated_volumecondition(::std::string* volumecondition) {
  if (volumecondition != NULL) {
    
  } else {
    
  }
  volumecondition_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), volumecondition);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_order_field.VolumeCondition)
}

// int32 MinVolume = 16;
inline void trade_gateway_order_field::clear_minvolume() {
  minvolume_ = 0;
}
inline ::google::protobuf::int32 trade_gateway_order_field::minvolume() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.MinVolume)
  return minvolume_;
}
inline void trade_gateway_order_field::set_minvolume(::google::protobuf::int32 value) {
  
  minvolume_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.MinVolume)
}

// string ContingentCondition = 17;
inline void trade_gateway_order_field::clear_contingentcondition() {
  contingentcondition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& trade_gateway_order_field::contingentcondition() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.ContingentCondition)
  return contingentcondition_.GetNoArena();
}
inline void trade_gateway_order_field::set_contingentcondition(const ::std::string& value) {
  
  contingentcondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.ContingentCondition)
}
#if LANG_CXX11
inline void trade_gateway_order_field::set_contingentcondition(::std::string&& value) {
  
  contingentcondition_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_order_field.ContingentCondition)
}
#endif
inline void trade_gateway_order_field::set_contingentcondition(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  contingentcondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_order_field.ContingentCondition)
}
inline void trade_gateway_order_field::set_contingentcondition(const char* value, size_t size) {
  
  contingentcondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_order_field.ContingentCondition)
}
inline ::std::string* trade_gateway_order_field::mutable_contingentcondition() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_order_field.ContingentCondition)
  return contingentcondition_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* trade_gateway_order_field::release_contingentcondition() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_order_field.ContingentCondition)
  
  return contingentcondition_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void trade_gateway_order_field::set_allocated_contingentcondition(::std::string* contingentcondition) {
  if (contingentcondition != NULL) {
    
  } else {
    
  }
  contingentcondition_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contingentcondition);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_order_field.ContingentCondition)
}

// double StopPrice = 18;
inline void trade_gateway_order_field::clear_stopprice() {
  stopprice_ = 0;
}
inline double trade_gateway_order_field::stopprice() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.StopPrice)
  return stopprice_;
}
inline void trade_gateway_order_field::set_stopprice(double value) {
  
  stopprice_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.StopPrice)
}

// string ForceCloseReason = 19;
inline void trade_gateway_order_field::clear_forceclosereason() {
  forceclosereason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& trade_gateway_order_field::forceclosereason() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.ForceCloseReason)
  return forceclosereason_.GetNoArena();
}
inline void trade_gateway_order_field::set_forceclosereason(const ::std::string& value) {
  
  forceclosereason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.ForceCloseReason)
}
#if LANG_CXX11
inline void trade_gateway_order_field::set_forceclosereason(::std::string&& value) {
  
  forceclosereason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_order_field.ForceCloseReason)
}
#endif
inline void trade_gateway_order_field::set_forceclosereason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  forceclosereason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_order_field.ForceCloseReason)
}
inline void trade_gateway_order_field::set_forceclosereason(const char* value, size_t size) {
  
  forceclosereason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_order_field.ForceCloseReason)
}
inline ::std::string* trade_gateway_order_field::mutable_forceclosereason() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_order_field.ForceCloseReason)
  return forceclosereason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* trade_gateway_order_field::release_forceclosereason() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_order_field.ForceCloseReason)
  
  return forceclosereason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void trade_gateway_order_field::set_allocated_forceclosereason(::std::string* forceclosereason) {
  if (forceclosereason != NULL) {
    
  } else {
    
  }
  forceclosereason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), forceclosereason);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_order_field.ForceCloseReason)
}

// int32 RequestID = 20;
inline void trade_gateway_order_field::clear_requestid() {
  requestid_ = 0;
}
inline ::google::protobuf::int32 trade_gateway_order_field::requestid() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.RequestID)
  return requestid_;
}
inline void trade_gateway_order_field::set_requestid(::google::protobuf::int32 value) {
  
  requestid_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.RequestID)
}

// string OrderLocalID = 21;
inline void trade_gateway_order_field::clear_orderlocalid() {
  orderlocalid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& trade_gateway_order_field::orderlocalid() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.OrderLocalID)
  return orderlocalid_.GetNoArena();
}
inline void trade_gateway_order_field::set_orderlocalid(const ::std::string& value) {
  
  orderlocalid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.OrderLocalID)
}
#if LANG_CXX11
inline void trade_gateway_order_field::set_orderlocalid(::std::string&& value) {
  
  orderlocalid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_order_field.OrderLocalID)
}
#endif
inline void trade_gateway_order_field::set_orderlocalid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  orderlocalid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_order_field.OrderLocalID)
}
inline void trade_gateway_order_field::set_orderlocalid(const char* value, size_t size) {
  
  orderlocalid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_order_field.OrderLocalID)
}
inline ::std::string* trade_gateway_order_field::mutable_orderlocalid() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_order_field.OrderLocalID)
  return orderlocalid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* trade_gateway_order_field::release_orderlocalid() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_order_field.OrderLocalID)
  
  return orderlocalid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void trade_gateway_order_field::set_allocated_orderlocalid(::std::string* orderlocalid) {
  if (orderlocalid != NULL) {
    
  } else {
    
  }
  orderlocalid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderlocalid);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_order_field.OrderLocalID)
}

// string ExchangeID = 22;
inline void trade_gateway_order_field::clear_exchangeid() {
  exchangeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& trade_gateway_order_field::exchangeid() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.ExchangeID)
  return exchangeid_.GetNoArena();
}
inline void trade_gateway_order_field::set_exchangeid(const ::std::string& value) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.ExchangeID)
}
#if LANG_CXX11
inline void trade_gateway_order_field::set_exchangeid(::std::string&& value) {
  
  exchangeid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_order_field.ExchangeID)
}
#endif
inline void trade_gateway_order_field::set_exchangeid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_order_field.ExchangeID)
}
inline void trade_gateway_order_field::set_exchangeid(const char* value, size_t size) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_order_field.ExchangeID)
}
inline ::std::string* trade_gateway_order_field::mutable_exchangeid() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_order_field.ExchangeID)
  return exchangeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* trade_gateway_order_field::release_exchangeid() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_order_field.ExchangeID)
  
  return exchangeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void trade_gateway_order_field::set_allocated_exchangeid(::std::string* exchangeid) {
  if (exchangeid != NULL) {
    
  } else {
    
  }
  exchangeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchangeid);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_order_field.ExchangeID)
}

// string OrderSubmitStatus = 23;
inline void trade_gateway_order_field::clear_ordersubmitstatus() {
  ordersubmitstatus_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& trade_gateway_order_field::ordersubmitstatus() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.OrderSubmitStatus)
  return ordersubmitstatus_.GetNoArena();
}
inline void trade_gateway_order_field::set_ordersubmitstatus(const ::std::string& value) {
  
  ordersubmitstatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.OrderSubmitStatus)
}
#if LANG_CXX11
inline void trade_gateway_order_field::set_ordersubmitstatus(::std::string&& value) {
  
  ordersubmitstatus_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_order_field.OrderSubmitStatus)
}
#endif
inline void trade_gateway_order_field::set_ordersubmitstatus(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ordersubmitstatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_order_field.OrderSubmitStatus)
}
inline void trade_gateway_order_field::set_ordersubmitstatus(const char* value, size_t size) {
  
  ordersubmitstatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_order_field.OrderSubmitStatus)
}
inline ::std::string* trade_gateway_order_field::mutable_ordersubmitstatus() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_order_field.OrderSubmitStatus)
  return ordersubmitstatus_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* trade_gateway_order_field::release_ordersubmitstatus() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_order_field.OrderSubmitStatus)
  
  return ordersubmitstatus_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void trade_gateway_order_field::set_allocated_ordersubmitstatus(::std::string* ordersubmitstatus) {
  if (ordersubmitstatus != NULL) {
    
  } else {
    
  }
  ordersubmitstatus_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ordersubmitstatus);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_order_field.OrderSubmitStatus)
}

// string TradingDay = 24;
inline void trade_gateway_order_field::clear_tradingday() {
  tradingday_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& trade_gateway_order_field::tradingday() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.TradingDay)
  return tradingday_.GetNoArena();
}
inline void trade_gateway_order_field::set_tradingday(const ::std::string& value) {
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.TradingDay)
}
#if LANG_CXX11
inline void trade_gateway_order_field::set_tradingday(::std::string&& value) {
  
  tradingday_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_order_field.TradingDay)
}
#endif
inline void trade_gateway_order_field::set_tradingday(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_order_field.TradingDay)
}
inline void trade_gateway_order_field::set_tradingday(const char* value, size_t size) {
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_order_field.TradingDay)
}
inline ::std::string* trade_gateway_order_field::mutable_tradingday() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_order_field.TradingDay)
  return tradingday_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* trade_gateway_order_field::release_tradingday() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_order_field.TradingDay)
  
  return tradingday_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void trade_gateway_order_field::set_allocated_tradingday(::std::string* tradingday) {
  if (tradingday != NULL) {
    
  } else {
    
  }
  tradingday_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradingday);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_order_field.TradingDay)
}

// string OrderSysID = 25;
inline void trade_gateway_order_field::clear_ordersysid() {
  ordersysid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& trade_gateway_order_field::ordersysid() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.OrderSysID)
  return ordersysid_.GetNoArena();
}
inline void trade_gateway_order_field::set_ordersysid(const ::std::string& value) {
  
  ordersysid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.OrderSysID)
}
#if LANG_CXX11
inline void trade_gateway_order_field::set_ordersysid(::std::string&& value) {
  
  ordersysid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_order_field.OrderSysID)
}
#endif
inline void trade_gateway_order_field::set_ordersysid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ordersysid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_order_field.OrderSysID)
}
inline void trade_gateway_order_field::set_ordersysid(const char* value, size_t size) {
  
  ordersysid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_order_field.OrderSysID)
}
inline ::std::string* trade_gateway_order_field::mutable_ordersysid() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_order_field.OrderSysID)
  return ordersysid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* trade_gateway_order_field::release_ordersysid() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_order_field.OrderSysID)
  
  return ordersysid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void trade_gateway_order_field::set_allocated_ordersysid(::std::string* ordersysid) {
  if (ordersysid != NULL) {
    
  } else {
    
  }
  ordersysid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ordersysid);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_order_field.OrderSysID)
}

// string OrderSource = 26;
inline void trade_gateway_order_field::clear_ordersource() {
  ordersource_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& trade_gateway_order_field::ordersource() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.OrderSource)
  return ordersource_.GetNoArena();
}
inline void trade_gateway_order_field::set_ordersource(const ::std::string& value) {
  
  ordersource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.OrderSource)
}
#if LANG_CXX11
inline void trade_gateway_order_field::set_ordersource(::std::string&& value) {
  
  ordersource_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_order_field.OrderSource)
}
#endif
inline void trade_gateway_order_field::set_ordersource(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ordersource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_order_field.OrderSource)
}
inline void trade_gateway_order_field::set_ordersource(const char* value, size_t size) {
  
  ordersource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_order_field.OrderSource)
}
inline ::std::string* trade_gateway_order_field::mutable_ordersource() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_order_field.OrderSource)
  return ordersource_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* trade_gateway_order_field::release_ordersource() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_order_field.OrderSource)
  
  return ordersource_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void trade_gateway_order_field::set_allocated_ordersource(::std::string* ordersource) {
  if (ordersource != NULL) {
    
  } else {
    
  }
  ordersource_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ordersource);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_order_field.OrderSource)
}

// string OrderStatus = 27;
inline void trade_gateway_order_field::clear_orderstatus() {
  orderstatus_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& trade_gateway_order_field::orderstatus() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.OrderStatus)
  return orderstatus_.GetNoArena();
}
inline void trade_gateway_order_field::set_orderstatus(const ::std::string& value) {
  
  orderstatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.OrderStatus)
}
#if LANG_CXX11
inline void trade_gateway_order_field::set_orderstatus(::std::string&& value) {
  
  orderstatus_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_order_field.OrderStatus)
}
#endif
inline void trade_gateway_order_field::set_orderstatus(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  orderstatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_order_field.OrderStatus)
}
inline void trade_gateway_order_field::set_orderstatus(const char* value, size_t size) {
  
  orderstatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_order_field.OrderStatus)
}
inline ::std::string* trade_gateway_order_field::mutable_orderstatus() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_order_field.OrderStatus)
  return orderstatus_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* trade_gateway_order_field::release_orderstatus() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_order_field.OrderStatus)
  
  return orderstatus_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void trade_gateway_order_field::set_allocated_orderstatus(::std::string* orderstatus) {
  if (orderstatus != NULL) {
    
  } else {
    
  }
  orderstatus_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderstatus);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_order_field.OrderStatus)
}

// string OrderType = 28;
inline void trade_gateway_order_field::clear_ordertype() {
  ordertype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& trade_gateway_order_field::ordertype() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.OrderType)
  return ordertype_.GetNoArena();
}
inline void trade_gateway_order_field::set_ordertype(const ::std::string& value) {
  
  ordertype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.OrderType)
}
#if LANG_CXX11
inline void trade_gateway_order_field::set_ordertype(::std::string&& value) {
  
  ordertype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_order_field.OrderType)
}
#endif
inline void trade_gateway_order_field::set_ordertype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ordertype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_order_field.OrderType)
}
inline void trade_gateway_order_field::set_ordertype(const char* value, size_t size) {
  
  ordertype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_order_field.OrderType)
}
inline ::std::string* trade_gateway_order_field::mutable_ordertype() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_order_field.OrderType)
  return ordertype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* trade_gateway_order_field::release_ordertype() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_order_field.OrderType)
  
  return ordertype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void trade_gateway_order_field::set_allocated_ordertype(::std::string* ordertype) {
  if (ordertype != NULL) {
    
  } else {
    
  }
  ordertype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ordertype);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_order_field.OrderType)
}

// int32 VolumeTraded = 29;
inline void trade_gateway_order_field::clear_volumetraded() {
  volumetraded_ = 0;
}
inline ::google::protobuf::int32 trade_gateway_order_field::volumetraded() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.VolumeTraded)
  return volumetraded_;
}
inline void trade_gateway_order_field::set_volumetraded(::google::protobuf::int32 value) {
  
  volumetraded_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.VolumeTraded)
}

// int32 VolumeTotal = 30;
inline void trade_gateway_order_field::clear_volumetotal() {
  volumetotal_ = 0;
}
inline ::google::protobuf::int32 trade_gateway_order_field::volumetotal() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.VolumeTotal)
  return volumetotal_;
}
inline void trade_gateway_order_field::set_volumetotal(::google::protobuf::int32 value) {
  
  volumetotal_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.VolumeTotal)
}

// string InsertDate = 31;
inline void trade_gateway_order_field::clear_insertdate() {
  insertdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& trade_gateway_order_field::insertdate() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.InsertDate)
  return insertdate_.GetNoArena();
}
inline void trade_gateway_order_field::set_insertdate(const ::std::string& value) {
  
  insertdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.InsertDate)
}
#if LANG_CXX11
inline void trade_gateway_order_field::set_insertdate(::std::string&& value) {
  
  insertdate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_order_field.InsertDate)
}
#endif
inline void trade_gateway_order_field::set_insertdate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  insertdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_order_field.InsertDate)
}
inline void trade_gateway_order_field::set_insertdate(const char* value, size_t size) {
  
  insertdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_order_field.InsertDate)
}
inline ::std::string* trade_gateway_order_field::mutable_insertdate() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_order_field.InsertDate)
  return insertdate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* trade_gateway_order_field::release_insertdate() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_order_field.InsertDate)
  
  return insertdate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void trade_gateway_order_field::set_allocated_insertdate(::std::string* insertdate) {
  if (insertdate != NULL) {
    
  } else {
    
  }
  insertdate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), insertdate);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_order_field.InsertDate)
}

// string InsertTime = 32;
inline void trade_gateway_order_field::clear_inserttime() {
  inserttime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& trade_gateway_order_field::inserttime() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.InsertTime)
  return inserttime_.GetNoArena();
}
inline void trade_gateway_order_field::set_inserttime(const ::std::string& value) {
  
  inserttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.InsertTime)
}
#if LANG_CXX11
inline void trade_gateway_order_field::set_inserttime(::std::string&& value) {
  
  inserttime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_order_field.InsertTime)
}
#endif
inline void trade_gateway_order_field::set_inserttime(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  inserttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_order_field.InsertTime)
}
inline void trade_gateway_order_field::set_inserttime(const char* value, size_t size) {
  
  inserttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_order_field.InsertTime)
}
inline ::std::string* trade_gateway_order_field::mutable_inserttime() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_order_field.InsertTime)
  return inserttime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* trade_gateway_order_field::release_inserttime() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_order_field.InsertTime)
  
  return inserttime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void trade_gateway_order_field::set_allocated_inserttime(::std::string* inserttime) {
  if (inserttime != NULL) {
    
  } else {
    
  }
  inserttime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inserttime);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_order_field.InsertTime)
}

// string ActiveTime = 33;
inline void trade_gateway_order_field::clear_activetime() {
  activetime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& trade_gateway_order_field::activetime() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.ActiveTime)
  return activetime_.GetNoArena();
}
inline void trade_gateway_order_field::set_activetime(const ::std::string& value) {
  
  activetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.ActiveTime)
}
#if LANG_CXX11
inline void trade_gateway_order_field::set_activetime(::std::string&& value) {
  
  activetime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_order_field.ActiveTime)
}
#endif
inline void trade_gateway_order_field::set_activetime(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  activetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_order_field.ActiveTime)
}
inline void trade_gateway_order_field::set_activetime(const char* value, size_t size) {
  
  activetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_order_field.ActiveTime)
}
inline ::std::string* trade_gateway_order_field::mutable_activetime() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_order_field.ActiveTime)
  return activetime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* trade_gateway_order_field::release_activetime() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_order_field.ActiveTime)
  
  return activetime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void trade_gateway_order_field::set_allocated_activetime(::std::string* activetime) {
  if (activetime != NULL) {
    
  } else {
    
  }
  activetime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), activetime);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_order_field.ActiveTime)
}

// string SuspendTime = 34;
inline void trade_gateway_order_field::clear_suspendtime() {
  suspendtime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& trade_gateway_order_field::suspendtime() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.SuspendTime)
  return suspendtime_.GetNoArena();
}
inline void trade_gateway_order_field::set_suspendtime(const ::std::string& value) {
  
  suspendtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.SuspendTime)
}
#if LANG_CXX11
inline void trade_gateway_order_field::set_suspendtime(::std::string&& value) {
  
  suspendtime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_order_field.SuspendTime)
}
#endif
inline void trade_gateway_order_field::set_suspendtime(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suspendtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_order_field.SuspendTime)
}
inline void trade_gateway_order_field::set_suspendtime(const char* value, size_t size) {
  
  suspendtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_order_field.SuspendTime)
}
inline ::std::string* trade_gateway_order_field::mutable_suspendtime() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_order_field.SuspendTime)
  return suspendtime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* trade_gateway_order_field::release_suspendtime() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_order_field.SuspendTime)
  
  return suspendtime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void trade_gateway_order_field::set_allocated_suspendtime(::std::string* suspendtime) {
  if (suspendtime != NULL) {
    
  } else {
    
  }
  suspendtime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suspendtime);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_order_field.SuspendTime)
}

// string UpdateTime = 35;
inline void trade_gateway_order_field::clear_updatetime() {
  updatetime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& trade_gateway_order_field::updatetime() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.UpdateTime)
  return updatetime_.GetNoArena();
}
inline void trade_gateway_order_field::set_updatetime(const ::std::string& value) {
  
  updatetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.UpdateTime)
}
#if LANG_CXX11
inline void trade_gateway_order_field::set_updatetime(::std::string&& value) {
  
  updatetime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_order_field.UpdateTime)
}
#endif
inline void trade_gateway_order_field::set_updatetime(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  updatetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_order_field.UpdateTime)
}
inline void trade_gateway_order_field::set_updatetime(const char* value, size_t size) {
  
  updatetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_order_field.UpdateTime)
}
inline ::std::string* trade_gateway_order_field::mutable_updatetime() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_order_field.UpdateTime)
  return updatetime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* trade_gateway_order_field::release_updatetime() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_order_field.UpdateTime)
  
  return updatetime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void trade_gateway_order_field::set_allocated_updatetime(::std::string* updatetime) {
  if (updatetime != NULL) {
    
  } else {
    
  }
  updatetime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), updatetime);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_order_field.UpdateTime)
}

// string CancelTime = 36;
inline void trade_gateway_order_field::clear_canceltime() {
  canceltime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& trade_gateway_order_field::canceltime() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.CancelTime)
  return canceltime_.GetNoArena();
}
inline void trade_gateway_order_field::set_canceltime(const ::std::string& value) {
  
  canceltime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.CancelTime)
}
#if LANG_CXX11
inline void trade_gateway_order_field::set_canceltime(::std::string&& value) {
  
  canceltime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_order_field.CancelTime)
}
#endif
inline void trade_gateway_order_field::set_canceltime(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  canceltime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_order_field.CancelTime)
}
inline void trade_gateway_order_field::set_canceltime(const char* value, size_t size) {
  
  canceltime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_order_field.CancelTime)
}
inline ::std::string* trade_gateway_order_field::mutable_canceltime() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_order_field.CancelTime)
  return canceltime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* trade_gateway_order_field::release_canceltime() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_order_field.CancelTime)
  
  return canceltime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void trade_gateway_order_field::set_allocated_canceltime(::std::string* canceltime) {
  if (canceltime != NULL) {
    
  } else {
    
  }
  canceltime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), canceltime);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_order_field.CancelTime)
}

// int32 SequenceNo = 37;
inline void trade_gateway_order_field::clear_sequenceno() {
  sequenceno_ = 0;
}
inline ::google::protobuf::int32 trade_gateway_order_field::sequenceno() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.SequenceNo)
  return sequenceno_;
}
inline void trade_gateway_order_field::set_sequenceno(::google::protobuf::int32 value) {
  
  sequenceno_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.SequenceNo)
}

// int32 FrontID = 38;
inline void trade_gateway_order_field::clear_frontid() {
  frontid_ = 0;
}
inline ::google::protobuf::int32 trade_gateway_order_field::frontid() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.FrontID)
  return frontid_;
}
inline void trade_gateway_order_field::set_frontid(::google::protobuf::int32 value) {
  
  frontid_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.FrontID)
}

// int32 SessionID = 39;
inline void trade_gateway_order_field::clear_sessionid() {
  sessionid_ = 0;
}
inline ::google::protobuf::int32 trade_gateway_order_field::sessionid() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.SessionID)
  return sessionid_;
}
inline void trade_gateway_order_field::set_sessionid(::google::protobuf::int32 value) {
  
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.SessionID)
}

// string UserProductInfo = 40;
inline void trade_gateway_order_field::clear_userproductinfo() {
  userproductinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& trade_gateway_order_field::userproductinfo() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.UserProductInfo)
  return userproductinfo_.GetNoArena();
}
inline void trade_gateway_order_field::set_userproductinfo(const ::std::string& value) {
  
  userproductinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.UserProductInfo)
}
#if LANG_CXX11
inline void trade_gateway_order_field::set_userproductinfo(::std::string&& value) {
  
  userproductinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_order_field.UserProductInfo)
}
#endif
inline void trade_gateway_order_field::set_userproductinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  userproductinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_order_field.UserProductInfo)
}
inline void trade_gateway_order_field::set_userproductinfo(const char* value, size_t size) {
  
  userproductinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_order_field.UserProductInfo)
}
inline ::std::string* trade_gateway_order_field::mutable_userproductinfo() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_order_field.UserProductInfo)
  return userproductinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* trade_gateway_order_field::release_userproductinfo() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_order_field.UserProductInfo)
  
  return userproductinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void trade_gateway_order_field::set_allocated_userproductinfo(::std::string* userproductinfo) {
  if (userproductinfo != NULL) {
    
  } else {
    
  }
  userproductinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userproductinfo);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_order_field.UserProductInfo)
}

// bytes StatusMsg = 41;
inline void trade_gateway_order_field::clear_statusmsg() {
  statusmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& trade_gateway_order_field::statusmsg() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.StatusMsg)
  return statusmsg_.GetNoArena();
}
inline void trade_gateway_order_field::set_statusmsg(const ::std::string& value) {
  
  statusmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.StatusMsg)
}
#if LANG_CXX11
inline void trade_gateway_order_field::set_statusmsg(::std::string&& value) {
  
  statusmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_order_field.StatusMsg)
}
#endif
inline void trade_gateway_order_field::set_statusmsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  statusmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_order_field.StatusMsg)
}
inline void trade_gateway_order_field::set_statusmsg(const void* value, size_t size) {
  
  statusmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_order_field.StatusMsg)
}
inline ::std::string* trade_gateway_order_field::mutable_statusmsg() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_order_field.StatusMsg)
  return statusmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* trade_gateway_order_field::release_statusmsg() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_order_field.StatusMsg)
  
  return statusmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void trade_gateway_order_field::set_allocated_statusmsg(::std::string* statusmsg) {
  if (statusmsg != NULL) {
    
  } else {
    
  }
  statusmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), statusmsg);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_order_field.StatusMsg)
}

// int32 UserForceClose = 42;
inline void trade_gateway_order_field::clear_userforceclose() {
  userforceclose_ = 0;
}
inline ::google::protobuf::int32 trade_gateway_order_field::userforceclose() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.UserForceClose)
  return userforceclose_;
}
inline void trade_gateway_order_field::set_userforceclose(::google::protobuf::int32 value) {
  
  userforceclose_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.UserForceClose)
}

// int32 BrokerOrderSeq = 43;
inline void trade_gateway_order_field::clear_brokerorderseq() {
  brokerorderseq_ = 0;
}
inline ::google::protobuf::int32 trade_gateway_order_field::brokerorderseq() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.BrokerOrderSeq)
  return brokerorderseq_;
}
inline void trade_gateway_order_field::set_brokerorderseq(::google::protobuf::int32 value) {
  
  brokerorderseq_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.BrokerOrderSeq)
}

// int32 ZCETotalTradedVolume = 44;
inline void trade_gateway_order_field::clear_zcetotaltradedvolume() {
  zcetotaltradedvolume_ = 0;
}
inline ::google::protobuf::int32 trade_gateway_order_field::zcetotaltradedvolume() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.ZCETotalTradedVolume)
  return zcetotaltradedvolume_;
}
inline void trade_gateway_order_field::set_zcetotaltradedvolume(::google::protobuf::int32 value) {
  
  zcetotaltradedvolume_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.ZCETotalTradedVolume)
}

// int32 IsSwapOrder = 45;
inline void trade_gateway_order_field::clear_isswaporder() {
  isswaporder_ = 0;
}
inline ::google::protobuf::int32 trade_gateway_order_field::isswaporder() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.IsSwapOrder)
  return isswaporder_;
}
inline void trade_gateway_order_field::set_isswaporder(::google::protobuf::int32 value) {
  
  isswaporder_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.IsSwapOrder)
}

// bytes BranchID = 46;
inline void trade_gateway_order_field::clear_branchid() {
  branchid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& trade_gateway_order_field::branchid() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.BranchID)
  return branchid_.GetNoArena();
}
inline void trade_gateway_order_field::set_branchid(const ::std::string& value) {
  
  branchid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.BranchID)
}
#if LANG_CXX11
inline void trade_gateway_order_field::set_branchid(::std::string&& value) {
  
  branchid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_order_field.BranchID)
}
#endif
inline void trade_gateway_order_field::set_branchid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  branchid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_order_field.BranchID)
}
inline void trade_gateway_order_field::set_branchid(const void* value, size_t size) {
  
  branchid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_order_field.BranchID)
}
inline ::std::string* trade_gateway_order_field::mutable_branchid() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_order_field.BranchID)
  return branchid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* trade_gateway_order_field::release_branchid() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_order_field.BranchID)
  
  return branchid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void trade_gateway_order_field::set_allocated_branchid(::std::string* branchid) {
  if (branchid != NULL) {
    
  } else {
    
  }
  branchid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), branchid);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_order_field.BranchID)
}

// string CurrencyID = 47;
inline void trade_gateway_order_field::clear_currencyid() {
  currencyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& trade_gateway_order_field::currencyid() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.CurrencyID)
  return currencyid_.GetNoArena();
}
inline void trade_gateway_order_field::set_currencyid(const ::std::string& value) {
  
  currencyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.CurrencyID)
}
#if LANG_CXX11
inline void trade_gateway_order_field::set_currencyid(::std::string&& value) {
  
  currencyid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_order_field.CurrencyID)
}
#endif
inline void trade_gateway_order_field::set_currencyid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  currencyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_order_field.CurrencyID)
}
inline void trade_gateway_order_field::set_currencyid(const char* value, size_t size) {
  
  currencyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_order_field.CurrencyID)
}
inline ::std::string* trade_gateway_order_field::mutable_currencyid() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_order_field.CurrencyID)
  return currencyid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* trade_gateway_order_field::release_currencyid() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_order_field.CurrencyID)
  
  return currencyid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void trade_gateway_order_field::set_allocated_currencyid(::std::string* currencyid) {
  if (currencyid != NULL) {
    
  } else {
    
  }
  currencyid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), currencyid);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_order_field.CurrencyID)
}

// bytes IPAddress = 48;
inline void trade_gateway_order_field::clear_ipaddress() {
  ipaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& trade_gateway_order_field::ipaddress() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.IPAddress)
  return ipaddress_.GetNoArena();
}
inline void trade_gateway_order_field::set_ipaddress(const ::std::string& value) {
  
  ipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.IPAddress)
}
#if LANG_CXX11
inline void trade_gateway_order_field::set_ipaddress(::std::string&& value) {
  
  ipaddress_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_order_field.IPAddress)
}
#endif
inline void trade_gateway_order_field::set_ipaddress(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_order_field.IPAddress)
}
inline void trade_gateway_order_field::set_ipaddress(const void* value, size_t size) {
  
  ipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_order_field.IPAddress)
}
inline ::std::string* trade_gateway_order_field::mutable_ipaddress() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_order_field.IPAddress)
  return ipaddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* trade_gateway_order_field::release_ipaddress() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_order_field.IPAddress)
  
  return ipaddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void trade_gateway_order_field::set_allocated_ipaddress(::std::string* ipaddress) {
  if (ipaddress != NULL) {
    
  } else {
    
  }
  ipaddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipaddress);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_order_field.IPAddress)
}

// bytes MacAddress = 49;
inline void trade_gateway_order_field::clear_macaddress() {
  macaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& trade_gateway_order_field::macaddress() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.MacAddress)
  return macaddress_.GetNoArena();
}
inline void trade_gateway_order_field::set_macaddress(const ::std::string& value) {
  
  macaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.MacAddress)
}
#if LANG_CXX11
inline void trade_gateway_order_field::set_macaddress(::std::string&& value) {
  
  macaddress_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_order_field.MacAddress)
}
#endif
inline void trade_gateway_order_field::set_macaddress(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  macaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_order_field.MacAddress)
}
inline void trade_gateway_order_field::set_macaddress(const void* value, size_t size) {
  
  macaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_order_field.MacAddress)
}
inline ::std::string* trade_gateway_order_field::mutable_macaddress() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_order_field.MacAddress)
  return macaddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* trade_gateway_order_field::release_macaddress() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_order_field.MacAddress)
  
  return macaddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void trade_gateway_order_field::set_allocated_macaddress(::std::string* macaddress) {
  if (macaddress != NULL) {
    
  } else {
    
  }
  macaddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), macaddress);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_order_field.MacAddress)
}

// -------------------------------------------------------------------

// trade_gateway_sync_account_field

// string BrokerID = 1;
inline void trade_gateway_sync_account_field::clear_brokerid() {
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& trade_gateway_sync_account_field::brokerid() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_sync_account_field.BrokerID)
  return brokerid_.GetNoArena();
}
inline void trade_gateway_sync_account_field::set_brokerid(const ::std::string& value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_sync_account_field.BrokerID)
}
#if LANG_CXX11
inline void trade_gateway_sync_account_field::set_brokerid(::std::string&& value) {
  
  brokerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_sync_account_field.BrokerID)
}
#endif
inline void trade_gateway_sync_account_field::set_brokerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_sync_account_field.BrokerID)
}
inline void trade_gateway_sync_account_field::set_brokerid(const char* value, size_t size) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_sync_account_field.BrokerID)
}
inline ::std::string* trade_gateway_sync_account_field::mutable_brokerid() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_sync_account_field.BrokerID)
  return brokerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* trade_gateway_sync_account_field::release_brokerid() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_sync_account_field.BrokerID)
  
  return brokerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void trade_gateway_sync_account_field::set_allocated_brokerid(::std::string* brokerid) {
  if (brokerid != NULL) {
    
  } else {
    
  }
  brokerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brokerid);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_sync_account_field.BrokerID)
}

// string InvestorID = 2;
inline void trade_gateway_sync_account_field::clear_investorid() {
  investorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& trade_gateway_sync_account_field::investorid() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_sync_account_field.InvestorID)
  return investorid_.GetNoArena();
}
inline void trade_gateway_sync_account_field::set_investorid(const ::std::string& value) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_sync_account_field.InvestorID)
}
#if LANG_CXX11
inline void trade_gateway_sync_account_field::set_investorid(::std::string&& value) {
  
  investorid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_sync_account_field.InvestorID)
}
#endif
inline void trade_gateway_sync_account_field::set_investorid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_sync_account_field.InvestorID)
}
inline void trade_gateway_sync_account_field::set_investorid(const char* value, size_t size) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_sync_account_field.InvestorID)
}
inline ::std::string* trade_gateway_sync_account_field::mutable_investorid() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_sync_account_field.InvestorID)
  return investorid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* trade_gateway_sync_account_field::release_investorid() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_sync_account_field.InvestorID)
  
  return investorid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void trade_gateway_sync_account_field::set_allocated_investorid(::std::string* investorid) {
  if (investorid != NULL) {
    
  } else {
    
  }
  investorid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), investorid);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_sync_account_field.InvestorID)
}

// double Withdraw = 3;
inline void trade_gateway_sync_account_field::clear_withdraw() {
  withdraw_ = 0;
}
inline double trade_gateway_sync_account_field::withdraw() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_sync_account_field.Withdraw)
  return withdraw_;
}
inline void trade_gateway_sync_account_field::set_withdraw(double value) {
  
  withdraw_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_sync_account_field.Withdraw)
}

// double CurrMargin = 4;
inline void trade_gateway_sync_account_field::clear_currmargin() {
  currmargin_ = 0;
}
inline double trade_gateway_sync_account_field::currmargin() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_sync_account_field.CurrMargin)
  return currmargin_;
}
inline void trade_gateway_sync_account_field::set_currmargin(double value) {
  
  currmargin_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_sync_account_field.CurrMargin)
}

// double Commission = 5;
inline void trade_gateway_sync_account_field::clear_commission() {
  commission_ = 0;
}
inline double trade_gateway_sync_account_field::commission() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_sync_account_field.Commission)
  return commission_;
}
inline void trade_gateway_sync_account_field::set_commission(double value) {
  
  commission_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_sync_account_field.Commission)
}

// double CloseProfit = 6;
inline void trade_gateway_sync_account_field::clear_closeprofit() {
  closeprofit_ = 0;
}
inline double trade_gateway_sync_account_field::closeprofit() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_sync_account_field.CloseProfit)
  return closeprofit_;
}
inline void trade_gateway_sync_account_field::set_closeprofit(double value) {
  
  closeprofit_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_sync_account_field.CloseProfit)
}

// double PositionProfit = 7;
inline void trade_gateway_sync_account_field::clear_positionprofit() {
  positionprofit_ = 0;
}
inline double trade_gateway_sync_account_field::positionprofit() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_sync_account_field.PositionProfit)
  return positionprofit_;
}
inline void trade_gateway_sync_account_field::set_positionprofit(double value) {
  
  positionprofit_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_sync_account_field.PositionProfit)
}

// double Balance = 8;
inline void trade_gateway_sync_account_field::clear_balance() {
  balance_ = 0;
}
inline double trade_gateway_sync_account_field::balance() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_sync_account_field.Balance)
  return balance_;
}
inline void trade_gateway_sync_account_field::set_balance(double value) {
  
  balance_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_sync_account_field.Balance)
}

// double Available = 9;
inline void trade_gateway_sync_account_field::clear_available() {
  available_ = 0;
}
inline double trade_gateway_sync_account_field::available() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_sync_account_field.Available)
  return available_;
}
inline void trade_gateway_sync_account_field::set_available(double value) {
  
  available_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_sync_account_field.Available)
}

// double Mortgage = 10;
inline void trade_gateway_sync_account_field::clear_mortgage() {
  mortgage_ = 0;
}
inline double trade_gateway_sync_account_field::mortgage() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_sync_account_field.Mortgage)
  return mortgage_;
}
inline void trade_gateway_sync_account_field::set_mortgage(double value) {
  
  mortgage_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_sync_account_field.Mortgage)
}

// double ExchangeMargin = 11;
inline void trade_gateway_sync_account_field::clear_exchangemargin() {
  exchangemargin_ = 0;
}
inline double trade_gateway_sync_account_field::exchangemargin() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_sync_account_field.ExchangeMargin)
  return exchangemargin_;
}
inline void trade_gateway_sync_account_field::set_exchangemargin(double value) {
  
  exchangemargin_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_sync_account_field.ExchangeMargin)
}

// double WithdrawQuota = 12;
inline void trade_gateway_sync_account_field::clear_withdrawquota() {
  withdrawquota_ = 0;
}
inline double trade_gateway_sync_account_field::withdrawquota() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_sync_account_field.WithdrawQuota)
  return withdrawquota_;
}
inline void trade_gateway_sync_account_field::set_withdrawquota(double value) {
  
  withdrawquota_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_sync_account_field.WithdrawQuota)
}

// double FrozenMargin = 13;
inline void trade_gateway_sync_account_field::clear_frozenmargin() {
  frozenmargin_ = 0;
}
inline double trade_gateway_sync_account_field::frozenmargin() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_sync_account_field.FrozenMargin)
  return frozenmargin_;
}
inline void trade_gateway_sync_account_field::set_frozenmargin(double value) {
  
  frozenmargin_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_sync_account_field.FrozenMargin)
}

// double FrozenCommission = 14;
inline void trade_gateway_sync_account_field::clear_frozencommission() {
  frozencommission_ = 0;
}
inline double trade_gateway_sync_account_field::frozencommission() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_sync_account_field.FrozenCommission)
  return frozencommission_;
}
inline void trade_gateway_sync_account_field::set_frozencommission(double value) {
  
  frozencommission_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_sync_account_field.FrozenCommission)
}

// string CurrencyID = 15;
inline void trade_gateway_sync_account_field::clear_currencyid() {
  currencyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& trade_gateway_sync_account_field::currencyid() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_sync_account_field.CurrencyID)
  return currencyid_.GetNoArena();
}
inline void trade_gateway_sync_account_field::set_currencyid(const ::std::string& value) {
  
  currencyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_sync_account_field.CurrencyID)
}
#if LANG_CXX11
inline void trade_gateway_sync_account_field::set_currencyid(::std::string&& value) {
  
  currencyid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_sync_account_field.CurrencyID)
}
#endif
inline void trade_gateway_sync_account_field::set_currencyid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  currencyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_sync_account_field.CurrencyID)
}
inline void trade_gateway_sync_account_field::set_currencyid(const char* value, size_t size) {
  
  currencyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_sync_account_field.CurrencyID)
}
inline ::std::string* trade_gateway_sync_account_field::mutable_currencyid() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_sync_account_field.CurrencyID)
  return currencyid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* trade_gateway_sync_account_field::release_currencyid() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_sync_account_field.CurrencyID)
  
  return currencyid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void trade_gateway_sync_account_field::set_allocated_currencyid(::std::string* currencyid) {
  if (currencyid != NULL) {
    
  } else {
    
  }
  currencyid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), currencyid);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_sync_account_field.CurrencyID)
}

// double FrozenMarginOnMortgage = 16;
inline void trade_gateway_sync_account_field::clear_frozenmarginonmortgage() {
  frozenmarginonmortgage_ = 0;
}
inline double trade_gateway_sync_account_field::frozenmarginonmortgage() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_sync_account_field.FrozenMarginOnMortgage)
  return frozenmarginonmortgage_;
}
inline void trade_gateway_sync_account_field::set_frozenmarginonmortgage(double value) {
  
  frozenmarginonmortgage_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_sync_account_field.FrozenMarginOnMortgage)
}

// double MarginOnMortgage = 17;
inline void trade_gateway_sync_account_field::clear_marginonmortgage() {
  marginonmortgage_ = 0;
}
inline double trade_gateway_sync_account_field::marginonmortgage() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_sync_account_field.MarginOnMortgage)
  return marginonmortgage_;
}
inline void trade_gateway_sync_account_field::set_marginonmortgage(double value) {
  
  marginonmortgage_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_sync_account_field.MarginOnMortgage)
}

// double ExchMarginOnMortgage = 18;
inline void trade_gateway_sync_account_field::clear_exchmarginonmortgage() {
  exchmarginonmortgage_ = 0;
}
inline double trade_gateway_sync_account_field::exchmarginonmortgage() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_sync_account_field.ExchMarginOnMortgage)
  return exchmarginonmortgage_;
}
inline void trade_gateway_sync_account_field::set_exchmarginonmortgage(double value) {
  
  exchmarginonmortgage_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_sync_account_field.ExchMarginOnMortgage)
}

// double FrozenCommissionOnMortgage = 19;
inline void trade_gateway_sync_account_field::clear_frozencommissiononmortgage() {
  frozencommissiononmortgage_ = 0;
}
inline double trade_gateway_sync_account_field::frozencommissiononmortgage() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_sync_account_field.FrozenCommissionOnMortgage)
  return frozencommissiononmortgage_;
}
inline void trade_gateway_sync_account_field::set_frozencommissiononmortgage(double value) {
  
  frozencommissiononmortgage_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_sync_account_field.FrozenCommissionOnMortgage)
}

// double PositionProfitOnMortgage = 20;
inline void trade_gateway_sync_account_field::clear_positionprofitonmortgage() {
  positionprofitonmortgage_ = 0;
}
inline double trade_gateway_sync_account_field::positionprofitonmortgage() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_sync_account_field.PositionProfitOnMortgage)
  return positionprofitonmortgage_;
}
inline void trade_gateway_sync_account_field::set_positionprofitonmortgage(double value) {
  
  positionprofitonmortgage_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_sync_account_field.PositionProfitOnMortgage)
}

// double CommissionOnMortgage = 21;
inline void trade_gateway_sync_account_field::clear_commissiononmortgage() {
  commissiononmortgage_ = 0;
}
inline double trade_gateway_sync_account_field::commissiononmortgage() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_sync_account_field.CommissionOnMortgage)
  return commissiononmortgage_;
}
inline void trade_gateway_sync_account_field::set_commissiononmortgage(double value) {
  
  commissiononmortgage_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_sync_account_field.CommissionOnMortgage)
}

// double CloseProfitOnMortgage = 22;
inline void trade_gateway_sync_account_field::clear_closeprofitonmortgage() {
  closeprofitonmortgage_ = 0;
}
inline double trade_gateway_sync_account_field::closeprofitonmortgage() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_sync_account_field.CloseProfitOnMortgage)
  return closeprofitonmortgage_;
}
inline void trade_gateway_sync_account_field::set_closeprofitonmortgage(double value) {
  
  closeprofitonmortgage_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_sync_account_field.CloseProfitOnMortgage)
}

// double OptionCloseProfit = 23;
inline void trade_gateway_sync_account_field::clear_optioncloseprofit() {
  optioncloseprofit_ = 0;
}
inline double trade_gateway_sync_account_field::optioncloseprofit() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_sync_account_field.OptionCloseProfit)
  return optioncloseprofit_;
}
inline void trade_gateway_sync_account_field::set_optioncloseprofit(double value) {
  
  optioncloseprofit_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_sync_account_field.OptionCloseProfit)
}

// double OptionValue = 24;
inline void trade_gateway_sync_account_field::clear_optionvalue() {
  optionvalue_ = 0;
}
inline double trade_gateway_sync_account_field::optionvalue() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_sync_account_field.OptionValue)
  return optionvalue_;
}
inline void trade_gateway_sync_account_field::set_optionvalue(double value) {
  
  optionvalue_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_sync_account_field.OptionValue)
}

// double FrozenCash = 25;
inline void trade_gateway_sync_account_field::clear_frozencash() {
  frozencash_ = 0;
}
inline double trade_gateway_sync_account_field::frozencash() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_sync_account_field.FrozenCash)
  return frozencash_;
}
inline void trade_gateway_sync_account_field::set_frozencash(double value) {
  
  frozencash_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_sync_account_field.FrozenCash)
}

// double CashIn = 26;
inline void trade_gateway_sync_account_field::clear_cashin() {
  cashin_ = 0;
}
inline double trade_gateway_sync_account_field::cashin() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_sync_account_field.CashIn)
  return cashin_;
}
inline void trade_gateway_sync_account_field::set_cashin(double value) {
  
  cashin_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_sync_account_field.CashIn)
}

// double Credit = 27;
inline void trade_gateway_sync_account_field::clear_credit() {
  credit_ = 0;
}
inline double trade_gateway_sync_account_field::credit() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_sync_account_field.Credit)
  return credit_;
}
inline void trade_gateway_sync_account_field::set_credit(double value) {
  
  credit_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_sync_account_field.Credit)
}

// -------------------------------------------------------------------

// trade_gateway_position_field

// int32 UniqSequenceNo = 1;
inline void trade_gateway_position_field::clear_uniqsequenceno() {
  uniqsequenceno_ = 0;
}
inline ::google::protobuf::int32 trade_gateway_position_field::uniqsequenceno() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.UniqSequenceNo)
  return uniqsequenceno_;
}
inline void trade_gateway_position_field::set_uniqsequenceno(::google::protobuf::int32 value) {
  
  uniqsequenceno_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.UniqSequenceNo)
}

// string InstrumentID = 2;
inline void trade_gateway_position_field::clear_instrumentid() {
  instrumentid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& trade_gateway_position_field::instrumentid() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.InstrumentID)
  return instrumentid_.GetNoArena();
}
inline void trade_gateway_position_field::set_instrumentid(const ::std::string& value) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.InstrumentID)
}
#if LANG_CXX11
inline void trade_gateway_position_field::set_instrumentid(::std::string&& value) {
  
  instrumentid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_position_field.InstrumentID)
}
#endif
inline void trade_gateway_position_field::set_instrumentid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_position_field.InstrumentID)
}
inline void trade_gateway_position_field::set_instrumentid(const char* value, size_t size) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_position_field.InstrumentID)
}
inline ::std::string* trade_gateway_position_field::mutable_instrumentid() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_position_field.InstrumentID)
  return instrumentid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* trade_gateway_position_field::release_instrumentid() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_position_field.InstrumentID)
  
  return instrumentid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void trade_gateway_position_field::set_allocated_instrumentid(::std::string* instrumentid) {
  if (instrumentid != NULL) {
    
  } else {
    
  }
  instrumentid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrumentid);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_position_field.InstrumentID)
}

// string BrokerID = 3;
inline void trade_gateway_position_field::clear_brokerid() {
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& trade_gateway_position_field::brokerid() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.BrokerID)
  return brokerid_.GetNoArena();
}
inline void trade_gateway_position_field::set_brokerid(const ::std::string& value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.BrokerID)
}
#if LANG_CXX11
inline void trade_gateway_position_field::set_brokerid(::std::string&& value) {
  
  brokerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_position_field.BrokerID)
}
#endif
inline void trade_gateway_position_field::set_brokerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_position_field.BrokerID)
}
inline void trade_gateway_position_field::set_brokerid(const char* value, size_t size) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_position_field.BrokerID)
}
inline ::std::string* trade_gateway_position_field::mutable_brokerid() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_position_field.BrokerID)
  return brokerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* trade_gateway_position_field::release_brokerid() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_position_field.BrokerID)
  
  return brokerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void trade_gateway_position_field::set_allocated_brokerid(::std::string* brokerid) {
  if (brokerid != NULL) {
    
  } else {
    
  }
  brokerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brokerid);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_position_field.BrokerID)
}

// string InvestorID = 4;
inline void trade_gateway_position_field::clear_investorid() {
  investorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& trade_gateway_position_field::investorid() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.InvestorID)
  return investorid_.GetNoArena();
}
inline void trade_gateway_position_field::set_investorid(const ::std::string& value) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.InvestorID)
}
#if LANG_CXX11
inline void trade_gateway_position_field::set_investorid(::std::string&& value) {
  
  investorid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_position_field.InvestorID)
}
#endif
inline void trade_gateway_position_field::set_investorid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_position_field.InvestorID)
}
inline void trade_gateway_position_field::set_investorid(const char* value, size_t size) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_position_field.InvestorID)
}
inline ::std::string* trade_gateway_position_field::mutable_investorid() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_position_field.InvestorID)
  return investorid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* trade_gateway_position_field::release_investorid() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_position_field.InvestorID)
  
  return investorid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void trade_gateway_position_field::set_allocated_investorid(::std::string* investorid) {
  if (investorid != NULL) {
    
  } else {
    
  }
  investorid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), investorid);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_position_field.InvestorID)
}

// int32 PosiDirection = 5;
inline void trade_gateway_position_field::clear_posidirection() {
  posidirection_ = 0;
}
inline ::google::protobuf::int32 trade_gateway_position_field::posidirection() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.PosiDirection)
  return posidirection_;
}
inline void trade_gateway_position_field::set_posidirection(::google::protobuf::int32 value) {
  
  posidirection_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.PosiDirection)
}

// int32 HedgeFlag = 6;
inline void trade_gateway_position_field::clear_hedgeflag() {
  hedgeflag_ = 0;
}
inline ::google::protobuf::int32 trade_gateway_position_field::hedgeflag() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.HedgeFlag)
  return hedgeflag_;
}
inline void trade_gateway_position_field::set_hedgeflag(::google::protobuf::int32 value) {
  
  hedgeflag_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.HedgeFlag)
}

// string PositionDate = 7;
inline void trade_gateway_position_field::clear_positiondate() {
  positiondate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& trade_gateway_position_field::positiondate() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.PositionDate)
  return positiondate_.GetNoArena();
}
inline void trade_gateway_position_field::set_positiondate(const ::std::string& value) {
  
  positiondate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.PositionDate)
}
#if LANG_CXX11
inline void trade_gateway_position_field::set_positiondate(::std::string&& value) {
  
  positiondate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_position_field.PositionDate)
}
#endif
inline void trade_gateway_position_field::set_positiondate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  positiondate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_position_field.PositionDate)
}
inline void trade_gateway_position_field::set_positiondate(const char* value, size_t size) {
  
  positiondate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_position_field.PositionDate)
}
inline ::std::string* trade_gateway_position_field::mutable_positiondate() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_position_field.PositionDate)
  return positiondate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* trade_gateway_position_field::release_positiondate() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_position_field.PositionDate)
  
  return positiondate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void trade_gateway_position_field::set_allocated_positiondate(::std::string* positiondate) {
  if (positiondate != NULL) {
    
  } else {
    
  }
  positiondate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), positiondate);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_position_field.PositionDate)
}

// int32 YdPosition = 8;
inline void trade_gateway_position_field::clear_ydposition() {
  ydposition_ = 0;
}
inline ::google::protobuf::int32 trade_gateway_position_field::ydposition() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.YdPosition)
  return ydposition_;
}
inline void trade_gateway_position_field::set_ydposition(::google::protobuf::int32 value) {
  
  ydposition_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.YdPosition)
}

// int32 Position = 9;
inline void trade_gateway_position_field::clear_position() {
  position_ = 0;
}
inline ::google::protobuf::int32 trade_gateway_position_field::position() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.Position)
  return position_;
}
inline void trade_gateway_position_field::set_position(::google::protobuf::int32 value) {
  
  position_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.Position)
}

// int32 LongFrozen = 10;
inline void trade_gateway_position_field::clear_longfrozen() {
  longfrozen_ = 0;
}
inline ::google::protobuf::int32 trade_gateway_position_field::longfrozen() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.LongFrozen)
  return longfrozen_;
}
inline void trade_gateway_position_field::set_longfrozen(::google::protobuf::int32 value) {
  
  longfrozen_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.LongFrozen)
}

// int32 ShortFrozen = 11;
inline void trade_gateway_position_field::clear_shortfrozen() {
  shortfrozen_ = 0;
}
inline ::google::protobuf::int32 trade_gateway_position_field::shortfrozen() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.ShortFrozen)
  return shortfrozen_;
}
inline void trade_gateway_position_field::set_shortfrozen(::google::protobuf::int32 value) {
  
  shortfrozen_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.ShortFrozen)
}

// double LongFrozenAmount = 12;
inline void trade_gateway_position_field::clear_longfrozenamount() {
  longfrozenamount_ = 0;
}
inline double trade_gateway_position_field::longfrozenamount() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.LongFrozenAmount)
  return longfrozenamount_;
}
inline void trade_gateway_position_field::set_longfrozenamount(double value) {
  
  longfrozenamount_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.LongFrozenAmount)
}

// double ShortFrozenAmount = 13;
inline void trade_gateway_position_field::clear_shortfrozenamount() {
  shortfrozenamount_ = 0;
}
inline double trade_gateway_position_field::shortfrozenamount() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.ShortFrozenAmount)
  return shortfrozenamount_;
}
inline void trade_gateway_position_field::set_shortfrozenamount(double value) {
  
  shortfrozenamount_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.ShortFrozenAmount)
}

// int32 OpenVolume = 14;
inline void trade_gateway_position_field::clear_openvolume() {
  openvolume_ = 0;
}
inline ::google::protobuf::int32 trade_gateway_position_field::openvolume() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.OpenVolume)
  return openvolume_;
}
inline void trade_gateway_position_field::set_openvolume(::google::protobuf::int32 value) {
  
  openvolume_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.OpenVolume)
}

// int32 CloseVolume = 15;
inline void trade_gateway_position_field::clear_closevolume() {
  closevolume_ = 0;
}
inline ::google::protobuf::int32 trade_gateway_position_field::closevolume() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.CloseVolume)
  return closevolume_;
}
inline void trade_gateway_position_field::set_closevolume(::google::protobuf::int32 value) {
  
  closevolume_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.CloseVolume)
}

// double OpenAmount = 16;
inline void trade_gateway_position_field::clear_openamount() {
  openamount_ = 0;
}
inline double trade_gateway_position_field::openamount() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.OpenAmount)
  return openamount_;
}
inline void trade_gateway_position_field::set_openamount(double value) {
  
  openamount_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.OpenAmount)
}

// double CloseAmount = 17;
inline void trade_gateway_position_field::clear_closeamount() {
  closeamount_ = 0;
}
inline double trade_gateway_position_field::closeamount() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.CloseAmount)
  return closeamount_;
}
inline void trade_gateway_position_field::set_closeamount(double value) {
  
  closeamount_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.CloseAmount)
}

// double PositionCost = 18;
inline void trade_gateway_position_field::clear_positioncost() {
  positioncost_ = 0;
}
inline double trade_gateway_position_field::positioncost() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.PositionCost)
  return positioncost_;
}
inline void trade_gateway_position_field::set_positioncost(double value) {
  
  positioncost_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.PositionCost)
}

// double PreMargin = 19;
inline void trade_gateway_position_field::clear_premargin() {
  premargin_ = 0;
}
inline double trade_gateway_position_field::premargin() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.PreMargin)
  return premargin_;
}
inline void trade_gateway_position_field::set_premargin(double value) {
  
  premargin_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.PreMargin)
}

// double UseMargin = 20;
inline void trade_gateway_position_field::clear_usemargin() {
  usemargin_ = 0;
}
inline double trade_gateway_position_field::usemargin() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.UseMargin)
  return usemargin_;
}
inline void trade_gateway_position_field::set_usemargin(double value) {
  
  usemargin_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.UseMargin)
}

// double FrozenMargin = 21;
inline void trade_gateway_position_field::clear_frozenmargin() {
  frozenmargin_ = 0;
}
inline double trade_gateway_position_field::frozenmargin() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.FrozenMargin)
  return frozenmargin_;
}
inline void trade_gateway_position_field::set_frozenmargin(double value) {
  
  frozenmargin_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.FrozenMargin)
}

// double FrozenCash = 22;
inline void trade_gateway_position_field::clear_frozencash() {
  frozencash_ = 0;
}
inline double trade_gateway_position_field::frozencash() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.FrozenCash)
  return frozencash_;
}
inline void trade_gateway_position_field::set_frozencash(double value) {
  
  frozencash_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.FrozenCash)
}

// double FrozenCommission = 23;
inline void trade_gateway_position_field::clear_frozencommission() {
  frozencommission_ = 0;
}
inline double trade_gateway_position_field::frozencommission() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.FrozenCommission)
  return frozencommission_;
}
inline void trade_gateway_position_field::set_frozencommission(double value) {
  
  frozencommission_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.FrozenCommission)
}

// double CashIn = 24;
inline void trade_gateway_position_field::clear_cashin() {
  cashin_ = 0;
}
inline double trade_gateway_position_field::cashin() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.CashIn)
  return cashin_;
}
inline void trade_gateway_position_field::set_cashin(double value) {
  
  cashin_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.CashIn)
}

// double Commission = 25;
inline void trade_gateway_position_field::clear_commission() {
  commission_ = 0;
}
inline double trade_gateway_position_field::commission() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.Commission)
  return commission_;
}
inline void trade_gateway_position_field::set_commission(double value) {
  
  commission_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.Commission)
}

// double CloseProfit = 26;
inline void trade_gateway_position_field::clear_closeprofit() {
  closeprofit_ = 0;
}
inline double trade_gateway_position_field::closeprofit() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.CloseProfit)
  return closeprofit_;
}
inline void trade_gateway_position_field::set_closeprofit(double value) {
  
  closeprofit_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.CloseProfit)
}

// double PositionProfit = 27;
inline void trade_gateway_position_field::clear_positionprofit() {
  positionprofit_ = 0;
}
inline double trade_gateway_position_field::positionprofit() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.PositionProfit)
  return positionprofit_;
}
inline void trade_gateway_position_field::set_positionprofit(double value) {
  
  positionprofit_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.PositionProfit)
}

// double PreSettlementPrice = 28;
inline void trade_gateway_position_field::clear_presettlementprice() {
  presettlementprice_ = 0;
}
inline double trade_gateway_position_field::presettlementprice() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.PreSettlementPrice)
  return presettlementprice_;
}
inline void trade_gateway_position_field::set_presettlementprice(double value) {
  
  presettlementprice_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.PreSettlementPrice)
}

// double SettlementPrice = 29;
inline void trade_gateway_position_field::clear_settlementprice() {
  settlementprice_ = 0;
}
inline double trade_gateway_position_field::settlementprice() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.SettlementPrice)
  return settlementprice_;
}
inline void trade_gateway_position_field::set_settlementprice(double value) {
  
  settlementprice_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.SettlementPrice)
}

// string TradingDay = 30;
inline void trade_gateway_position_field::clear_tradingday() {
  tradingday_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& trade_gateway_position_field::tradingday() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.TradingDay)
  return tradingday_.GetNoArena();
}
inline void trade_gateway_position_field::set_tradingday(const ::std::string& value) {
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.TradingDay)
}
#if LANG_CXX11
inline void trade_gateway_position_field::set_tradingday(::std::string&& value) {
  
  tradingday_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_position_field.TradingDay)
}
#endif
inline void trade_gateway_position_field::set_tradingday(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_position_field.TradingDay)
}
inline void trade_gateway_position_field::set_tradingday(const char* value, size_t size) {
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_position_field.TradingDay)
}
inline ::std::string* trade_gateway_position_field::mutable_tradingday() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_position_field.TradingDay)
  return tradingday_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* trade_gateway_position_field::release_tradingday() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_position_field.TradingDay)
  
  return tradingday_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void trade_gateway_position_field::set_allocated_tradingday(::std::string* tradingday) {
  if (tradingday != NULL) {
    
  } else {
    
  }
  tradingday_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradingday);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_position_field.TradingDay)
}

// int32 SettlementID = 31;
inline void trade_gateway_position_field::clear_settlementid() {
  settlementid_ = 0;
}
inline ::google::protobuf::int32 trade_gateway_position_field::settlementid() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.SettlementID)
  return settlementid_;
}
inline void trade_gateway_position_field::set_settlementid(::google::protobuf::int32 value) {
  
  settlementid_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.SettlementID)
}

// double OpenCost = 32;
inline void trade_gateway_position_field::clear_opencost() {
  opencost_ = 0;
}
inline double trade_gateway_position_field::opencost() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.OpenCost)
  return opencost_;
}
inline void trade_gateway_position_field::set_opencost(double value) {
  
  opencost_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.OpenCost)
}

// double ExchangeMargin = 33;
inline void trade_gateway_position_field::clear_exchangemargin() {
  exchangemargin_ = 0;
}
inline double trade_gateway_position_field::exchangemargin() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.ExchangeMargin)
  return exchangemargin_;
}
inline void trade_gateway_position_field::set_exchangemargin(double value) {
  
  exchangemargin_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.ExchangeMargin)
}

// int32 CombPosition = 34;
inline void trade_gateway_position_field::clear_combposition() {
  combposition_ = 0;
}
inline ::google::protobuf::int32 trade_gateway_position_field::combposition() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.CombPosition)
  return combposition_;
}
inline void trade_gateway_position_field::set_combposition(::google::protobuf::int32 value) {
  
  combposition_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.CombPosition)
}

// int32 CombLongFrozen = 35;
inline void trade_gateway_position_field::clear_comblongfrozen() {
  comblongfrozen_ = 0;
}
inline ::google::protobuf::int32 trade_gateway_position_field::comblongfrozen() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.CombLongFrozen)
  return comblongfrozen_;
}
inline void trade_gateway_position_field::set_comblongfrozen(::google::protobuf::int32 value) {
  
  comblongfrozen_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.CombLongFrozen)
}

// int32 CombShortFrozen = 36;
inline void trade_gateway_position_field::clear_combshortfrozen() {
  combshortfrozen_ = 0;
}
inline ::google::protobuf::int32 trade_gateway_position_field::combshortfrozen() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.CombShortFrozen)
  return combshortfrozen_;
}
inline void trade_gateway_position_field::set_combshortfrozen(::google::protobuf::int32 value) {
  
  combshortfrozen_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.CombShortFrozen)
}

// double CloseProfitByDate = 37;
inline void trade_gateway_position_field::clear_closeprofitbydate() {
  closeprofitbydate_ = 0;
}
inline double trade_gateway_position_field::closeprofitbydate() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.CloseProfitByDate)
  return closeprofitbydate_;
}
inline void trade_gateway_position_field::set_closeprofitbydate(double value) {
  
  closeprofitbydate_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.CloseProfitByDate)
}

// double CloseProfitByTrade = 38;
inline void trade_gateway_position_field::clear_closeprofitbytrade() {
  closeprofitbytrade_ = 0;
}
inline double trade_gateway_position_field::closeprofitbytrade() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.CloseProfitByTrade)
  return closeprofitbytrade_;
}
inline void trade_gateway_position_field::set_closeprofitbytrade(double value) {
  
  closeprofitbytrade_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.CloseProfitByTrade)
}

// int32 TodayPosition = 39;
inline void trade_gateway_position_field::clear_todayposition() {
  todayposition_ = 0;
}
inline ::google::protobuf::int32 trade_gateway_position_field::todayposition() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.TodayPosition)
  return todayposition_;
}
inline void trade_gateway_position_field::set_todayposition(::google::protobuf::int32 value) {
  
  todayposition_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.TodayPosition)
}

// double MarginRateByMoney = 40;
inline void trade_gateway_position_field::clear_marginratebymoney() {
  marginratebymoney_ = 0;
}
inline double trade_gateway_position_field::marginratebymoney() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.MarginRateByMoney)
  return marginratebymoney_;
}
inline void trade_gateway_position_field::set_marginratebymoney(double value) {
  
  marginratebymoney_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.MarginRateByMoney)
}

// double MarginRateByVolume = 41;
inline void trade_gateway_position_field::clear_marginratebyvolume() {
  marginratebyvolume_ = 0;
}
inline double trade_gateway_position_field::marginratebyvolume() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.MarginRateByVolume)
  return marginratebyvolume_;
}
inline void trade_gateway_position_field::set_marginratebyvolume(double value) {
  
  marginratebyvolume_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.MarginRateByVolume)
}

// int32 StrikeFrozen = 42;
inline void trade_gateway_position_field::clear_strikefrozen() {
  strikefrozen_ = 0;
}
inline ::google::protobuf::int32 trade_gateway_position_field::strikefrozen() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.StrikeFrozen)
  return strikefrozen_;
}
inline void trade_gateway_position_field::set_strikefrozen(::google::protobuf::int32 value) {
  
  strikefrozen_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.StrikeFrozen)
}

// double StrikeFrozenAmount = 43;
inline void trade_gateway_position_field::clear_strikefrozenamount() {
  strikefrozenamount_ = 0;
}
inline double trade_gateway_position_field::strikefrozenamount() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.StrikeFrozenAmount)
  return strikefrozenamount_;
}
inline void trade_gateway_position_field::set_strikefrozenamount(double value) {
  
  strikefrozenamount_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.StrikeFrozenAmount)
}

// int32 AbandonFrozen = 44;
inline void trade_gateway_position_field::clear_abandonfrozen() {
  abandonfrozen_ = 0;
}
inline ::google::protobuf::int32 trade_gateway_position_field::abandonfrozen() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.AbandonFrozen)
  return abandonfrozen_;
}
inline void trade_gateway_position_field::set_abandonfrozen(::google::protobuf::int32 value) {
  
  abandonfrozen_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.AbandonFrozen)
}

// double OptionValue = 45;
inline void trade_gateway_position_field::clear_optionvalue() {
  optionvalue_ = 0;
}
inline double trade_gateway_position_field::optionvalue() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.OptionValue)
  return optionvalue_;
}
inline void trade_gateway_position_field::set_optionvalue(double value) {
  
  optionvalue_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.OptionValue)
}

// -------------------------------------------------------------------

// investorID_list

// string RiskUser = 1;
inline void investorID_list::clear_riskuser() {
  riskuser_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& investorID_list::riskuser() const {
  // @@protoc_insertion_point(field_get:risk.investorID_list.RiskUser)
  return riskuser_.GetNoArena();
}
inline void investorID_list::set_riskuser(const ::std::string& value) {
  
  riskuser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.investorID_list.RiskUser)
}
#if LANG_CXX11
inline void investorID_list::set_riskuser(::std::string&& value) {
  
  riskuser_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.investorID_list.RiskUser)
}
#endif
inline void investorID_list::set_riskuser(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  riskuser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.investorID_list.RiskUser)
}
inline void investorID_list::set_riskuser(const char* value, size_t size) {
  
  riskuser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.investorID_list.RiskUser)
}
inline ::std::string* investorID_list::mutable_riskuser() {
  
  // @@protoc_insertion_point(field_mutable:risk.investorID_list.RiskUser)
  return riskuser_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* investorID_list::release_riskuser() {
  // @@protoc_insertion_point(field_release:risk.investorID_list.RiskUser)
  
  return riskuser_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void investorID_list::set_allocated_riskuser(::std::string* riskuser) {
  if (riskuser != NULL) {
    
  } else {
    
  }
  riskuser_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), riskuser);
  // @@protoc_insertion_point(field_set_allocated:risk.investorID_list.RiskUser)
}

// repeated string InvestorIDList = 2;
inline int investorID_list::investoridlist_size() const {
  return investoridlist_.size();
}
inline void investorID_list::clear_investoridlist() {
  investoridlist_.Clear();
}
inline const ::std::string& investorID_list::investoridlist(int index) const {
  // @@protoc_insertion_point(field_get:risk.investorID_list.InvestorIDList)
  return investoridlist_.Get(index);
}
inline ::std::string* investorID_list::mutable_investoridlist(int index) {
  // @@protoc_insertion_point(field_mutable:risk.investorID_list.InvestorIDList)
  return investoridlist_.Mutable(index);
}
inline void investorID_list::set_investoridlist(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:risk.investorID_list.InvestorIDList)
  investoridlist_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void investorID_list::set_investoridlist(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:risk.investorID_list.InvestorIDList)
  investoridlist_.Mutable(index)->assign(std::move(value));
}
#endif
inline void investorID_list::set_investoridlist(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  investoridlist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:risk.investorID_list.InvestorIDList)
}
inline void investorID_list::set_investoridlist(int index, const char* value, size_t size) {
  investoridlist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:risk.investorID_list.InvestorIDList)
}
inline ::std::string* investorID_list::add_investoridlist() {
  // @@protoc_insertion_point(field_add_mutable:risk.investorID_list.InvestorIDList)
  return investoridlist_.Add();
}
inline void investorID_list::add_investoridlist(const ::std::string& value) {
  investoridlist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:risk.investorID_list.InvestorIDList)
}
#if LANG_CXX11
inline void investorID_list::add_investoridlist(::std::string&& value) {
  investoridlist_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:risk.investorID_list.InvestorIDList)
}
#endif
inline void investorID_list::add_investoridlist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  investoridlist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:risk.investorID_list.InvestorIDList)
}
inline void investorID_list::add_investoridlist(const char* value, size_t size) {
  investoridlist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:risk.investorID_list.InvestorIDList)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
investorID_list::investoridlist() const {
  // @@protoc_insertion_point(field_list:risk.investorID_list.InvestorIDList)
  return investoridlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
investorID_list::mutable_investoridlist() {
  // @@protoc_insertion_point(field_mutable_list:risk.investorID_list.InvestorIDList)
  return &investoridlist_;
}

// bool IsLast = 3;
inline void investorID_list::clear_islast() {
  islast_ = false;
}
inline bool investorID_list::islast() const {
  // @@protoc_insertion_point(field_get:risk.investorID_list.IsLast)
  return islast_;
}
inline void investorID_list::set_islast(bool value) {
  
  islast_ = value;
  // @@protoc_insertion_point(field_set:risk.investorID_list.IsLast)
}

// -------------------------------------------------------------------

// req_trade_login

// string riskerid = 1;
inline void req_trade_login::clear_riskerid() {
  riskerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& req_trade_login::riskerid() const {
  // @@protoc_insertion_point(field_get:risk.req_trade_login.riskerid)
  return riskerid_.GetNoArena();
}
inline void req_trade_login::set_riskerid(const ::std::string& value) {
  
  riskerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.req_trade_login.riskerid)
}
#if LANG_CXX11
inline void req_trade_login::set_riskerid(::std::string&& value) {
  
  riskerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.req_trade_login.riskerid)
}
#endif
inline void req_trade_login::set_riskerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  riskerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.req_trade_login.riskerid)
}
inline void req_trade_login::set_riskerid(const char* value, size_t size) {
  
  riskerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.req_trade_login.riskerid)
}
inline ::std::string* req_trade_login::mutable_riskerid() {
  
  // @@protoc_insertion_point(field_mutable:risk.req_trade_login.riskerid)
  return riskerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* req_trade_login::release_riskerid() {
  // @@protoc_insertion_point(field_release:risk.req_trade_login.riskerid)
  
  return riskerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void req_trade_login::set_allocated_riskerid(::std::string* riskerid) {
  if (riskerid != NULL) {
    
  } else {
    
  }
  riskerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), riskerid);
  // @@protoc_insertion_point(field_set_allocated:risk.req_trade_login.riskerid)
}

// string password = 2;
inline void req_trade_login::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& req_trade_login::password() const {
  // @@protoc_insertion_point(field_get:risk.req_trade_login.password)
  return password_.GetNoArena();
}
inline void req_trade_login::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.req_trade_login.password)
}
#if LANG_CXX11
inline void req_trade_login::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.req_trade_login.password)
}
#endif
inline void req_trade_login::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.req_trade_login.password)
}
inline void req_trade_login::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.req_trade_login.password)
}
inline ::std::string* req_trade_login::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:risk.req_trade_login.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* req_trade_login::release_password() {
  // @@protoc_insertion_point(field_release:risk.req_trade_login.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void req_trade_login::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:risk.req_trade_login.password)
}

// -------------------------------------------------------------------

// rsp_trade_login

// int32 max_id = 1;
inline void rsp_trade_login::clear_max_id() {
  max_id_ = 0;
}
inline ::google::protobuf::int32 rsp_trade_login::max_id() const {
  // @@protoc_insertion_point(field_get:risk.rsp_trade_login.max_id)
  return max_id_;
}
inline void rsp_trade_login::set_max_id(::google::protobuf::int32 value) {
  
  max_id_ = value;
  // @@protoc_insertion_point(field_set:risk.rsp_trade_login.max_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace risk

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_trade_5fprotocal_2eproto__INCLUDED
