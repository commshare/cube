// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: monitor_protocal.proto

#ifndef PROTOBUF_monitor_5fprotocal_2eproto__INCLUDED
#define PROTOBUF_monitor_5fprotocal_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace monitor {
class rtn_serverinfo;
class rtn_serverinfoDefaultTypeInternal;
extern rtn_serverinfoDefaultTypeInternal _rtn_serverinfo_default_instance_;
class serverinfo;
class serverinfoDefaultTypeInternal;
extern serverinfoDefaultTypeInternal _serverinfo_default_instance_;
class sub_serverinfo;
class sub_serverinfoDefaultTypeInternal;
extern sub_serverinfoDefaultTypeInternal _sub_serverinfo_default_instance_;
class unsub_serverinfo;
class unsub_serverinfoDefaultTypeInternal;
extern unsub_serverinfoDefaultTypeInternal _unsub_serverinfo_default_instance_;
}  // namespace monitor

namespace monitor {

namespace protobuf_monitor_5fprotocal_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_monitor_5fprotocal_2eproto

// ===================================================================

class sub_serverinfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:monitor.sub_serverinfo) */ {
 public:
  sub_serverinfo();
  virtual ~sub_serverinfo();

  sub_serverinfo(const sub_serverinfo& from);

  inline sub_serverinfo& operator=(const sub_serverinfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  sub_serverinfo(sub_serverinfo&& from) noexcept
    : sub_serverinfo() {
    *this = ::std::move(from);
  }

  inline sub_serverinfo& operator=(sub_serverinfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const sub_serverinfo& default_instance();

  static inline const sub_serverinfo* internal_default_instance() {
    return reinterpret_cast<const sub_serverinfo*>(
               &_sub_serverinfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(sub_serverinfo* other);
  friend void swap(sub_serverinfo& a, sub_serverinfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline sub_serverinfo* New() const PROTOBUF_FINAL { return New(NULL); }

  sub_serverinfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const sub_serverinfo& from);
  void MergeFrom(const sub_serverinfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(sub_serverinfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 requestid = 1;
  void clear_requestid();
  static const int kRequestidFieldNumber = 1;
  ::google::protobuf::int32 requestid() const;
  void set_requestid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:monitor.sub_serverinfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 requestid_;
  mutable int _cached_size_;
  friend struct protobuf_monitor_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class unsub_serverinfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:monitor.unsub_serverinfo) */ {
 public:
  unsub_serverinfo();
  virtual ~unsub_serverinfo();

  unsub_serverinfo(const unsub_serverinfo& from);

  inline unsub_serverinfo& operator=(const unsub_serverinfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  unsub_serverinfo(unsub_serverinfo&& from) noexcept
    : unsub_serverinfo() {
    *this = ::std::move(from);
  }

  inline unsub_serverinfo& operator=(unsub_serverinfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const unsub_serverinfo& default_instance();

  static inline const unsub_serverinfo* internal_default_instance() {
    return reinterpret_cast<const unsub_serverinfo*>(
               &_unsub_serverinfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(unsub_serverinfo* other);
  friend void swap(unsub_serverinfo& a, unsub_serverinfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline unsub_serverinfo* New() const PROTOBUF_FINAL { return New(NULL); }

  unsub_serverinfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const unsub_serverinfo& from);
  void MergeFrom(const unsub_serverinfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(unsub_serverinfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 requestid = 1;
  void clear_requestid();
  static const int kRequestidFieldNumber = 1;
  ::google::protobuf::int32 requestid() const;
  void set_requestid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:monitor.unsub_serverinfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 requestid_;
  mutable int _cached_size_;
  friend struct protobuf_monitor_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class serverinfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:monitor.serverinfo) */ {
 public:
  serverinfo();
  virtual ~serverinfo();

  serverinfo(const serverinfo& from);

  inline serverinfo& operator=(const serverinfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  serverinfo(serverinfo&& from) noexcept
    : serverinfo() {
    *this = ::std::move(from);
  }

  inline serverinfo& operator=(serverinfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const serverinfo& default_instance();

  static inline const serverinfo* internal_default_instance() {
    return reinterpret_cast<const serverinfo*>(
               &_serverinfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(serverinfo* other);
  friend void swap(serverinfo& a, serverinfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline serverinfo* New() const PROTOBUF_FINAL { return New(NULL); }

  serverinfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const serverinfo& from);
  void MergeFrom(const serverinfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(serverinfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 serverid = 1;
  void clear_serverid();
  static const int kServeridFieldNumber = 1;
  ::google::protobuf::int32 serverid() const;
  void set_serverid(::google::protobuf::int32 value);

  // int32 count = 2;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:monitor.serverinfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 serverid_;
  ::google::protobuf::int32 count_;
  mutable int _cached_size_;
  friend struct protobuf_monitor_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rtn_serverinfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:monitor.rtn_serverinfo) */ {
 public:
  rtn_serverinfo();
  virtual ~rtn_serverinfo();

  rtn_serverinfo(const rtn_serverinfo& from);

  inline rtn_serverinfo& operator=(const rtn_serverinfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rtn_serverinfo(rtn_serverinfo&& from) noexcept
    : rtn_serverinfo() {
    *this = ::std::move(from);
  }

  inline rtn_serverinfo& operator=(rtn_serverinfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rtn_serverinfo& default_instance();

  static inline const rtn_serverinfo* internal_default_instance() {
    return reinterpret_cast<const rtn_serverinfo*>(
               &_rtn_serverinfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(rtn_serverinfo* other);
  friend void swap(rtn_serverinfo& a, rtn_serverinfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rtn_serverinfo* New() const PROTOBUF_FINAL { return New(NULL); }

  rtn_serverinfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rtn_serverinfo& from);
  void MergeFrom(const rtn_serverinfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rtn_serverinfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .monitor.serverinfo field = 1;
  int field_size() const;
  void clear_field();
  static const int kFieldFieldNumber = 1;
  const ::monitor::serverinfo& field(int index) const;
  ::monitor::serverinfo* mutable_field(int index);
  ::monitor::serverinfo* add_field();
  ::google::protobuf::RepeatedPtrField< ::monitor::serverinfo >*
      mutable_field();
  const ::google::protobuf::RepeatedPtrField< ::monitor::serverinfo >&
      field() const;

  // @@protoc_insertion_point(class_scope:monitor.rtn_serverinfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::monitor::serverinfo > field_;
  mutable int _cached_size_;
  friend struct protobuf_monitor_5fprotocal_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// sub_serverinfo

// int32 requestid = 1;
inline void sub_serverinfo::clear_requestid() {
  requestid_ = 0;
}
inline ::google::protobuf::int32 sub_serverinfo::requestid() const {
  // @@protoc_insertion_point(field_get:monitor.sub_serverinfo.requestid)
  return requestid_;
}
inline void sub_serverinfo::set_requestid(::google::protobuf::int32 value) {
  
  requestid_ = value;
  // @@protoc_insertion_point(field_set:monitor.sub_serverinfo.requestid)
}

// -------------------------------------------------------------------

// unsub_serverinfo

// int32 requestid = 1;
inline void unsub_serverinfo::clear_requestid() {
  requestid_ = 0;
}
inline ::google::protobuf::int32 unsub_serverinfo::requestid() const {
  // @@protoc_insertion_point(field_get:monitor.unsub_serverinfo.requestid)
  return requestid_;
}
inline void unsub_serverinfo::set_requestid(::google::protobuf::int32 value) {
  
  requestid_ = value;
  // @@protoc_insertion_point(field_set:monitor.unsub_serverinfo.requestid)
}

// -------------------------------------------------------------------

// serverinfo

// int32 serverid = 1;
inline void serverinfo::clear_serverid() {
  serverid_ = 0;
}
inline ::google::protobuf::int32 serverinfo::serverid() const {
  // @@protoc_insertion_point(field_get:monitor.serverinfo.serverid)
  return serverid_;
}
inline void serverinfo::set_serverid(::google::protobuf::int32 value) {
  
  serverid_ = value;
  // @@protoc_insertion_point(field_set:monitor.serverinfo.serverid)
}

// int32 count = 2;
inline void serverinfo::clear_count() {
  count_ = 0;
}
inline ::google::protobuf::int32 serverinfo::count() const {
  // @@protoc_insertion_point(field_get:monitor.serverinfo.count)
  return count_;
}
inline void serverinfo::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:monitor.serverinfo.count)
}

// -------------------------------------------------------------------

// rtn_serverinfo

// repeated .monitor.serverinfo field = 1;
inline int rtn_serverinfo::field_size() const {
  return field_.size();
}
inline void rtn_serverinfo::clear_field() {
  field_.Clear();
}
inline const ::monitor::serverinfo& rtn_serverinfo::field(int index) const {
  // @@protoc_insertion_point(field_get:monitor.rtn_serverinfo.field)
  return field_.Get(index);
}
inline ::monitor::serverinfo* rtn_serverinfo::mutable_field(int index) {
  // @@protoc_insertion_point(field_mutable:monitor.rtn_serverinfo.field)
  return field_.Mutable(index);
}
inline ::monitor::serverinfo* rtn_serverinfo::add_field() {
  // @@protoc_insertion_point(field_add:monitor.rtn_serverinfo.field)
  return field_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::monitor::serverinfo >*
rtn_serverinfo::mutable_field() {
  // @@protoc_insertion_point(field_mutable_list:monitor.rtn_serverinfo.field)
  return &field_;
}
inline const ::google::protobuf::RepeatedPtrField< ::monitor::serverinfo >&
rtn_serverinfo::field() const {
  // @@protoc_insertion_point(field_list:monitor.rtn_serverinfo.field)
  return field_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace monitor

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_monitor_5fprotocal_2eproto__INCLUDED
