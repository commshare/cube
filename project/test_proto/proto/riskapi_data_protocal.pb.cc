// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: riskapi_data_protocal.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "riskapi_data_protocal.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace risk {
class error_infoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<error_info>
     _instance;
} _error_info_default_instance_;
class rsp_head_infoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<rsp_head_info>
     _instance;
} _rsp_head_info_default_instance_;
class rsp_risker_loginDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<rsp_risker_login>
     _instance;
} _rsp_risker_login_default_instance_;
class rsp_investor_listDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<rsp_investor_list>
     _instance;
} _rsp_investor_list_default_instance_;
class instrument_infoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<instrument_info>
     _instance;
} _instrument_info_default_instance_;
class rsp_instrument_fieldDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<rsp_instrument_field>
     _instance;
} _rsp_instrument_field_default_instance_;
class rtn_quote_fieldDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<rtn_quote_field>
     _instance;
} _rtn_quote_field_default_instance_;
class rsp_position_fieldDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<rsp_position_field>
     _instance;
} _rsp_position_field_default_instance_;
class rtn_position_fieldDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<rtn_position_field>
     _instance;
} _rtn_position_field_default_instance_;
class rsp_trade_fieldDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<rsp_trade_field>
     _instance;
} _rsp_trade_field_default_instance_;
class rsp_order_fieldDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<rsp_order_field>
     _instance;
} _rsp_order_field_default_instance_;
class rtn_trade_fieldDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<rtn_trade_field>
     _instance;
} _rtn_trade_field_default_instance_;
class rtn_order_fieldDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<rtn_order_field>
     _instance;
} _rtn_order_field_default_instance_;
class rsp_sync_account_fieldDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<rsp_sync_account_field>
     _instance;
} _rsp_sync_account_field_default_instance_;
class rtn_sync_account_fieldDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<rtn_sync_account_field>
     _instance;
} _rtn_sync_account_field_default_instance_;
class shfe_margin_fieldDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<shfe_margin_field>
     _instance;
} _shfe_margin_field_default_instance_;
class cffex_margin_fieldDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<cffex_margin_field>
     _instance;
} _cffex_margin_field_default_instance_;
class dce_margin_fieldDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<dce_margin_field>
     _instance;
} _dce_margin_field_default_instance_;
class czce_margin_fieldDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<czce_margin_field>
     _instance;
} _czce_margin_field_default_instance_;
class ine_margin_fieldDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ine_margin_field>
     _instance;
} _ine_margin_field_default_instance_;
class delivery_margin_fieldDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<delivery_margin_field>
     _instance;
} _delivery_margin_field_default_instance_;
class rtn_margin_fieldDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<rtn_margin_field>
     _instance;
} _rtn_margin_field_default_instance_;
class rsp_margin_fieldDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<rsp_margin_field>
     _instance;
} _rsp_margin_field_default_instance_;
class rsp_risker_investorDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<rsp_risker_investor>
     _instance;
} _rsp_risker_investor_default_instance_;
class rsp_groupsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<rsp_groups>
     _instance;
} _rsp_groups_default_instance_;
class rsp_action_infoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<rsp_action_info>
     _instance;
} _rsp_action_info_default_instance_;
class rtn_change_riskerDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<rtn_change_risker>
     _instance;
} _rtn_change_risker_default_instance_;

namespace protobuf_riskapi_5fdata_5fprotocal_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[27];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(error_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(error_info, errorid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(error_info, errormsg_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_head_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_head_info, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_head_info, info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_head_info, islast_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_risker_login, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_risker_login, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_risker_login, info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_investor_list, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_investor_list, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_investor_list, investorid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instrument_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instrument_info, instrumentid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instrument_info, exchangeid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instrument_info, instrumentname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instrument_info, exchangeinstid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instrument_info, productid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instrument_info, productclass_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instrument_info, deliveryyear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instrument_info, deliverymonth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instrument_info, maxmarketordervolume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instrument_info, minmarketordervolume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instrument_info, maxlimitordervolume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instrument_info, minlimitordervolume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instrument_info, volumemultiple_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instrument_info, pricetick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instrument_info, createdate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instrument_info, opendate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instrument_info, expiredate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instrument_info, startdelivdate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instrument_info, enddelivdate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instrument_info, instlifephase_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instrument_info, istrading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instrument_info, positiontype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instrument_info, positiondatetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instrument_info, longmarginratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instrument_info, shortmarginratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instrument_info, maxmarginsidealgorithm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instrument_info, underlyinginstrid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instrument_info, strikeprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instrument_info, optionstype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instrument_info, underlyingmultiple_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instrument_info, combinationtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instrument_info, productgroupid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_instrument_field, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_instrument_field, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_instrument_field, field_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rtn_quote_field, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rtn_quote_field, field_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_position_field, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_position_field, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_position_field, field_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_position_field, trypositionprofit_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rtn_position_field, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rtn_position_field, field_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rtn_position_field, trypositionprofit_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_trade_field, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_trade_field, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_trade_field, field_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_order_field, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_order_field, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_order_field, field_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rtn_trade_field, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rtn_trade_field, field_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rtn_order_field, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rtn_order_field, field_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_sync_account_field, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_sync_account_field, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_sync_account_field, field_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rtn_sync_account_field, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rtn_sync_account_field, field_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shfe_margin_field, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shfe_margin_field, pre_favorable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shfe_margin_field, big_side_favorable_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cffex_margin_field, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cffex_margin_field, pre_favorable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cffex_margin_field, speculation_favorable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cffex_margin_field, hedging_favorable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cffex_margin_field, arbitrage_favorable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cffex_margin_field, market_favorable_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dce_margin_field, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dce_margin_field, pre_favorable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dce_margin_field, sp_favorable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dce_margin_field, spc_favorable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dce_margin_field, locked_favorable_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(czce_margin_field, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(czce_margin_field, pre_favorable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(czce_margin_field, spd_favorable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(czce_margin_field, ips_favorable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(czce_margin_field, prt_favorable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(czce_margin_field, std_favorable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(czce_margin_field, stg_favorable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(czce_margin_field, zprt_favorable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(czce_margin_field, locked_favorable_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ine_margin_field, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ine_margin_field, pre_favorable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ine_margin_field, big_side_favorable_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(delivery_margin_field, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(delivery_margin_field, shfe_margin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(delivery_margin_field, cffex_margin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(delivery_margin_field, dce_margin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(delivery_margin_field, czce_margin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(delivery_margin_field, ine_margin_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rtn_margin_field, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rtn_margin_field, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rtn_margin_field, investor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rtn_margin_field, shfe_margin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rtn_margin_field, cffex_margin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rtn_margin_field, dce_margin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rtn_margin_field, czce_margin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rtn_margin_field, ine_margin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rtn_margin_field, delivery_margin_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_margin_field, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_margin_field, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_margin_field, field_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_risker_investor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_risker_investor, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_risker_investor, riskgroupid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_risker_investor, investorid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_groups, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_groups, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_groups, infos_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_action_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_action_info, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_action_info, info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rtn_change_risker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rtn_change_risker, operatorid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rtn_change_risker, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rtn_change_risker, riskgroupid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rtn_change_risker, investor_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(error_info)},
  { 7, -1, sizeof(rsp_head_info)},
  { 15, -1, sizeof(rsp_risker_login)},
  { 22, -1, sizeof(rsp_investor_list)},
  { 29, -1, sizeof(instrument_info)},
  { 66, -1, sizeof(rsp_instrument_field)},
  { 73, -1, sizeof(rtn_quote_field)},
  { 79, -1, sizeof(rsp_position_field)},
  { 87, -1, sizeof(rtn_position_field)},
  { 94, -1, sizeof(rsp_trade_field)},
  { 101, -1, sizeof(rsp_order_field)},
  { 108, -1, sizeof(rtn_trade_field)},
  { 114, -1, sizeof(rtn_order_field)},
  { 120, -1, sizeof(rsp_sync_account_field)},
  { 127, -1, sizeof(rtn_sync_account_field)},
  { 133, -1, sizeof(shfe_margin_field)},
  { 140, -1, sizeof(cffex_margin_field)},
  { 150, -1, sizeof(dce_margin_field)},
  { 159, -1, sizeof(czce_margin_field)},
  { 172, -1, sizeof(ine_margin_field)},
  { 179, -1, sizeof(delivery_margin_field)},
  { 189, -1, sizeof(rtn_margin_field)},
  { 202, -1, sizeof(rsp_margin_field)},
  { 209, -1, sizeof(rsp_risker_investor)},
  { 217, -1, sizeof(rsp_groups)},
  { 224, -1, sizeof(rsp_action_info)},
  { 231, -1, sizeof(rtn_change_risker)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_error_info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_rsp_head_info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_rsp_risker_login_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_rsp_investor_list_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_instrument_info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_rsp_instrument_field_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_rtn_quote_field_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_rsp_position_field_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_rtn_position_field_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_rsp_trade_field_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_rsp_order_field_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_rtn_trade_field_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_rtn_order_field_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_rsp_sync_account_field_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_rtn_sync_account_field_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_shfe_margin_field_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_cffex_margin_field_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_dce_margin_field_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_czce_margin_field_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ine_margin_field_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_delivery_margin_field_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_rtn_margin_field_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_rsp_margin_field_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_rsp_risker_investor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_rsp_groups_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_rsp_action_info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_rtn_change_risker_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "riskapi_data_protocal.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 27);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::risk::protobuf_trade_5fprotocal_2eproto::InitDefaults();
  ::risk::protobuf_quote_5fprotocal_2eproto::InitDefaults();
  ::risk::protobuf_riskapi_5faction_5fprotocal_2eproto::InitDefaults();
  _error_info_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_error_info_default_instance_);_rsp_head_info_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_rsp_head_info_default_instance_);_rsp_risker_login_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_rsp_risker_login_default_instance_);_rsp_investor_list_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_rsp_investor_list_default_instance_);_instrument_info_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_instrument_info_default_instance_);_rsp_instrument_field_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_rsp_instrument_field_default_instance_);_rtn_quote_field_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_rtn_quote_field_default_instance_);_rsp_position_field_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_rsp_position_field_default_instance_);_rtn_position_field_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_rtn_position_field_default_instance_);_rsp_trade_field_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_rsp_trade_field_default_instance_);_rsp_order_field_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_rsp_order_field_default_instance_);_rtn_trade_field_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_rtn_trade_field_default_instance_);_rtn_order_field_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_rtn_order_field_default_instance_);_rsp_sync_account_field_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_rsp_sync_account_field_default_instance_);_rtn_sync_account_field_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_rtn_sync_account_field_default_instance_);_shfe_margin_field_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_shfe_margin_field_default_instance_);_cffex_margin_field_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_cffex_margin_field_default_instance_);_dce_margin_field_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_dce_margin_field_default_instance_);_czce_margin_field_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_czce_margin_field_default_instance_);_ine_margin_field_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ine_margin_field_default_instance_);_delivery_margin_field_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_delivery_margin_field_default_instance_);_rtn_margin_field_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_rtn_margin_field_default_instance_);_rsp_margin_field_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_rsp_margin_field_default_instance_);_rsp_risker_investor_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_rsp_risker_investor_default_instance_);_rsp_groups_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_rsp_groups_default_instance_);_rsp_action_info_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_rsp_action_info_default_instance_);_rtn_change_risker_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_rtn_change_risker_default_instance_);_rsp_head_info_default_instance_._instance.get_mutable()->info_ = const_cast< ::risk::error_info*>(
      ::risk::error_info::internal_default_instance());
  _rsp_risker_login_default_instance_._instance.get_mutable()->info_ = const_cast< ::risk::error_info*>(
      ::risk::error_info::internal_default_instance());
  _rsp_investor_list_default_instance_._instance.get_mutable()->header_ = const_cast< ::risk::rsp_head_info*>(
      ::risk::rsp_head_info::internal_default_instance());
  _rsp_instrument_field_default_instance_._instance.get_mutable()->header_ = const_cast< ::risk::rsp_head_info*>(
      ::risk::rsp_head_info::internal_default_instance());
  _rsp_instrument_field_default_instance_._instance.get_mutable()->field_ = const_cast< ::risk::instrument_info*>(
      ::risk::instrument_info::internal_default_instance());
  _rtn_quote_field_default_instance_._instance.get_mutable()->field_ = const_cast< ::risk::quote_gateway_market_field*>(
      ::risk::quote_gateway_market_field::internal_default_instance());
  _rsp_position_field_default_instance_._instance.get_mutable()->header_ = const_cast< ::risk::rsp_head_info*>(
      ::risk::rsp_head_info::internal_default_instance());
  _rsp_position_field_default_instance_._instance.get_mutable()->field_ = const_cast< ::risk::trade_gateway_position_field*>(
      ::risk::trade_gateway_position_field::internal_default_instance());
  _rtn_position_field_default_instance_._instance.get_mutable()->field_ = const_cast< ::risk::trade_gateway_position_field*>(
      ::risk::trade_gateway_position_field::internal_default_instance());
  _rsp_trade_field_default_instance_._instance.get_mutable()->header_ = const_cast< ::risk::rsp_head_info*>(
      ::risk::rsp_head_info::internal_default_instance());
  _rsp_trade_field_default_instance_._instance.get_mutable()->field_ = const_cast< ::risk::trade_gateway_trade_field*>(
      ::risk::trade_gateway_trade_field::internal_default_instance());
  _rsp_order_field_default_instance_._instance.get_mutable()->header_ = const_cast< ::risk::rsp_head_info*>(
      ::risk::rsp_head_info::internal_default_instance());
  _rsp_order_field_default_instance_._instance.get_mutable()->field_ = const_cast< ::risk::trade_gateway_order_field*>(
      ::risk::trade_gateway_order_field::internal_default_instance());
  _rtn_trade_field_default_instance_._instance.get_mutable()->field_ = const_cast< ::risk::trade_gateway_trade_field*>(
      ::risk::trade_gateway_trade_field::internal_default_instance());
  _rtn_order_field_default_instance_._instance.get_mutable()->field_ = const_cast< ::risk::trade_gateway_order_field*>(
      ::risk::trade_gateway_order_field::internal_default_instance());
  _rsp_sync_account_field_default_instance_._instance.get_mutable()->header_ = const_cast< ::risk::rsp_head_info*>(
      ::risk::rsp_head_info::internal_default_instance());
  _rsp_sync_account_field_default_instance_._instance.get_mutable()->field_ = const_cast< ::risk::trade_gateway_sync_account_field*>(
      ::risk::trade_gateway_sync_account_field::internal_default_instance());
  _rtn_sync_account_field_default_instance_._instance.get_mutable()->field_ = const_cast< ::risk::trade_gateway_sync_account_field*>(
      ::risk::trade_gateway_sync_account_field::internal_default_instance());
  _rtn_margin_field_default_instance_._instance.get_mutable()->shfe_margin_ = const_cast< ::risk::shfe_margin_field*>(
      ::risk::shfe_margin_field::internal_default_instance());
  _rtn_margin_field_default_instance_._instance.get_mutable()->cffex_margin_ = const_cast< ::risk::cffex_margin_field*>(
      ::risk::cffex_margin_field::internal_default_instance());
  _rtn_margin_field_default_instance_._instance.get_mutable()->dce_margin_ = const_cast< ::risk::dce_margin_field*>(
      ::risk::dce_margin_field::internal_default_instance());
  _rtn_margin_field_default_instance_._instance.get_mutable()->czce_margin_ = const_cast< ::risk::czce_margin_field*>(
      ::risk::czce_margin_field::internal_default_instance());
  _rtn_margin_field_default_instance_._instance.get_mutable()->ine_margin_ = const_cast< ::risk::ine_margin_field*>(
      ::risk::ine_margin_field::internal_default_instance());
  _rtn_margin_field_default_instance_._instance.get_mutable()->delivery_margin_ = const_cast< ::risk::delivery_margin_field*>(
      ::risk::delivery_margin_field::internal_default_instance());
  _rsp_margin_field_default_instance_._instance.get_mutable()->header_ = const_cast< ::risk::rsp_head_info*>(
      ::risk::rsp_head_info::internal_default_instance());
  _rsp_margin_field_default_instance_._instance.get_mutable()->field_ = const_cast< ::risk::rtn_margin_field*>(
      ::risk::rtn_margin_field::internal_default_instance());
  _rsp_risker_investor_default_instance_._instance.get_mutable()->header_ = const_cast< ::risk::rsp_head_info*>(
      ::risk::rsp_head_info::internal_default_instance());
  _rsp_groups_default_instance_._instance.get_mutable()->header_ = const_cast< ::risk::rsp_head_info*>(
      ::risk::rsp_head_info::internal_default_instance());
  _rsp_action_info_default_instance_._instance.get_mutable()->info_ = const_cast< ::risk::error_info*>(
      ::risk::error_info::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\033riskapi_data_protocal.proto\022\004risk\032\024tra"
      "de_protocal.proto\032\024quote_protocal.proto\032"
      "\035riskapi_action_protocal.proto\"/\n\nerror_"
      "info\022\017\n\007errorid\030\001 \001(\021\022\020\n\010errormsg\030\002 \001(\t\""
      "R\n\rrsp_head_info\022\021\n\trequestid\030\001 \001(\005\022\036\n\004i"
      "nfo\030\002 \001(\0132\020.risk.error_info\022\016\n\006islast\030\003 "
      "\001(\010\"E\n\020rsp_risker_login\022\021\n\trequestid\030\001 \001"
      "(\005\022\036\n\004info\030\002 \001(\0132\020.risk.error_info\"L\n\021rs"
      "p_investor_list\022#\n\006header\030\001 \001(\0132\023.risk.r"
      "sp_head_info\022\022\n\ninvestorid\030\002 \001(\t\"\211\006\n\017ins"
      "trument_info\022\024\n\014instrumentid\030\001 \001(\t\022\022\n\nex"
      "changeid\030\002 \001(\t\022\026\n\016instrumentname\030\003 \001(\t\022\026"
      "\n\016exchangeinstid\030\004 \001(\t\022\021\n\tproductid\030\005 \001("
      "\t\022\024\n\014productclass\030\006 \001(\t\022\024\n\014deliveryyear\030"
      "\007 \001(\005\022\025\n\rdeliverymonth\030\010 \001(\005\022\034\n\024maxmarke"
      "tordervolume\030\t \001(\005\022\034\n\024minmarketordervolu"
      "me\030\n \001(\005\022\033\n\023maxlimitordervolume\030\013 \001(\005\022\033\n"
      "\023minlimitordervolume\030\014 \001(\005\022\026\n\016volumemult"
      "iple\030\r \001(\005\022\021\n\tpricetick\030\016 \001(\001\022\022\n\ncreated"
      "ate\030\017 \001(\t\022\020\n\010opendate\030\020 \001(\t\022\022\n\nexpiredat"
      "e\030\021 \001(\t\022\026\n\016startdelivdate\030\022 \001(\t\022\024\n\014endde"
      "livdate\030\023 \001(\t\022\025\n\rinstlifephase\030\024 \001(\t\022\021\n\t"
      "istrading\030\025 \001(\005\022\024\n\014positiontype\030\026 \001(\t\022\030\n"
      "\020positiondatetype\030\027 \001(\t\022\027\n\017longmarginrat"
      "io\030\030 \001(\001\022\030\n\020shortmarginratio\030\031 \001(\001\022\036\n\026ma"
      "xmarginsidealgorithm\030\032 \001(\t\022\031\n\021underlying"
      "instrid\030\033 \001(\t\022\023\n\013strikeprice\030\034 \001(\001\022\023\n\013op"
      "tionstype\030\035 \001(\t\022\032\n\022underlyingmultiple\030\036 "
      "\001(\001\022\027\n\017combinationtype\030\037 \001(\t\022\026\n\016productg"
      "roupid\030  \001(\t\"a\n\024rsp_instrument_field\022#\n\006"
      "header\030\001 \001(\0132\023.risk.rsp_head_info\022$\n\005fie"
      "ld\030\002 \001(\0132\025.risk.instrument_info\"B\n\017rtn_q"
      "uote_field\022/\n\005field\030\001 \001(\0132 .risk.quote_g"
      "ateway_market_field\"\207\001\n\022rsp_position_fie"
      "ld\022#\n\006header\030\001 \001(\0132\023.risk.rsp_head_info\022"
      "1\n\005field\030\002 \001(\0132\".risk.trade_gateway_posi"
      "tion_field\022\031\n\021trypositionprofit\030\003 \001(\001\"b\n"
      "\022rtn_position_field\0221\n\005field\030\001 \001(\0132\".ris"
      "k.trade_gateway_position_field\022\031\n\021trypos"
      "itionprofit\030\002 \001(\001\"f\n\017rsp_trade_field\022#\n\006"
      "header\030\001 \001(\0132\023.risk.rsp_head_info\022.\n\005fie"
      "ld\030\002 \001(\0132\037.risk.trade_gateway_trade_fiel"
      "d\"f\n\017rsp_order_field\022#\n\006header\030\001 \001(\0132\023.r"
      "isk.rsp_head_info\022.\n\005field\030\002 \001(\0132\037.risk."
      "trade_gateway_order_field\"A\n\017rtn_trade_f"
      "ield\022.\n\005field\030\001 \001(\0132\037.risk.trade_gateway"
      "_trade_field\"A\n\017rtn_order_field\022.\n\005field"
      "\030\001 \001(\0132\037.risk.trade_gateway_order_field\""
      "t\n\026rsp_sync_account_field\022#\n\006header\030\001 \001("
      "\0132\023.risk.rsp_head_info\0225\n\005field\030\002 \001(\0132&."
      "risk.trade_gateway_sync_account_field\"O\n"
      "\026rtn_sync_account_field\0225\n\005field\030\001 \001(\0132&"
      ".risk.trade_gateway_sync_account_field\"F"
      "\n\021shfe_margin_field\022\025\n\rpre_favorable\030\001 \001"
      "(\001\022\032\n\022big_side_favorable\030\002 \001(\001\"\234\001\n\022cffex"
      "_margin_field\022\025\n\rpre_favorable\030\001 \001(\001\022\035\n\025"
      "speculation_favorable\030\002 \001(\001\022\031\n\021hedging_f"
      "avorable\030\003 \001(\001\022\033\n\023arbitrage_favorable\030\004 "
      "\001(\001\022\030\n\020market_favorable\030\005 \001(\001\"p\n\020dce_mar"
      "gin_field\022\025\n\rpre_favorable\030\001 \001(\001\022\024\n\014sp_f"
      "avorable\030\002 \001(\001\022\025\n\rspc_favorable\030\003 \001(\001\022\030\n"
      "\020locked_favorable\030\004 \001(\001\"\317\001\n\021czce_margin_"
      "field\022\025\n\rpre_favorable\030\001 \001(\001\022\025\n\rspd_favo"
      "rable\030\002 \001(\001\022\025\n\rips_favorable\030\003 \001(\001\022\025\n\rpr"
      "t_favorable\030\004 \001(\001\022\025\n\rstd_favorable\030\005 \001(\001"
      "\022\025\n\rstg_favorable\030\006 \001(\001\022\026\n\016zprt_favorabl"
      "e\030\007 \001(\001\022\030\n\020locked_favorable\030\010 \001(\001\"E\n\020ine"
      "_margin_field\022\025\n\rpre_favorable\030\001 \001(\001\022\032\n\022"
      "big_side_favorable\030\002 \001(\001\"\177\n\025delivery_mar"
      "gin_field\022\023\n\013shfe_margin\030\001 \001(\001\022\024\n\014cffex_"
      "margin\030\002 \001(\001\022\022\n\ndce_margin\030\003 \001(\001\022\023\n\013czce"
      "_margin\030\004 \001(\001\022\022\n\nine_margin\030\005 \001(\001\"\321\002\n\020rt"
      "n_margin_field\022\021\n\ttimestamp\030\001 \001(\r\022\020\n\010inv"
      "estor\030\002 \001(\t\022,\n\013shfe_margin\030\003 \001(\0132\027.risk."
      "shfe_margin_field\022.\n\014cffex_margin\030\004 \001(\0132"
      "\030.risk.cffex_margin_field\022*\n\ndce_margin\030"
      "\005 \001(\0132\026.risk.dce_margin_field\022,\n\013czce_ma"
      "rgin\030\006 \001(\0132\027.risk.czce_margin_field\022*\n\ni"
      "ne_margin\030\007 \001(\0132\026.risk.ine_margin_field\022"
      "4\n\017delivery_margin\030\010 \001(\0132\033.risk.delivery"
      "_margin_field\"^\n\020rsp_margin_field\022#\n\006hea"
      "der\030\001 \001(\0132\023.risk.rsp_head_info\022%\n\005field\030"
      "\002 \001(\0132\026.risk.rtn_margin_field\"c\n\023rsp_ris"
      "ker_investor\022#\n\006header\030\001 \001(\0132\023.risk.rsp_"
      "head_info\022\023\n\013riskgroupid\030\002 \001(\005\022\022\n\ninvest"
      "orid\030\003 \001(\t\"Q\n\nrsp_groups\022#\n\006header\030\001 \001(\013"
      "2\023.risk.rsp_head_info\022\036\n\005infos\030\002 \003(\0132\017.r"
      "isk.sys_group\"D\n\017rsp_action_info\022\021\n\trequ"
      "estid\030\001 \001(\005\022\036\n\004info\030\002 \001(\0132\020.risk.error_i"
      "nfo\"^\n\021rtn_change_risker\022\022\n\noperatorid\030\001"
      " \001(\005\022\016\n\006userid\030\002 \001(\005\022\023\n\013riskgroupid\030\003 \001("
      "\005\022\020\n\010investor\030\004 \003(\tb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3667);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "riskapi_data_protocal.proto", &protobuf_RegisterTypes);
  ::risk::protobuf_trade_5fprotocal_2eproto::AddDescriptors();
  ::risk::protobuf_quote_5fprotocal_2eproto::AddDescriptors();
  ::risk::protobuf_riskapi_5faction_5fprotocal_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_riskapi_5fdata_5fprotocal_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int error_info::kErroridFieldNumber;
const int error_info::kErrormsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

error_info::error_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.error_info)
}
error_info::error_info(const error_info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errormsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.errormsg().size() > 0) {
    errormsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errormsg_);
  }
  errorid_ = from.errorid_;
  // @@protoc_insertion_point(copy_constructor:risk.error_info)
}

void error_info::SharedCtor() {
  errormsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errorid_ = 0;
  _cached_size_ = 0;
}

error_info::~error_info() {
  // @@protoc_insertion_point(destructor:risk.error_info)
  SharedDtor();
}

void error_info::SharedDtor() {
  errormsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void error_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* error_info::descriptor() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const error_info& error_info::default_instance() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

error_info* error_info::New(::google::protobuf::Arena* arena) const {
  error_info* n = new error_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void error_info::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.error_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errormsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errorid_ = 0;
  _internal_metadata_.Clear();
}

bool error_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.error_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // sint32 errorid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &errorid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string errormsg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errormsg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->errormsg().data(), static_cast<int>(this->errormsg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.error_info.errormsg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.error_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.error_info)
  return false;
#undef DO_
}

void error_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.error_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 errorid = 1;
  if (this->errorid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->errorid(), output);
  }

  // string errormsg = 2;
  if (this->errormsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errormsg().data(), static_cast<int>(this->errormsg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.error_info.errormsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errormsg(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.error_info)
}

::google::protobuf::uint8* error_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.error_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 errorid = 1;
  if (this->errorid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->errorid(), target);
  }

  // string errormsg = 2;
  if (this->errormsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errormsg().data(), static_cast<int>(this->errormsg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.error_info.errormsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errormsg(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.error_info)
  return target;
}

size_t error_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.error_info)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string errormsg = 2;
  if (this->errormsg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errormsg());
  }

  // sint32 errorid = 1;
  if (this->errorid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->errorid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void error_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.error_info)
  GOOGLE_DCHECK_NE(&from, this);
  const error_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const error_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.error_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.error_info)
    MergeFrom(*source);
  }
}

void error_info::MergeFrom(const error_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.error_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.errormsg().size() > 0) {

    errormsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errormsg_);
  }
  if (from.errorid() != 0) {
    set_errorid(from.errorid());
  }
}

void error_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.error_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void error_info::CopyFrom(const error_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.error_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool error_info::IsInitialized() const {
  return true;
}

void error_info::Swap(error_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void error_info::InternalSwap(error_info* other) {
  using std::swap;
  errormsg_.Swap(&other->errormsg_);
  swap(errorid_, other->errorid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata error_info::GetMetadata() const {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// error_info

// sint32 errorid = 1;
void error_info::clear_errorid() {
  errorid_ = 0;
}
::google::protobuf::int32 error_info::errorid() const {
  // @@protoc_insertion_point(field_get:risk.error_info.errorid)
  return errorid_;
}
void error_info::set_errorid(::google::protobuf::int32 value) {
  
  errorid_ = value;
  // @@protoc_insertion_point(field_set:risk.error_info.errorid)
}

// string errormsg = 2;
void error_info::clear_errormsg() {
  errormsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& error_info::errormsg() const {
  // @@protoc_insertion_point(field_get:risk.error_info.errormsg)
  return errormsg_.GetNoArena();
}
void error_info::set_errormsg(const ::std::string& value) {
  
  errormsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.error_info.errormsg)
}
#if LANG_CXX11
void error_info::set_errormsg(::std::string&& value) {
  
  errormsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.error_info.errormsg)
}
#endif
void error_info::set_errormsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  errormsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.error_info.errormsg)
}
void error_info::set_errormsg(const char* value, size_t size) {
  
  errormsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.error_info.errormsg)
}
::std::string* error_info::mutable_errormsg() {
  
  // @@protoc_insertion_point(field_mutable:risk.error_info.errormsg)
  return errormsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* error_info::release_errormsg() {
  // @@protoc_insertion_point(field_release:risk.error_info.errormsg)
  
  return errormsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void error_info::set_allocated_errormsg(::std::string* errormsg) {
  if (errormsg != NULL) {
    
  } else {
    
  }
  errormsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errormsg);
  // @@protoc_insertion_point(field_set_allocated:risk.error_info.errormsg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rsp_head_info::kRequestidFieldNumber;
const int rsp_head_info::kInfoFieldNumber;
const int rsp_head_info::kIslastFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rsp_head_info::rsp_head_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.rsp_head_info)
}
rsp_head_info::rsp_head_info(const rsp_head_info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_info()) {
    info_ = new ::risk::error_info(*from.info_);
  } else {
    info_ = NULL;
  }
  ::memcpy(&requestid_, &from.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&islast_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(islast_));
  // @@protoc_insertion_point(copy_constructor:risk.rsp_head_info)
}

void rsp_head_info::SharedCtor() {
  ::memset(&info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&islast_) -
      reinterpret_cast<char*>(&info_)) + sizeof(islast_));
  _cached_size_ = 0;
}

rsp_head_info::~rsp_head_info() {
  // @@protoc_insertion_point(destructor:risk.rsp_head_info)
  SharedDtor();
}

void rsp_head_info::SharedDtor() {
  if (this != internal_default_instance()) delete info_;
}

void rsp_head_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rsp_head_info::descriptor() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const rsp_head_info& rsp_head_info::default_instance() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

rsp_head_info* rsp_head_info::New(::google::protobuf::Arena* arena) const {
  rsp_head_info* n = new rsp_head_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rsp_head_info::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.rsp_head_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && info_ != NULL) {
    delete info_;
  }
  info_ = NULL;
  ::memset(&requestid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&islast_) -
      reinterpret_cast<char*>(&requestid_)) + sizeof(islast_));
  _internal_metadata_.Clear();
}

bool rsp_head_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.rsp_head_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 requestid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .risk.error_info info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool islast = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &islast_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.rsp_head_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.rsp_head_info)
  return false;
#undef DO_
}

void rsp_head_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.rsp_head_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 requestid = 1;
  if (this->requestid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // .risk.error_info info = 2;
  if (this->has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->info_, output);
  }

  // bool islast = 3;
  if (this->islast() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->islast(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.rsp_head_info)
}

::google::protobuf::uint8* rsp_head_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.rsp_head_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 requestid = 1;
  if (this->requestid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // .risk.error_info info = 2;
  if (this->has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->info_, deterministic, target);
  }

  // bool islast = 3;
  if (this->islast() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->islast(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.rsp_head_info)
  return target;
}

size_t rsp_head_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.rsp_head_info)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .risk.error_info info = 2;
  if (this->has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->info_);
  }

  // int32 requestid = 1;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->requestid());
  }

  // bool islast = 3;
  if (this->islast() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rsp_head_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.rsp_head_info)
  GOOGLE_DCHECK_NE(&from, this);
  const rsp_head_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const rsp_head_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.rsp_head_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.rsp_head_info)
    MergeFrom(*source);
  }
}

void rsp_head_info::MergeFrom(const rsp_head_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.rsp_head_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    mutable_info()->::risk::error_info::MergeFrom(from.info());
  }
  if (from.requestid() != 0) {
    set_requestid(from.requestid());
  }
  if (from.islast() != 0) {
    set_islast(from.islast());
  }
}

void rsp_head_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.rsp_head_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rsp_head_info::CopyFrom(const rsp_head_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.rsp_head_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rsp_head_info::IsInitialized() const {
  return true;
}

void rsp_head_info::Swap(rsp_head_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rsp_head_info::InternalSwap(rsp_head_info* other) {
  using std::swap;
  swap(info_, other->info_);
  swap(requestid_, other->requestid_);
  swap(islast_, other->islast_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rsp_head_info::GetMetadata() const {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rsp_head_info

// int32 requestid = 1;
void rsp_head_info::clear_requestid() {
  requestid_ = 0;
}
::google::protobuf::int32 rsp_head_info::requestid() const {
  // @@protoc_insertion_point(field_get:risk.rsp_head_info.requestid)
  return requestid_;
}
void rsp_head_info::set_requestid(::google::protobuf::int32 value) {
  
  requestid_ = value;
  // @@protoc_insertion_point(field_set:risk.rsp_head_info.requestid)
}

// .risk.error_info info = 2;
bool rsp_head_info::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
void rsp_head_info::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
const ::risk::error_info& rsp_head_info::info() const {
  const ::risk::error_info* p = info_;
  // @@protoc_insertion_point(field_get:risk.rsp_head_info.info)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::error_info*>(
      &::risk::_error_info_default_instance_);
}
::risk::error_info* rsp_head_info::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::risk::error_info;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_head_info.info)
  return info_;
}
::risk::error_info* rsp_head_info::release_info() {
  // @@protoc_insertion_point(field_release:risk.rsp_head_info.info)
  
  ::risk::error_info* temp = info_;
  info_ = NULL;
  return temp;
}
void rsp_head_info::set_allocated_info(::risk::error_info* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_head_info.info)
}

// bool islast = 3;
void rsp_head_info::clear_islast() {
  islast_ = false;
}
bool rsp_head_info::islast() const {
  // @@protoc_insertion_point(field_get:risk.rsp_head_info.islast)
  return islast_;
}
void rsp_head_info::set_islast(bool value) {
  
  islast_ = value;
  // @@protoc_insertion_point(field_set:risk.rsp_head_info.islast)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rsp_risker_login::kRequestidFieldNumber;
const int rsp_risker_login::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rsp_risker_login::rsp_risker_login()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.rsp_risker_login)
}
rsp_risker_login::rsp_risker_login(const rsp_risker_login& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_info()) {
    info_ = new ::risk::error_info(*from.info_);
  } else {
    info_ = NULL;
  }
  requestid_ = from.requestid_;
  // @@protoc_insertion_point(copy_constructor:risk.rsp_risker_login)
}

void rsp_risker_login::SharedCtor() {
  ::memset(&info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&requestid_) -
      reinterpret_cast<char*>(&info_)) + sizeof(requestid_));
  _cached_size_ = 0;
}

rsp_risker_login::~rsp_risker_login() {
  // @@protoc_insertion_point(destructor:risk.rsp_risker_login)
  SharedDtor();
}

void rsp_risker_login::SharedDtor() {
  if (this != internal_default_instance()) delete info_;
}

void rsp_risker_login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rsp_risker_login::descriptor() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const rsp_risker_login& rsp_risker_login::default_instance() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

rsp_risker_login* rsp_risker_login::New(::google::protobuf::Arena* arena) const {
  rsp_risker_login* n = new rsp_risker_login;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rsp_risker_login::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.rsp_risker_login)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && info_ != NULL) {
    delete info_;
  }
  info_ = NULL;
  requestid_ = 0;
  _internal_metadata_.Clear();
}

bool rsp_risker_login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.rsp_risker_login)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 requestid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .risk.error_info info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.rsp_risker_login)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.rsp_risker_login)
  return false;
#undef DO_
}

void rsp_risker_login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.rsp_risker_login)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 requestid = 1;
  if (this->requestid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // .risk.error_info info = 2;
  if (this->has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.rsp_risker_login)
}

::google::protobuf::uint8* rsp_risker_login::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.rsp_risker_login)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 requestid = 1;
  if (this->requestid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // .risk.error_info info = 2;
  if (this->has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.rsp_risker_login)
  return target;
}

size_t rsp_risker_login::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.rsp_risker_login)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .risk.error_info info = 2;
  if (this->has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->info_);
  }

  // int32 requestid = 1;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->requestid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rsp_risker_login::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.rsp_risker_login)
  GOOGLE_DCHECK_NE(&from, this);
  const rsp_risker_login* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const rsp_risker_login>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.rsp_risker_login)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.rsp_risker_login)
    MergeFrom(*source);
  }
}

void rsp_risker_login::MergeFrom(const rsp_risker_login& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.rsp_risker_login)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    mutable_info()->::risk::error_info::MergeFrom(from.info());
  }
  if (from.requestid() != 0) {
    set_requestid(from.requestid());
  }
}

void rsp_risker_login::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.rsp_risker_login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rsp_risker_login::CopyFrom(const rsp_risker_login& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.rsp_risker_login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rsp_risker_login::IsInitialized() const {
  return true;
}

void rsp_risker_login::Swap(rsp_risker_login* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rsp_risker_login::InternalSwap(rsp_risker_login* other) {
  using std::swap;
  swap(info_, other->info_);
  swap(requestid_, other->requestid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rsp_risker_login::GetMetadata() const {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rsp_risker_login

// int32 requestid = 1;
void rsp_risker_login::clear_requestid() {
  requestid_ = 0;
}
::google::protobuf::int32 rsp_risker_login::requestid() const {
  // @@protoc_insertion_point(field_get:risk.rsp_risker_login.requestid)
  return requestid_;
}
void rsp_risker_login::set_requestid(::google::protobuf::int32 value) {
  
  requestid_ = value;
  // @@protoc_insertion_point(field_set:risk.rsp_risker_login.requestid)
}

// .risk.error_info info = 2;
bool rsp_risker_login::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
void rsp_risker_login::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
const ::risk::error_info& rsp_risker_login::info() const {
  const ::risk::error_info* p = info_;
  // @@protoc_insertion_point(field_get:risk.rsp_risker_login.info)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::error_info*>(
      &::risk::_error_info_default_instance_);
}
::risk::error_info* rsp_risker_login::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::risk::error_info;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_risker_login.info)
  return info_;
}
::risk::error_info* rsp_risker_login::release_info() {
  // @@protoc_insertion_point(field_release:risk.rsp_risker_login.info)
  
  ::risk::error_info* temp = info_;
  info_ = NULL;
  return temp;
}
void rsp_risker_login::set_allocated_info(::risk::error_info* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_risker_login.info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rsp_investor_list::kHeaderFieldNumber;
const int rsp_investor_list::kInvestoridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rsp_investor_list::rsp_investor_list()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.rsp_investor_list)
}
rsp_investor_list::rsp_investor_list(const rsp_investor_list& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  investorid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.investorid().size() > 0) {
    investorid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.investorid_);
  }
  if (from.has_header()) {
    header_ = new ::risk::rsp_head_info(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:risk.rsp_investor_list)
}

void rsp_investor_list::SharedCtor() {
  investorid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_ = NULL;
  _cached_size_ = 0;
}

rsp_investor_list::~rsp_investor_list() {
  // @@protoc_insertion_point(destructor:risk.rsp_investor_list)
  SharedDtor();
}

void rsp_investor_list::SharedDtor() {
  investorid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void rsp_investor_list::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rsp_investor_list::descriptor() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const rsp_investor_list& rsp_investor_list::default_instance() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

rsp_investor_list* rsp_investor_list::New(::google::protobuf::Arena* arena) const {
  rsp_investor_list* n = new rsp_investor_list;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rsp_investor_list::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.rsp_investor_list)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  investorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool rsp_investor_list::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.rsp_investor_list)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .risk.rsp_head_info header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string investorid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_investorid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->investorid().data(), static_cast<int>(this->investorid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.rsp_investor_list.investorid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.rsp_investor_list)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.rsp_investor_list)
  return false;
#undef DO_
}

void rsp_investor_list::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.rsp_investor_list)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .risk.rsp_head_info header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string investorid = 2;
  if (this->investorid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investorid().data(), static_cast<int>(this->investorid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.rsp_investor_list.investorid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->investorid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.rsp_investor_list)
}

::google::protobuf::uint8* rsp_investor_list::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.rsp_investor_list)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .risk.rsp_head_info header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // string investorid = 2;
  if (this->investorid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investorid().data(), static_cast<int>(this->investorid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.rsp_investor_list.investorid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->investorid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.rsp_investor_list)
  return target;
}

size_t rsp_investor_list::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.rsp_investor_list)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string investorid = 2;
  if (this->investorid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->investorid());
  }

  // .risk.rsp_head_info header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rsp_investor_list::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.rsp_investor_list)
  GOOGLE_DCHECK_NE(&from, this);
  const rsp_investor_list* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const rsp_investor_list>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.rsp_investor_list)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.rsp_investor_list)
    MergeFrom(*source);
  }
}

void rsp_investor_list::MergeFrom(const rsp_investor_list& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.rsp_investor_list)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.investorid().size() > 0) {

    investorid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.investorid_);
  }
  if (from.has_header()) {
    mutable_header()->::risk::rsp_head_info::MergeFrom(from.header());
  }
}

void rsp_investor_list::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.rsp_investor_list)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rsp_investor_list::CopyFrom(const rsp_investor_list& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.rsp_investor_list)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rsp_investor_list::IsInitialized() const {
  return true;
}

void rsp_investor_list::Swap(rsp_investor_list* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rsp_investor_list::InternalSwap(rsp_investor_list* other) {
  using std::swap;
  investorid_.Swap(&other->investorid_);
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rsp_investor_list::GetMetadata() const {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rsp_investor_list

// .risk.rsp_head_info header = 1;
bool rsp_investor_list::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void rsp_investor_list::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::risk::rsp_head_info& rsp_investor_list::header() const {
  const ::risk::rsp_head_info* p = header_;
  // @@protoc_insertion_point(field_get:risk.rsp_investor_list.header)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::rsp_head_info*>(
      &::risk::_rsp_head_info_default_instance_);
}
::risk::rsp_head_info* rsp_investor_list::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::risk::rsp_head_info;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_investor_list.header)
  return header_;
}
::risk::rsp_head_info* rsp_investor_list::release_header() {
  // @@protoc_insertion_point(field_release:risk.rsp_investor_list.header)
  
  ::risk::rsp_head_info* temp = header_;
  header_ = NULL;
  return temp;
}
void rsp_investor_list::set_allocated_header(::risk::rsp_head_info* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_investor_list.header)
}

// string investorid = 2;
void rsp_investor_list::clear_investorid() {
  investorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& rsp_investor_list::investorid() const {
  // @@protoc_insertion_point(field_get:risk.rsp_investor_list.investorid)
  return investorid_.GetNoArena();
}
void rsp_investor_list::set_investorid(const ::std::string& value) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.rsp_investor_list.investorid)
}
#if LANG_CXX11
void rsp_investor_list::set_investorid(::std::string&& value) {
  
  investorid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.rsp_investor_list.investorid)
}
#endif
void rsp_investor_list::set_investorid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.rsp_investor_list.investorid)
}
void rsp_investor_list::set_investorid(const char* value, size_t size) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.rsp_investor_list.investorid)
}
::std::string* rsp_investor_list::mutable_investorid() {
  
  // @@protoc_insertion_point(field_mutable:risk.rsp_investor_list.investorid)
  return investorid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* rsp_investor_list::release_investorid() {
  // @@protoc_insertion_point(field_release:risk.rsp_investor_list.investorid)
  
  return investorid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void rsp_investor_list::set_allocated_investorid(::std::string* investorid) {
  if (investorid != NULL) {
    
  } else {
    
  }
  investorid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), investorid);
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_investor_list.investorid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int instrument_info::kInstrumentidFieldNumber;
const int instrument_info::kExchangeidFieldNumber;
const int instrument_info::kInstrumentnameFieldNumber;
const int instrument_info::kExchangeinstidFieldNumber;
const int instrument_info::kProductidFieldNumber;
const int instrument_info::kProductclassFieldNumber;
const int instrument_info::kDeliveryyearFieldNumber;
const int instrument_info::kDeliverymonthFieldNumber;
const int instrument_info::kMaxmarketordervolumeFieldNumber;
const int instrument_info::kMinmarketordervolumeFieldNumber;
const int instrument_info::kMaxlimitordervolumeFieldNumber;
const int instrument_info::kMinlimitordervolumeFieldNumber;
const int instrument_info::kVolumemultipleFieldNumber;
const int instrument_info::kPricetickFieldNumber;
const int instrument_info::kCreatedateFieldNumber;
const int instrument_info::kOpendateFieldNumber;
const int instrument_info::kExpiredateFieldNumber;
const int instrument_info::kStartdelivdateFieldNumber;
const int instrument_info::kEnddelivdateFieldNumber;
const int instrument_info::kInstlifephaseFieldNumber;
const int instrument_info::kIstradingFieldNumber;
const int instrument_info::kPositiontypeFieldNumber;
const int instrument_info::kPositiondatetypeFieldNumber;
const int instrument_info::kLongmarginratioFieldNumber;
const int instrument_info::kShortmarginratioFieldNumber;
const int instrument_info::kMaxmarginsidealgorithmFieldNumber;
const int instrument_info::kUnderlyinginstridFieldNumber;
const int instrument_info::kStrikepriceFieldNumber;
const int instrument_info::kOptionstypeFieldNumber;
const int instrument_info::kUnderlyingmultipleFieldNumber;
const int instrument_info::kCombinationtypeFieldNumber;
const int instrument_info::kProductgroupidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

instrument_info::instrument_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.instrument_info)
}
instrument_info::instrument_info(const instrument_info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  instrumentid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.instrumentid().size() > 0) {
    instrumentid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instrumentid_);
  }
  exchangeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.exchangeid().size() > 0) {
    exchangeid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchangeid_);
  }
  instrumentname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.instrumentname().size() > 0) {
    instrumentname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instrumentname_);
  }
  exchangeinstid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.exchangeinstid().size() > 0) {
    exchangeinstid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchangeinstid_);
  }
  productid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.productid().size() > 0) {
    productid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productid_);
  }
  productclass_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.productclass().size() > 0) {
    productclass_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productclass_);
  }
  createdate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.createdate().size() > 0) {
    createdate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.createdate_);
  }
  opendate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.opendate().size() > 0) {
    opendate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.opendate_);
  }
  expiredate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.expiredate().size() > 0) {
    expiredate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.expiredate_);
  }
  startdelivdate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.startdelivdate().size() > 0) {
    startdelivdate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.startdelivdate_);
  }
  enddelivdate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.enddelivdate().size() > 0) {
    enddelivdate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.enddelivdate_);
  }
  instlifephase_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.instlifephase().size() > 0) {
    instlifephase_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instlifephase_);
  }
  positiontype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.positiontype().size() > 0) {
    positiontype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.positiontype_);
  }
  positiondatetype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.positiondatetype().size() > 0) {
    positiondatetype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.positiondatetype_);
  }
  maxmarginsidealgorithm_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.maxmarginsidealgorithm().size() > 0) {
    maxmarginsidealgorithm_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.maxmarginsidealgorithm_);
  }
  underlyinginstrid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.underlyinginstrid().size() > 0) {
    underlyinginstrid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.underlyinginstrid_);
  }
  optionstype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.optionstype().size() > 0) {
    optionstype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.optionstype_);
  }
  combinationtype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.combinationtype().size() > 0) {
    combinationtype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.combinationtype_);
  }
  productgroupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.productgroupid().size() > 0) {
    productgroupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productgroupid_);
  }
  ::memcpy(&deliveryyear_, &from.deliveryyear_,
    static_cast<size_t>(reinterpret_cast<char*>(&underlyingmultiple_) -
    reinterpret_cast<char*>(&deliveryyear_)) + sizeof(underlyingmultiple_));
  // @@protoc_insertion_point(copy_constructor:risk.instrument_info)
}

void instrument_info::SharedCtor() {
  instrumentid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instrumentname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangeinstid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  productid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  productclass_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  createdate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  opendate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expiredate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  startdelivdate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enddelivdate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instlifephase_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  positiontype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  positiondatetype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  maxmarginsidealgorithm_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  underlyinginstrid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  optionstype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  combinationtype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  productgroupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&deliveryyear_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&underlyingmultiple_) -
      reinterpret_cast<char*>(&deliveryyear_)) + sizeof(underlyingmultiple_));
  _cached_size_ = 0;
}

instrument_info::~instrument_info() {
  // @@protoc_insertion_point(destructor:risk.instrument_info)
  SharedDtor();
}

void instrument_info::SharedDtor() {
  instrumentid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangeid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instrumentname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangeinstid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  productid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  productclass_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  createdate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  opendate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expiredate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  startdelivdate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enddelivdate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instlifephase_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  positiontype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  positiondatetype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  maxmarginsidealgorithm_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  underlyinginstrid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  optionstype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  combinationtype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  productgroupid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void instrument_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* instrument_info::descriptor() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const instrument_info& instrument_info::default_instance() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

instrument_info* instrument_info::New(::google::protobuf::Arena* arena) const {
  instrument_info* n = new instrument_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void instrument_info::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.instrument_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  instrumentid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instrumentname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangeinstid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  productid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  productclass_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  createdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  opendate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expiredate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  startdelivdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enddelivdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instlifephase_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  positiontype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  positiondatetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  maxmarginsidealgorithm_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  underlyinginstrid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  optionstype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  combinationtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  productgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&deliveryyear_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&underlyingmultiple_) -
      reinterpret_cast<char*>(&deliveryyear_)) + sizeof(underlyingmultiple_));
  _internal_metadata_.Clear();
}

bool instrument_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.instrument_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string instrumentid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrumentid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->instrumentid().data(), static_cast<int>(this->instrumentid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.instrument_info.instrumentid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string exchangeid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangeid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchangeid().data(), static_cast<int>(this->exchangeid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.instrument_info.exchangeid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string instrumentname = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrumentname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->instrumentname().data(), static_cast<int>(this->instrumentname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.instrument_info.instrumentname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string exchangeinstid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangeinstid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchangeinstid().data(), static_cast<int>(this->exchangeinstid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.instrument_info.exchangeinstid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string productid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->productid().data(), static_cast<int>(this->productid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.instrument_info.productid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string productclass = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productclass()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->productclass().data(), static_cast<int>(this->productclass().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.instrument_info.productclass"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 deliveryyear = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deliveryyear_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 deliverymonth = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deliverymonth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 maxmarketordervolume = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxmarketordervolume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 minmarketordervolume = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minmarketordervolume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 maxlimitordervolume = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxlimitordervolume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 minlimitordervolume = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minlimitordervolume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 volumemultiple = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volumemultiple_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double pricetick = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pricetick_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string createdate = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_createdate()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->createdate().data(), static_cast<int>(this->createdate().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.instrument_info.createdate"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string opendate = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_opendate()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->opendate().data(), static_cast<int>(this->opendate().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.instrument_info.opendate"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string expiredate = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_expiredate()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->expiredate().data(), static_cast<int>(this->expiredate().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.instrument_info.expiredate"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string startdelivdate = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_startdelivdate()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->startdelivdate().data(), static_cast<int>(this->startdelivdate().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.instrument_info.startdelivdate"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string enddelivdate = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_enddelivdate()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->enddelivdate().data(), static_cast<int>(this->enddelivdate().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.instrument_info.enddelivdate"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string instlifephase = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instlifephase()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->instlifephase().data(), static_cast<int>(this->instlifephase().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.instrument_info.instlifephase"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 istrading = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &istrading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string positiontype = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_positiontype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->positiontype().data(), static_cast<int>(this->positiontype().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.instrument_info.positiontype"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string positiondatetype = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_positiondatetype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->positiondatetype().data(), static_cast<int>(this->positiondatetype().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.instrument_info.positiondatetype"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double longmarginratio = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(193u /* 193 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longmarginratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double shortmarginratio = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(201u /* 201 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &shortmarginratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string maxmarginsidealgorithm = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_maxmarginsidealgorithm()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->maxmarginsidealgorithm().data(), static_cast<int>(this->maxmarginsidealgorithm().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.instrument_info.maxmarginsidealgorithm"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string underlyinginstrid = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 218 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_underlyinginstrid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->underlyinginstrid().data(), static_cast<int>(this->underlyinginstrid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.instrument_info.underlyinginstrid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double strikeprice = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(225u /* 225 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &strikeprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string optionstype = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 234 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_optionstype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->optionstype().data(), static_cast<int>(this->optionstype().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.instrument_info.optionstype"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double underlyingmultiple = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(241u /* 241 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &underlyingmultiple_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string combinationtype = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 250 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_combinationtype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->combinationtype().data(), static_cast<int>(this->combinationtype().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.instrument_info.combinationtype"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string productgroupid = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 258 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productgroupid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->productgroupid().data(), static_cast<int>(this->productgroupid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.instrument_info.productgroupid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.instrument_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.instrument_info)
  return false;
#undef DO_
}

void instrument_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.instrument_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string instrumentid = 1;
  if (this->instrumentid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instrumentid().data(), static_cast<int>(this->instrumentid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.instrumentid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->instrumentid(), output);
  }

  // string exchangeid = 2;
  if (this->exchangeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchangeid().data(), static_cast<int>(this->exchangeid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.exchangeid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->exchangeid(), output);
  }

  // string instrumentname = 3;
  if (this->instrumentname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instrumentname().data(), static_cast<int>(this->instrumentname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.instrumentname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->instrumentname(), output);
  }

  // string exchangeinstid = 4;
  if (this->exchangeinstid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchangeinstid().data(), static_cast<int>(this->exchangeinstid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.exchangeinstid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->exchangeinstid(), output);
  }

  // string productid = 5;
  if (this->productid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->productid().data(), static_cast<int>(this->productid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.productid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->productid(), output);
  }

  // string productclass = 6;
  if (this->productclass().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->productclass().data(), static_cast<int>(this->productclass().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.productclass");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->productclass(), output);
  }

  // int32 deliveryyear = 7;
  if (this->deliveryyear() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->deliveryyear(), output);
  }

  // int32 deliverymonth = 8;
  if (this->deliverymonth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->deliverymonth(), output);
  }

  // int32 maxmarketordervolume = 9;
  if (this->maxmarketordervolume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->maxmarketordervolume(), output);
  }

  // int32 minmarketordervolume = 10;
  if (this->minmarketordervolume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->minmarketordervolume(), output);
  }

  // int32 maxlimitordervolume = 11;
  if (this->maxlimitordervolume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->maxlimitordervolume(), output);
  }

  // int32 minlimitordervolume = 12;
  if (this->minlimitordervolume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->minlimitordervolume(), output);
  }

  // int32 volumemultiple = 13;
  if (this->volumemultiple() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->volumemultiple(), output);
  }

  // double pricetick = 14;
  if (this->pricetick() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->pricetick(), output);
  }

  // string createdate = 15;
  if (this->createdate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->createdate().data(), static_cast<int>(this->createdate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.createdate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->createdate(), output);
  }

  // string opendate = 16;
  if (this->opendate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->opendate().data(), static_cast<int>(this->opendate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.opendate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->opendate(), output);
  }

  // string expiredate = 17;
  if (this->expiredate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->expiredate().data(), static_cast<int>(this->expiredate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.expiredate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->expiredate(), output);
  }

  // string startdelivdate = 18;
  if (this->startdelivdate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->startdelivdate().data(), static_cast<int>(this->startdelivdate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.startdelivdate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->startdelivdate(), output);
  }

  // string enddelivdate = 19;
  if (this->enddelivdate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->enddelivdate().data(), static_cast<int>(this->enddelivdate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.enddelivdate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->enddelivdate(), output);
  }

  // string instlifephase = 20;
  if (this->instlifephase().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instlifephase().data(), static_cast<int>(this->instlifephase().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.instlifephase");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->instlifephase(), output);
  }

  // int32 istrading = 21;
  if (this->istrading() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->istrading(), output);
  }

  // string positiontype = 22;
  if (this->positiontype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->positiontype().data(), static_cast<int>(this->positiontype().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.positiontype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->positiontype(), output);
  }

  // string positiondatetype = 23;
  if (this->positiondatetype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->positiondatetype().data(), static_cast<int>(this->positiondatetype().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.positiondatetype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->positiondatetype(), output);
  }

  // double longmarginratio = 24;
  if (this->longmarginratio() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->longmarginratio(), output);
  }

  // double shortmarginratio = 25;
  if (this->shortmarginratio() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->shortmarginratio(), output);
  }

  // string maxmarginsidealgorithm = 26;
  if (this->maxmarginsidealgorithm().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->maxmarginsidealgorithm().data(), static_cast<int>(this->maxmarginsidealgorithm().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.maxmarginsidealgorithm");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      26, this->maxmarginsidealgorithm(), output);
  }

  // string underlyinginstrid = 27;
  if (this->underlyinginstrid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->underlyinginstrid().data(), static_cast<int>(this->underlyinginstrid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.underlyinginstrid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      27, this->underlyinginstrid(), output);
  }

  // double strikeprice = 28;
  if (this->strikeprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->strikeprice(), output);
  }

  // string optionstype = 29;
  if (this->optionstype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->optionstype().data(), static_cast<int>(this->optionstype().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.optionstype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      29, this->optionstype(), output);
  }

  // double underlyingmultiple = 30;
  if (this->underlyingmultiple() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->underlyingmultiple(), output);
  }

  // string combinationtype = 31;
  if (this->combinationtype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->combinationtype().data(), static_cast<int>(this->combinationtype().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.combinationtype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      31, this->combinationtype(), output);
  }

  // string productgroupid = 32;
  if (this->productgroupid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->productgroupid().data(), static_cast<int>(this->productgroupid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.productgroupid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      32, this->productgroupid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.instrument_info)
}

::google::protobuf::uint8* instrument_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.instrument_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string instrumentid = 1;
  if (this->instrumentid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instrumentid().data(), static_cast<int>(this->instrumentid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.instrumentid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->instrumentid(), target);
  }

  // string exchangeid = 2;
  if (this->exchangeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchangeid().data(), static_cast<int>(this->exchangeid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.exchangeid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->exchangeid(), target);
  }

  // string instrumentname = 3;
  if (this->instrumentname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instrumentname().data(), static_cast<int>(this->instrumentname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.instrumentname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->instrumentname(), target);
  }

  // string exchangeinstid = 4;
  if (this->exchangeinstid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchangeinstid().data(), static_cast<int>(this->exchangeinstid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.exchangeinstid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->exchangeinstid(), target);
  }

  // string productid = 5;
  if (this->productid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->productid().data(), static_cast<int>(this->productid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.productid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->productid(), target);
  }

  // string productclass = 6;
  if (this->productclass().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->productclass().data(), static_cast<int>(this->productclass().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.productclass");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->productclass(), target);
  }

  // int32 deliveryyear = 7;
  if (this->deliveryyear() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->deliveryyear(), target);
  }

  // int32 deliverymonth = 8;
  if (this->deliverymonth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->deliverymonth(), target);
  }

  // int32 maxmarketordervolume = 9;
  if (this->maxmarketordervolume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->maxmarketordervolume(), target);
  }

  // int32 minmarketordervolume = 10;
  if (this->minmarketordervolume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->minmarketordervolume(), target);
  }

  // int32 maxlimitordervolume = 11;
  if (this->maxlimitordervolume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->maxlimitordervolume(), target);
  }

  // int32 minlimitordervolume = 12;
  if (this->minlimitordervolume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->minlimitordervolume(), target);
  }

  // int32 volumemultiple = 13;
  if (this->volumemultiple() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->volumemultiple(), target);
  }

  // double pricetick = 14;
  if (this->pricetick() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->pricetick(), target);
  }

  // string createdate = 15;
  if (this->createdate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->createdate().data(), static_cast<int>(this->createdate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.createdate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->createdate(), target);
  }

  // string opendate = 16;
  if (this->opendate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->opendate().data(), static_cast<int>(this->opendate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.opendate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->opendate(), target);
  }

  // string expiredate = 17;
  if (this->expiredate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->expiredate().data(), static_cast<int>(this->expiredate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.expiredate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->expiredate(), target);
  }

  // string startdelivdate = 18;
  if (this->startdelivdate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->startdelivdate().data(), static_cast<int>(this->startdelivdate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.startdelivdate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->startdelivdate(), target);
  }

  // string enddelivdate = 19;
  if (this->enddelivdate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->enddelivdate().data(), static_cast<int>(this->enddelivdate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.enddelivdate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->enddelivdate(), target);
  }

  // string instlifephase = 20;
  if (this->instlifephase().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instlifephase().data(), static_cast<int>(this->instlifephase().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.instlifephase");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->instlifephase(), target);
  }

  // int32 istrading = 21;
  if (this->istrading() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->istrading(), target);
  }

  // string positiontype = 22;
  if (this->positiontype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->positiontype().data(), static_cast<int>(this->positiontype().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.positiontype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->positiontype(), target);
  }

  // string positiondatetype = 23;
  if (this->positiondatetype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->positiondatetype().data(), static_cast<int>(this->positiondatetype().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.positiondatetype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->positiondatetype(), target);
  }

  // double longmarginratio = 24;
  if (this->longmarginratio() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->longmarginratio(), target);
  }

  // double shortmarginratio = 25;
  if (this->shortmarginratio() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->shortmarginratio(), target);
  }

  // string maxmarginsidealgorithm = 26;
  if (this->maxmarginsidealgorithm().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->maxmarginsidealgorithm().data(), static_cast<int>(this->maxmarginsidealgorithm().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.maxmarginsidealgorithm");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->maxmarginsidealgorithm(), target);
  }

  // string underlyinginstrid = 27;
  if (this->underlyinginstrid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->underlyinginstrid().data(), static_cast<int>(this->underlyinginstrid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.underlyinginstrid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->underlyinginstrid(), target);
  }

  // double strikeprice = 28;
  if (this->strikeprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->strikeprice(), target);
  }

  // string optionstype = 29;
  if (this->optionstype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->optionstype().data(), static_cast<int>(this->optionstype().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.optionstype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->optionstype(), target);
  }

  // double underlyingmultiple = 30;
  if (this->underlyingmultiple() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->underlyingmultiple(), target);
  }

  // string combinationtype = 31;
  if (this->combinationtype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->combinationtype().data(), static_cast<int>(this->combinationtype().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.combinationtype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->combinationtype(), target);
  }

  // string productgroupid = 32;
  if (this->productgroupid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->productgroupid().data(), static_cast<int>(this->productgroupid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.productgroupid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        32, this->productgroupid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.instrument_info)
  return target;
}

size_t instrument_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.instrument_info)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string instrumentid = 1;
  if (this->instrumentid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->instrumentid());
  }

  // string exchangeid = 2;
  if (this->exchangeid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchangeid());
  }

  // string instrumentname = 3;
  if (this->instrumentname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->instrumentname());
  }

  // string exchangeinstid = 4;
  if (this->exchangeinstid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchangeinstid());
  }

  // string productid = 5;
  if (this->productid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->productid());
  }

  // string productclass = 6;
  if (this->productclass().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->productclass());
  }

  // string createdate = 15;
  if (this->createdate().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->createdate());
  }

  // string opendate = 16;
  if (this->opendate().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->opendate());
  }

  // string expiredate = 17;
  if (this->expiredate().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->expiredate());
  }

  // string startdelivdate = 18;
  if (this->startdelivdate().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->startdelivdate());
  }

  // string enddelivdate = 19;
  if (this->enddelivdate().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->enddelivdate());
  }

  // string instlifephase = 20;
  if (this->instlifephase().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->instlifephase());
  }

  // string positiontype = 22;
  if (this->positiontype().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->positiontype());
  }

  // string positiondatetype = 23;
  if (this->positiondatetype().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->positiondatetype());
  }

  // string maxmarginsidealgorithm = 26;
  if (this->maxmarginsidealgorithm().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->maxmarginsidealgorithm());
  }

  // string underlyinginstrid = 27;
  if (this->underlyinginstrid().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->underlyinginstrid());
  }

  // string optionstype = 29;
  if (this->optionstype().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->optionstype());
  }

  // string combinationtype = 31;
  if (this->combinationtype().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->combinationtype());
  }

  // string productgroupid = 32;
  if (this->productgroupid().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->productgroupid());
  }

  // int32 deliveryyear = 7;
  if (this->deliveryyear() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->deliveryyear());
  }

  // int32 deliverymonth = 8;
  if (this->deliverymonth() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->deliverymonth());
  }

  // int32 maxmarketordervolume = 9;
  if (this->maxmarketordervolume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->maxmarketordervolume());
  }

  // int32 minmarketordervolume = 10;
  if (this->minmarketordervolume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->minmarketordervolume());
  }

  // int32 maxlimitordervolume = 11;
  if (this->maxlimitordervolume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->maxlimitordervolume());
  }

  // int32 minlimitordervolume = 12;
  if (this->minlimitordervolume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->minlimitordervolume());
  }

  // double pricetick = 14;
  if (this->pricetick() != 0) {
    total_size += 1 + 8;
  }

  // int32 volumemultiple = 13;
  if (this->volumemultiple() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->volumemultiple());
  }

  // int32 istrading = 21;
  if (this->istrading() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->istrading());
  }

  // double longmarginratio = 24;
  if (this->longmarginratio() != 0) {
    total_size += 2 + 8;
  }

  // double shortmarginratio = 25;
  if (this->shortmarginratio() != 0) {
    total_size += 2 + 8;
  }

  // double strikeprice = 28;
  if (this->strikeprice() != 0) {
    total_size += 2 + 8;
  }

  // double underlyingmultiple = 30;
  if (this->underlyingmultiple() != 0) {
    total_size += 2 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void instrument_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.instrument_info)
  GOOGLE_DCHECK_NE(&from, this);
  const instrument_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const instrument_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.instrument_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.instrument_info)
    MergeFrom(*source);
  }
}

void instrument_info::MergeFrom(const instrument_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.instrument_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.instrumentid().size() > 0) {

    instrumentid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instrumentid_);
  }
  if (from.exchangeid().size() > 0) {

    exchangeid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchangeid_);
  }
  if (from.instrumentname().size() > 0) {

    instrumentname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instrumentname_);
  }
  if (from.exchangeinstid().size() > 0) {

    exchangeinstid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchangeinstid_);
  }
  if (from.productid().size() > 0) {

    productid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productid_);
  }
  if (from.productclass().size() > 0) {

    productclass_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productclass_);
  }
  if (from.createdate().size() > 0) {

    createdate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.createdate_);
  }
  if (from.opendate().size() > 0) {

    opendate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.opendate_);
  }
  if (from.expiredate().size() > 0) {

    expiredate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.expiredate_);
  }
  if (from.startdelivdate().size() > 0) {

    startdelivdate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.startdelivdate_);
  }
  if (from.enddelivdate().size() > 0) {

    enddelivdate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.enddelivdate_);
  }
  if (from.instlifephase().size() > 0) {

    instlifephase_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instlifephase_);
  }
  if (from.positiontype().size() > 0) {

    positiontype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.positiontype_);
  }
  if (from.positiondatetype().size() > 0) {

    positiondatetype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.positiondatetype_);
  }
  if (from.maxmarginsidealgorithm().size() > 0) {

    maxmarginsidealgorithm_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.maxmarginsidealgorithm_);
  }
  if (from.underlyinginstrid().size() > 0) {

    underlyinginstrid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.underlyinginstrid_);
  }
  if (from.optionstype().size() > 0) {

    optionstype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.optionstype_);
  }
  if (from.combinationtype().size() > 0) {

    combinationtype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.combinationtype_);
  }
  if (from.productgroupid().size() > 0) {

    productgroupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productgroupid_);
  }
  if (from.deliveryyear() != 0) {
    set_deliveryyear(from.deliveryyear());
  }
  if (from.deliverymonth() != 0) {
    set_deliverymonth(from.deliverymonth());
  }
  if (from.maxmarketordervolume() != 0) {
    set_maxmarketordervolume(from.maxmarketordervolume());
  }
  if (from.minmarketordervolume() != 0) {
    set_minmarketordervolume(from.minmarketordervolume());
  }
  if (from.maxlimitordervolume() != 0) {
    set_maxlimitordervolume(from.maxlimitordervolume());
  }
  if (from.minlimitordervolume() != 0) {
    set_minlimitordervolume(from.minlimitordervolume());
  }
  if (from.pricetick() != 0) {
    set_pricetick(from.pricetick());
  }
  if (from.volumemultiple() != 0) {
    set_volumemultiple(from.volumemultiple());
  }
  if (from.istrading() != 0) {
    set_istrading(from.istrading());
  }
  if (from.longmarginratio() != 0) {
    set_longmarginratio(from.longmarginratio());
  }
  if (from.shortmarginratio() != 0) {
    set_shortmarginratio(from.shortmarginratio());
  }
  if (from.strikeprice() != 0) {
    set_strikeprice(from.strikeprice());
  }
  if (from.underlyingmultiple() != 0) {
    set_underlyingmultiple(from.underlyingmultiple());
  }
}

void instrument_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.instrument_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void instrument_info::CopyFrom(const instrument_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.instrument_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool instrument_info::IsInitialized() const {
  return true;
}

void instrument_info::Swap(instrument_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void instrument_info::InternalSwap(instrument_info* other) {
  using std::swap;
  instrumentid_.Swap(&other->instrumentid_);
  exchangeid_.Swap(&other->exchangeid_);
  instrumentname_.Swap(&other->instrumentname_);
  exchangeinstid_.Swap(&other->exchangeinstid_);
  productid_.Swap(&other->productid_);
  productclass_.Swap(&other->productclass_);
  createdate_.Swap(&other->createdate_);
  opendate_.Swap(&other->opendate_);
  expiredate_.Swap(&other->expiredate_);
  startdelivdate_.Swap(&other->startdelivdate_);
  enddelivdate_.Swap(&other->enddelivdate_);
  instlifephase_.Swap(&other->instlifephase_);
  positiontype_.Swap(&other->positiontype_);
  positiondatetype_.Swap(&other->positiondatetype_);
  maxmarginsidealgorithm_.Swap(&other->maxmarginsidealgorithm_);
  underlyinginstrid_.Swap(&other->underlyinginstrid_);
  optionstype_.Swap(&other->optionstype_);
  combinationtype_.Swap(&other->combinationtype_);
  productgroupid_.Swap(&other->productgroupid_);
  swap(deliveryyear_, other->deliveryyear_);
  swap(deliverymonth_, other->deliverymonth_);
  swap(maxmarketordervolume_, other->maxmarketordervolume_);
  swap(minmarketordervolume_, other->minmarketordervolume_);
  swap(maxlimitordervolume_, other->maxlimitordervolume_);
  swap(minlimitordervolume_, other->minlimitordervolume_);
  swap(pricetick_, other->pricetick_);
  swap(volumemultiple_, other->volumemultiple_);
  swap(istrading_, other->istrading_);
  swap(longmarginratio_, other->longmarginratio_);
  swap(shortmarginratio_, other->shortmarginratio_);
  swap(strikeprice_, other->strikeprice_);
  swap(underlyingmultiple_, other->underlyingmultiple_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata instrument_info::GetMetadata() const {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// instrument_info

// string instrumentid = 1;
void instrument_info::clear_instrumentid() {
  instrumentid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& instrument_info::instrumentid() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.instrumentid)
  return instrumentid_.GetNoArena();
}
void instrument_info::set_instrumentid(const ::std::string& value) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.instrumentid)
}
#if LANG_CXX11
void instrument_info::set_instrumentid(::std::string&& value) {
  
  instrumentid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.instrumentid)
}
#endif
void instrument_info::set_instrumentid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.instrumentid)
}
void instrument_info::set_instrumentid(const char* value, size_t size) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.instrumentid)
}
::std::string* instrument_info::mutable_instrumentid() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.instrumentid)
  return instrumentid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* instrument_info::release_instrumentid() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.instrumentid)
  
  return instrumentid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void instrument_info::set_allocated_instrumentid(::std::string* instrumentid) {
  if (instrumentid != NULL) {
    
  } else {
    
  }
  instrumentid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrumentid);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.instrumentid)
}

// string exchangeid = 2;
void instrument_info::clear_exchangeid() {
  exchangeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& instrument_info::exchangeid() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.exchangeid)
  return exchangeid_.GetNoArena();
}
void instrument_info::set_exchangeid(const ::std::string& value) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.exchangeid)
}
#if LANG_CXX11
void instrument_info::set_exchangeid(::std::string&& value) {
  
  exchangeid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.exchangeid)
}
#endif
void instrument_info::set_exchangeid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.exchangeid)
}
void instrument_info::set_exchangeid(const char* value, size_t size) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.exchangeid)
}
::std::string* instrument_info::mutable_exchangeid() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.exchangeid)
  return exchangeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* instrument_info::release_exchangeid() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.exchangeid)
  
  return exchangeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void instrument_info::set_allocated_exchangeid(::std::string* exchangeid) {
  if (exchangeid != NULL) {
    
  } else {
    
  }
  exchangeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchangeid);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.exchangeid)
}

// string instrumentname = 3;
void instrument_info::clear_instrumentname() {
  instrumentname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& instrument_info::instrumentname() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.instrumentname)
  return instrumentname_.GetNoArena();
}
void instrument_info::set_instrumentname(const ::std::string& value) {
  
  instrumentname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.instrumentname)
}
#if LANG_CXX11
void instrument_info::set_instrumentname(::std::string&& value) {
  
  instrumentname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.instrumentname)
}
#endif
void instrument_info::set_instrumentname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  instrumentname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.instrumentname)
}
void instrument_info::set_instrumentname(const char* value, size_t size) {
  
  instrumentname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.instrumentname)
}
::std::string* instrument_info::mutable_instrumentname() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.instrumentname)
  return instrumentname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* instrument_info::release_instrumentname() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.instrumentname)
  
  return instrumentname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void instrument_info::set_allocated_instrumentname(::std::string* instrumentname) {
  if (instrumentname != NULL) {
    
  } else {
    
  }
  instrumentname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrumentname);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.instrumentname)
}

// string exchangeinstid = 4;
void instrument_info::clear_exchangeinstid() {
  exchangeinstid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& instrument_info::exchangeinstid() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.exchangeinstid)
  return exchangeinstid_.GetNoArena();
}
void instrument_info::set_exchangeinstid(const ::std::string& value) {
  
  exchangeinstid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.exchangeinstid)
}
#if LANG_CXX11
void instrument_info::set_exchangeinstid(::std::string&& value) {
  
  exchangeinstid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.exchangeinstid)
}
#endif
void instrument_info::set_exchangeinstid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exchangeinstid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.exchangeinstid)
}
void instrument_info::set_exchangeinstid(const char* value, size_t size) {
  
  exchangeinstid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.exchangeinstid)
}
::std::string* instrument_info::mutable_exchangeinstid() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.exchangeinstid)
  return exchangeinstid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* instrument_info::release_exchangeinstid() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.exchangeinstid)
  
  return exchangeinstid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void instrument_info::set_allocated_exchangeinstid(::std::string* exchangeinstid) {
  if (exchangeinstid != NULL) {
    
  } else {
    
  }
  exchangeinstid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchangeinstid);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.exchangeinstid)
}

// string productid = 5;
void instrument_info::clear_productid() {
  productid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& instrument_info::productid() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.productid)
  return productid_.GetNoArena();
}
void instrument_info::set_productid(const ::std::string& value) {
  
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.productid)
}
#if LANG_CXX11
void instrument_info::set_productid(::std::string&& value) {
  
  productid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.productid)
}
#endif
void instrument_info::set_productid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.productid)
}
void instrument_info::set_productid(const char* value, size_t size) {
  
  productid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.productid)
}
::std::string* instrument_info::mutable_productid() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.productid)
  return productid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* instrument_info::release_productid() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.productid)
  
  return productid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void instrument_info::set_allocated_productid(::std::string* productid) {
  if (productid != NULL) {
    
  } else {
    
  }
  productid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productid);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.productid)
}

// string productclass = 6;
void instrument_info::clear_productclass() {
  productclass_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& instrument_info::productclass() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.productclass)
  return productclass_.GetNoArena();
}
void instrument_info::set_productclass(const ::std::string& value) {
  
  productclass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.productclass)
}
#if LANG_CXX11
void instrument_info::set_productclass(::std::string&& value) {
  
  productclass_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.productclass)
}
#endif
void instrument_info::set_productclass(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  productclass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.productclass)
}
void instrument_info::set_productclass(const char* value, size_t size) {
  
  productclass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.productclass)
}
::std::string* instrument_info::mutable_productclass() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.productclass)
  return productclass_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* instrument_info::release_productclass() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.productclass)
  
  return productclass_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void instrument_info::set_allocated_productclass(::std::string* productclass) {
  if (productclass != NULL) {
    
  } else {
    
  }
  productclass_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productclass);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.productclass)
}

// int32 deliveryyear = 7;
void instrument_info::clear_deliveryyear() {
  deliveryyear_ = 0;
}
::google::protobuf::int32 instrument_info::deliveryyear() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.deliveryyear)
  return deliveryyear_;
}
void instrument_info::set_deliveryyear(::google::protobuf::int32 value) {
  
  deliveryyear_ = value;
  // @@protoc_insertion_point(field_set:risk.instrument_info.deliveryyear)
}

// int32 deliverymonth = 8;
void instrument_info::clear_deliverymonth() {
  deliverymonth_ = 0;
}
::google::protobuf::int32 instrument_info::deliverymonth() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.deliverymonth)
  return deliverymonth_;
}
void instrument_info::set_deliverymonth(::google::protobuf::int32 value) {
  
  deliverymonth_ = value;
  // @@protoc_insertion_point(field_set:risk.instrument_info.deliverymonth)
}

// int32 maxmarketordervolume = 9;
void instrument_info::clear_maxmarketordervolume() {
  maxmarketordervolume_ = 0;
}
::google::protobuf::int32 instrument_info::maxmarketordervolume() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.maxmarketordervolume)
  return maxmarketordervolume_;
}
void instrument_info::set_maxmarketordervolume(::google::protobuf::int32 value) {
  
  maxmarketordervolume_ = value;
  // @@protoc_insertion_point(field_set:risk.instrument_info.maxmarketordervolume)
}

// int32 minmarketordervolume = 10;
void instrument_info::clear_minmarketordervolume() {
  minmarketordervolume_ = 0;
}
::google::protobuf::int32 instrument_info::minmarketordervolume() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.minmarketordervolume)
  return minmarketordervolume_;
}
void instrument_info::set_minmarketordervolume(::google::protobuf::int32 value) {
  
  minmarketordervolume_ = value;
  // @@protoc_insertion_point(field_set:risk.instrument_info.minmarketordervolume)
}

// int32 maxlimitordervolume = 11;
void instrument_info::clear_maxlimitordervolume() {
  maxlimitordervolume_ = 0;
}
::google::protobuf::int32 instrument_info::maxlimitordervolume() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.maxlimitordervolume)
  return maxlimitordervolume_;
}
void instrument_info::set_maxlimitordervolume(::google::protobuf::int32 value) {
  
  maxlimitordervolume_ = value;
  // @@protoc_insertion_point(field_set:risk.instrument_info.maxlimitordervolume)
}

// int32 minlimitordervolume = 12;
void instrument_info::clear_minlimitordervolume() {
  minlimitordervolume_ = 0;
}
::google::protobuf::int32 instrument_info::minlimitordervolume() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.minlimitordervolume)
  return minlimitordervolume_;
}
void instrument_info::set_minlimitordervolume(::google::protobuf::int32 value) {
  
  minlimitordervolume_ = value;
  // @@protoc_insertion_point(field_set:risk.instrument_info.minlimitordervolume)
}

// int32 volumemultiple = 13;
void instrument_info::clear_volumemultiple() {
  volumemultiple_ = 0;
}
::google::protobuf::int32 instrument_info::volumemultiple() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.volumemultiple)
  return volumemultiple_;
}
void instrument_info::set_volumemultiple(::google::protobuf::int32 value) {
  
  volumemultiple_ = value;
  // @@protoc_insertion_point(field_set:risk.instrument_info.volumemultiple)
}

// double pricetick = 14;
void instrument_info::clear_pricetick() {
  pricetick_ = 0;
}
double instrument_info::pricetick() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.pricetick)
  return pricetick_;
}
void instrument_info::set_pricetick(double value) {
  
  pricetick_ = value;
  // @@protoc_insertion_point(field_set:risk.instrument_info.pricetick)
}

// string createdate = 15;
void instrument_info::clear_createdate() {
  createdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& instrument_info::createdate() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.createdate)
  return createdate_.GetNoArena();
}
void instrument_info::set_createdate(const ::std::string& value) {
  
  createdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.createdate)
}
#if LANG_CXX11
void instrument_info::set_createdate(::std::string&& value) {
  
  createdate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.createdate)
}
#endif
void instrument_info::set_createdate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  createdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.createdate)
}
void instrument_info::set_createdate(const char* value, size_t size) {
  
  createdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.createdate)
}
::std::string* instrument_info::mutable_createdate() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.createdate)
  return createdate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* instrument_info::release_createdate() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.createdate)
  
  return createdate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void instrument_info::set_allocated_createdate(::std::string* createdate) {
  if (createdate != NULL) {
    
  } else {
    
  }
  createdate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), createdate);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.createdate)
}

// string opendate = 16;
void instrument_info::clear_opendate() {
  opendate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& instrument_info::opendate() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.opendate)
  return opendate_.GetNoArena();
}
void instrument_info::set_opendate(const ::std::string& value) {
  
  opendate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.opendate)
}
#if LANG_CXX11
void instrument_info::set_opendate(::std::string&& value) {
  
  opendate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.opendate)
}
#endif
void instrument_info::set_opendate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  opendate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.opendate)
}
void instrument_info::set_opendate(const char* value, size_t size) {
  
  opendate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.opendate)
}
::std::string* instrument_info::mutable_opendate() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.opendate)
  return opendate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* instrument_info::release_opendate() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.opendate)
  
  return opendate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void instrument_info::set_allocated_opendate(::std::string* opendate) {
  if (opendate != NULL) {
    
  } else {
    
  }
  opendate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), opendate);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.opendate)
}

// string expiredate = 17;
void instrument_info::clear_expiredate() {
  expiredate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& instrument_info::expiredate() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.expiredate)
  return expiredate_.GetNoArena();
}
void instrument_info::set_expiredate(const ::std::string& value) {
  
  expiredate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.expiredate)
}
#if LANG_CXX11
void instrument_info::set_expiredate(::std::string&& value) {
  
  expiredate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.expiredate)
}
#endif
void instrument_info::set_expiredate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  expiredate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.expiredate)
}
void instrument_info::set_expiredate(const char* value, size_t size) {
  
  expiredate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.expiredate)
}
::std::string* instrument_info::mutable_expiredate() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.expiredate)
  return expiredate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* instrument_info::release_expiredate() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.expiredate)
  
  return expiredate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void instrument_info::set_allocated_expiredate(::std::string* expiredate) {
  if (expiredate != NULL) {
    
  } else {
    
  }
  expiredate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), expiredate);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.expiredate)
}

// string startdelivdate = 18;
void instrument_info::clear_startdelivdate() {
  startdelivdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& instrument_info::startdelivdate() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.startdelivdate)
  return startdelivdate_.GetNoArena();
}
void instrument_info::set_startdelivdate(const ::std::string& value) {
  
  startdelivdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.startdelivdate)
}
#if LANG_CXX11
void instrument_info::set_startdelivdate(::std::string&& value) {
  
  startdelivdate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.startdelivdate)
}
#endif
void instrument_info::set_startdelivdate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  startdelivdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.startdelivdate)
}
void instrument_info::set_startdelivdate(const char* value, size_t size) {
  
  startdelivdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.startdelivdate)
}
::std::string* instrument_info::mutable_startdelivdate() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.startdelivdate)
  return startdelivdate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* instrument_info::release_startdelivdate() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.startdelivdate)
  
  return startdelivdate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void instrument_info::set_allocated_startdelivdate(::std::string* startdelivdate) {
  if (startdelivdate != NULL) {
    
  } else {
    
  }
  startdelivdate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), startdelivdate);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.startdelivdate)
}

// string enddelivdate = 19;
void instrument_info::clear_enddelivdate() {
  enddelivdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& instrument_info::enddelivdate() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.enddelivdate)
  return enddelivdate_.GetNoArena();
}
void instrument_info::set_enddelivdate(const ::std::string& value) {
  
  enddelivdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.enddelivdate)
}
#if LANG_CXX11
void instrument_info::set_enddelivdate(::std::string&& value) {
  
  enddelivdate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.enddelivdate)
}
#endif
void instrument_info::set_enddelivdate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  enddelivdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.enddelivdate)
}
void instrument_info::set_enddelivdate(const char* value, size_t size) {
  
  enddelivdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.enddelivdate)
}
::std::string* instrument_info::mutable_enddelivdate() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.enddelivdate)
  return enddelivdate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* instrument_info::release_enddelivdate() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.enddelivdate)
  
  return enddelivdate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void instrument_info::set_allocated_enddelivdate(::std::string* enddelivdate) {
  if (enddelivdate != NULL) {
    
  } else {
    
  }
  enddelivdate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), enddelivdate);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.enddelivdate)
}

// string instlifephase = 20;
void instrument_info::clear_instlifephase() {
  instlifephase_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& instrument_info::instlifephase() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.instlifephase)
  return instlifephase_.GetNoArena();
}
void instrument_info::set_instlifephase(const ::std::string& value) {
  
  instlifephase_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.instlifephase)
}
#if LANG_CXX11
void instrument_info::set_instlifephase(::std::string&& value) {
  
  instlifephase_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.instlifephase)
}
#endif
void instrument_info::set_instlifephase(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  instlifephase_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.instlifephase)
}
void instrument_info::set_instlifephase(const char* value, size_t size) {
  
  instlifephase_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.instlifephase)
}
::std::string* instrument_info::mutable_instlifephase() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.instlifephase)
  return instlifephase_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* instrument_info::release_instlifephase() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.instlifephase)
  
  return instlifephase_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void instrument_info::set_allocated_instlifephase(::std::string* instlifephase) {
  if (instlifephase != NULL) {
    
  } else {
    
  }
  instlifephase_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instlifephase);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.instlifephase)
}

// int32 istrading = 21;
void instrument_info::clear_istrading() {
  istrading_ = 0;
}
::google::protobuf::int32 instrument_info::istrading() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.istrading)
  return istrading_;
}
void instrument_info::set_istrading(::google::protobuf::int32 value) {
  
  istrading_ = value;
  // @@protoc_insertion_point(field_set:risk.instrument_info.istrading)
}

// string positiontype = 22;
void instrument_info::clear_positiontype() {
  positiontype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& instrument_info::positiontype() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.positiontype)
  return positiontype_.GetNoArena();
}
void instrument_info::set_positiontype(const ::std::string& value) {
  
  positiontype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.positiontype)
}
#if LANG_CXX11
void instrument_info::set_positiontype(::std::string&& value) {
  
  positiontype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.positiontype)
}
#endif
void instrument_info::set_positiontype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  positiontype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.positiontype)
}
void instrument_info::set_positiontype(const char* value, size_t size) {
  
  positiontype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.positiontype)
}
::std::string* instrument_info::mutable_positiontype() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.positiontype)
  return positiontype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* instrument_info::release_positiontype() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.positiontype)
  
  return positiontype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void instrument_info::set_allocated_positiontype(::std::string* positiontype) {
  if (positiontype != NULL) {
    
  } else {
    
  }
  positiontype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), positiontype);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.positiontype)
}

// string positiondatetype = 23;
void instrument_info::clear_positiondatetype() {
  positiondatetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& instrument_info::positiondatetype() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.positiondatetype)
  return positiondatetype_.GetNoArena();
}
void instrument_info::set_positiondatetype(const ::std::string& value) {
  
  positiondatetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.positiondatetype)
}
#if LANG_CXX11
void instrument_info::set_positiondatetype(::std::string&& value) {
  
  positiondatetype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.positiondatetype)
}
#endif
void instrument_info::set_positiondatetype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  positiondatetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.positiondatetype)
}
void instrument_info::set_positiondatetype(const char* value, size_t size) {
  
  positiondatetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.positiondatetype)
}
::std::string* instrument_info::mutable_positiondatetype() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.positiondatetype)
  return positiondatetype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* instrument_info::release_positiondatetype() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.positiondatetype)
  
  return positiondatetype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void instrument_info::set_allocated_positiondatetype(::std::string* positiondatetype) {
  if (positiondatetype != NULL) {
    
  } else {
    
  }
  positiondatetype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), positiondatetype);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.positiondatetype)
}

// double longmarginratio = 24;
void instrument_info::clear_longmarginratio() {
  longmarginratio_ = 0;
}
double instrument_info::longmarginratio() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.longmarginratio)
  return longmarginratio_;
}
void instrument_info::set_longmarginratio(double value) {
  
  longmarginratio_ = value;
  // @@protoc_insertion_point(field_set:risk.instrument_info.longmarginratio)
}

// double shortmarginratio = 25;
void instrument_info::clear_shortmarginratio() {
  shortmarginratio_ = 0;
}
double instrument_info::shortmarginratio() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.shortmarginratio)
  return shortmarginratio_;
}
void instrument_info::set_shortmarginratio(double value) {
  
  shortmarginratio_ = value;
  // @@protoc_insertion_point(field_set:risk.instrument_info.shortmarginratio)
}

// string maxmarginsidealgorithm = 26;
void instrument_info::clear_maxmarginsidealgorithm() {
  maxmarginsidealgorithm_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& instrument_info::maxmarginsidealgorithm() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.maxmarginsidealgorithm)
  return maxmarginsidealgorithm_.GetNoArena();
}
void instrument_info::set_maxmarginsidealgorithm(const ::std::string& value) {
  
  maxmarginsidealgorithm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.maxmarginsidealgorithm)
}
#if LANG_CXX11
void instrument_info::set_maxmarginsidealgorithm(::std::string&& value) {
  
  maxmarginsidealgorithm_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.maxmarginsidealgorithm)
}
#endif
void instrument_info::set_maxmarginsidealgorithm(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  maxmarginsidealgorithm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.maxmarginsidealgorithm)
}
void instrument_info::set_maxmarginsidealgorithm(const char* value, size_t size) {
  
  maxmarginsidealgorithm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.maxmarginsidealgorithm)
}
::std::string* instrument_info::mutable_maxmarginsidealgorithm() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.maxmarginsidealgorithm)
  return maxmarginsidealgorithm_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* instrument_info::release_maxmarginsidealgorithm() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.maxmarginsidealgorithm)
  
  return maxmarginsidealgorithm_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void instrument_info::set_allocated_maxmarginsidealgorithm(::std::string* maxmarginsidealgorithm) {
  if (maxmarginsidealgorithm != NULL) {
    
  } else {
    
  }
  maxmarginsidealgorithm_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), maxmarginsidealgorithm);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.maxmarginsidealgorithm)
}

// string underlyinginstrid = 27;
void instrument_info::clear_underlyinginstrid() {
  underlyinginstrid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& instrument_info::underlyinginstrid() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.underlyinginstrid)
  return underlyinginstrid_.GetNoArena();
}
void instrument_info::set_underlyinginstrid(const ::std::string& value) {
  
  underlyinginstrid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.underlyinginstrid)
}
#if LANG_CXX11
void instrument_info::set_underlyinginstrid(::std::string&& value) {
  
  underlyinginstrid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.underlyinginstrid)
}
#endif
void instrument_info::set_underlyinginstrid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  underlyinginstrid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.underlyinginstrid)
}
void instrument_info::set_underlyinginstrid(const char* value, size_t size) {
  
  underlyinginstrid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.underlyinginstrid)
}
::std::string* instrument_info::mutable_underlyinginstrid() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.underlyinginstrid)
  return underlyinginstrid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* instrument_info::release_underlyinginstrid() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.underlyinginstrid)
  
  return underlyinginstrid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void instrument_info::set_allocated_underlyinginstrid(::std::string* underlyinginstrid) {
  if (underlyinginstrid != NULL) {
    
  } else {
    
  }
  underlyinginstrid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), underlyinginstrid);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.underlyinginstrid)
}

// double strikeprice = 28;
void instrument_info::clear_strikeprice() {
  strikeprice_ = 0;
}
double instrument_info::strikeprice() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.strikeprice)
  return strikeprice_;
}
void instrument_info::set_strikeprice(double value) {
  
  strikeprice_ = value;
  // @@protoc_insertion_point(field_set:risk.instrument_info.strikeprice)
}

// string optionstype = 29;
void instrument_info::clear_optionstype() {
  optionstype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& instrument_info::optionstype() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.optionstype)
  return optionstype_.GetNoArena();
}
void instrument_info::set_optionstype(const ::std::string& value) {
  
  optionstype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.optionstype)
}
#if LANG_CXX11
void instrument_info::set_optionstype(::std::string&& value) {
  
  optionstype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.optionstype)
}
#endif
void instrument_info::set_optionstype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  optionstype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.optionstype)
}
void instrument_info::set_optionstype(const char* value, size_t size) {
  
  optionstype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.optionstype)
}
::std::string* instrument_info::mutable_optionstype() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.optionstype)
  return optionstype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* instrument_info::release_optionstype() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.optionstype)
  
  return optionstype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void instrument_info::set_allocated_optionstype(::std::string* optionstype) {
  if (optionstype != NULL) {
    
  } else {
    
  }
  optionstype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), optionstype);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.optionstype)
}

// double underlyingmultiple = 30;
void instrument_info::clear_underlyingmultiple() {
  underlyingmultiple_ = 0;
}
double instrument_info::underlyingmultiple() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.underlyingmultiple)
  return underlyingmultiple_;
}
void instrument_info::set_underlyingmultiple(double value) {
  
  underlyingmultiple_ = value;
  // @@protoc_insertion_point(field_set:risk.instrument_info.underlyingmultiple)
}

// string combinationtype = 31;
void instrument_info::clear_combinationtype() {
  combinationtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& instrument_info::combinationtype() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.combinationtype)
  return combinationtype_.GetNoArena();
}
void instrument_info::set_combinationtype(const ::std::string& value) {
  
  combinationtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.combinationtype)
}
#if LANG_CXX11
void instrument_info::set_combinationtype(::std::string&& value) {
  
  combinationtype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.combinationtype)
}
#endif
void instrument_info::set_combinationtype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  combinationtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.combinationtype)
}
void instrument_info::set_combinationtype(const char* value, size_t size) {
  
  combinationtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.combinationtype)
}
::std::string* instrument_info::mutable_combinationtype() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.combinationtype)
  return combinationtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* instrument_info::release_combinationtype() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.combinationtype)
  
  return combinationtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void instrument_info::set_allocated_combinationtype(::std::string* combinationtype) {
  if (combinationtype != NULL) {
    
  } else {
    
  }
  combinationtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), combinationtype);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.combinationtype)
}

// string productgroupid = 32;
void instrument_info::clear_productgroupid() {
  productgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& instrument_info::productgroupid() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.productgroupid)
  return productgroupid_.GetNoArena();
}
void instrument_info::set_productgroupid(const ::std::string& value) {
  
  productgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.productgroupid)
}
#if LANG_CXX11
void instrument_info::set_productgroupid(::std::string&& value) {
  
  productgroupid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.productgroupid)
}
#endif
void instrument_info::set_productgroupid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  productgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.productgroupid)
}
void instrument_info::set_productgroupid(const char* value, size_t size) {
  
  productgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.productgroupid)
}
::std::string* instrument_info::mutable_productgroupid() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.productgroupid)
  return productgroupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* instrument_info::release_productgroupid() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.productgroupid)
  
  return productgroupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void instrument_info::set_allocated_productgroupid(::std::string* productgroupid) {
  if (productgroupid != NULL) {
    
  } else {
    
  }
  productgroupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productgroupid);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.productgroupid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rsp_instrument_field::kHeaderFieldNumber;
const int rsp_instrument_field::kFieldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rsp_instrument_field::rsp_instrument_field()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.rsp_instrument_field)
}
rsp_instrument_field::rsp_instrument_field(const rsp_instrument_field& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::risk::rsp_head_info(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_field()) {
    field_ = new ::risk::instrument_info(*from.field_);
  } else {
    field_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:risk.rsp_instrument_field)
}

void rsp_instrument_field::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&field_) -
      reinterpret_cast<char*>(&header_)) + sizeof(field_));
  _cached_size_ = 0;
}

rsp_instrument_field::~rsp_instrument_field() {
  // @@protoc_insertion_point(destructor:risk.rsp_instrument_field)
  SharedDtor();
}

void rsp_instrument_field::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete field_;
}

void rsp_instrument_field::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rsp_instrument_field::descriptor() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const rsp_instrument_field& rsp_instrument_field::default_instance() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

rsp_instrument_field* rsp_instrument_field::New(::google::protobuf::Arena* arena) const {
  rsp_instrument_field* n = new rsp_instrument_field;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rsp_instrument_field::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.rsp_instrument_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && field_ != NULL) {
    delete field_;
  }
  field_ = NULL;
  _internal_metadata_.Clear();
}

bool rsp_instrument_field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.rsp_instrument_field)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .risk.rsp_head_info header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .risk.instrument_info field = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.rsp_instrument_field)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.rsp_instrument_field)
  return false;
#undef DO_
}

void rsp_instrument_field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.rsp_instrument_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .risk.rsp_head_info header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .risk.instrument_info field = 2;
  if (this->has_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->field_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.rsp_instrument_field)
}

::google::protobuf::uint8* rsp_instrument_field::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.rsp_instrument_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .risk.rsp_head_info header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .risk.instrument_info field = 2;
  if (this->has_field()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->field_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.rsp_instrument_field)
  return target;
}

size_t rsp_instrument_field::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.rsp_instrument_field)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .risk.rsp_head_info header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .risk.instrument_info field = 2;
  if (this->has_field()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->field_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rsp_instrument_field::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.rsp_instrument_field)
  GOOGLE_DCHECK_NE(&from, this);
  const rsp_instrument_field* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const rsp_instrument_field>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.rsp_instrument_field)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.rsp_instrument_field)
    MergeFrom(*source);
  }
}

void rsp_instrument_field::MergeFrom(const rsp_instrument_field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.rsp_instrument_field)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::risk::rsp_head_info::MergeFrom(from.header());
  }
  if (from.has_field()) {
    mutable_field()->::risk::instrument_info::MergeFrom(from.field());
  }
}

void rsp_instrument_field::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.rsp_instrument_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rsp_instrument_field::CopyFrom(const rsp_instrument_field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.rsp_instrument_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rsp_instrument_field::IsInitialized() const {
  return true;
}

void rsp_instrument_field::Swap(rsp_instrument_field* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rsp_instrument_field::InternalSwap(rsp_instrument_field* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(field_, other->field_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rsp_instrument_field::GetMetadata() const {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rsp_instrument_field

// .risk.rsp_head_info header = 1;
bool rsp_instrument_field::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void rsp_instrument_field::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::risk::rsp_head_info& rsp_instrument_field::header() const {
  const ::risk::rsp_head_info* p = header_;
  // @@protoc_insertion_point(field_get:risk.rsp_instrument_field.header)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::rsp_head_info*>(
      &::risk::_rsp_head_info_default_instance_);
}
::risk::rsp_head_info* rsp_instrument_field::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::risk::rsp_head_info;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_instrument_field.header)
  return header_;
}
::risk::rsp_head_info* rsp_instrument_field::release_header() {
  // @@protoc_insertion_point(field_release:risk.rsp_instrument_field.header)
  
  ::risk::rsp_head_info* temp = header_;
  header_ = NULL;
  return temp;
}
void rsp_instrument_field::set_allocated_header(::risk::rsp_head_info* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_instrument_field.header)
}

// .risk.instrument_info field = 2;
bool rsp_instrument_field::has_field() const {
  return this != internal_default_instance() && field_ != NULL;
}
void rsp_instrument_field::clear_field() {
  if (GetArenaNoVirtual() == NULL && field_ != NULL) delete field_;
  field_ = NULL;
}
const ::risk::instrument_info& rsp_instrument_field::field() const {
  const ::risk::instrument_info* p = field_;
  // @@protoc_insertion_point(field_get:risk.rsp_instrument_field.field)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::instrument_info*>(
      &::risk::_instrument_info_default_instance_);
}
::risk::instrument_info* rsp_instrument_field::mutable_field() {
  
  if (field_ == NULL) {
    field_ = new ::risk::instrument_info;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_instrument_field.field)
  return field_;
}
::risk::instrument_info* rsp_instrument_field::release_field() {
  // @@protoc_insertion_point(field_release:risk.rsp_instrument_field.field)
  
  ::risk::instrument_info* temp = field_;
  field_ = NULL;
  return temp;
}
void rsp_instrument_field::set_allocated_field(::risk::instrument_info* field) {
  delete field_;
  field_ = field;
  if (field) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_instrument_field.field)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rtn_quote_field::kFieldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rtn_quote_field::rtn_quote_field()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.rtn_quote_field)
}
rtn_quote_field::rtn_quote_field(const rtn_quote_field& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_field()) {
    field_ = new ::risk::quote_gateway_market_field(*from.field_);
  } else {
    field_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:risk.rtn_quote_field)
}

void rtn_quote_field::SharedCtor() {
  field_ = NULL;
  _cached_size_ = 0;
}

rtn_quote_field::~rtn_quote_field() {
  // @@protoc_insertion_point(destructor:risk.rtn_quote_field)
  SharedDtor();
}

void rtn_quote_field::SharedDtor() {
  if (this != internal_default_instance()) delete field_;
}

void rtn_quote_field::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rtn_quote_field::descriptor() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const rtn_quote_field& rtn_quote_field::default_instance() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

rtn_quote_field* rtn_quote_field::New(::google::protobuf::Arena* arena) const {
  rtn_quote_field* n = new rtn_quote_field;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rtn_quote_field::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.rtn_quote_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && field_ != NULL) {
    delete field_;
  }
  field_ = NULL;
  _internal_metadata_.Clear();
}

bool rtn_quote_field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.rtn_quote_field)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .risk.quote_gateway_market_field field = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.rtn_quote_field)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.rtn_quote_field)
  return false;
#undef DO_
}

void rtn_quote_field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.rtn_quote_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .risk.quote_gateway_market_field field = 1;
  if (this->has_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->field_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.rtn_quote_field)
}

::google::protobuf::uint8* rtn_quote_field::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.rtn_quote_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .risk.quote_gateway_market_field field = 1;
  if (this->has_field()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->field_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.rtn_quote_field)
  return target;
}

size_t rtn_quote_field::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.rtn_quote_field)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .risk.quote_gateway_market_field field = 1;
  if (this->has_field()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->field_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rtn_quote_field::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.rtn_quote_field)
  GOOGLE_DCHECK_NE(&from, this);
  const rtn_quote_field* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const rtn_quote_field>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.rtn_quote_field)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.rtn_quote_field)
    MergeFrom(*source);
  }
}

void rtn_quote_field::MergeFrom(const rtn_quote_field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.rtn_quote_field)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_field()) {
    mutable_field()->::risk::quote_gateway_market_field::MergeFrom(from.field());
  }
}

void rtn_quote_field::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.rtn_quote_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rtn_quote_field::CopyFrom(const rtn_quote_field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.rtn_quote_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rtn_quote_field::IsInitialized() const {
  return true;
}

void rtn_quote_field::Swap(rtn_quote_field* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rtn_quote_field::InternalSwap(rtn_quote_field* other) {
  using std::swap;
  swap(field_, other->field_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rtn_quote_field::GetMetadata() const {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rtn_quote_field

// .risk.quote_gateway_market_field field = 1;
bool rtn_quote_field::has_field() const {
  return this != internal_default_instance() && field_ != NULL;
}
void rtn_quote_field::clear_field() {
  if (GetArenaNoVirtual() == NULL && field_ != NULL) delete field_;
  field_ = NULL;
}
const ::risk::quote_gateway_market_field& rtn_quote_field::field() const {
  const ::risk::quote_gateway_market_field* p = field_;
  // @@protoc_insertion_point(field_get:risk.rtn_quote_field.field)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::quote_gateway_market_field*>(
      &::risk::_quote_gateway_market_field_default_instance_);
}
::risk::quote_gateway_market_field* rtn_quote_field::mutable_field() {
  
  if (field_ == NULL) {
    field_ = new ::risk::quote_gateway_market_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.rtn_quote_field.field)
  return field_;
}
::risk::quote_gateway_market_field* rtn_quote_field::release_field() {
  // @@protoc_insertion_point(field_release:risk.rtn_quote_field.field)
  
  ::risk::quote_gateway_market_field* temp = field_;
  field_ = NULL;
  return temp;
}
void rtn_quote_field::set_allocated_field(::risk::quote_gateway_market_field* field) {
  delete field_;
  field_ = field;
  if (field) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rtn_quote_field.field)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rsp_position_field::kHeaderFieldNumber;
const int rsp_position_field::kFieldFieldNumber;
const int rsp_position_field::kTrypositionprofitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rsp_position_field::rsp_position_field()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.rsp_position_field)
}
rsp_position_field::rsp_position_field(const rsp_position_field& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::risk::rsp_head_info(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_field()) {
    field_ = new ::risk::trade_gateway_position_field(*from.field_);
  } else {
    field_ = NULL;
  }
  trypositionprofit_ = from.trypositionprofit_;
  // @@protoc_insertion_point(copy_constructor:risk.rsp_position_field)
}

void rsp_position_field::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trypositionprofit_) -
      reinterpret_cast<char*>(&header_)) + sizeof(trypositionprofit_));
  _cached_size_ = 0;
}

rsp_position_field::~rsp_position_field() {
  // @@protoc_insertion_point(destructor:risk.rsp_position_field)
  SharedDtor();
}

void rsp_position_field::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete field_;
}

void rsp_position_field::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rsp_position_field::descriptor() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const rsp_position_field& rsp_position_field::default_instance() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

rsp_position_field* rsp_position_field::New(::google::protobuf::Arena* arena) const {
  rsp_position_field* n = new rsp_position_field;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rsp_position_field::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.rsp_position_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && field_ != NULL) {
    delete field_;
  }
  field_ = NULL;
  trypositionprofit_ = 0;
  _internal_metadata_.Clear();
}

bool rsp_position_field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.rsp_position_field)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .risk.rsp_head_info header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .risk.trade_gateway_position_field field = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double trypositionprofit = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &trypositionprofit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.rsp_position_field)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.rsp_position_field)
  return false;
#undef DO_
}

void rsp_position_field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.rsp_position_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .risk.rsp_head_info header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .risk.trade_gateway_position_field field = 2;
  if (this->has_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->field_, output);
  }

  // double trypositionprofit = 3;
  if (this->trypositionprofit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->trypositionprofit(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.rsp_position_field)
}

::google::protobuf::uint8* rsp_position_field::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.rsp_position_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .risk.rsp_head_info header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .risk.trade_gateway_position_field field = 2;
  if (this->has_field()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->field_, deterministic, target);
  }

  // double trypositionprofit = 3;
  if (this->trypositionprofit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->trypositionprofit(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.rsp_position_field)
  return target;
}

size_t rsp_position_field::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.rsp_position_field)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .risk.rsp_head_info header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .risk.trade_gateway_position_field field = 2;
  if (this->has_field()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->field_);
  }

  // double trypositionprofit = 3;
  if (this->trypositionprofit() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rsp_position_field::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.rsp_position_field)
  GOOGLE_DCHECK_NE(&from, this);
  const rsp_position_field* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const rsp_position_field>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.rsp_position_field)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.rsp_position_field)
    MergeFrom(*source);
  }
}

void rsp_position_field::MergeFrom(const rsp_position_field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.rsp_position_field)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::risk::rsp_head_info::MergeFrom(from.header());
  }
  if (from.has_field()) {
    mutable_field()->::risk::trade_gateway_position_field::MergeFrom(from.field());
  }
  if (from.trypositionprofit() != 0) {
    set_trypositionprofit(from.trypositionprofit());
  }
}

void rsp_position_field::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.rsp_position_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rsp_position_field::CopyFrom(const rsp_position_field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.rsp_position_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rsp_position_field::IsInitialized() const {
  return true;
}

void rsp_position_field::Swap(rsp_position_field* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rsp_position_field::InternalSwap(rsp_position_field* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(field_, other->field_);
  swap(trypositionprofit_, other->trypositionprofit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rsp_position_field::GetMetadata() const {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rsp_position_field

// .risk.rsp_head_info header = 1;
bool rsp_position_field::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void rsp_position_field::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::risk::rsp_head_info& rsp_position_field::header() const {
  const ::risk::rsp_head_info* p = header_;
  // @@protoc_insertion_point(field_get:risk.rsp_position_field.header)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::rsp_head_info*>(
      &::risk::_rsp_head_info_default_instance_);
}
::risk::rsp_head_info* rsp_position_field::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::risk::rsp_head_info;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_position_field.header)
  return header_;
}
::risk::rsp_head_info* rsp_position_field::release_header() {
  // @@protoc_insertion_point(field_release:risk.rsp_position_field.header)
  
  ::risk::rsp_head_info* temp = header_;
  header_ = NULL;
  return temp;
}
void rsp_position_field::set_allocated_header(::risk::rsp_head_info* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_position_field.header)
}

// .risk.trade_gateway_position_field field = 2;
bool rsp_position_field::has_field() const {
  return this != internal_default_instance() && field_ != NULL;
}
void rsp_position_field::clear_field() {
  if (GetArenaNoVirtual() == NULL && field_ != NULL) delete field_;
  field_ = NULL;
}
const ::risk::trade_gateway_position_field& rsp_position_field::field() const {
  const ::risk::trade_gateway_position_field* p = field_;
  // @@protoc_insertion_point(field_get:risk.rsp_position_field.field)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::trade_gateway_position_field*>(
      &::risk::_trade_gateway_position_field_default_instance_);
}
::risk::trade_gateway_position_field* rsp_position_field::mutable_field() {
  
  if (field_ == NULL) {
    field_ = new ::risk::trade_gateway_position_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_position_field.field)
  return field_;
}
::risk::trade_gateway_position_field* rsp_position_field::release_field() {
  // @@protoc_insertion_point(field_release:risk.rsp_position_field.field)
  
  ::risk::trade_gateway_position_field* temp = field_;
  field_ = NULL;
  return temp;
}
void rsp_position_field::set_allocated_field(::risk::trade_gateway_position_field* field) {
  delete field_;
  field_ = field;
  if (field) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_position_field.field)
}

// double trypositionprofit = 3;
void rsp_position_field::clear_trypositionprofit() {
  trypositionprofit_ = 0;
}
double rsp_position_field::trypositionprofit() const {
  // @@protoc_insertion_point(field_get:risk.rsp_position_field.trypositionprofit)
  return trypositionprofit_;
}
void rsp_position_field::set_trypositionprofit(double value) {
  
  trypositionprofit_ = value;
  // @@protoc_insertion_point(field_set:risk.rsp_position_field.trypositionprofit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rtn_position_field::kFieldFieldNumber;
const int rtn_position_field::kTrypositionprofitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rtn_position_field::rtn_position_field()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.rtn_position_field)
}
rtn_position_field::rtn_position_field(const rtn_position_field& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_field()) {
    field_ = new ::risk::trade_gateway_position_field(*from.field_);
  } else {
    field_ = NULL;
  }
  trypositionprofit_ = from.trypositionprofit_;
  // @@protoc_insertion_point(copy_constructor:risk.rtn_position_field)
}

void rtn_position_field::SharedCtor() {
  ::memset(&field_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trypositionprofit_) -
      reinterpret_cast<char*>(&field_)) + sizeof(trypositionprofit_));
  _cached_size_ = 0;
}

rtn_position_field::~rtn_position_field() {
  // @@protoc_insertion_point(destructor:risk.rtn_position_field)
  SharedDtor();
}

void rtn_position_field::SharedDtor() {
  if (this != internal_default_instance()) delete field_;
}

void rtn_position_field::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rtn_position_field::descriptor() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const rtn_position_field& rtn_position_field::default_instance() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

rtn_position_field* rtn_position_field::New(::google::protobuf::Arena* arena) const {
  rtn_position_field* n = new rtn_position_field;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rtn_position_field::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.rtn_position_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && field_ != NULL) {
    delete field_;
  }
  field_ = NULL;
  trypositionprofit_ = 0;
  _internal_metadata_.Clear();
}

bool rtn_position_field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.rtn_position_field)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .risk.trade_gateway_position_field field = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double trypositionprofit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &trypositionprofit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.rtn_position_field)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.rtn_position_field)
  return false;
#undef DO_
}

void rtn_position_field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.rtn_position_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .risk.trade_gateway_position_field field = 1;
  if (this->has_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->field_, output);
  }

  // double trypositionprofit = 2;
  if (this->trypositionprofit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->trypositionprofit(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.rtn_position_field)
}

::google::protobuf::uint8* rtn_position_field::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.rtn_position_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .risk.trade_gateway_position_field field = 1;
  if (this->has_field()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->field_, deterministic, target);
  }

  // double trypositionprofit = 2;
  if (this->trypositionprofit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->trypositionprofit(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.rtn_position_field)
  return target;
}

size_t rtn_position_field::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.rtn_position_field)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .risk.trade_gateway_position_field field = 1;
  if (this->has_field()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->field_);
  }

  // double trypositionprofit = 2;
  if (this->trypositionprofit() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rtn_position_field::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.rtn_position_field)
  GOOGLE_DCHECK_NE(&from, this);
  const rtn_position_field* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const rtn_position_field>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.rtn_position_field)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.rtn_position_field)
    MergeFrom(*source);
  }
}

void rtn_position_field::MergeFrom(const rtn_position_field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.rtn_position_field)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_field()) {
    mutable_field()->::risk::trade_gateway_position_field::MergeFrom(from.field());
  }
  if (from.trypositionprofit() != 0) {
    set_trypositionprofit(from.trypositionprofit());
  }
}

void rtn_position_field::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.rtn_position_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rtn_position_field::CopyFrom(const rtn_position_field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.rtn_position_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rtn_position_field::IsInitialized() const {
  return true;
}

void rtn_position_field::Swap(rtn_position_field* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rtn_position_field::InternalSwap(rtn_position_field* other) {
  using std::swap;
  swap(field_, other->field_);
  swap(trypositionprofit_, other->trypositionprofit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rtn_position_field::GetMetadata() const {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rtn_position_field

// .risk.trade_gateway_position_field field = 1;
bool rtn_position_field::has_field() const {
  return this != internal_default_instance() && field_ != NULL;
}
void rtn_position_field::clear_field() {
  if (GetArenaNoVirtual() == NULL && field_ != NULL) delete field_;
  field_ = NULL;
}
const ::risk::trade_gateway_position_field& rtn_position_field::field() const {
  const ::risk::trade_gateway_position_field* p = field_;
  // @@protoc_insertion_point(field_get:risk.rtn_position_field.field)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::trade_gateway_position_field*>(
      &::risk::_trade_gateway_position_field_default_instance_);
}
::risk::trade_gateway_position_field* rtn_position_field::mutable_field() {
  
  if (field_ == NULL) {
    field_ = new ::risk::trade_gateway_position_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.rtn_position_field.field)
  return field_;
}
::risk::trade_gateway_position_field* rtn_position_field::release_field() {
  // @@protoc_insertion_point(field_release:risk.rtn_position_field.field)
  
  ::risk::trade_gateway_position_field* temp = field_;
  field_ = NULL;
  return temp;
}
void rtn_position_field::set_allocated_field(::risk::trade_gateway_position_field* field) {
  delete field_;
  field_ = field;
  if (field) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rtn_position_field.field)
}

// double trypositionprofit = 2;
void rtn_position_field::clear_trypositionprofit() {
  trypositionprofit_ = 0;
}
double rtn_position_field::trypositionprofit() const {
  // @@protoc_insertion_point(field_get:risk.rtn_position_field.trypositionprofit)
  return trypositionprofit_;
}
void rtn_position_field::set_trypositionprofit(double value) {
  
  trypositionprofit_ = value;
  // @@protoc_insertion_point(field_set:risk.rtn_position_field.trypositionprofit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rsp_trade_field::kHeaderFieldNumber;
const int rsp_trade_field::kFieldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rsp_trade_field::rsp_trade_field()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.rsp_trade_field)
}
rsp_trade_field::rsp_trade_field(const rsp_trade_field& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::risk::rsp_head_info(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_field()) {
    field_ = new ::risk::trade_gateway_trade_field(*from.field_);
  } else {
    field_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:risk.rsp_trade_field)
}

void rsp_trade_field::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&field_) -
      reinterpret_cast<char*>(&header_)) + sizeof(field_));
  _cached_size_ = 0;
}

rsp_trade_field::~rsp_trade_field() {
  // @@protoc_insertion_point(destructor:risk.rsp_trade_field)
  SharedDtor();
}

void rsp_trade_field::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete field_;
}

void rsp_trade_field::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rsp_trade_field::descriptor() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const rsp_trade_field& rsp_trade_field::default_instance() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

rsp_trade_field* rsp_trade_field::New(::google::protobuf::Arena* arena) const {
  rsp_trade_field* n = new rsp_trade_field;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rsp_trade_field::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.rsp_trade_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && field_ != NULL) {
    delete field_;
  }
  field_ = NULL;
  _internal_metadata_.Clear();
}

bool rsp_trade_field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.rsp_trade_field)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .risk.rsp_head_info header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .risk.trade_gateway_trade_field field = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.rsp_trade_field)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.rsp_trade_field)
  return false;
#undef DO_
}

void rsp_trade_field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.rsp_trade_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .risk.rsp_head_info header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .risk.trade_gateway_trade_field field = 2;
  if (this->has_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->field_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.rsp_trade_field)
}

::google::protobuf::uint8* rsp_trade_field::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.rsp_trade_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .risk.rsp_head_info header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .risk.trade_gateway_trade_field field = 2;
  if (this->has_field()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->field_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.rsp_trade_field)
  return target;
}

size_t rsp_trade_field::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.rsp_trade_field)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .risk.rsp_head_info header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .risk.trade_gateway_trade_field field = 2;
  if (this->has_field()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->field_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rsp_trade_field::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.rsp_trade_field)
  GOOGLE_DCHECK_NE(&from, this);
  const rsp_trade_field* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const rsp_trade_field>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.rsp_trade_field)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.rsp_trade_field)
    MergeFrom(*source);
  }
}

void rsp_trade_field::MergeFrom(const rsp_trade_field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.rsp_trade_field)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::risk::rsp_head_info::MergeFrom(from.header());
  }
  if (from.has_field()) {
    mutable_field()->::risk::trade_gateway_trade_field::MergeFrom(from.field());
  }
}

void rsp_trade_field::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.rsp_trade_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rsp_trade_field::CopyFrom(const rsp_trade_field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.rsp_trade_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rsp_trade_field::IsInitialized() const {
  return true;
}

void rsp_trade_field::Swap(rsp_trade_field* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rsp_trade_field::InternalSwap(rsp_trade_field* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(field_, other->field_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rsp_trade_field::GetMetadata() const {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rsp_trade_field

// .risk.rsp_head_info header = 1;
bool rsp_trade_field::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void rsp_trade_field::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::risk::rsp_head_info& rsp_trade_field::header() const {
  const ::risk::rsp_head_info* p = header_;
  // @@protoc_insertion_point(field_get:risk.rsp_trade_field.header)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::rsp_head_info*>(
      &::risk::_rsp_head_info_default_instance_);
}
::risk::rsp_head_info* rsp_trade_field::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::risk::rsp_head_info;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_trade_field.header)
  return header_;
}
::risk::rsp_head_info* rsp_trade_field::release_header() {
  // @@protoc_insertion_point(field_release:risk.rsp_trade_field.header)
  
  ::risk::rsp_head_info* temp = header_;
  header_ = NULL;
  return temp;
}
void rsp_trade_field::set_allocated_header(::risk::rsp_head_info* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_trade_field.header)
}

// .risk.trade_gateway_trade_field field = 2;
bool rsp_trade_field::has_field() const {
  return this != internal_default_instance() && field_ != NULL;
}
void rsp_trade_field::clear_field() {
  if (GetArenaNoVirtual() == NULL && field_ != NULL) delete field_;
  field_ = NULL;
}
const ::risk::trade_gateway_trade_field& rsp_trade_field::field() const {
  const ::risk::trade_gateway_trade_field* p = field_;
  // @@protoc_insertion_point(field_get:risk.rsp_trade_field.field)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::trade_gateway_trade_field*>(
      &::risk::_trade_gateway_trade_field_default_instance_);
}
::risk::trade_gateway_trade_field* rsp_trade_field::mutable_field() {
  
  if (field_ == NULL) {
    field_ = new ::risk::trade_gateway_trade_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_trade_field.field)
  return field_;
}
::risk::trade_gateway_trade_field* rsp_trade_field::release_field() {
  // @@protoc_insertion_point(field_release:risk.rsp_trade_field.field)
  
  ::risk::trade_gateway_trade_field* temp = field_;
  field_ = NULL;
  return temp;
}
void rsp_trade_field::set_allocated_field(::risk::trade_gateway_trade_field* field) {
  delete field_;
  field_ = field;
  if (field) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_trade_field.field)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rsp_order_field::kHeaderFieldNumber;
const int rsp_order_field::kFieldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rsp_order_field::rsp_order_field()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.rsp_order_field)
}
rsp_order_field::rsp_order_field(const rsp_order_field& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::risk::rsp_head_info(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_field()) {
    field_ = new ::risk::trade_gateway_order_field(*from.field_);
  } else {
    field_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:risk.rsp_order_field)
}

void rsp_order_field::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&field_) -
      reinterpret_cast<char*>(&header_)) + sizeof(field_));
  _cached_size_ = 0;
}

rsp_order_field::~rsp_order_field() {
  // @@protoc_insertion_point(destructor:risk.rsp_order_field)
  SharedDtor();
}

void rsp_order_field::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete field_;
}

void rsp_order_field::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rsp_order_field::descriptor() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const rsp_order_field& rsp_order_field::default_instance() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

rsp_order_field* rsp_order_field::New(::google::protobuf::Arena* arena) const {
  rsp_order_field* n = new rsp_order_field;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rsp_order_field::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.rsp_order_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && field_ != NULL) {
    delete field_;
  }
  field_ = NULL;
  _internal_metadata_.Clear();
}

bool rsp_order_field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.rsp_order_field)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .risk.rsp_head_info header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .risk.trade_gateway_order_field field = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.rsp_order_field)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.rsp_order_field)
  return false;
#undef DO_
}

void rsp_order_field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.rsp_order_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .risk.rsp_head_info header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .risk.trade_gateway_order_field field = 2;
  if (this->has_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->field_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.rsp_order_field)
}

::google::protobuf::uint8* rsp_order_field::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.rsp_order_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .risk.rsp_head_info header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .risk.trade_gateway_order_field field = 2;
  if (this->has_field()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->field_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.rsp_order_field)
  return target;
}

size_t rsp_order_field::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.rsp_order_field)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .risk.rsp_head_info header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .risk.trade_gateway_order_field field = 2;
  if (this->has_field()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->field_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rsp_order_field::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.rsp_order_field)
  GOOGLE_DCHECK_NE(&from, this);
  const rsp_order_field* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const rsp_order_field>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.rsp_order_field)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.rsp_order_field)
    MergeFrom(*source);
  }
}

void rsp_order_field::MergeFrom(const rsp_order_field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.rsp_order_field)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::risk::rsp_head_info::MergeFrom(from.header());
  }
  if (from.has_field()) {
    mutable_field()->::risk::trade_gateway_order_field::MergeFrom(from.field());
  }
}

void rsp_order_field::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.rsp_order_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rsp_order_field::CopyFrom(const rsp_order_field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.rsp_order_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rsp_order_field::IsInitialized() const {
  return true;
}

void rsp_order_field::Swap(rsp_order_field* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rsp_order_field::InternalSwap(rsp_order_field* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(field_, other->field_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rsp_order_field::GetMetadata() const {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rsp_order_field

// .risk.rsp_head_info header = 1;
bool rsp_order_field::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void rsp_order_field::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::risk::rsp_head_info& rsp_order_field::header() const {
  const ::risk::rsp_head_info* p = header_;
  // @@protoc_insertion_point(field_get:risk.rsp_order_field.header)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::rsp_head_info*>(
      &::risk::_rsp_head_info_default_instance_);
}
::risk::rsp_head_info* rsp_order_field::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::risk::rsp_head_info;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_order_field.header)
  return header_;
}
::risk::rsp_head_info* rsp_order_field::release_header() {
  // @@protoc_insertion_point(field_release:risk.rsp_order_field.header)
  
  ::risk::rsp_head_info* temp = header_;
  header_ = NULL;
  return temp;
}
void rsp_order_field::set_allocated_header(::risk::rsp_head_info* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_order_field.header)
}

// .risk.trade_gateway_order_field field = 2;
bool rsp_order_field::has_field() const {
  return this != internal_default_instance() && field_ != NULL;
}
void rsp_order_field::clear_field() {
  if (GetArenaNoVirtual() == NULL && field_ != NULL) delete field_;
  field_ = NULL;
}
const ::risk::trade_gateway_order_field& rsp_order_field::field() const {
  const ::risk::trade_gateway_order_field* p = field_;
  // @@protoc_insertion_point(field_get:risk.rsp_order_field.field)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::trade_gateway_order_field*>(
      &::risk::_trade_gateway_order_field_default_instance_);
}
::risk::trade_gateway_order_field* rsp_order_field::mutable_field() {
  
  if (field_ == NULL) {
    field_ = new ::risk::trade_gateway_order_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_order_field.field)
  return field_;
}
::risk::trade_gateway_order_field* rsp_order_field::release_field() {
  // @@protoc_insertion_point(field_release:risk.rsp_order_field.field)
  
  ::risk::trade_gateway_order_field* temp = field_;
  field_ = NULL;
  return temp;
}
void rsp_order_field::set_allocated_field(::risk::trade_gateway_order_field* field) {
  delete field_;
  field_ = field;
  if (field) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_order_field.field)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rtn_trade_field::kFieldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rtn_trade_field::rtn_trade_field()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.rtn_trade_field)
}
rtn_trade_field::rtn_trade_field(const rtn_trade_field& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_field()) {
    field_ = new ::risk::trade_gateway_trade_field(*from.field_);
  } else {
    field_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:risk.rtn_trade_field)
}

void rtn_trade_field::SharedCtor() {
  field_ = NULL;
  _cached_size_ = 0;
}

rtn_trade_field::~rtn_trade_field() {
  // @@protoc_insertion_point(destructor:risk.rtn_trade_field)
  SharedDtor();
}

void rtn_trade_field::SharedDtor() {
  if (this != internal_default_instance()) delete field_;
}

void rtn_trade_field::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rtn_trade_field::descriptor() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const rtn_trade_field& rtn_trade_field::default_instance() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

rtn_trade_field* rtn_trade_field::New(::google::protobuf::Arena* arena) const {
  rtn_trade_field* n = new rtn_trade_field;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rtn_trade_field::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.rtn_trade_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && field_ != NULL) {
    delete field_;
  }
  field_ = NULL;
  _internal_metadata_.Clear();
}

bool rtn_trade_field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.rtn_trade_field)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .risk.trade_gateway_trade_field field = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.rtn_trade_field)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.rtn_trade_field)
  return false;
#undef DO_
}

void rtn_trade_field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.rtn_trade_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .risk.trade_gateway_trade_field field = 1;
  if (this->has_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->field_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.rtn_trade_field)
}

::google::protobuf::uint8* rtn_trade_field::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.rtn_trade_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .risk.trade_gateway_trade_field field = 1;
  if (this->has_field()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->field_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.rtn_trade_field)
  return target;
}

size_t rtn_trade_field::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.rtn_trade_field)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .risk.trade_gateway_trade_field field = 1;
  if (this->has_field()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->field_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rtn_trade_field::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.rtn_trade_field)
  GOOGLE_DCHECK_NE(&from, this);
  const rtn_trade_field* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const rtn_trade_field>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.rtn_trade_field)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.rtn_trade_field)
    MergeFrom(*source);
  }
}

void rtn_trade_field::MergeFrom(const rtn_trade_field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.rtn_trade_field)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_field()) {
    mutable_field()->::risk::trade_gateway_trade_field::MergeFrom(from.field());
  }
}

void rtn_trade_field::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.rtn_trade_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rtn_trade_field::CopyFrom(const rtn_trade_field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.rtn_trade_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rtn_trade_field::IsInitialized() const {
  return true;
}

void rtn_trade_field::Swap(rtn_trade_field* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rtn_trade_field::InternalSwap(rtn_trade_field* other) {
  using std::swap;
  swap(field_, other->field_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rtn_trade_field::GetMetadata() const {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rtn_trade_field

// .risk.trade_gateway_trade_field field = 1;
bool rtn_trade_field::has_field() const {
  return this != internal_default_instance() && field_ != NULL;
}
void rtn_trade_field::clear_field() {
  if (GetArenaNoVirtual() == NULL && field_ != NULL) delete field_;
  field_ = NULL;
}
const ::risk::trade_gateway_trade_field& rtn_trade_field::field() const {
  const ::risk::trade_gateway_trade_field* p = field_;
  // @@protoc_insertion_point(field_get:risk.rtn_trade_field.field)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::trade_gateway_trade_field*>(
      &::risk::_trade_gateway_trade_field_default_instance_);
}
::risk::trade_gateway_trade_field* rtn_trade_field::mutable_field() {
  
  if (field_ == NULL) {
    field_ = new ::risk::trade_gateway_trade_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.rtn_trade_field.field)
  return field_;
}
::risk::trade_gateway_trade_field* rtn_trade_field::release_field() {
  // @@protoc_insertion_point(field_release:risk.rtn_trade_field.field)
  
  ::risk::trade_gateway_trade_field* temp = field_;
  field_ = NULL;
  return temp;
}
void rtn_trade_field::set_allocated_field(::risk::trade_gateway_trade_field* field) {
  delete field_;
  field_ = field;
  if (field) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rtn_trade_field.field)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rtn_order_field::kFieldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rtn_order_field::rtn_order_field()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.rtn_order_field)
}
rtn_order_field::rtn_order_field(const rtn_order_field& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_field()) {
    field_ = new ::risk::trade_gateway_order_field(*from.field_);
  } else {
    field_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:risk.rtn_order_field)
}

void rtn_order_field::SharedCtor() {
  field_ = NULL;
  _cached_size_ = 0;
}

rtn_order_field::~rtn_order_field() {
  // @@protoc_insertion_point(destructor:risk.rtn_order_field)
  SharedDtor();
}

void rtn_order_field::SharedDtor() {
  if (this != internal_default_instance()) delete field_;
}

void rtn_order_field::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rtn_order_field::descriptor() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const rtn_order_field& rtn_order_field::default_instance() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

rtn_order_field* rtn_order_field::New(::google::protobuf::Arena* arena) const {
  rtn_order_field* n = new rtn_order_field;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rtn_order_field::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.rtn_order_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && field_ != NULL) {
    delete field_;
  }
  field_ = NULL;
  _internal_metadata_.Clear();
}

bool rtn_order_field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.rtn_order_field)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .risk.trade_gateway_order_field field = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.rtn_order_field)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.rtn_order_field)
  return false;
#undef DO_
}

void rtn_order_field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.rtn_order_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .risk.trade_gateway_order_field field = 1;
  if (this->has_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->field_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.rtn_order_field)
}

::google::protobuf::uint8* rtn_order_field::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.rtn_order_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .risk.trade_gateway_order_field field = 1;
  if (this->has_field()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->field_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.rtn_order_field)
  return target;
}

size_t rtn_order_field::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.rtn_order_field)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .risk.trade_gateway_order_field field = 1;
  if (this->has_field()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->field_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rtn_order_field::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.rtn_order_field)
  GOOGLE_DCHECK_NE(&from, this);
  const rtn_order_field* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const rtn_order_field>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.rtn_order_field)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.rtn_order_field)
    MergeFrom(*source);
  }
}

void rtn_order_field::MergeFrom(const rtn_order_field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.rtn_order_field)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_field()) {
    mutable_field()->::risk::trade_gateway_order_field::MergeFrom(from.field());
  }
}

void rtn_order_field::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.rtn_order_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rtn_order_field::CopyFrom(const rtn_order_field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.rtn_order_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rtn_order_field::IsInitialized() const {
  return true;
}

void rtn_order_field::Swap(rtn_order_field* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rtn_order_field::InternalSwap(rtn_order_field* other) {
  using std::swap;
  swap(field_, other->field_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rtn_order_field::GetMetadata() const {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rtn_order_field

// .risk.trade_gateway_order_field field = 1;
bool rtn_order_field::has_field() const {
  return this != internal_default_instance() && field_ != NULL;
}
void rtn_order_field::clear_field() {
  if (GetArenaNoVirtual() == NULL && field_ != NULL) delete field_;
  field_ = NULL;
}
const ::risk::trade_gateway_order_field& rtn_order_field::field() const {
  const ::risk::trade_gateway_order_field* p = field_;
  // @@protoc_insertion_point(field_get:risk.rtn_order_field.field)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::trade_gateway_order_field*>(
      &::risk::_trade_gateway_order_field_default_instance_);
}
::risk::trade_gateway_order_field* rtn_order_field::mutable_field() {
  
  if (field_ == NULL) {
    field_ = new ::risk::trade_gateway_order_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.rtn_order_field.field)
  return field_;
}
::risk::trade_gateway_order_field* rtn_order_field::release_field() {
  // @@protoc_insertion_point(field_release:risk.rtn_order_field.field)
  
  ::risk::trade_gateway_order_field* temp = field_;
  field_ = NULL;
  return temp;
}
void rtn_order_field::set_allocated_field(::risk::trade_gateway_order_field* field) {
  delete field_;
  field_ = field;
  if (field) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rtn_order_field.field)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rsp_sync_account_field::kHeaderFieldNumber;
const int rsp_sync_account_field::kFieldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rsp_sync_account_field::rsp_sync_account_field()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.rsp_sync_account_field)
}
rsp_sync_account_field::rsp_sync_account_field(const rsp_sync_account_field& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::risk::rsp_head_info(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_field()) {
    field_ = new ::risk::trade_gateway_sync_account_field(*from.field_);
  } else {
    field_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:risk.rsp_sync_account_field)
}

void rsp_sync_account_field::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&field_) -
      reinterpret_cast<char*>(&header_)) + sizeof(field_));
  _cached_size_ = 0;
}

rsp_sync_account_field::~rsp_sync_account_field() {
  // @@protoc_insertion_point(destructor:risk.rsp_sync_account_field)
  SharedDtor();
}

void rsp_sync_account_field::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete field_;
}

void rsp_sync_account_field::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rsp_sync_account_field::descriptor() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const rsp_sync_account_field& rsp_sync_account_field::default_instance() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

rsp_sync_account_field* rsp_sync_account_field::New(::google::protobuf::Arena* arena) const {
  rsp_sync_account_field* n = new rsp_sync_account_field;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rsp_sync_account_field::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.rsp_sync_account_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && field_ != NULL) {
    delete field_;
  }
  field_ = NULL;
  _internal_metadata_.Clear();
}

bool rsp_sync_account_field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.rsp_sync_account_field)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .risk.rsp_head_info header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .risk.trade_gateway_sync_account_field field = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.rsp_sync_account_field)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.rsp_sync_account_field)
  return false;
#undef DO_
}

void rsp_sync_account_field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.rsp_sync_account_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .risk.rsp_head_info header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .risk.trade_gateway_sync_account_field field = 2;
  if (this->has_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->field_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.rsp_sync_account_field)
}

::google::protobuf::uint8* rsp_sync_account_field::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.rsp_sync_account_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .risk.rsp_head_info header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .risk.trade_gateway_sync_account_field field = 2;
  if (this->has_field()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->field_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.rsp_sync_account_field)
  return target;
}

size_t rsp_sync_account_field::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.rsp_sync_account_field)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .risk.rsp_head_info header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .risk.trade_gateway_sync_account_field field = 2;
  if (this->has_field()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->field_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rsp_sync_account_field::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.rsp_sync_account_field)
  GOOGLE_DCHECK_NE(&from, this);
  const rsp_sync_account_field* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const rsp_sync_account_field>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.rsp_sync_account_field)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.rsp_sync_account_field)
    MergeFrom(*source);
  }
}

void rsp_sync_account_field::MergeFrom(const rsp_sync_account_field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.rsp_sync_account_field)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::risk::rsp_head_info::MergeFrom(from.header());
  }
  if (from.has_field()) {
    mutable_field()->::risk::trade_gateway_sync_account_field::MergeFrom(from.field());
  }
}

void rsp_sync_account_field::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.rsp_sync_account_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rsp_sync_account_field::CopyFrom(const rsp_sync_account_field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.rsp_sync_account_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rsp_sync_account_field::IsInitialized() const {
  return true;
}

void rsp_sync_account_field::Swap(rsp_sync_account_field* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rsp_sync_account_field::InternalSwap(rsp_sync_account_field* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(field_, other->field_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rsp_sync_account_field::GetMetadata() const {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rsp_sync_account_field

// .risk.rsp_head_info header = 1;
bool rsp_sync_account_field::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void rsp_sync_account_field::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::risk::rsp_head_info& rsp_sync_account_field::header() const {
  const ::risk::rsp_head_info* p = header_;
  // @@protoc_insertion_point(field_get:risk.rsp_sync_account_field.header)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::rsp_head_info*>(
      &::risk::_rsp_head_info_default_instance_);
}
::risk::rsp_head_info* rsp_sync_account_field::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::risk::rsp_head_info;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_sync_account_field.header)
  return header_;
}
::risk::rsp_head_info* rsp_sync_account_field::release_header() {
  // @@protoc_insertion_point(field_release:risk.rsp_sync_account_field.header)
  
  ::risk::rsp_head_info* temp = header_;
  header_ = NULL;
  return temp;
}
void rsp_sync_account_field::set_allocated_header(::risk::rsp_head_info* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_sync_account_field.header)
}

// .risk.trade_gateway_sync_account_field field = 2;
bool rsp_sync_account_field::has_field() const {
  return this != internal_default_instance() && field_ != NULL;
}
void rsp_sync_account_field::clear_field() {
  if (GetArenaNoVirtual() == NULL && field_ != NULL) delete field_;
  field_ = NULL;
}
const ::risk::trade_gateway_sync_account_field& rsp_sync_account_field::field() const {
  const ::risk::trade_gateway_sync_account_field* p = field_;
  // @@protoc_insertion_point(field_get:risk.rsp_sync_account_field.field)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::trade_gateway_sync_account_field*>(
      &::risk::_trade_gateway_sync_account_field_default_instance_);
}
::risk::trade_gateway_sync_account_field* rsp_sync_account_field::mutable_field() {
  
  if (field_ == NULL) {
    field_ = new ::risk::trade_gateway_sync_account_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_sync_account_field.field)
  return field_;
}
::risk::trade_gateway_sync_account_field* rsp_sync_account_field::release_field() {
  // @@protoc_insertion_point(field_release:risk.rsp_sync_account_field.field)
  
  ::risk::trade_gateway_sync_account_field* temp = field_;
  field_ = NULL;
  return temp;
}
void rsp_sync_account_field::set_allocated_field(::risk::trade_gateway_sync_account_field* field) {
  delete field_;
  field_ = field;
  if (field) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_sync_account_field.field)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rtn_sync_account_field::kFieldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rtn_sync_account_field::rtn_sync_account_field()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.rtn_sync_account_field)
}
rtn_sync_account_field::rtn_sync_account_field(const rtn_sync_account_field& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_field()) {
    field_ = new ::risk::trade_gateway_sync_account_field(*from.field_);
  } else {
    field_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:risk.rtn_sync_account_field)
}

void rtn_sync_account_field::SharedCtor() {
  field_ = NULL;
  _cached_size_ = 0;
}

rtn_sync_account_field::~rtn_sync_account_field() {
  // @@protoc_insertion_point(destructor:risk.rtn_sync_account_field)
  SharedDtor();
}

void rtn_sync_account_field::SharedDtor() {
  if (this != internal_default_instance()) delete field_;
}

void rtn_sync_account_field::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rtn_sync_account_field::descriptor() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const rtn_sync_account_field& rtn_sync_account_field::default_instance() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

rtn_sync_account_field* rtn_sync_account_field::New(::google::protobuf::Arena* arena) const {
  rtn_sync_account_field* n = new rtn_sync_account_field;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rtn_sync_account_field::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.rtn_sync_account_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && field_ != NULL) {
    delete field_;
  }
  field_ = NULL;
  _internal_metadata_.Clear();
}

bool rtn_sync_account_field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.rtn_sync_account_field)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .risk.trade_gateway_sync_account_field field = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.rtn_sync_account_field)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.rtn_sync_account_field)
  return false;
#undef DO_
}

void rtn_sync_account_field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.rtn_sync_account_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .risk.trade_gateway_sync_account_field field = 1;
  if (this->has_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->field_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.rtn_sync_account_field)
}

::google::protobuf::uint8* rtn_sync_account_field::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.rtn_sync_account_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .risk.trade_gateway_sync_account_field field = 1;
  if (this->has_field()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->field_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.rtn_sync_account_field)
  return target;
}

size_t rtn_sync_account_field::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.rtn_sync_account_field)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .risk.trade_gateway_sync_account_field field = 1;
  if (this->has_field()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->field_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rtn_sync_account_field::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.rtn_sync_account_field)
  GOOGLE_DCHECK_NE(&from, this);
  const rtn_sync_account_field* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const rtn_sync_account_field>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.rtn_sync_account_field)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.rtn_sync_account_field)
    MergeFrom(*source);
  }
}

void rtn_sync_account_field::MergeFrom(const rtn_sync_account_field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.rtn_sync_account_field)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_field()) {
    mutable_field()->::risk::trade_gateway_sync_account_field::MergeFrom(from.field());
  }
}

void rtn_sync_account_field::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.rtn_sync_account_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rtn_sync_account_field::CopyFrom(const rtn_sync_account_field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.rtn_sync_account_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rtn_sync_account_field::IsInitialized() const {
  return true;
}

void rtn_sync_account_field::Swap(rtn_sync_account_field* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rtn_sync_account_field::InternalSwap(rtn_sync_account_field* other) {
  using std::swap;
  swap(field_, other->field_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rtn_sync_account_field::GetMetadata() const {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rtn_sync_account_field

// .risk.trade_gateway_sync_account_field field = 1;
bool rtn_sync_account_field::has_field() const {
  return this != internal_default_instance() && field_ != NULL;
}
void rtn_sync_account_field::clear_field() {
  if (GetArenaNoVirtual() == NULL && field_ != NULL) delete field_;
  field_ = NULL;
}
const ::risk::trade_gateway_sync_account_field& rtn_sync_account_field::field() const {
  const ::risk::trade_gateway_sync_account_field* p = field_;
  // @@protoc_insertion_point(field_get:risk.rtn_sync_account_field.field)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::trade_gateway_sync_account_field*>(
      &::risk::_trade_gateway_sync_account_field_default_instance_);
}
::risk::trade_gateway_sync_account_field* rtn_sync_account_field::mutable_field() {
  
  if (field_ == NULL) {
    field_ = new ::risk::trade_gateway_sync_account_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.rtn_sync_account_field.field)
  return field_;
}
::risk::trade_gateway_sync_account_field* rtn_sync_account_field::release_field() {
  // @@protoc_insertion_point(field_release:risk.rtn_sync_account_field.field)
  
  ::risk::trade_gateway_sync_account_field* temp = field_;
  field_ = NULL;
  return temp;
}
void rtn_sync_account_field::set_allocated_field(::risk::trade_gateway_sync_account_field* field) {
  delete field_;
  field_ = field;
  if (field) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rtn_sync_account_field.field)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int shfe_margin_field::kPreFavorableFieldNumber;
const int shfe_margin_field::kBigSideFavorableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

shfe_margin_field::shfe_margin_field()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.shfe_margin_field)
}
shfe_margin_field::shfe_margin_field(const shfe_margin_field& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pre_favorable_, &from.pre_favorable_,
    static_cast<size_t>(reinterpret_cast<char*>(&big_side_favorable_) -
    reinterpret_cast<char*>(&pre_favorable_)) + sizeof(big_side_favorable_));
  // @@protoc_insertion_point(copy_constructor:risk.shfe_margin_field)
}

void shfe_margin_field::SharedCtor() {
  ::memset(&pre_favorable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&big_side_favorable_) -
      reinterpret_cast<char*>(&pre_favorable_)) + sizeof(big_side_favorable_));
  _cached_size_ = 0;
}

shfe_margin_field::~shfe_margin_field() {
  // @@protoc_insertion_point(destructor:risk.shfe_margin_field)
  SharedDtor();
}

void shfe_margin_field::SharedDtor() {
}

void shfe_margin_field::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* shfe_margin_field::descriptor() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const shfe_margin_field& shfe_margin_field::default_instance() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

shfe_margin_field* shfe_margin_field::New(::google::protobuf::Arena* arena) const {
  shfe_margin_field* n = new shfe_margin_field;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void shfe_margin_field::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.shfe_margin_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pre_favorable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&big_side_favorable_) -
      reinterpret_cast<char*>(&pre_favorable_)) + sizeof(big_side_favorable_));
  _internal_metadata_.Clear();
}

bool shfe_margin_field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.shfe_margin_field)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double pre_favorable = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pre_favorable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double big_side_favorable = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &big_side_favorable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.shfe_margin_field)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.shfe_margin_field)
  return false;
#undef DO_
}

void shfe_margin_field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.shfe_margin_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double pre_favorable = 1;
  if (this->pre_favorable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->pre_favorable(), output);
  }

  // double big_side_favorable = 2;
  if (this->big_side_favorable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->big_side_favorable(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.shfe_margin_field)
}

::google::protobuf::uint8* shfe_margin_field::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.shfe_margin_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double pre_favorable = 1;
  if (this->pre_favorable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->pre_favorable(), target);
  }

  // double big_side_favorable = 2;
  if (this->big_side_favorable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->big_side_favorable(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.shfe_margin_field)
  return target;
}

size_t shfe_margin_field::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.shfe_margin_field)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double pre_favorable = 1;
  if (this->pre_favorable() != 0) {
    total_size += 1 + 8;
  }

  // double big_side_favorable = 2;
  if (this->big_side_favorable() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void shfe_margin_field::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.shfe_margin_field)
  GOOGLE_DCHECK_NE(&from, this);
  const shfe_margin_field* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const shfe_margin_field>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.shfe_margin_field)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.shfe_margin_field)
    MergeFrom(*source);
  }
}

void shfe_margin_field::MergeFrom(const shfe_margin_field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.shfe_margin_field)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pre_favorable() != 0) {
    set_pre_favorable(from.pre_favorable());
  }
  if (from.big_side_favorable() != 0) {
    set_big_side_favorable(from.big_side_favorable());
  }
}

void shfe_margin_field::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.shfe_margin_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void shfe_margin_field::CopyFrom(const shfe_margin_field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.shfe_margin_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool shfe_margin_field::IsInitialized() const {
  return true;
}

void shfe_margin_field::Swap(shfe_margin_field* other) {
  if (other == this) return;
  InternalSwap(other);
}
void shfe_margin_field::InternalSwap(shfe_margin_field* other) {
  using std::swap;
  swap(pre_favorable_, other->pre_favorable_);
  swap(big_side_favorable_, other->big_side_favorable_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata shfe_margin_field::GetMetadata() const {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// shfe_margin_field

// double pre_favorable = 1;
void shfe_margin_field::clear_pre_favorable() {
  pre_favorable_ = 0;
}
double shfe_margin_field::pre_favorable() const {
  // @@protoc_insertion_point(field_get:risk.shfe_margin_field.pre_favorable)
  return pre_favorable_;
}
void shfe_margin_field::set_pre_favorable(double value) {
  
  pre_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.shfe_margin_field.pre_favorable)
}

// double big_side_favorable = 2;
void shfe_margin_field::clear_big_side_favorable() {
  big_side_favorable_ = 0;
}
double shfe_margin_field::big_side_favorable() const {
  // @@protoc_insertion_point(field_get:risk.shfe_margin_field.big_side_favorable)
  return big_side_favorable_;
}
void shfe_margin_field::set_big_side_favorable(double value) {
  
  big_side_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.shfe_margin_field.big_side_favorable)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int cffex_margin_field::kPreFavorableFieldNumber;
const int cffex_margin_field::kSpeculationFavorableFieldNumber;
const int cffex_margin_field::kHedgingFavorableFieldNumber;
const int cffex_margin_field::kArbitrageFavorableFieldNumber;
const int cffex_margin_field::kMarketFavorableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

cffex_margin_field::cffex_margin_field()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.cffex_margin_field)
}
cffex_margin_field::cffex_margin_field(const cffex_margin_field& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pre_favorable_, &from.pre_favorable_,
    static_cast<size_t>(reinterpret_cast<char*>(&market_favorable_) -
    reinterpret_cast<char*>(&pre_favorable_)) + sizeof(market_favorable_));
  // @@protoc_insertion_point(copy_constructor:risk.cffex_margin_field)
}

void cffex_margin_field::SharedCtor() {
  ::memset(&pre_favorable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&market_favorable_) -
      reinterpret_cast<char*>(&pre_favorable_)) + sizeof(market_favorable_));
  _cached_size_ = 0;
}

cffex_margin_field::~cffex_margin_field() {
  // @@protoc_insertion_point(destructor:risk.cffex_margin_field)
  SharedDtor();
}

void cffex_margin_field::SharedDtor() {
}

void cffex_margin_field::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cffex_margin_field::descriptor() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const cffex_margin_field& cffex_margin_field::default_instance() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

cffex_margin_field* cffex_margin_field::New(::google::protobuf::Arena* arena) const {
  cffex_margin_field* n = new cffex_margin_field;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void cffex_margin_field::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.cffex_margin_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pre_favorable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&market_favorable_) -
      reinterpret_cast<char*>(&pre_favorable_)) + sizeof(market_favorable_));
  _internal_metadata_.Clear();
}

bool cffex_margin_field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.cffex_margin_field)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double pre_favorable = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pre_favorable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double speculation_favorable = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speculation_favorable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double hedging_favorable = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &hedging_favorable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double arbitrage_favorable = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &arbitrage_favorable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double market_favorable = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &market_favorable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.cffex_margin_field)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.cffex_margin_field)
  return false;
#undef DO_
}

void cffex_margin_field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.cffex_margin_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double pre_favorable = 1;
  if (this->pre_favorable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->pre_favorable(), output);
  }

  // double speculation_favorable = 2;
  if (this->speculation_favorable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->speculation_favorable(), output);
  }

  // double hedging_favorable = 3;
  if (this->hedging_favorable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->hedging_favorable(), output);
  }

  // double arbitrage_favorable = 4;
  if (this->arbitrage_favorable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->arbitrage_favorable(), output);
  }

  // double market_favorable = 5;
  if (this->market_favorable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->market_favorable(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.cffex_margin_field)
}

::google::protobuf::uint8* cffex_margin_field::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.cffex_margin_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double pre_favorable = 1;
  if (this->pre_favorable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->pre_favorable(), target);
  }

  // double speculation_favorable = 2;
  if (this->speculation_favorable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->speculation_favorable(), target);
  }

  // double hedging_favorable = 3;
  if (this->hedging_favorable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->hedging_favorable(), target);
  }

  // double arbitrage_favorable = 4;
  if (this->arbitrage_favorable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->arbitrage_favorable(), target);
  }

  // double market_favorable = 5;
  if (this->market_favorable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->market_favorable(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.cffex_margin_field)
  return target;
}

size_t cffex_margin_field::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.cffex_margin_field)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double pre_favorable = 1;
  if (this->pre_favorable() != 0) {
    total_size += 1 + 8;
  }

  // double speculation_favorable = 2;
  if (this->speculation_favorable() != 0) {
    total_size += 1 + 8;
  }

  // double hedging_favorable = 3;
  if (this->hedging_favorable() != 0) {
    total_size += 1 + 8;
  }

  // double arbitrage_favorable = 4;
  if (this->arbitrage_favorable() != 0) {
    total_size += 1 + 8;
  }

  // double market_favorable = 5;
  if (this->market_favorable() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cffex_margin_field::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.cffex_margin_field)
  GOOGLE_DCHECK_NE(&from, this);
  const cffex_margin_field* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const cffex_margin_field>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.cffex_margin_field)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.cffex_margin_field)
    MergeFrom(*source);
  }
}

void cffex_margin_field::MergeFrom(const cffex_margin_field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.cffex_margin_field)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pre_favorable() != 0) {
    set_pre_favorable(from.pre_favorable());
  }
  if (from.speculation_favorable() != 0) {
    set_speculation_favorable(from.speculation_favorable());
  }
  if (from.hedging_favorable() != 0) {
    set_hedging_favorable(from.hedging_favorable());
  }
  if (from.arbitrage_favorable() != 0) {
    set_arbitrage_favorable(from.arbitrage_favorable());
  }
  if (from.market_favorable() != 0) {
    set_market_favorable(from.market_favorable());
  }
}

void cffex_margin_field::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.cffex_margin_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cffex_margin_field::CopyFrom(const cffex_margin_field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.cffex_margin_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cffex_margin_field::IsInitialized() const {
  return true;
}

void cffex_margin_field::Swap(cffex_margin_field* other) {
  if (other == this) return;
  InternalSwap(other);
}
void cffex_margin_field::InternalSwap(cffex_margin_field* other) {
  using std::swap;
  swap(pre_favorable_, other->pre_favorable_);
  swap(speculation_favorable_, other->speculation_favorable_);
  swap(hedging_favorable_, other->hedging_favorable_);
  swap(arbitrage_favorable_, other->arbitrage_favorable_);
  swap(market_favorable_, other->market_favorable_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata cffex_margin_field::GetMetadata() const {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// cffex_margin_field

// double pre_favorable = 1;
void cffex_margin_field::clear_pre_favorable() {
  pre_favorable_ = 0;
}
double cffex_margin_field::pre_favorable() const {
  // @@protoc_insertion_point(field_get:risk.cffex_margin_field.pre_favorable)
  return pre_favorable_;
}
void cffex_margin_field::set_pre_favorable(double value) {
  
  pre_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.cffex_margin_field.pre_favorable)
}

// double speculation_favorable = 2;
void cffex_margin_field::clear_speculation_favorable() {
  speculation_favorable_ = 0;
}
double cffex_margin_field::speculation_favorable() const {
  // @@protoc_insertion_point(field_get:risk.cffex_margin_field.speculation_favorable)
  return speculation_favorable_;
}
void cffex_margin_field::set_speculation_favorable(double value) {
  
  speculation_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.cffex_margin_field.speculation_favorable)
}

// double hedging_favorable = 3;
void cffex_margin_field::clear_hedging_favorable() {
  hedging_favorable_ = 0;
}
double cffex_margin_field::hedging_favorable() const {
  // @@protoc_insertion_point(field_get:risk.cffex_margin_field.hedging_favorable)
  return hedging_favorable_;
}
void cffex_margin_field::set_hedging_favorable(double value) {
  
  hedging_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.cffex_margin_field.hedging_favorable)
}

// double arbitrage_favorable = 4;
void cffex_margin_field::clear_arbitrage_favorable() {
  arbitrage_favorable_ = 0;
}
double cffex_margin_field::arbitrage_favorable() const {
  // @@protoc_insertion_point(field_get:risk.cffex_margin_field.arbitrage_favorable)
  return arbitrage_favorable_;
}
void cffex_margin_field::set_arbitrage_favorable(double value) {
  
  arbitrage_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.cffex_margin_field.arbitrage_favorable)
}

// double market_favorable = 5;
void cffex_margin_field::clear_market_favorable() {
  market_favorable_ = 0;
}
double cffex_margin_field::market_favorable() const {
  // @@protoc_insertion_point(field_get:risk.cffex_margin_field.market_favorable)
  return market_favorable_;
}
void cffex_margin_field::set_market_favorable(double value) {
  
  market_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.cffex_margin_field.market_favorable)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int dce_margin_field::kPreFavorableFieldNumber;
const int dce_margin_field::kSpFavorableFieldNumber;
const int dce_margin_field::kSpcFavorableFieldNumber;
const int dce_margin_field::kLockedFavorableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

dce_margin_field::dce_margin_field()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.dce_margin_field)
}
dce_margin_field::dce_margin_field(const dce_margin_field& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pre_favorable_, &from.pre_favorable_,
    static_cast<size_t>(reinterpret_cast<char*>(&locked_favorable_) -
    reinterpret_cast<char*>(&pre_favorable_)) + sizeof(locked_favorable_));
  // @@protoc_insertion_point(copy_constructor:risk.dce_margin_field)
}

void dce_margin_field::SharedCtor() {
  ::memset(&pre_favorable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&locked_favorable_) -
      reinterpret_cast<char*>(&pre_favorable_)) + sizeof(locked_favorable_));
  _cached_size_ = 0;
}

dce_margin_field::~dce_margin_field() {
  // @@protoc_insertion_point(destructor:risk.dce_margin_field)
  SharedDtor();
}

void dce_margin_field::SharedDtor() {
}

void dce_margin_field::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dce_margin_field::descriptor() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const dce_margin_field& dce_margin_field::default_instance() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

dce_margin_field* dce_margin_field::New(::google::protobuf::Arena* arena) const {
  dce_margin_field* n = new dce_margin_field;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void dce_margin_field::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.dce_margin_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pre_favorable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&locked_favorable_) -
      reinterpret_cast<char*>(&pre_favorable_)) + sizeof(locked_favorable_));
  _internal_metadata_.Clear();
}

bool dce_margin_field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.dce_margin_field)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double pre_favorable = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pre_favorable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double sp_favorable = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sp_favorable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double spc_favorable = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &spc_favorable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double locked_favorable = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &locked_favorable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.dce_margin_field)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.dce_margin_field)
  return false;
#undef DO_
}

void dce_margin_field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.dce_margin_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double pre_favorable = 1;
  if (this->pre_favorable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->pre_favorable(), output);
  }

  // double sp_favorable = 2;
  if (this->sp_favorable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->sp_favorable(), output);
  }

  // double spc_favorable = 3;
  if (this->spc_favorable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->spc_favorable(), output);
  }

  // double locked_favorable = 4;
  if (this->locked_favorable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->locked_favorable(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.dce_margin_field)
}

::google::protobuf::uint8* dce_margin_field::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.dce_margin_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double pre_favorable = 1;
  if (this->pre_favorable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->pre_favorable(), target);
  }

  // double sp_favorable = 2;
  if (this->sp_favorable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->sp_favorable(), target);
  }

  // double spc_favorable = 3;
  if (this->spc_favorable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->spc_favorable(), target);
  }

  // double locked_favorable = 4;
  if (this->locked_favorable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->locked_favorable(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.dce_margin_field)
  return target;
}

size_t dce_margin_field::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.dce_margin_field)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double pre_favorable = 1;
  if (this->pre_favorable() != 0) {
    total_size += 1 + 8;
  }

  // double sp_favorable = 2;
  if (this->sp_favorable() != 0) {
    total_size += 1 + 8;
  }

  // double spc_favorable = 3;
  if (this->spc_favorable() != 0) {
    total_size += 1 + 8;
  }

  // double locked_favorable = 4;
  if (this->locked_favorable() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dce_margin_field::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.dce_margin_field)
  GOOGLE_DCHECK_NE(&from, this);
  const dce_margin_field* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const dce_margin_field>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.dce_margin_field)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.dce_margin_field)
    MergeFrom(*source);
  }
}

void dce_margin_field::MergeFrom(const dce_margin_field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.dce_margin_field)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pre_favorable() != 0) {
    set_pre_favorable(from.pre_favorable());
  }
  if (from.sp_favorable() != 0) {
    set_sp_favorable(from.sp_favorable());
  }
  if (from.spc_favorable() != 0) {
    set_spc_favorable(from.spc_favorable());
  }
  if (from.locked_favorable() != 0) {
    set_locked_favorable(from.locked_favorable());
  }
}

void dce_margin_field::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.dce_margin_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dce_margin_field::CopyFrom(const dce_margin_field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.dce_margin_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dce_margin_field::IsInitialized() const {
  return true;
}

void dce_margin_field::Swap(dce_margin_field* other) {
  if (other == this) return;
  InternalSwap(other);
}
void dce_margin_field::InternalSwap(dce_margin_field* other) {
  using std::swap;
  swap(pre_favorable_, other->pre_favorable_);
  swap(sp_favorable_, other->sp_favorable_);
  swap(spc_favorable_, other->spc_favorable_);
  swap(locked_favorable_, other->locked_favorable_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata dce_margin_field::GetMetadata() const {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// dce_margin_field

// double pre_favorable = 1;
void dce_margin_field::clear_pre_favorable() {
  pre_favorable_ = 0;
}
double dce_margin_field::pre_favorable() const {
  // @@protoc_insertion_point(field_get:risk.dce_margin_field.pre_favorable)
  return pre_favorable_;
}
void dce_margin_field::set_pre_favorable(double value) {
  
  pre_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.dce_margin_field.pre_favorable)
}

// double sp_favorable = 2;
void dce_margin_field::clear_sp_favorable() {
  sp_favorable_ = 0;
}
double dce_margin_field::sp_favorable() const {
  // @@protoc_insertion_point(field_get:risk.dce_margin_field.sp_favorable)
  return sp_favorable_;
}
void dce_margin_field::set_sp_favorable(double value) {
  
  sp_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.dce_margin_field.sp_favorable)
}

// double spc_favorable = 3;
void dce_margin_field::clear_spc_favorable() {
  spc_favorable_ = 0;
}
double dce_margin_field::spc_favorable() const {
  // @@protoc_insertion_point(field_get:risk.dce_margin_field.spc_favorable)
  return spc_favorable_;
}
void dce_margin_field::set_spc_favorable(double value) {
  
  spc_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.dce_margin_field.spc_favorable)
}

// double locked_favorable = 4;
void dce_margin_field::clear_locked_favorable() {
  locked_favorable_ = 0;
}
double dce_margin_field::locked_favorable() const {
  // @@protoc_insertion_point(field_get:risk.dce_margin_field.locked_favorable)
  return locked_favorable_;
}
void dce_margin_field::set_locked_favorable(double value) {
  
  locked_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.dce_margin_field.locked_favorable)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int czce_margin_field::kPreFavorableFieldNumber;
const int czce_margin_field::kSpdFavorableFieldNumber;
const int czce_margin_field::kIpsFavorableFieldNumber;
const int czce_margin_field::kPrtFavorableFieldNumber;
const int czce_margin_field::kStdFavorableFieldNumber;
const int czce_margin_field::kStgFavorableFieldNumber;
const int czce_margin_field::kZprtFavorableFieldNumber;
const int czce_margin_field::kLockedFavorableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

czce_margin_field::czce_margin_field()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.czce_margin_field)
}
czce_margin_field::czce_margin_field(const czce_margin_field& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pre_favorable_, &from.pre_favorable_,
    static_cast<size_t>(reinterpret_cast<char*>(&locked_favorable_) -
    reinterpret_cast<char*>(&pre_favorable_)) + sizeof(locked_favorable_));
  // @@protoc_insertion_point(copy_constructor:risk.czce_margin_field)
}

void czce_margin_field::SharedCtor() {
  ::memset(&pre_favorable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&locked_favorable_) -
      reinterpret_cast<char*>(&pre_favorable_)) + sizeof(locked_favorable_));
  _cached_size_ = 0;
}

czce_margin_field::~czce_margin_field() {
  // @@protoc_insertion_point(destructor:risk.czce_margin_field)
  SharedDtor();
}

void czce_margin_field::SharedDtor() {
}

void czce_margin_field::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* czce_margin_field::descriptor() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const czce_margin_field& czce_margin_field::default_instance() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

czce_margin_field* czce_margin_field::New(::google::protobuf::Arena* arena) const {
  czce_margin_field* n = new czce_margin_field;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void czce_margin_field::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.czce_margin_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pre_favorable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&locked_favorable_) -
      reinterpret_cast<char*>(&pre_favorable_)) + sizeof(locked_favorable_));
  _internal_metadata_.Clear();
}

bool czce_margin_field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.czce_margin_field)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double pre_favorable = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pre_favorable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double spd_favorable = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &spd_favorable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double ips_favorable = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ips_favorable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double prt_favorable = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &prt_favorable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double std_favorable = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &std_favorable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double stg_favorable = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stg_favorable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double zprt_favorable = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &zprt_favorable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double locked_favorable = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &locked_favorable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.czce_margin_field)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.czce_margin_field)
  return false;
#undef DO_
}

void czce_margin_field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.czce_margin_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double pre_favorable = 1;
  if (this->pre_favorable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->pre_favorable(), output);
  }

  // double spd_favorable = 2;
  if (this->spd_favorable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->spd_favorable(), output);
  }

  // double ips_favorable = 3;
  if (this->ips_favorable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->ips_favorable(), output);
  }

  // double prt_favorable = 4;
  if (this->prt_favorable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->prt_favorable(), output);
  }

  // double std_favorable = 5;
  if (this->std_favorable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->std_favorable(), output);
  }

  // double stg_favorable = 6;
  if (this->stg_favorable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->stg_favorable(), output);
  }

  // double zprt_favorable = 7;
  if (this->zprt_favorable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->zprt_favorable(), output);
  }

  // double locked_favorable = 8;
  if (this->locked_favorable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->locked_favorable(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.czce_margin_field)
}

::google::protobuf::uint8* czce_margin_field::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.czce_margin_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double pre_favorable = 1;
  if (this->pre_favorable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->pre_favorable(), target);
  }

  // double spd_favorable = 2;
  if (this->spd_favorable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->spd_favorable(), target);
  }

  // double ips_favorable = 3;
  if (this->ips_favorable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->ips_favorable(), target);
  }

  // double prt_favorable = 4;
  if (this->prt_favorable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->prt_favorable(), target);
  }

  // double std_favorable = 5;
  if (this->std_favorable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->std_favorable(), target);
  }

  // double stg_favorable = 6;
  if (this->stg_favorable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->stg_favorable(), target);
  }

  // double zprt_favorable = 7;
  if (this->zprt_favorable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->zprt_favorable(), target);
  }

  // double locked_favorable = 8;
  if (this->locked_favorable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->locked_favorable(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.czce_margin_field)
  return target;
}

size_t czce_margin_field::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.czce_margin_field)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double pre_favorable = 1;
  if (this->pre_favorable() != 0) {
    total_size += 1 + 8;
  }

  // double spd_favorable = 2;
  if (this->spd_favorable() != 0) {
    total_size += 1 + 8;
  }

  // double ips_favorable = 3;
  if (this->ips_favorable() != 0) {
    total_size += 1 + 8;
  }

  // double prt_favorable = 4;
  if (this->prt_favorable() != 0) {
    total_size += 1 + 8;
  }

  // double std_favorable = 5;
  if (this->std_favorable() != 0) {
    total_size += 1 + 8;
  }

  // double stg_favorable = 6;
  if (this->stg_favorable() != 0) {
    total_size += 1 + 8;
  }

  // double zprt_favorable = 7;
  if (this->zprt_favorable() != 0) {
    total_size += 1 + 8;
  }

  // double locked_favorable = 8;
  if (this->locked_favorable() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void czce_margin_field::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.czce_margin_field)
  GOOGLE_DCHECK_NE(&from, this);
  const czce_margin_field* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const czce_margin_field>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.czce_margin_field)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.czce_margin_field)
    MergeFrom(*source);
  }
}

void czce_margin_field::MergeFrom(const czce_margin_field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.czce_margin_field)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pre_favorable() != 0) {
    set_pre_favorable(from.pre_favorable());
  }
  if (from.spd_favorable() != 0) {
    set_spd_favorable(from.spd_favorable());
  }
  if (from.ips_favorable() != 0) {
    set_ips_favorable(from.ips_favorable());
  }
  if (from.prt_favorable() != 0) {
    set_prt_favorable(from.prt_favorable());
  }
  if (from.std_favorable() != 0) {
    set_std_favorable(from.std_favorable());
  }
  if (from.stg_favorable() != 0) {
    set_stg_favorable(from.stg_favorable());
  }
  if (from.zprt_favorable() != 0) {
    set_zprt_favorable(from.zprt_favorable());
  }
  if (from.locked_favorable() != 0) {
    set_locked_favorable(from.locked_favorable());
  }
}

void czce_margin_field::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.czce_margin_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void czce_margin_field::CopyFrom(const czce_margin_field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.czce_margin_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool czce_margin_field::IsInitialized() const {
  return true;
}

void czce_margin_field::Swap(czce_margin_field* other) {
  if (other == this) return;
  InternalSwap(other);
}
void czce_margin_field::InternalSwap(czce_margin_field* other) {
  using std::swap;
  swap(pre_favorable_, other->pre_favorable_);
  swap(spd_favorable_, other->spd_favorable_);
  swap(ips_favorable_, other->ips_favorable_);
  swap(prt_favorable_, other->prt_favorable_);
  swap(std_favorable_, other->std_favorable_);
  swap(stg_favorable_, other->stg_favorable_);
  swap(zprt_favorable_, other->zprt_favorable_);
  swap(locked_favorable_, other->locked_favorable_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata czce_margin_field::GetMetadata() const {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// czce_margin_field

// double pre_favorable = 1;
void czce_margin_field::clear_pre_favorable() {
  pre_favorable_ = 0;
}
double czce_margin_field::pre_favorable() const {
  // @@protoc_insertion_point(field_get:risk.czce_margin_field.pre_favorable)
  return pre_favorable_;
}
void czce_margin_field::set_pre_favorable(double value) {
  
  pre_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.czce_margin_field.pre_favorable)
}

// double spd_favorable = 2;
void czce_margin_field::clear_spd_favorable() {
  spd_favorable_ = 0;
}
double czce_margin_field::spd_favorable() const {
  // @@protoc_insertion_point(field_get:risk.czce_margin_field.spd_favorable)
  return spd_favorable_;
}
void czce_margin_field::set_spd_favorable(double value) {
  
  spd_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.czce_margin_field.spd_favorable)
}

// double ips_favorable = 3;
void czce_margin_field::clear_ips_favorable() {
  ips_favorable_ = 0;
}
double czce_margin_field::ips_favorable() const {
  // @@protoc_insertion_point(field_get:risk.czce_margin_field.ips_favorable)
  return ips_favorable_;
}
void czce_margin_field::set_ips_favorable(double value) {
  
  ips_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.czce_margin_field.ips_favorable)
}

// double prt_favorable = 4;
void czce_margin_field::clear_prt_favorable() {
  prt_favorable_ = 0;
}
double czce_margin_field::prt_favorable() const {
  // @@protoc_insertion_point(field_get:risk.czce_margin_field.prt_favorable)
  return prt_favorable_;
}
void czce_margin_field::set_prt_favorable(double value) {
  
  prt_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.czce_margin_field.prt_favorable)
}

// double std_favorable = 5;
void czce_margin_field::clear_std_favorable() {
  std_favorable_ = 0;
}
double czce_margin_field::std_favorable() const {
  // @@protoc_insertion_point(field_get:risk.czce_margin_field.std_favorable)
  return std_favorable_;
}
void czce_margin_field::set_std_favorable(double value) {
  
  std_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.czce_margin_field.std_favorable)
}

// double stg_favorable = 6;
void czce_margin_field::clear_stg_favorable() {
  stg_favorable_ = 0;
}
double czce_margin_field::stg_favorable() const {
  // @@protoc_insertion_point(field_get:risk.czce_margin_field.stg_favorable)
  return stg_favorable_;
}
void czce_margin_field::set_stg_favorable(double value) {
  
  stg_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.czce_margin_field.stg_favorable)
}

// double zprt_favorable = 7;
void czce_margin_field::clear_zprt_favorable() {
  zprt_favorable_ = 0;
}
double czce_margin_field::zprt_favorable() const {
  // @@protoc_insertion_point(field_get:risk.czce_margin_field.zprt_favorable)
  return zprt_favorable_;
}
void czce_margin_field::set_zprt_favorable(double value) {
  
  zprt_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.czce_margin_field.zprt_favorable)
}

// double locked_favorable = 8;
void czce_margin_field::clear_locked_favorable() {
  locked_favorable_ = 0;
}
double czce_margin_field::locked_favorable() const {
  // @@protoc_insertion_point(field_get:risk.czce_margin_field.locked_favorable)
  return locked_favorable_;
}
void czce_margin_field::set_locked_favorable(double value) {
  
  locked_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.czce_margin_field.locked_favorable)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ine_margin_field::kPreFavorableFieldNumber;
const int ine_margin_field::kBigSideFavorableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ine_margin_field::ine_margin_field()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.ine_margin_field)
}
ine_margin_field::ine_margin_field(const ine_margin_field& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pre_favorable_, &from.pre_favorable_,
    static_cast<size_t>(reinterpret_cast<char*>(&big_side_favorable_) -
    reinterpret_cast<char*>(&pre_favorable_)) + sizeof(big_side_favorable_));
  // @@protoc_insertion_point(copy_constructor:risk.ine_margin_field)
}

void ine_margin_field::SharedCtor() {
  ::memset(&pre_favorable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&big_side_favorable_) -
      reinterpret_cast<char*>(&pre_favorable_)) + sizeof(big_side_favorable_));
  _cached_size_ = 0;
}

ine_margin_field::~ine_margin_field() {
  // @@protoc_insertion_point(destructor:risk.ine_margin_field)
  SharedDtor();
}

void ine_margin_field::SharedDtor() {
}

void ine_margin_field::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ine_margin_field::descriptor() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ine_margin_field& ine_margin_field::default_instance() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

ine_margin_field* ine_margin_field::New(::google::protobuf::Arena* arena) const {
  ine_margin_field* n = new ine_margin_field;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ine_margin_field::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.ine_margin_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pre_favorable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&big_side_favorable_) -
      reinterpret_cast<char*>(&pre_favorable_)) + sizeof(big_side_favorable_));
  _internal_metadata_.Clear();
}

bool ine_margin_field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.ine_margin_field)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double pre_favorable = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pre_favorable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double big_side_favorable = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &big_side_favorable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.ine_margin_field)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.ine_margin_field)
  return false;
#undef DO_
}

void ine_margin_field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.ine_margin_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double pre_favorable = 1;
  if (this->pre_favorable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->pre_favorable(), output);
  }

  // double big_side_favorable = 2;
  if (this->big_side_favorable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->big_side_favorable(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.ine_margin_field)
}

::google::protobuf::uint8* ine_margin_field::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.ine_margin_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double pre_favorable = 1;
  if (this->pre_favorable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->pre_favorable(), target);
  }

  // double big_side_favorable = 2;
  if (this->big_side_favorable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->big_side_favorable(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.ine_margin_field)
  return target;
}

size_t ine_margin_field::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.ine_margin_field)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double pre_favorable = 1;
  if (this->pre_favorable() != 0) {
    total_size += 1 + 8;
  }

  // double big_side_favorable = 2;
  if (this->big_side_favorable() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ine_margin_field::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.ine_margin_field)
  GOOGLE_DCHECK_NE(&from, this);
  const ine_margin_field* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ine_margin_field>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.ine_margin_field)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.ine_margin_field)
    MergeFrom(*source);
  }
}

void ine_margin_field::MergeFrom(const ine_margin_field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.ine_margin_field)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pre_favorable() != 0) {
    set_pre_favorable(from.pre_favorable());
  }
  if (from.big_side_favorable() != 0) {
    set_big_side_favorable(from.big_side_favorable());
  }
}

void ine_margin_field::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.ine_margin_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ine_margin_field::CopyFrom(const ine_margin_field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.ine_margin_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ine_margin_field::IsInitialized() const {
  return true;
}

void ine_margin_field::Swap(ine_margin_field* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ine_margin_field::InternalSwap(ine_margin_field* other) {
  using std::swap;
  swap(pre_favorable_, other->pre_favorable_);
  swap(big_side_favorable_, other->big_side_favorable_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ine_margin_field::GetMetadata() const {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ine_margin_field

// double pre_favorable = 1;
void ine_margin_field::clear_pre_favorable() {
  pre_favorable_ = 0;
}
double ine_margin_field::pre_favorable() const {
  // @@protoc_insertion_point(field_get:risk.ine_margin_field.pre_favorable)
  return pre_favorable_;
}
void ine_margin_field::set_pre_favorable(double value) {
  
  pre_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.ine_margin_field.pre_favorable)
}

// double big_side_favorable = 2;
void ine_margin_field::clear_big_side_favorable() {
  big_side_favorable_ = 0;
}
double ine_margin_field::big_side_favorable() const {
  // @@protoc_insertion_point(field_get:risk.ine_margin_field.big_side_favorable)
  return big_side_favorable_;
}
void ine_margin_field::set_big_side_favorable(double value) {
  
  big_side_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.ine_margin_field.big_side_favorable)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int delivery_margin_field::kShfeMarginFieldNumber;
const int delivery_margin_field::kCffexMarginFieldNumber;
const int delivery_margin_field::kDceMarginFieldNumber;
const int delivery_margin_field::kCzceMarginFieldNumber;
const int delivery_margin_field::kIneMarginFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

delivery_margin_field::delivery_margin_field()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.delivery_margin_field)
}
delivery_margin_field::delivery_margin_field(const delivery_margin_field& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&shfe_margin_, &from.shfe_margin_,
    static_cast<size_t>(reinterpret_cast<char*>(&ine_margin_) -
    reinterpret_cast<char*>(&shfe_margin_)) + sizeof(ine_margin_));
  // @@protoc_insertion_point(copy_constructor:risk.delivery_margin_field)
}

void delivery_margin_field::SharedCtor() {
  ::memset(&shfe_margin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ine_margin_) -
      reinterpret_cast<char*>(&shfe_margin_)) + sizeof(ine_margin_));
  _cached_size_ = 0;
}

delivery_margin_field::~delivery_margin_field() {
  // @@protoc_insertion_point(destructor:risk.delivery_margin_field)
  SharedDtor();
}

void delivery_margin_field::SharedDtor() {
}

void delivery_margin_field::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* delivery_margin_field::descriptor() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const delivery_margin_field& delivery_margin_field::default_instance() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

delivery_margin_field* delivery_margin_field::New(::google::protobuf::Arena* arena) const {
  delivery_margin_field* n = new delivery_margin_field;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void delivery_margin_field::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.delivery_margin_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&shfe_margin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ine_margin_) -
      reinterpret_cast<char*>(&shfe_margin_)) + sizeof(ine_margin_));
  _internal_metadata_.Clear();
}

bool delivery_margin_field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.delivery_margin_field)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double shfe_margin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &shfe_margin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double cffex_margin = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cffex_margin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double dce_margin = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dce_margin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double czce_margin = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &czce_margin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double ine_margin = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ine_margin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.delivery_margin_field)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.delivery_margin_field)
  return false;
#undef DO_
}

void delivery_margin_field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.delivery_margin_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double shfe_margin = 1;
  if (this->shfe_margin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->shfe_margin(), output);
  }

  // double cffex_margin = 2;
  if (this->cffex_margin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->cffex_margin(), output);
  }

  // double dce_margin = 3;
  if (this->dce_margin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->dce_margin(), output);
  }

  // double czce_margin = 4;
  if (this->czce_margin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->czce_margin(), output);
  }

  // double ine_margin = 5;
  if (this->ine_margin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->ine_margin(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.delivery_margin_field)
}

::google::protobuf::uint8* delivery_margin_field::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.delivery_margin_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double shfe_margin = 1;
  if (this->shfe_margin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->shfe_margin(), target);
  }

  // double cffex_margin = 2;
  if (this->cffex_margin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->cffex_margin(), target);
  }

  // double dce_margin = 3;
  if (this->dce_margin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->dce_margin(), target);
  }

  // double czce_margin = 4;
  if (this->czce_margin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->czce_margin(), target);
  }

  // double ine_margin = 5;
  if (this->ine_margin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->ine_margin(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.delivery_margin_field)
  return target;
}

size_t delivery_margin_field::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.delivery_margin_field)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double shfe_margin = 1;
  if (this->shfe_margin() != 0) {
    total_size += 1 + 8;
  }

  // double cffex_margin = 2;
  if (this->cffex_margin() != 0) {
    total_size += 1 + 8;
  }

  // double dce_margin = 3;
  if (this->dce_margin() != 0) {
    total_size += 1 + 8;
  }

  // double czce_margin = 4;
  if (this->czce_margin() != 0) {
    total_size += 1 + 8;
  }

  // double ine_margin = 5;
  if (this->ine_margin() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void delivery_margin_field::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.delivery_margin_field)
  GOOGLE_DCHECK_NE(&from, this);
  const delivery_margin_field* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const delivery_margin_field>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.delivery_margin_field)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.delivery_margin_field)
    MergeFrom(*source);
  }
}

void delivery_margin_field::MergeFrom(const delivery_margin_field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.delivery_margin_field)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.shfe_margin() != 0) {
    set_shfe_margin(from.shfe_margin());
  }
  if (from.cffex_margin() != 0) {
    set_cffex_margin(from.cffex_margin());
  }
  if (from.dce_margin() != 0) {
    set_dce_margin(from.dce_margin());
  }
  if (from.czce_margin() != 0) {
    set_czce_margin(from.czce_margin());
  }
  if (from.ine_margin() != 0) {
    set_ine_margin(from.ine_margin());
  }
}

void delivery_margin_field::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.delivery_margin_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void delivery_margin_field::CopyFrom(const delivery_margin_field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.delivery_margin_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool delivery_margin_field::IsInitialized() const {
  return true;
}

void delivery_margin_field::Swap(delivery_margin_field* other) {
  if (other == this) return;
  InternalSwap(other);
}
void delivery_margin_field::InternalSwap(delivery_margin_field* other) {
  using std::swap;
  swap(shfe_margin_, other->shfe_margin_);
  swap(cffex_margin_, other->cffex_margin_);
  swap(dce_margin_, other->dce_margin_);
  swap(czce_margin_, other->czce_margin_);
  swap(ine_margin_, other->ine_margin_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata delivery_margin_field::GetMetadata() const {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// delivery_margin_field

// double shfe_margin = 1;
void delivery_margin_field::clear_shfe_margin() {
  shfe_margin_ = 0;
}
double delivery_margin_field::shfe_margin() const {
  // @@protoc_insertion_point(field_get:risk.delivery_margin_field.shfe_margin)
  return shfe_margin_;
}
void delivery_margin_field::set_shfe_margin(double value) {
  
  shfe_margin_ = value;
  // @@protoc_insertion_point(field_set:risk.delivery_margin_field.shfe_margin)
}

// double cffex_margin = 2;
void delivery_margin_field::clear_cffex_margin() {
  cffex_margin_ = 0;
}
double delivery_margin_field::cffex_margin() const {
  // @@protoc_insertion_point(field_get:risk.delivery_margin_field.cffex_margin)
  return cffex_margin_;
}
void delivery_margin_field::set_cffex_margin(double value) {
  
  cffex_margin_ = value;
  // @@protoc_insertion_point(field_set:risk.delivery_margin_field.cffex_margin)
}

// double dce_margin = 3;
void delivery_margin_field::clear_dce_margin() {
  dce_margin_ = 0;
}
double delivery_margin_field::dce_margin() const {
  // @@protoc_insertion_point(field_get:risk.delivery_margin_field.dce_margin)
  return dce_margin_;
}
void delivery_margin_field::set_dce_margin(double value) {
  
  dce_margin_ = value;
  // @@protoc_insertion_point(field_set:risk.delivery_margin_field.dce_margin)
}

// double czce_margin = 4;
void delivery_margin_field::clear_czce_margin() {
  czce_margin_ = 0;
}
double delivery_margin_field::czce_margin() const {
  // @@protoc_insertion_point(field_get:risk.delivery_margin_field.czce_margin)
  return czce_margin_;
}
void delivery_margin_field::set_czce_margin(double value) {
  
  czce_margin_ = value;
  // @@protoc_insertion_point(field_set:risk.delivery_margin_field.czce_margin)
}

// double ine_margin = 5;
void delivery_margin_field::clear_ine_margin() {
  ine_margin_ = 0;
}
double delivery_margin_field::ine_margin() const {
  // @@protoc_insertion_point(field_get:risk.delivery_margin_field.ine_margin)
  return ine_margin_;
}
void delivery_margin_field::set_ine_margin(double value) {
  
  ine_margin_ = value;
  // @@protoc_insertion_point(field_set:risk.delivery_margin_field.ine_margin)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rtn_margin_field::kTimestampFieldNumber;
const int rtn_margin_field::kInvestorFieldNumber;
const int rtn_margin_field::kShfeMarginFieldNumber;
const int rtn_margin_field::kCffexMarginFieldNumber;
const int rtn_margin_field::kDceMarginFieldNumber;
const int rtn_margin_field::kCzceMarginFieldNumber;
const int rtn_margin_field::kIneMarginFieldNumber;
const int rtn_margin_field::kDeliveryMarginFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rtn_margin_field::rtn_margin_field()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.rtn_margin_field)
}
rtn_margin_field::rtn_margin_field(const rtn_margin_field& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  investor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.investor().size() > 0) {
    investor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.investor_);
  }
  if (from.has_shfe_margin()) {
    shfe_margin_ = new ::risk::shfe_margin_field(*from.shfe_margin_);
  } else {
    shfe_margin_ = NULL;
  }
  if (from.has_cffex_margin()) {
    cffex_margin_ = new ::risk::cffex_margin_field(*from.cffex_margin_);
  } else {
    cffex_margin_ = NULL;
  }
  if (from.has_dce_margin()) {
    dce_margin_ = new ::risk::dce_margin_field(*from.dce_margin_);
  } else {
    dce_margin_ = NULL;
  }
  if (from.has_czce_margin()) {
    czce_margin_ = new ::risk::czce_margin_field(*from.czce_margin_);
  } else {
    czce_margin_ = NULL;
  }
  if (from.has_ine_margin()) {
    ine_margin_ = new ::risk::ine_margin_field(*from.ine_margin_);
  } else {
    ine_margin_ = NULL;
  }
  if (from.has_delivery_margin()) {
    delivery_margin_ = new ::risk::delivery_margin_field(*from.delivery_margin_);
  } else {
    delivery_margin_ = NULL;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:risk.rtn_margin_field)
}

void rtn_margin_field::SharedCtor() {
  investor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&shfe_margin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&shfe_margin_)) + sizeof(timestamp_));
  _cached_size_ = 0;
}

rtn_margin_field::~rtn_margin_field() {
  // @@protoc_insertion_point(destructor:risk.rtn_margin_field)
  SharedDtor();
}

void rtn_margin_field::SharedDtor() {
  investor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete shfe_margin_;
  if (this != internal_default_instance()) delete cffex_margin_;
  if (this != internal_default_instance()) delete dce_margin_;
  if (this != internal_default_instance()) delete czce_margin_;
  if (this != internal_default_instance()) delete ine_margin_;
  if (this != internal_default_instance()) delete delivery_margin_;
}

void rtn_margin_field::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rtn_margin_field::descriptor() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const rtn_margin_field& rtn_margin_field::default_instance() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

rtn_margin_field* rtn_margin_field::New(::google::protobuf::Arena* arena) const {
  rtn_margin_field* n = new rtn_margin_field;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rtn_margin_field::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.rtn_margin_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  investor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && shfe_margin_ != NULL) {
    delete shfe_margin_;
  }
  shfe_margin_ = NULL;
  if (GetArenaNoVirtual() == NULL && cffex_margin_ != NULL) {
    delete cffex_margin_;
  }
  cffex_margin_ = NULL;
  if (GetArenaNoVirtual() == NULL && dce_margin_ != NULL) {
    delete dce_margin_;
  }
  dce_margin_ = NULL;
  if (GetArenaNoVirtual() == NULL && czce_margin_ != NULL) {
    delete czce_margin_;
  }
  czce_margin_ = NULL;
  if (GetArenaNoVirtual() == NULL && ine_margin_ != NULL) {
    delete ine_margin_;
  }
  ine_margin_ = NULL;
  if (GetArenaNoVirtual() == NULL && delivery_margin_ != NULL) {
    delete delivery_margin_;
  }
  delivery_margin_ = NULL;
  timestamp_ = 0u;
  _internal_metadata_.Clear();
}

bool rtn_margin_field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.rtn_margin_field)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string investor = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_investor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->investor().data(), static_cast<int>(this->investor().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.rtn_margin_field.investor"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .risk.shfe_margin_field shfe_margin = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shfe_margin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .risk.cffex_margin_field cffex_margin = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cffex_margin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .risk.dce_margin_field dce_margin = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dce_margin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .risk.czce_margin_field czce_margin = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_czce_margin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .risk.ine_margin_field ine_margin = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ine_margin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .risk.delivery_margin_field delivery_margin = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_delivery_margin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.rtn_margin_field)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.rtn_margin_field)
  return false;
#undef DO_
}

void rtn_margin_field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.rtn_margin_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->timestamp(), output);
  }

  // string investor = 2;
  if (this->investor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investor().data(), static_cast<int>(this->investor().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.rtn_margin_field.investor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->investor(), output);
  }

  // .risk.shfe_margin_field shfe_margin = 3;
  if (this->has_shfe_margin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->shfe_margin_, output);
  }

  // .risk.cffex_margin_field cffex_margin = 4;
  if (this->has_cffex_margin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->cffex_margin_, output);
  }

  // .risk.dce_margin_field dce_margin = 5;
  if (this->has_dce_margin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->dce_margin_, output);
  }

  // .risk.czce_margin_field czce_margin = 6;
  if (this->has_czce_margin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->czce_margin_, output);
  }

  // .risk.ine_margin_field ine_margin = 7;
  if (this->has_ine_margin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->ine_margin_, output);
  }

  // .risk.delivery_margin_field delivery_margin = 8;
  if (this->has_delivery_margin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->delivery_margin_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.rtn_margin_field)
}

::google::protobuf::uint8* rtn_margin_field::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.rtn_margin_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->timestamp(), target);
  }

  // string investor = 2;
  if (this->investor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investor().data(), static_cast<int>(this->investor().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.rtn_margin_field.investor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->investor(), target);
  }

  // .risk.shfe_margin_field shfe_margin = 3;
  if (this->has_shfe_margin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->shfe_margin_, deterministic, target);
  }

  // .risk.cffex_margin_field cffex_margin = 4;
  if (this->has_cffex_margin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->cffex_margin_, deterministic, target);
  }

  // .risk.dce_margin_field dce_margin = 5;
  if (this->has_dce_margin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->dce_margin_, deterministic, target);
  }

  // .risk.czce_margin_field czce_margin = 6;
  if (this->has_czce_margin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->czce_margin_, deterministic, target);
  }

  // .risk.ine_margin_field ine_margin = 7;
  if (this->has_ine_margin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->ine_margin_, deterministic, target);
  }

  // .risk.delivery_margin_field delivery_margin = 8;
  if (this->has_delivery_margin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->delivery_margin_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.rtn_margin_field)
  return target;
}

size_t rtn_margin_field::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.rtn_margin_field)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string investor = 2;
  if (this->investor().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->investor());
  }

  // .risk.shfe_margin_field shfe_margin = 3;
  if (this->has_shfe_margin()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->shfe_margin_);
  }

  // .risk.cffex_margin_field cffex_margin = 4;
  if (this->has_cffex_margin()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cffex_margin_);
  }

  // .risk.dce_margin_field dce_margin = 5;
  if (this->has_dce_margin()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dce_margin_);
  }

  // .risk.czce_margin_field czce_margin = 6;
  if (this->has_czce_margin()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->czce_margin_);
  }

  // .risk.ine_margin_field ine_margin = 7;
  if (this->has_ine_margin()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ine_margin_);
  }

  // .risk.delivery_margin_field delivery_margin = 8;
  if (this->has_delivery_margin()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->delivery_margin_);
  }

  // uint32 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rtn_margin_field::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.rtn_margin_field)
  GOOGLE_DCHECK_NE(&from, this);
  const rtn_margin_field* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const rtn_margin_field>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.rtn_margin_field)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.rtn_margin_field)
    MergeFrom(*source);
  }
}

void rtn_margin_field::MergeFrom(const rtn_margin_field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.rtn_margin_field)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.investor().size() > 0) {

    investor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.investor_);
  }
  if (from.has_shfe_margin()) {
    mutable_shfe_margin()->::risk::shfe_margin_field::MergeFrom(from.shfe_margin());
  }
  if (from.has_cffex_margin()) {
    mutable_cffex_margin()->::risk::cffex_margin_field::MergeFrom(from.cffex_margin());
  }
  if (from.has_dce_margin()) {
    mutable_dce_margin()->::risk::dce_margin_field::MergeFrom(from.dce_margin());
  }
  if (from.has_czce_margin()) {
    mutable_czce_margin()->::risk::czce_margin_field::MergeFrom(from.czce_margin());
  }
  if (from.has_ine_margin()) {
    mutable_ine_margin()->::risk::ine_margin_field::MergeFrom(from.ine_margin());
  }
  if (from.has_delivery_margin()) {
    mutable_delivery_margin()->::risk::delivery_margin_field::MergeFrom(from.delivery_margin());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void rtn_margin_field::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.rtn_margin_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rtn_margin_field::CopyFrom(const rtn_margin_field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.rtn_margin_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rtn_margin_field::IsInitialized() const {
  return true;
}

void rtn_margin_field::Swap(rtn_margin_field* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rtn_margin_field::InternalSwap(rtn_margin_field* other) {
  using std::swap;
  investor_.Swap(&other->investor_);
  swap(shfe_margin_, other->shfe_margin_);
  swap(cffex_margin_, other->cffex_margin_);
  swap(dce_margin_, other->dce_margin_);
  swap(czce_margin_, other->czce_margin_);
  swap(ine_margin_, other->ine_margin_);
  swap(delivery_margin_, other->delivery_margin_);
  swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rtn_margin_field::GetMetadata() const {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rtn_margin_field

// uint32 timestamp = 1;
void rtn_margin_field::clear_timestamp() {
  timestamp_ = 0u;
}
::google::protobuf::uint32 rtn_margin_field::timestamp() const {
  // @@protoc_insertion_point(field_get:risk.rtn_margin_field.timestamp)
  return timestamp_;
}
void rtn_margin_field::set_timestamp(::google::protobuf::uint32 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:risk.rtn_margin_field.timestamp)
}

// string investor = 2;
void rtn_margin_field::clear_investor() {
  investor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& rtn_margin_field::investor() const {
  // @@protoc_insertion_point(field_get:risk.rtn_margin_field.investor)
  return investor_.GetNoArena();
}
void rtn_margin_field::set_investor(const ::std::string& value) {
  
  investor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.rtn_margin_field.investor)
}
#if LANG_CXX11
void rtn_margin_field::set_investor(::std::string&& value) {
  
  investor_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.rtn_margin_field.investor)
}
#endif
void rtn_margin_field::set_investor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  investor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.rtn_margin_field.investor)
}
void rtn_margin_field::set_investor(const char* value, size_t size) {
  
  investor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.rtn_margin_field.investor)
}
::std::string* rtn_margin_field::mutable_investor() {
  
  // @@protoc_insertion_point(field_mutable:risk.rtn_margin_field.investor)
  return investor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* rtn_margin_field::release_investor() {
  // @@protoc_insertion_point(field_release:risk.rtn_margin_field.investor)
  
  return investor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void rtn_margin_field::set_allocated_investor(::std::string* investor) {
  if (investor != NULL) {
    
  } else {
    
  }
  investor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), investor);
  // @@protoc_insertion_point(field_set_allocated:risk.rtn_margin_field.investor)
}

// .risk.shfe_margin_field shfe_margin = 3;
bool rtn_margin_field::has_shfe_margin() const {
  return this != internal_default_instance() && shfe_margin_ != NULL;
}
void rtn_margin_field::clear_shfe_margin() {
  if (GetArenaNoVirtual() == NULL && shfe_margin_ != NULL) delete shfe_margin_;
  shfe_margin_ = NULL;
}
const ::risk::shfe_margin_field& rtn_margin_field::shfe_margin() const {
  const ::risk::shfe_margin_field* p = shfe_margin_;
  // @@protoc_insertion_point(field_get:risk.rtn_margin_field.shfe_margin)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::shfe_margin_field*>(
      &::risk::_shfe_margin_field_default_instance_);
}
::risk::shfe_margin_field* rtn_margin_field::mutable_shfe_margin() {
  
  if (shfe_margin_ == NULL) {
    shfe_margin_ = new ::risk::shfe_margin_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.rtn_margin_field.shfe_margin)
  return shfe_margin_;
}
::risk::shfe_margin_field* rtn_margin_field::release_shfe_margin() {
  // @@protoc_insertion_point(field_release:risk.rtn_margin_field.shfe_margin)
  
  ::risk::shfe_margin_field* temp = shfe_margin_;
  shfe_margin_ = NULL;
  return temp;
}
void rtn_margin_field::set_allocated_shfe_margin(::risk::shfe_margin_field* shfe_margin) {
  delete shfe_margin_;
  shfe_margin_ = shfe_margin;
  if (shfe_margin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rtn_margin_field.shfe_margin)
}

// .risk.cffex_margin_field cffex_margin = 4;
bool rtn_margin_field::has_cffex_margin() const {
  return this != internal_default_instance() && cffex_margin_ != NULL;
}
void rtn_margin_field::clear_cffex_margin() {
  if (GetArenaNoVirtual() == NULL && cffex_margin_ != NULL) delete cffex_margin_;
  cffex_margin_ = NULL;
}
const ::risk::cffex_margin_field& rtn_margin_field::cffex_margin() const {
  const ::risk::cffex_margin_field* p = cffex_margin_;
  // @@protoc_insertion_point(field_get:risk.rtn_margin_field.cffex_margin)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::cffex_margin_field*>(
      &::risk::_cffex_margin_field_default_instance_);
}
::risk::cffex_margin_field* rtn_margin_field::mutable_cffex_margin() {
  
  if (cffex_margin_ == NULL) {
    cffex_margin_ = new ::risk::cffex_margin_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.rtn_margin_field.cffex_margin)
  return cffex_margin_;
}
::risk::cffex_margin_field* rtn_margin_field::release_cffex_margin() {
  // @@protoc_insertion_point(field_release:risk.rtn_margin_field.cffex_margin)
  
  ::risk::cffex_margin_field* temp = cffex_margin_;
  cffex_margin_ = NULL;
  return temp;
}
void rtn_margin_field::set_allocated_cffex_margin(::risk::cffex_margin_field* cffex_margin) {
  delete cffex_margin_;
  cffex_margin_ = cffex_margin;
  if (cffex_margin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rtn_margin_field.cffex_margin)
}

// .risk.dce_margin_field dce_margin = 5;
bool rtn_margin_field::has_dce_margin() const {
  return this != internal_default_instance() && dce_margin_ != NULL;
}
void rtn_margin_field::clear_dce_margin() {
  if (GetArenaNoVirtual() == NULL && dce_margin_ != NULL) delete dce_margin_;
  dce_margin_ = NULL;
}
const ::risk::dce_margin_field& rtn_margin_field::dce_margin() const {
  const ::risk::dce_margin_field* p = dce_margin_;
  // @@protoc_insertion_point(field_get:risk.rtn_margin_field.dce_margin)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::dce_margin_field*>(
      &::risk::_dce_margin_field_default_instance_);
}
::risk::dce_margin_field* rtn_margin_field::mutable_dce_margin() {
  
  if (dce_margin_ == NULL) {
    dce_margin_ = new ::risk::dce_margin_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.rtn_margin_field.dce_margin)
  return dce_margin_;
}
::risk::dce_margin_field* rtn_margin_field::release_dce_margin() {
  // @@protoc_insertion_point(field_release:risk.rtn_margin_field.dce_margin)
  
  ::risk::dce_margin_field* temp = dce_margin_;
  dce_margin_ = NULL;
  return temp;
}
void rtn_margin_field::set_allocated_dce_margin(::risk::dce_margin_field* dce_margin) {
  delete dce_margin_;
  dce_margin_ = dce_margin;
  if (dce_margin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rtn_margin_field.dce_margin)
}

// .risk.czce_margin_field czce_margin = 6;
bool rtn_margin_field::has_czce_margin() const {
  return this != internal_default_instance() && czce_margin_ != NULL;
}
void rtn_margin_field::clear_czce_margin() {
  if (GetArenaNoVirtual() == NULL && czce_margin_ != NULL) delete czce_margin_;
  czce_margin_ = NULL;
}
const ::risk::czce_margin_field& rtn_margin_field::czce_margin() const {
  const ::risk::czce_margin_field* p = czce_margin_;
  // @@protoc_insertion_point(field_get:risk.rtn_margin_field.czce_margin)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::czce_margin_field*>(
      &::risk::_czce_margin_field_default_instance_);
}
::risk::czce_margin_field* rtn_margin_field::mutable_czce_margin() {
  
  if (czce_margin_ == NULL) {
    czce_margin_ = new ::risk::czce_margin_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.rtn_margin_field.czce_margin)
  return czce_margin_;
}
::risk::czce_margin_field* rtn_margin_field::release_czce_margin() {
  // @@protoc_insertion_point(field_release:risk.rtn_margin_field.czce_margin)
  
  ::risk::czce_margin_field* temp = czce_margin_;
  czce_margin_ = NULL;
  return temp;
}
void rtn_margin_field::set_allocated_czce_margin(::risk::czce_margin_field* czce_margin) {
  delete czce_margin_;
  czce_margin_ = czce_margin;
  if (czce_margin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rtn_margin_field.czce_margin)
}

// .risk.ine_margin_field ine_margin = 7;
bool rtn_margin_field::has_ine_margin() const {
  return this != internal_default_instance() && ine_margin_ != NULL;
}
void rtn_margin_field::clear_ine_margin() {
  if (GetArenaNoVirtual() == NULL && ine_margin_ != NULL) delete ine_margin_;
  ine_margin_ = NULL;
}
const ::risk::ine_margin_field& rtn_margin_field::ine_margin() const {
  const ::risk::ine_margin_field* p = ine_margin_;
  // @@protoc_insertion_point(field_get:risk.rtn_margin_field.ine_margin)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::ine_margin_field*>(
      &::risk::_ine_margin_field_default_instance_);
}
::risk::ine_margin_field* rtn_margin_field::mutable_ine_margin() {
  
  if (ine_margin_ == NULL) {
    ine_margin_ = new ::risk::ine_margin_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.rtn_margin_field.ine_margin)
  return ine_margin_;
}
::risk::ine_margin_field* rtn_margin_field::release_ine_margin() {
  // @@protoc_insertion_point(field_release:risk.rtn_margin_field.ine_margin)
  
  ::risk::ine_margin_field* temp = ine_margin_;
  ine_margin_ = NULL;
  return temp;
}
void rtn_margin_field::set_allocated_ine_margin(::risk::ine_margin_field* ine_margin) {
  delete ine_margin_;
  ine_margin_ = ine_margin;
  if (ine_margin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rtn_margin_field.ine_margin)
}

// .risk.delivery_margin_field delivery_margin = 8;
bool rtn_margin_field::has_delivery_margin() const {
  return this != internal_default_instance() && delivery_margin_ != NULL;
}
void rtn_margin_field::clear_delivery_margin() {
  if (GetArenaNoVirtual() == NULL && delivery_margin_ != NULL) delete delivery_margin_;
  delivery_margin_ = NULL;
}
const ::risk::delivery_margin_field& rtn_margin_field::delivery_margin() const {
  const ::risk::delivery_margin_field* p = delivery_margin_;
  // @@protoc_insertion_point(field_get:risk.rtn_margin_field.delivery_margin)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::delivery_margin_field*>(
      &::risk::_delivery_margin_field_default_instance_);
}
::risk::delivery_margin_field* rtn_margin_field::mutable_delivery_margin() {
  
  if (delivery_margin_ == NULL) {
    delivery_margin_ = new ::risk::delivery_margin_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.rtn_margin_field.delivery_margin)
  return delivery_margin_;
}
::risk::delivery_margin_field* rtn_margin_field::release_delivery_margin() {
  // @@protoc_insertion_point(field_release:risk.rtn_margin_field.delivery_margin)
  
  ::risk::delivery_margin_field* temp = delivery_margin_;
  delivery_margin_ = NULL;
  return temp;
}
void rtn_margin_field::set_allocated_delivery_margin(::risk::delivery_margin_field* delivery_margin) {
  delete delivery_margin_;
  delivery_margin_ = delivery_margin;
  if (delivery_margin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rtn_margin_field.delivery_margin)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rsp_margin_field::kHeaderFieldNumber;
const int rsp_margin_field::kFieldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rsp_margin_field::rsp_margin_field()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.rsp_margin_field)
}
rsp_margin_field::rsp_margin_field(const rsp_margin_field& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::risk::rsp_head_info(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_field()) {
    field_ = new ::risk::rtn_margin_field(*from.field_);
  } else {
    field_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:risk.rsp_margin_field)
}

void rsp_margin_field::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&field_) -
      reinterpret_cast<char*>(&header_)) + sizeof(field_));
  _cached_size_ = 0;
}

rsp_margin_field::~rsp_margin_field() {
  // @@protoc_insertion_point(destructor:risk.rsp_margin_field)
  SharedDtor();
}

void rsp_margin_field::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete field_;
}

void rsp_margin_field::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rsp_margin_field::descriptor() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const rsp_margin_field& rsp_margin_field::default_instance() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

rsp_margin_field* rsp_margin_field::New(::google::protobuf::Arena* arena) const {
  rsp_margin_field* n = new rsp_margin_field;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rsp_margin_field::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.rsp_margin_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && field_ != NULL) {
    delete field_;
  }
  field_ = NULL;
  _internal_metadata_.Clear();
}

bool rsp_margin_field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.rsp_margin_field)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .risk.rsp_head_info header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .risk.rtn_margin_field field = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.rsp_margin_field)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.rsp_margin_field)
  return false;
#undef DO_
}

void rsp_margin_field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.rsp_margin_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .risk.rsp_head_info header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .risk.rtn_margin_field field = 2;
  if (this->has_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->field_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.rsp_margin_field)
}

::google::protobuf::uint8* rsp_margin_field::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.rsp_margin_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .risk.rsp_head_info header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .risk.rtn_margin_field field = 2;
  if (this->has_field()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->field_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.rsp_margin_field)
  return target;
}

size_t rsp_margin_field::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.rsp_margin_field)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .risk.rsp_head_info header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .risk.rtn_margin_field field = 2;
  if (this->has_field()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->field_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rsp_margin_field::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.rsp_margin_field)
  GOOGLE_DCHECK_NE(&from, this);
  const rsp_margin_field* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const rsp_margin_field>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.rsp_margin_field)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.rsp_margin_field)
    MergeFrom(*source);
  }
}

void rsp_margin_field::MergeFrom(const rsp_margin_field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.rsp_margin_field)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::risk::rsp_head_info::MergeFrom(from.header());
  }
  if (from.has_field()) {
    mutable_field()->::risk::rtn_margin_field::MergeFrom(from.field());
  }
}

void rsp_margin_field::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.rsp_margin_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rsp_margin_field::CopyFrom(const rsp_margin_field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.rsp_margin_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rsp_margin_field::IsInitialized() const {
  return true;
}

void rsp_margin_field::Swap(rsp_margin_field* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rsp_margin_field::InternalSwap(rsp_margin_field* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(field_, other->field_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rsp_margin_field::GetMetadata() const {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rsp_margin_field

// .risk.rsp_head_info header = 1;
bool rsp_margin_field::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void rsp_margin_field::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::risk::rsp_head_info& rsp_margin_field::header() const {
  const ::risk::rsp_head_info* p = header_;
  // @@protoc_insertion_point(field_get:risk.rsp_margin_field.header)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::rsp_head_info*>(
      &::risk::_rsp_head_info_default_instance_);
}
::risk::rsp_head_info* rsp_margin_field::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::risk::rsp_head_info;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_margin_field.header)
  return header_;
}
::risk::rsp_head_info* rsp_margin_field::release_header() {
  // @@protoc_insertion_point(field_release:risk.rsp_margin_field.header)
  
  ::risk::rsp_head_info* temp = header_;
  header_ = NULL;
  return temp;
}
void rsp_margin_field::set_allocated_header(::risk::rsp_head_info* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_margin_field.header)
}

// .risk.rtn_margin_field field = 2;
bool rsp_margin_field::has_field() const {
  return this != internal_default_instance() && field_ != NULL;
}
void rsp_margin_field::clear_field() {
  if (GetArenaNoVirtual() == NULL && field_ != NULL) delete field_;
  field_ = NULL;
}
const ::risk::rtn_margin_field& rsp_margin_field::field() const {
  const ::risk::rtn_margin_field* p = field_;
  // @@protoc_insertion_point(field_get:risk.rsp_margin_field.field)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::rtn_margin_field*>(
      &::risk::_rtn_margin_field_default_instance_);
}
::risk::rtn_margin_field* rsp_margin_field::mutable_field() {
  
  if (field_ == NULL) {
    field_ = new ::risk::rtn_margin_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_margin_field.field)
  return field_;
}
::risk::rtn_margin_field* rsp_margin_field::release_field() {
  // @@protoc_insertion_point(field_release:risk.rsp_margin_field.field)
  
  ::risk::rtn_margin_field* temp = field_;
  field_ = NULL;
  return temp;
}
void rsp_margin_field::set_allocated_field(::risk::rtn_margin_field* field) {
  delete field_;
  field_ = field;
  if (field) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_margin_field.field)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rsp_risker_investor::kHeaderFieldNumber;
const int rsp_risker_investor::kRiskgroupidFieldNumber;
const int rsp_risker_investor::kInvestoridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rsp_risker_investor::rsp_risker_investor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.rsp_risker_investor)
}
rsp_risker_investor::rsp_risker_investor(const rsp_risker_investor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  investorid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.investorid().size() > 0) {
    investorid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.investorid_);
  }
  if (from.has_header()) {
    header_ = new ::risk::rsp_head_info(*from.header_);
  } else {
    header_ = NULL;
  }
  riskgroupid_ = from.riskgroupid_;
  // @@protoc_insertion_point(copy_constructor:risk.rsp_risker_investor)
}

void rsp_risker_investor::SharedCtor() {
  investorid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&riskgroupid_) -
      reinterpret_cast<char*>(&header_)) + sizeof(riskgroupid_));
  _cached_size_ = 0;
}

rsp_risker_investor::~rsp_risker_investor() {
  // @@protoc_insertion_point(destructor:risk.rsp_risker_investor)
  SharedDtor();
}

void rsp_risker_investor::SharedDtor() {
  investorid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void rsp_risker_investor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rsp_risker_investor::descriptor() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const rsp_risker_investor& rsp_risker_investor::default_instance() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

rsp_risker_investor* rsp_risker_investor::New(::google::protobuf::Arena* arena) const {
  rsp_risker_investor* n = new rsp_risker_investor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rsp_risker_investor::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.rsp_risker_investor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  investorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  riskgroupid_ = 0;
  _internal_metadata_.Clear();
}

bool rsp_risker_investor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.rsp_risker_investor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .risk.rsp_head_info header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 riskgroupid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &riskgroupid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string investorid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_investorid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->investorid().data(), static_cast<int>(this->investorid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.rsp_risker_investor.investorid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.rsp_risker_investor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.rsp_risker_investor)
  return false;
#undef DO_
}

void rsp_risker_investor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.rsp_risker_investor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .risk.rsp_head_info header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // int32 riskgroupid = 2;
  if (this->riskgroupid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->riskgroupid(), output);
  }

  // string investorid = 3;
  if (this->investorid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investorid().data(), static_cast<int>(this->investorid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.rsp_risker_investor.investorid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->investorid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.rsp_risker_investor)
}

::google::protobuf::uint8* rsp_risker_investor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.rsp_risker_investor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .risk.rsp_head_info header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // int32 riskgroupid = 2;
  if (this->riskgroupid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->riskgroupid(), target);
  }

  // string investorid = 3;
  if (this->investorid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investorid().data(), static_cast<int>(this->investorid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.rsp_risker_investor.investorid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->investorid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.rsp_risker_investor)
  return target;
}

size_t rsp_risker_investor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.rsp_risker_investor)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string investorid = 3;
  if (this->investorid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->investorid());
  }

  // .risk.rsp_head_info header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // int32 riskgroupid = 2;
  if (this->riskgroupid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->riskgroupid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rsp_risker_investor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.rsp_risker_investor)
  GOOGLE_DCHECK_NE(&from, this);
  const rsp_risker_investor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const rsp_risker_investor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.rsp_risker_investor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.rsp_risker_investor)
    MergeFrom(*source);
  }
}

void rsp_risker_investor::MergeFrom(const rsp_risker_investor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.rsp_risker_investor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.investorid().size() > 0) {

    investorid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.investorid_);
  }
  if (from.has_header()) {
    mutable_header()->::risk::rsp_head_info::MergeFrom(from.header());
  }
  if (from.riskgroupid() != 0) {
    set_riskgroupid(from.riskgroupid());
  }
}

void rsp_risker_investor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.rsp_risker_investor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rsp_risker_investor::CopyFrom(const rsp_risker_investor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.rsp_risker_investor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rsp_risker_investor::IsInitialized() const {
  return true;
}

void rsp_risker_investor::Swap(rsp_risker_investor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rsp_risker_investor::InternalSwap(rsp_risker_investor* other) {
  using std::swap;
  investorid_.Swap(&other->investorid_);
  swap(header_, other->header_);
  swap(riskgroupid_, other->riskgroupid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rsp_risker_investor::GetMetadata() const {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rsp_risker_investor

// .risk.rsp_head_info header = 1;
bool rsp_risker_investor::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void rsp_risker_investor::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::risk::rsp_head_info& rsp_risker_investor::header() const {
  const ::risk::rsp_head_info* p = header_;
  // @@protoc_insertion_point(field_get:risk.rsp_risker_investor.header)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::rsp_head_info*>(
      &::risk::_rsp_head_info_default_instance_);
}
::risk::rsp_head_info* rsp_risker_investor::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::risk::rsp_head_info;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_risker_investor.header)
  return header_;
}
::risk::rsp_head_info* rsp_risker_investor::release_header() {
  // @@protoc_insertion_point(field_release:risk.rsp_risker_investor.header)
  
  ::risk::rsp_head_info* temp = header_;
  header_ = NULL;
  return temp;
}
void rsp_risker_investor::set_allocated_header(::risk::rsp_head_info* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_risker_investor.header)
}

// int32 riskgroupid = 2;
void rsp_risker_investor::clear_riskgroupid() {
  riskgroupid_ = 0;
}
::google::protobuf::int32 rsp_risker_investor::riskgroupid() const {
  // @@protoc_insertion_point(field_get:risk.rsp_risker_investor.riskgroupid)
  return riskgroupid_;
}
void rsp_risker_investor::set_riskgroupid(::google::protobuf::int32 value) {
  
  riskgroupid_ = value;
  // @@protoc_insertion_point(field_set:risk.rsp_risker_investor.riskgroupid)
}

// string investorid = 3;
void rsp_risker_investor::clear_investorid() {
  investorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& rsp_risker_investor::investorid() const {
  // @@protoc_insertion_point(field_get:risk.rsp_risker_investor.investorid)
  return investorid_.GetNoArena();
}
void rsp_risker_investor::set_investorid(const ::std::string& value) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.rsp_risker_investor.investorid)
}
#if LANG_CXX11
void rsp_risker_investor::set_investorid(::std::string&& value) {
  
  investorid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.rsp_risker_investor.investorid)
}
#endif
void rsp_risker_investor::set_investorid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.rsp_risker_investor.investorid)
}
void rsp_risker_investor::set_investorid(const char* value, size_t size) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.rsp_risker_investor.investorid)
}
::std::string* rsp_risker_investor::mutable_investorid() {
  
  // @@protoc_insertion_point(field_mutable:risk.rsp_risker_investor.investorid)
  return investorid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* rsp_risker_investor::release_investorid() {
  // @@protoc_insertion_point(field_release:risk.rsp_risker_investor.investorid)
  
  return investorid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void rsp_risker_investor::set_allocated_investorid(::std::string* investorid) {
  if (investorid != NULL) {
    
  } else {
    
  }
  investorid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), investorid);
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_risker_investor.investorid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rsp_groups::kHeaderFieldNumber;
const int rsp_groups::kInfosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rsp_groups::rsp_groups()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.rsp_groups)
}
rsp_groups::rsp_groups(const rsp_groups& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      infos_(from.infos_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::risk::rsp_head_info(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:risk.rsp_groups)
}

void rsp_groups::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

rsp_groups::~rsp_groups() {
  // @@protoc_insertion_point(destructor:risk.rsp_groups)
  SharedDtor();
}

void rsp_groups::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void rsp_groups::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rsp_groups::descriptor() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const rsp_groups& rsp_groups::default_instance() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

rsp_groups* rsp_groups::New(::google::protobuf::Arena* arena) const {
  rsp_groups* n = new rsp_groups;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rsp_groups::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.rsp_groups)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  infos_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool rsp_groups::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.rsp_groups)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .risk.rsp_head_info header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .risk.sys_group infos = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.rsp_groups)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.rsp_groups)
  return false;
#undef DO_
}

void rsp_groups::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.rsp_groups)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .risk.rsp_head_info header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .risk.sys_group infos = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->infos_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->infos(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.rsp_groups)
}

::google::protobuf::uint8* rsp_groups::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.rsp_groups)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .risk.rsp_head_info header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // repeated .risk.sys_group infos = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->infos_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->infos(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.rsp_groups)
  return target;
}

size_t rsp_groups::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.rsp_groups)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .risk.sys_group infos = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->infos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->infos(static_cast<int>(i)));
    }
  }

  // .risk.rsp_head_info header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rsp_groups::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.rsp_groups)
  GOOGLE_DCHECK_NE(&from, this);
  const rsp_groups* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const rsp_groups>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.rsp_groups)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.rsp_groups)
    MergeFrom(*source);
  }
}

void rsp_groups::MergeFrom(const rsp_groups& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.rsp_groups)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  infos_.MergeFrom(from.infos_);
  if (from.has_header()) {
    mutable_header()->::risk::rsp_head_info::MergeFrom(from.header());
  }
}

void rsp_groups::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.rsp_groups)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rsp_groups::CopyFrom(const rsp_groups& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.rsp_groups)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rsp_groups::IsInitialized() const {
  return true;
}

void rsp_groups::Swap(rsp_groups* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rsp_groups::InternalSwap(rsp_groups* other) {
  using std::swap;
  infos_.InternalSwap(&other->infos_);
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rsp_groups::GetMetadata() const {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rsp_groups

// .risk.rsp_head_info header = 1;
bool rsp_groups::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void rsp_groups::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::risk::rsp_head_info& rsp_groups::header() const {
  const ::risk::rsp_head_info* p = header_;
  // @@protoc_insertion_point(field_get:risk.rsp_groups.header)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::rsp_head_info*>(
      &::risk::_rsp_head_info_default_instance_);
}
::risk::rsp_head_info* rsp_groups::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::risk::rsp_head_info;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_groups.header)
  return header_;
}
::risk::rsp_head_info* rsp_groups::release_header() {
  // @@protoc_insertion_point(field_release:risk.rsp_groups.header)
  
  ::risk::rsp_head_info* temp = header_;
  header_ = NULL;
  return temp;
}
void rsp_groups::set_allocated_header(::risk::rsp_head_info* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_groups.header)
}

// repeated .risk.sys_group infos = 2;
int rsp_groups::infos_size() const {
  return infos_.size();
}
void rsp_groups::clear_infos() {
  infos_.Clear();
}
const ::risk::sys_group& rsp_groups::infos(int index) const {
  // @@protoc_insertion_point(field_get:risk.rsp_groups.infos)
  return infos_.Get(index);
}
::risk::sys_group* rsp_groups::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:risk.rsp_groups.infos)
  return infos_.Mutable(index);
}
::risk::sys_group* rsp_groups::add_infos() {
  // @@protoc_insertion_point(field_add:risk.rsp_groups.infos)
  return infos_.Add();
}
::google::protobuf::RepeatedPtrField< ::risk::sys_group >*
rsp_groups::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:risk.rsp_groups.infos)
  return &infos_;
}
const ::google::protobuf::RepeatedPtrField< ::risk::sys_group >&
rsp_groups::infos() const {
  // @@protoc_insertion_point(field_list:risk.rsp_groups.infos)
  return infos_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rsp_action_info::kRequestidFieldNumber;
const int rsp_action_info::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rsp_action_info::rsp_action_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.rsp_action_info)
}
rsp_action_info::rsp_action_info(const rsp_action_info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_info()) {
    info_ = new ::risk::error_info(*from.info_);
  } else {
    info_ = NULL;
  }
  requestid_ = from.requestid_;
  // @@protoc_insertion_point(copy_constructor:risk.rsp_action_info)
}

void rsp_action_info::SharedCtor() {
  ::memset(&info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&requestid_) -
      reinterpret_cast<char*>(&info_)) + sizeof(requestid_));
  _cached_size_ = 0;
}

rsp_action_info::~rsp_action_info() {
  // @@protoc_insertion_point(destructor:risk.rsp_action_info)
  SharedDtor();
}

void rsp_action_info::SharedDtor() {
  if (this != internal_default_instance()) delete info_;
}

void rsp_action_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rsp_action_info::descriptor() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const rsp_action_info& rsp_action_info::default_instance() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

rsp_action_info* rsp_action_info::New(::google::protobuf::Arena* arena) const {
  rsp_action_info* n = new rsp_action_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rsp_action_info::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.rsp_action_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && info_ != NULL) {
    delete info_;
  }
  info_ = NULL;
  requestid_ = 0;
  _internal_metadata_.Clear();
}

bool rsp_action_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.rsp_action_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 requestid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .risk.error_info info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.rsp_action_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.rsp_action_info)
  return false;
#undef DO_
}

void rsp_action_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.rsp_action_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 requestid = 1;
  if (this->requestid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // .risk.error_info info = 2;
  if (this->has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.rsp_action_info)
}

::google::protobuf::uint8* rsp_action_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.rsp_action_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 requestid = 1;
  if (this->requestid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // .risk.error_info info = 2;
  if (this->has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.rsp_action_info)
  return target;
}

size_t rsp_action_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.rsp_action_info)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .risk.error_info info = 2;
  if (this->has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->info_);
  }

  // int32 requestid = 1;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->requestid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rsp_action_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.rsp_action_info)
  GOOGLE_DCHECK_NE(&from, this);
  const rsp_action_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const rsp_action_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.rsp_action_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.rsp_action_info)
    MergeFrom(*source);
  }
}

void rsp_action_info::MergeFrom(const rsp_action_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.rsp_action_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    mutable_info()->::risk::error_info::MergeFrom(from.info());
  }
  if (from.requestid() != 0) {
    set_requestid(from.requestid());
  }
}

void rsp_action_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.rsp_action_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rsp_action_info::CopyFrom(const rsp_action_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.rsp_action_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rsp_action_info::IsInitialized() const {
  return true;
}

void rsp_action_info::Swap(rsp_action_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rsp_action_info::InternalSwap(rsp_action_info* other) {
  using std::swap;
  swap(info_, other->info_);
  swap(requestid_, other->requestid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rsp_action_info::GetMetadata() const {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rsp_action_info

// int32 requestid = 1;
void rsp_action_info::clear_requestid() {
  requestid_ = 0;
}
::google::protobuf::int32 rsp_action_info::requestid() const {
  // @@protoc_insertion_point(field_get:risk.rsp_action_info.requestid)
  return requestid_;
}
void rsp_action_info::set_requestid(::google::protobuf::int32 value) {
  
  requestid_ = value;
  // @@protoc_insertion_point(field_set:risk.rsp_action_info.requestid)
}

// .risk.error_info info = 2;
bool rsp_action_info::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
void rsp_action_info::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
const ::risk::error_info& rsp_action_info::info() const {
  const ::risk::error_info* p = info_;
  // @@protoc_insertion_point(field_get:risk.rsp_action_info.info)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::error_info*>(
      &::risk::_error_info_default_instance_);
}
::risk::error_info* rsp_action_info::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::risk::error_info;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_action_info.info)
  return info_;
}
::risk::error_info* rsp_action_info::release_info() {
  // @@protoc_insertion_point(field_release:risk.rsp_action_info.info)
  
  ::risk::error_info* temp = info_;
  info_ = NULL;
  return temp;
}
void rsp_action_info::set_allocated_info(::risk::error_info* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_action_info.info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rtn_change_risker::kOperatoridFieldNumber;
const int rtn_change_risker::kUseridFieldNumber;
const int rtn_change_risker::kRiskgroupidFieldNumber;
const int rtn_change_risker::kInvestorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rtn_change_risker::rtn_change_risker()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.rtn_change_risker)
}
rtn_change_risker::rtn_change_risker(const rtn_change_risker& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      investor_(from.investor_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&operatorid_, &from.operatorid_,
    static_cast<size_t>(reinterpret_cast<char*>(&riskgroupid_) -
    reinterpret_cast<char*>(&operatorid_)) + sizeof(riskgroupid_));
  // @@protoc_insertion_point(copy_constructor:risk.rtn_change_risker)
}

void rtn_change_risker::SharedCtor() {
  ::memset(&operatorid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&riskgroupid_) -
      reinterpret_cast<char*>(&operatorid_)) + sizeof(riskgroupid_));
  _cached_size_ = 0;
}

rtn_change_risker::~rtn_change_risker() {
  // @@protoc_insertion_point(destructor:risk.rtn_change_risker)
  SharedDtor();
}

void rtn_change_risker::SharedDtor() {
}

void rtn_change_risker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rtn_change_risker::descriptor() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const rtn_change_risker& rtn_change_risker::default_instance() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

rtn_change_risker* rtn_change_risker::New(::google::protobuf::Arena* arena) const {
  rtn_change_risker* n = new rtn_change_risker;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rtn_change_risker::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.rtn_change_risker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  investor_.Clear();
  ::memset(&operatorid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&riskgroupid_) -
      reinterpret_cast<char*>(&operatorid_)) + sizeof(riskgroupid_));
  _internal_metadata_.Clear();
}

bool rtn_change_risker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.rtn_change_risker)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 operatorid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operatorid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 userid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 riskgroupid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &riskgroupid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string investor = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_investor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->investor(this->investor_size() - 1).data(),
            static_cast<int>(this->investor(this->investor_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.rtn_change_risker.investor"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.rtn_change_risker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.rtn_change_risker)
  return false;
#undef DO_
}

void rtn_change_risker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.rtn_change_risker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 operatorid = 1;
  if (this->operatorid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operatorid(), output);
  }

  // int32 userid = 2;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }

  // int32 riskgroupid = 3;
  if (this->riskgroupid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->riskgroupid(), output);
  }

  // repeated string investor = 4;
  for (int i = 0, n = this->investor_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investor(i).data(), static_cast<int>(this->investor(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.rtn_change_risker.investor");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->investor(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.rtn_change_risker)
}

::google::protobuf::uint8* rtn_change_risker::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.rtn_change_risker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 operatorid = 1;
  if (this->operatorid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operatorid(), target);
  }

  // int32 userid = 2;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userid(), target);
  }

  // int32 riskgroupid = 3;
  if (this->riskgroupid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->riskgroupid(), target);
  }

  // repeated string investor = 4;
  for (int i = 0, n = this->investor_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investor(i).data(), static_cast<int>(this->investor(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.rtn_change_risker.investor");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->investor(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.rtn_change_risker)
  return target;
}

size_t rtn_change_risker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.rtn_change_risker)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string investor = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->investor_size());
  for (int i = 0, n = this->investor_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->investor(i));
  }

  // int32 operatorid = 1;
  if (this->operatorid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->operatorid());
  }

  // int32 userid = 2;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid());
  }

  // int32 riskgroupid = 3;
  if (this->riskgroupid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->riskgroupid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rtn_change_risker::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.rtn_change_risker)
  GOOGLE_DCHECK_NE(&from, this);
  const rtn_change_risker* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const rtn_change_risker>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.rtn_change_risker)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.rtn_change_risker)
    MergeFrom(*source);
  }
}

void rtn_change_risker::MergeFrom(const rtn_change_risker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.rtn_change_risker)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  investor_.MergeFrom(from.investor_);
  if (from.operatorid() != 0) {
    set_operatorid(from.operatorid());
  }
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
  if (from.riskgroupid() != 0) {
    set_riskgroupid(from.riskgroupid());
  }
}

void rtn_change_risker::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.rtn_change_risker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rtn_change_risker::CopyFrom(const rtn_change_risker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.rtn_change_risker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rtn_change_risker::IsInitialized() const {
  return true;
}

void rtn_change_risker::Swap(rtn_change_risker* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rtn_change_risker::InternalSwap(rtn_change_risker* other) {
  using std::swap;
  investor_.InternalSwap(&other->investor_);
  swap(operatorid_, other->operatorid_);
  swap(userid_, other->userid_);
  swap(riskgroupid_, other->riskgroupid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rtn_change_risker::GetMetadata() const {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rtn_change_risker

// int32 operatorid = 1;
void rtn_change_risker::clear_operatorid() {
  operatorid_ = 0;
}
::google::protobuf::int32 rtn_change_risker::operatorid() const {
  // @@protoc_insertion_point(field_get:risk.rtn_change_risker.operatorid)
  return operatorid_;
}
void rtn_change_risker::set_operatorid(::google::protobuf::int32 value) {
  
  operatorid_ = value;
  // @@protoc_insertion_point(field_set:risk.rtn_change_risker.operatorid)
}

// int32 userid = 2;
void rtn_change_risker::clear_userid() {
  userid_ = 0;
}
::google::protobuf::int32 rtn_change_risker::userid() const {
  // @@protoc_insertion_point(field_get:risk.rtn_change_risker.userid)
  return userid_;
}
void rtn_change_risker::set_userid(::google::protobuf::int32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:risk.rtn_change_risker.userid)
}

// int32 riskgroupid = 3;
void rtn_change_risker::clear_riskgroupid() {
  riskgroupid_ = 0;
}
::google::protobuf::int32 rtn_change_risker::riskgroupid() const {
  // @@protoc_insertion_point(field_get:risk.rtn_change_risker.riskgroupid)
  return riskgroupid_;
}
void rtn_change_risker::set_riskgroupid(::google::protobuf::int32 value) {
  
  riskgroupid_ = value;
  // @@protoc_insertion_point(field_set:risk.rtn_change_risker.riskgroupid)
}

// repeated string investor = 4;
int rtn_change_risker::investor_size() const {
  return investor_.size();
}
void rtn_change_risker::clear_investor() {
  investor_.Clear();
}
const ::std::string& rtn_change_risker::investor(int index) const {
  // @@protoc_insertion_point(field_get:risk.rtn_change_risker.investor)
  return investor_.Get(index);
}
::std::string* rtn_change_risker::mutable_investor(int index) {
  // @@protoc_insertion_point(field_mutable:risk.rtn_change_risker.investor)
  return investor_.Mutable(index);
}
void rtn_change_risker::set_investor(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:risk.rtn_change_risker.investor)
  investor_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void rtn_change_risker::set_investor(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:risk.rtn_change_risker.investor)
  investor_.Mutable(index)->assign(std::move(value));
}
#endif
void rtn_change_risker::set_investor(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  investor_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:risk.rtn_change_risker.investor)
}
void rtn_change_risker::set_investor(int index, const char* value, size_t size) {
  investor_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:risk.rtn_change_risker.investor)
}
::std::string* rtn_change_risker::add_investor() {
  // @@protoc_insertion_point(field_add_mutable:risk.rtn_change_risker.investor)
  return investor_.Add();
}
void rtn_change_risker::add_investor(const ::std::string& value) {
  investor_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:risk.rtn_change_risker.investor)
}
#if LANG_CXX11
void rtn_change_risker::add_investor(::std::string&& value) {
  investor_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:risk.rtn_change_risker.investor)
}
#endif
void rtn_change_risker::add_investor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  investor_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:risk.rtn_change_risker.investor)
}
void rtn_change_risker::add_investor(const char* value, size_t size) {
  investor_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:risk.rtn_change_risker.investor)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
rtn_change_risker::investor() const {
  // @@protoc_insertion_point(field_list:risk.rtn_change_risker.investor)
  return investor_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
rtn_change_risker::mutable_investor() {
  // @@protoc_insertion_point(field_mutable_list:risk.rtn_change_risker.investor)
  return &investor_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace risk

// @@protoc_insertion_point(global_scope)
