// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: riskapi_data_protocal.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "riskapi_data_protocal.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace risk {
class error_infoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<error_info>
     _instance;
} _error_info_default_instance_;
class rsp_head_infoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<rsp_head_info>
     _instance;
} _rsp_head_info_default_instance_;
class rsp_risker_loginDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<rsp_risker_login>
     _instance;
} _rsp_risker_login_default_instance_;
class instrument_infoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<instrument_info>
     _instance;
} _instrument_info_default_instance_;
class rsp_instrument_fieldDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<rsp_instrument_field>
     _instance;
} _rsp_instrument_field_default_instance_;
class rtn_quote_fieldDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<rtn_quote_field>
     _instance;
} _rtn_quote_field_default_instance_;
class rsp_position_fieldDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<rsp_position_field>
     _instance;
} _rsp_position_field_default_instance_;
class rtn_position_fieldDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<rtn_position_field>
     _instance;
} _rtn_position_field_default_instance_;
class rsp_trade_fieldDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<rsp_trade_field>
     _instance;
} _rsp_trade_field_default_instance_;
class rsp_order_fieldDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<rsp_order_field>
     _instance;
} _rsp_order_field_default_instance_;
class rtn_trade_fieldDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<rtn_trade_field>
     _instance;
} _rtn_trade_field_default_instance_;
class rtn_order_fieldDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<rtn_order_field>
     _instance;
} _rtn_order_field_default_instance_;
class rsp_sync_account_fieldDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<rsp_sync_account_field>
     _instance;
} _rsp_sync_account_field_default_instance_;
class rtn_sync_account_fieldDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<rtn_sync_account_field>
     _instance;
} _rtn_sync_account_field_default_instance_;
class shfe_margin_fieldDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<shfe_margin_field>
     _instance;
} _shfe_margin_field_default_instance_;
class cffex_margin_fieldDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<cffex_margin_field>
     _instance;
} _cffex_margin_field_default_instance_;
class dce_margin_fieldDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<dce_margin_field>
     _instance;
} _dce_margin_field_default_instance_;
class czce_margin_fieldDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<czce_margin_field>
     _instance;
} _czce_margin_field_default_instance_;
class ine_margin_fieldDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ine_margin_field>
     _instance;
} _ine_margin_field_default_instance_;
class delivery_margin_fieldDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<delivery_margin_field>
     _instance;
} _delivery_margin_field_default_instance_;
class rtn_margin_fieldDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<rtn_margin_field>
     _instance;
} _rtn_margin_field_default_instance_;
class rsp_margin_fieldDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<rsp_margin_field>
     _instance;
} _rsp_margin_field_default_instance_;
class rsp_risker_investorDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<rsp_risker_investor>
     _instance;
} _rsp_risker_investor_default_instance_;
class rsp_groupsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<rsp_groups>
     _instance;
} _rsp_groups_default_instance_;
class rsp_action_infoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<rsp_action_info>
     _instance;
} _rsp_action_info_default_instance_;
class rtn_change_riskerDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<rtn_change_risker>
     _instance;
} _rtn_change_risker_default_instance_;
class rtn_option_position_riskDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<rtn_option_position_risk>
     _instance;
} _rtn_option_position_risk_default_instance_;
class rsp_whatifDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<rsp_whatif>
     _instance;
} _rsp_whatif_default_instance_;
class option_argvDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<option_argv>
     _instance;
} _option_argv_default_instance_;
class rsp_option_argvDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<rsp_option_argv>
     _instance;
} _rsp_option_argv_default_instance_;
class rtn_whatifDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<rtn_whatif>
     _instance;
} _rtn_whatif_default_instance_;
class investor_infoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<investor_info>
     _instance;
} _investor_info_default_instance_;
class rsp_investor_infoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<rsp_investor_info>
     _instance;
} _rsp_investor_info_default_instance_;

namespace protobuf_riskapi_5fdata_5fprotocal_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[33];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(error_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(error_info, errorid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(error_info, errormsg_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_head_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_head_info, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_head_info, info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_head_info, islast_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_risker_login, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_risker_login, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_risker_login, info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instrument_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instrument_info, contractcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instrument_info, productcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instrument_info, productkind_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instrument_info, exchangecode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instrument_info, marketcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instrument_info, createdate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instrument_info, opendate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instrument_info, expiredate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instrument_info, multiplier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instrument_info, pricetick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instrument_info, contractname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instrument_info, delivbegindate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instrument_info, delivenddate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instrument_info, excontractname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instrument_info, exproductname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instrument_info, ismrgndisc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instrument_info, productclass_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instrument_info, baseprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instrument_info, optionstype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instrument_info, strikeprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instrument_info, underlyinginstrid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instrument_info, strikemode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instrument_info, underlyingmultiple_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_instrument_field, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_instrument_field, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_instrument_field, field_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rtn_quote_field, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rtn_quote_field, field_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_position_field, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_position_field, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_position_field, field_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_position_field, trypositionprofit_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rtn_position_field, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rtn_position_field, field_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rtn_position_field, trypositionprofit_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_trade_field, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_trade_field, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_trade_field, field_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_order_field, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_order_field, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_order_field, field_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rtn_trade_field, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rtn_trade_field, field_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rtn_order_field, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rtn_order_field, field_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_sync_account_field, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_sync_account_field, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_sync_account_field, field_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rtn_sync_account_field, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rtn_sync_account_field, field_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shfe_margin_field, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shfe_margin_field, pre_favorable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shfe_margin_field, big_side_favorable_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cffex_margin_field, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cffex_margin_field, pre_favorable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cffex_margin_field, speculation_favorable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cffex_margin_field, hedging_favorable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cffex_margin_field, arbitrage_favorable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cffex_margin_field, market_favorable_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dce_margin_field, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dce_margin_field, pre_favorable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dce_margin_field, sp_favorable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dce_margin_field, spc_favorable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dce_margin_field, locked_favorable_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(czce_margin_field, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(czce_margin_field, pre_favorable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(czce_margin_field, spd_favorable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(czce_margin_field, ips_favorable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(czce_margin_field, prt_favorable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(czce_margin_field, std_favorable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(czce_margin_field, stg_favorable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(czce_margin_field, zprt_favorable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(czce_margin_field, locked_favorable_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ine_margin_field, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ine_margin_field, pre_favorable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ine_margin_field, big_side_favorable_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(delivery_margin_field, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(delivery_margin_field, shfe_margin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(delivery_margin_field, cffex_margin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(delivery_margin_field, dce_margin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(delivery_margin_field, czce_margin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(delivery_margin_field, ine_margin_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rtn_margin_field, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rtn_margin_field, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rtn_margin_field, investor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rtn_margin_field, shfe_margin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rtn_margin_field, cffex_margin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rtn_margin_field, dce_margin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rtn_margin_field, czce_margin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rtn_margin_field, ine_margin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rtn_margin_field, delivery_margin_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_margin_field, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_margin_field, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_margin_field, field_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_risker_investor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_risker_investor, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_risker_investor, riskgroupid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_risker_investor, investorid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_groups, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_groups, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_groups, infos_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_action_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_action_info, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_action_info, info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rtn_change_risker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rtn_change_risker, operatorid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rtn_change_risker, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rtn_change_risker, group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rtn_change_risker, investor_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rtn_option_position_risk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rtn_option_position_risk, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rtn_option_position_risk, model_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rtn_option_position_risk, instrument_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rtn_option_position_risk, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_whatif, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_whatif, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_whatif, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_whatif, model_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_whatif, instrument_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_whatif, range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_whatif, option_value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(option_argv, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(option_argv, model_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(option_argv, price_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(option_argv, vol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(option_argv, rate_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_option_argv, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_option_argv, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_option_argv, info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rtn_whatif, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rtn_whatif, field_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rtn_whatif, option_value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(investor_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(investor_info, investorid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(investor_info, brokerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(investor_info, investortype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(investor_info, investorname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(investor_info, identifiedcardtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(investor_info, identifiedcardno_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(investor_info, country_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(investor_info, province_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(investor_info, city_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(investor_info, birthday_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(investor_info, sex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(investor_info, profession_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(investor_info, national_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(investor_info, capital_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(investor_info, capitalcurrency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(investor_info, telephone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(investor_info, address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(investor_info, zipcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(investor_info, email_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(investor_info, memo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(investor_info, openinvestorname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(investor_info, orderinvestorname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(investor_info, fundinvestorname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(investor_info, settleinvestorname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(investor_info, isactive_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(investor_info, departmentid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(investor_info, investorfullname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(investor_info, isemail_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(investor_info, issms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(investor_info, isusingotp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(investor_info, clientregion_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_investor_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_investor_info, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_investor_info, infos_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(error_info)},
  { 7, -1, sizeof(rsp_head_info)},
  { 15, -1, sizeof(rsp_risker_login)},
  { 22, -1, sizeof(instrument_info)},
  { 50, -1, sizeof(rsp_instrument_field)},
  { 57, -1, sizeof(rtn_quote_field)},
  { 63, -1, sizeof(rsp_position_field)},
  { 71, -1, sizeof(rtn_position_field)},
  { 78, -1, sizeof(rsp_trade_field)},
  { 85, -1, sizeof(rsp_order_field)},
  { 92, -1, sizeof(rtn_trade_field)},
  { 98, -1, sizeof(rtn_order_field)},
  { 104, -1, sizeof(rsp_sync_account_field)},
  { 111, -1, sizeof(rtn_sync_account_field)},
  { 117, -1, sizeof(shfe_margin_field)},
  { 124, -1, sizeof(cffex_margin_field)},
  { 134, -1, sizeof(dce_margin_field)},
  { 143, -1, sizeof(czce_margin_field)},
  { 156, -1, sizeof(ine_margin_field)},
  { 163, -1, sizeof(delivery_margin_field)},
  { 173, -1, sizeof(rtn_margin_field)},
  { 186, -1, sizeof(rsp_margin_field)},
  { 193, -1, sizeof(rsp_risker_investor)},
  { 201, -1, sizeof(rsp_groups)},
  { 208, -1, sizeof(rsp_action_info)},
  { 215, -1, sizeof(rtn_change_risker)},
  { 224, -1, sizeof(rtn_option_position_risk)},
  { 233, -1, sizeof(rsp_whatif)},
  { 244, -1, sizeof(option_argv)},
  { 253, -1, sizeof(rsp_option_argv)},
  { 260, -1, sizeof(rtn_whatif)},
  { 267, -1, sizeof(investor_info)},
  { 303, -1, sizeof(rsp_investor_info)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_error_info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_rsp_head_info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_rsp_risker_login_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_instrument_info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_rsp_instrument_field_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_rtn_quote_field_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_rsp_position_field_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_rtn_position_field_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_rsp_trade_field_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_rsp_order_field_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_rtn_trade_field_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_rtn_order_field_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_rsp_sync_account_field_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_rtn_sync_account_field_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_shfe_margin_field_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_cffex_margin_field_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_dce_margin_field_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_czce_margin_field_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ine_margin_field_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_delivery_margin_field_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_rtn_margin_field_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_rsp_margin_field_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_rsp_risker_investor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_rsp_groups_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_rsp_action_info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_rtn_change_risker_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_rtn_option_position_risk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_rsp_whatif_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_option_argv_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_rsp_option_argv_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_rtn_whatif_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_investor_info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_rsp_investor_info_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "riskapi_data_protocal.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 33);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::risk::protobuf_trade_5fprotocal_2eproto::InitDefaults();
  ::risk::protobuf_quote_5fprotocal_2eproto::InitDefaults();
  ::risk::protobuf_riskapi_5faction_5fprotocal_2eproto::InitDefaults();
  _error_info_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_error_info_default_instance_);_rsp_head_info_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_rsp_head_info_default_instance_);_rsp_risker_login_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_rsp_risker_login_default_instance_);_instrument_info_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_instrument_info_default_instance_);_rsp_instrument_field_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_rsp_instrument_field_default_instance_);_rtn_quote_field_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_rtn_quote_field_default_instance_);_rsp_position_field_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_rsp_position_field_default_instance_);_rtn_position_field_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_rtn_position_field_default_instance_);_rsp_trade_field_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_rsp_trade_field_default_instance_);_rsp_order_field_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_rsp_order_field_default_instance_);_rtn_trade_field_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_rtn_trade_field_default_instance_);_rtn_order_field_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_rtn_order_field_default_instance_);_rsp_sync_account_field_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_rsp_sync_account_field_default_instance_);_rtn_sync_account_field_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_rtn_sync_account_field_default_instance_);_shfe_margin_field_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_shfe_margin_field_default_instance_);_cffex_margin_field_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_cffex_margin_field_default_instance_);_dce_margin_field_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_dce_margin_field_default_instance_);_czce_margin_field_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_czce_margin_field_default_instance_);_ine_margin_field_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ine_margin_field_default_instance_);_delivery_margin_field_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_delivery_margin_field_default_instance_);_rtn_margin_field_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_rtn_margin_field_default_instance_);_rsp_margin_field_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_rsp_margin_field_default_instance_);_rsp_risker_investor_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_rsp_risker_investor_default_instance_);_rsp_groups_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_rsp_groups_default_instance_);_rsp_action_info_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_rsp_action_info_default_instance_);_rtn_change_risker_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_rtn_change_risker_default_instance_);_rtn_option_position_risk_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_rtn_option_position_risk_default_instance_);_rsp_whatif_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_rsp_whatif_default_instance_);_option_argv_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_option_argv_default_instance_);_rsp_option_argv_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_rsp_option_argv_default_instance_);_rtn_whatif_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_rtn_whatif_default_instance_);_investor_info_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_investor_info_default_instance_);_rsp_investor_info_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_rsp_investor_info_default_instance_);_rsp_head_info_default_instance_._instance.get_mutable()->info_ = const_cast< ::risk::error_info*>(
      ::risk::error_info::internal_default_instance());
  _rsp_risker_login_default_instance_._instance.get_mutable()->info_ = const_cast< ::risk::error_info*>(
      ::risk::error_info::internal_default_instance());
  _rsp_instrument_field_default_instance_._instance.get_mutable()->header_ = const_cast< ::risk::rsp_head_info*>(
      ::risk::rsp_head_info::internal_default_instance());
  _rsp_instrument_field_default_instance_._instance.get_mutable()->field_ = const_cast< ::risk::instrument_info*>(
      ::risk::instrument_info::internal_default_instance());
  _rtn_quote_field_default_instance_._instance.get_mutable()->field_ = const_cast< ::risk::quote_gateway_market_field*>(
      ::risk::quote_gateway_market_field::internal_default_instance());
  _rsp_position_field_default_instance_._instance.get_mutable()->header_ = const_cast< ::risk::rsp_head_info*>(
      ::risk::rsp_head_info::internal_default_instance());
  _rsp_position_field_default_instance_._instance.get_mutable()->field_ = const_cast< ::risk::trade_gateway_position_field*>(
      ::risk::trade_gateway_position_field::internal_default_instance());
  _rtn_position_field_default_instance_._instance.get_mutable()->field_ = const_cast< ::risk::trade_gateway_position_field*>(
      ::risk::trade_gateway_position_field::internal_default_instance());
  _rsp_trade_field_default_instance_._instance.get_mutable()->header_ = const_cast< ::risk::rsp_head_info*>(
      ::risk::rsp_head_info::internal_default_instance());
  _rsp_trade_field_default_instance_._instance.get_mutable()->field_ = const_cast< ::risk::trade_gateway_trade_field*>(
      ::risk::trade_gateway_trade_field::internal_default_instance());
  _rsp_order_field_default_instance_._instance.get_mutable()->header_ = const_cast< ::risk::rsp_head_info*>(
      ::risk::rsp_head_info::internal_default_instance());
  _rsp_order_field_default_instance_._instance.get_mutable()->field_ = const_cast< ::risk::trade_gateway_order_field*>(
      ::risk::trade_gateway_order_field::internal_default_instance());
  _rtn_trade_field_default_instance_._instance.get_mutable()->field_ = const_cast< ::risk::trade_gateway_trade_field*>(
      ::risk::trade_gateway_trade_field::internal_default_instance());
  _rtn_order_field_default_instance_._instance.get_mutable()->field_ = const_cast< ::risk::trade_gateway_order_field*>(
      ::risk::trade_gateway_order_field::internal_default_instance());
  _rsp_sync_account_field_default_instance_._instance.get_mutable()->header_ = const_cast< ::risk::rsp_head_info*>(
      ::risk::rsp_head_info::internal_default_instance());
  _rsp_sync_account_field_default_instance_._instance.get_mutable()->field_ = const_cast< ::risk::trade_gateway_sync_account_field*>(
      ::risk::trade_gateway_sync_account_field::internal_default_instance());
  _rtn_sync_account_field_default_instance_._instance.get_mutable()->field_ = const_cast< ::risk::trade_gateway_sync_account_field*>(
      ::risk::trade_gateway_sync_account_field::internal_default_instance());
  _rtn_margin_field_default_instance_._instance.get_mutable()->shfe_margin_ = const_cast< ::risk::shfe_margin_field*>(
      ::risk::shfe_margin_field::internal_default_instance());
  _rtn_margin_field_default_instance_._instance.get_mutable()->cffex_margin_ = const_cast< ::risk::cffex_margin_field*>(
      ::risk::cffex_margin_field::internal_default_instance());
  _rtn_margin_field_default_instance_._instance.get_mutable()->dce_margin_ = const_cast< ::risk::dce_margin_field*>(
      ::risk::dce_margin_field::internal_default_instance());
  _rtn_margin_field_default_instance_._instance.get_mutable()->czce_margin_ = const_cast< ::risk::czce_margin_field*>(
      ::risk::czce_margin_field::internal_default_instance());
  _rtn_margin_field_default_instance_._instance.get_mutable()->ine_margin_ = const_cast< ::risk::ine_margin_field*>(
      ::risk::ine_margin_field::internal_default_instance());
  _rtn_margin_field_default_instance_._instance.get_mutable()->delivery_margin_ = const_cast< ::risk::delivery_margin_field*>(
      ::risk::delivery_margin_field::internal_default_instance());
  _rsp_margin_field_default_instance_._instance.get_mutable()->header_ = const_cast< ::risk::rsp_head_info*>(
      ::risk::rsp_head_info::internal_default_instance());
  _rsp_margin_field_default_instance_._instance.get_mutable()->field_ = const_cast< ::risk::rtn_margin_field*>(
      ::risk::rtn_margin_field::internal_default_instance());
  _rsp_risker_investor_default_instance_._instance.get_mutable()->header_ = const_cast< ::risk::rsp_head_info*>(
      ::risk::rsp_head_info::internal_default_instance());
  _rsp_groups_default_instance_._instance.get_mutable()->header_ = const_cast< ::risk::rsp_head_info*>(
      ::risk::rsp_head_info::internal_default_instance());
  _rsp_action_info_default_instance_._instance.get_mutable()->info_ = const_cast< ::risk::error_info*>(
      ::risk::error_info::internal_default_instance());
  _rtn_change_risker_default_instance_._instance.get_mutable()->group_ = const_cast< ::risk::sys_group*>(
      ::risk::sys_group::internal_default_instance());
  _rsp_whatif_default_instance_._instance.get_mutable()->header_ = const_cast< ::risk::rsp_head_info*>(
      ::risk::rsp_head_info::internal_default_instance());
  _rsp_option_argv_default_instance_._instance.get_mutable()->header_ = const_cast< ::risk::rsp_head_info*>(
      ::risk::rsp_head_info::internal_default_instance());
  _rsp_option_argv_default_instance_._instance.get_mutable()->info_ = const_cast< ::risk::option_argv*>(
      ::risk::option_argv::internal_default_instance());
  _rtn_whatif_default_instance_._instance.get_mutable()->field_ = const_cast< ::risk::whatif_argv*>(
      ::risk::whatif_argv::internal_default_instance());
  _rsp_investor_info_default_instance_._instance.get_mutable()->header_ = const_cast< ::risk::rsp_head_info*>(
      ::risk::rsp_head_info::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\033riskapi_data_protocal.proto\022\004risk\032\024tra"
      "de_protocal.proto\032\024quote_protocal.proto\032"
      "\035riskapi_action_protocal.proto\"/\n\nerror_"
      "info\022\017\n\007errorid\030\001 \001(\021\022\020\n\010errormsg\030\002 \001(\t\""
      "R\n\rrsp_head_info\022\021\n\trequestid\030\001 \001(\005\022\036\n\004i"
      "nfo\030\002 \001(\0132\020.risk.error_info\022\016\n\006islast\030\003 "
      "\001(\010\"E\n\020rsp_risker_login\022\021\n\trequestid\030\001 \001"
      "(\005\022\036\n\004info\030\002 \001(\0132\020.risk.error_info\"\201\004\n\017i"
      "nstrument_info\022\024\n\014contractcode\030\001 \001(\t\022\023\n\013"
      "productcode\030\002 \001(\t\022\023\n\013productkind\030\003 \001(\t\022\024"
      "\n\014exchangecode\030\004 \001(\t\022\022\n\nmarketcode\030\005 \001(\t"
      "\022\022\n\ncreatedate\030\006 \001(\t\022\020\n\010opendate\030\007 \001(\t\022\022"
      "\n\nexpiredate\030\010 \001(\t\022\022\n\nmultiplier\030\t \001(\005\022\021"
      "\n\tpricetick\030\n \001(\001\022\024\n\014contractname\030\013 \001(\t\022"
      "\026\n\016delivbegindate\030\014 \001(\t\022\024\n\014delivenddate\030"
      "\r \001(\t\022\026\n\016excontractname\030\016 \001(\t\022\025\n\rexprodu"
      "ctname\030\017 \001(\t\022\022\n\nismrgndisc\030\020 \001(\t\022\024\n\014prod"
      "uctclass\030\021 \001(\t\022\021\n\tbaseprice\030\022 \001(\001\022\023\n\013opt"
      "ionstype\030\023 \001(\t\022\023\n\013strikeprice\030\024 \001(\001\022\031\n\021u"
      "nderlyinginstrid\030\025 \001(\t\022\022\n\nstrikemode\030\026 \001"
      "(\t\022\032\n\022underlyingmultiple\030\027 \001(\001\"a\n\024rsp_in"
      "strument_field\022#\n\006header\030\001 \001(\0132\023.risk.rs"
      "p_head_info\022$\n\005field\030\002 \001(\0132\025.risk.instru"
      "ment_info\"B\n\017rtn_quote_field\022/\n\005field\030\001 "
      "\001(\0132 .risk.quote_gateway_market_field\"\207\001"
      "\n\022rsp_position_field\022#\n\006header\030\001 \001(\0132\023.r"
      "isk.rsp_head_info\0221\n\005field\030\002 \001(\0132\".risk."
      "trade_gateway_position_field\022\031\n\021tryposit"
      "ionprofit\030\003 \001(\001\"b\n\022rtn_position_field\0221\n"
      "\005field\030\001 \001(\0132\".risk.trade_gateway_positi"
      "on_field\022\031\n\021trypositionprofit\030\002 \001(\001\"f\n\017r"
      "sp_trade_field\022#\n\006header\030\001 \001(\0132\023.risk.rs"
      "p_head_info\022.\n\005field\030\002 \001(\0132\037.risk.trade_"
      "gateway_trade_field\"f\n\017rsp_order_field\022#"
      "\n\006header\030\001 \001(\0132\023.risk.rsp_head_info\022.\n\005f"
      "ield\030\002 \001(\0132\037.risk.trade_gateway_order_fi"
      "eld\"A\n\017rtn_trade_field\022.\n\005field\030\001 \001(\0132\037."
      "risk.trade_gateway_trade_field\"A\n\017rtn_or"
      "der_field\022.\n\005field\030\001 \001(\0132\037.risk.trade_ga"
      "teway_order_field\"t\n\026rsp_sync_account_fi"
      "eld\022#\n\006header\030\001 \001(\0132\023.risk.rsp_head_info"
      "\0225\n\005field\030\002 \001(\0132&.risk.trade_gateway_syn"
      "c_account_field\"O\n\026rtn_sync_account_fiel"
      "d\0225\n\005field\030\001 \001(\0132&.risk.trade_gateway_sy"
      "nc_account_field\"F\n\021shfe_margin_field\022\025\n"
      "\rpre_favorable\030\001 \001(\001\022\032\n\022big_side_favorab"
      "le\030\002 \001(\001\"\234\001\n\022cffex_margin_field\022\025\n\rpre_f"
      "avorable\030\001 \001(\001\022\035\n\025speculation_favorable\030"
      "\002 \001(\001\022\031\n\021hedging_favorable\030\003 \001(\001\022\033\n\023arbi"
      "trage_favorable\030\004 \001(\001\022\030\n\020market_favorabl"
      "e\030\005 \001(\001\"p\n\020dce_margin_field\022\025\n\rpre_favor"
      "able\030\001 \001(\001\022\024\n\014sp_favorable\030\002 \001(\001\022\025\n\rspc_"
      "favorable\030\003 \001(\001\022\030\n\020locked_favorable\030\004 \001("
      "\001\"\317\001\n\021czce_margin_field\022\025\n\rpre_favorable"
      "\030\001 \001(\001\022\025\n\rspd_favorable\030\002 \001(\001\022\025\n\rips_fav"
      "orable\030\003 \001(\001\022\025\n\rprt_favorable\030\004 \001(\001\022\025\n\rs"
      "td_favorable\030\005 \001(\001\022\025\n\rstg_favorable\030\006 \001("
      "\001\022\026\n\016zprt_favorable\030\007 \001(\001\022\030\n\020locked_favo"
      "rable\030\010 \001(\001\"E\n\020ine_margin_field\022\025\n\rpre_f"
      "avorable\030\001 \001(\001\022\032\n\022big_side_favorable\030\002 \001"
      "(\001\"\177\n\025delivery_margin_field\022\023\n\013shfe_marg"
      "in\030\001 \001(\001\022\024\n\014cffex_margin\030\002 \001(\001\022\022\n\ndce_ma"
      "rgin\030\003 \001(\001\022\023\n\013czce_margin\030\004 \001(\001\022\022\n\nine_m"
      "argin\030\005 \001(\001\"\321\002\n\020rtn_margin_field\022\021\n\ttime"
      "stamp\030\001 \001(\r\022\020\n\010investor\030\002 \001(\t\022,\n\013shfe_ma"
      "rgin\030\003 \001(\0132\027.risk.shfe_margin_field\022.\n\014c"
      "ffex_margin\030\004 \001(\0132\030.risk.cffex_margin_fi"
      "eld\022*\n\ndce_margin\030\005 \001(\0132\026.risk.dce_margi"
      "n_field\022,\n\013czce_margin\030\006 \001(\0132\027.risk.czce"
      "_margin_field\022*\n\nine_margin\030\007 \001(\0132\026.risk"
      ".ine_margin_field\0224\n\017delivery_margin\030\010 \001"
      "(\0132\033.risk.delivery_margin_field\"^\n\020rsp_m"
      "argin_field\022#\n\006header\030\001 \001(\0132\023.risk.rsp_h"
      "ead_info\022%\n\005field\030\002 \001(\0132\026.risk.rtn_margi"
      "n_field\"c\n\023rsp_risker_investor\022#\n\006header"
      "\030\001 \001(\0132\023.risk.rsp_head_info\022\023\n\013riskgroup"
      "id\030\002 \001(\t\022\022\n\ninvestorid\030\003 \001(\t\"Q\n\nrsp_grou"
      "ps\022#\n\006header\030\001 \001(\0132\023.risk.rsp_head_info\022"
      "\036\n\005infos\030\002 \003(\0132\017.risk.sys_group\"D\n\017rsp_a"
      "ction_info\022\021\n\trequestid\030\001 \001(\005\022\036\n\004info\030\002 "
      "\001(\0132\020.risk.error_info\"i\n\021rtn_change_risk"
      "er\022\022\n\noperatorid\030\001 \001(\005\022\016\n\006userid\030\002 \001(\t\022\036"
      "\n\005group\030\003 \001(\0132\017.risk.sys_group\022\020\n\010invest"
      "or\030\004 \003(\t\"Z\n\030rtn_option_position_risk\022\014\n\004"
      "type\030\001 \001(\005\022\r\n\005model\030\002 \001(\005\022\022\n\ninstrument\030"
      "\003 \001(\t\022\r\n\005value\030\004 \001(\001\"\207\001\n\nrsp_whatif\022#\n\006h"
      "eader\030\001 \001(\0132\023.risk.rsp_head_info\022\014\n\004type"
      "\030\002 \001(\005\022\r\n\005model\030\003 \001(\005\022\022\n\ninstrument\030\004 \001("
      "\t\022\r\n\005range\030\005 \001(\001\022\024\n\014option_value\030\006 \001(\001\"K"
      "\n\013option_argv\022\r\n\005model\030\001 \001(\005\022\022\n\nprice_ty"
      "pe\030\002 \001(\005\022\013\n\003vol\030\003 \001(\001\022\014\n\004rate\030\004 \001(\001\"W\n\017r"
      "sp_option_argv\022#\n\006header\030\001 \001(\0132\023.risk.rs"
      "p_head_info\022\037\n\004info\030\002 \001(\0132\021.risk.option_"
      "argv\"D\n\nrtn_whatif\022 \n\005field\030\001 \001(\0132\021.risk"
      ".whatif_argv\022\024\n\014option_value\030\002 \001(\001\"\200\005\n\ri"
      "nvestor_info\022\022\n\ninvestorid\030\001 \001(\t\022\020\n\010brok"
      "erid\030\002 \001(\t\022\024\n\014investortype\030\003 \001(\t\022\024\n\014inve"
      "storname\030\004 \001(\t\022\032\n\022identifiedcardtype\030\005 \001"
      "(\t\022\030\n\020identifiedcardno\030\006 \001(\t\022\017\n\007country\030"
      "\007 \001(\t\022\020\n\010province\030\010 \001(\t\022\014\n\004city\030\t \001(\t\022\020\n"
      "\010birthday\030\n \001(\t\022\013\n\003sex\030\013 \001(\t\022\022\n\nprofessi"
      "on\030\014 \001(\t\022\020\n\010national\030\r \001(\t\022\017\n\007capital\030\016 "
      "\001(\001\022\027\n\017capitalcurrency\030\017 \001(\t\022\021\n\ttelephon"
      "e\030\020 \001(\t\022\017\n\007address\030\021 \001(\t\022\017\n\007zipcode\030\022 \001("
      "\t\022\r\n\005email\030\023 \001(\t\022\014\n\004memo\030\024 \001(\t\022\030\n\020openin"
      "vestorname\030\025 \001(\t\022\031\n\021orderinvestorname\030\026 "
      "\001(\t\022\030\n\020fundinvestorname\030\027 \001(\t\022\032\n\022settlei"
      "nvestorname\030\030 \001(\t\022\020\n\010isactive\030\031 \001(\005\022\024\n\014d"
      "epartmentid\030\032 \001(\t\022\030\n\020investorfullname\030\033 "
      "\001(\t\022\017\n\007isemail\030\034 \001(\005\022\r\n\005issms\030\035 \001(\005\022\022\n\ni"
      "susingotp\030\036 \001(\005\022\024\n\014clientregion\030\037 \001(\t\"\\\n"
      "\021rsp_investor_info\022#\n\006header\030\001 \001(\0132\023.ris"
      "k.rsp_head_info\022\"\n\005infos\030\002 \003(\0132\023.risk.in"
      "vestor_infob\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4539);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "riskapi_data_protocal.proto", &protobuf_RegisterTypes);
  ::risk::protobuf_trade_5fprotocal_2eproto::AddDescriptors();
  ::risk::protobuf_quote_5fprotocal_2eproto::AddDescriptors();
  ::risk::protobuf_riskapi_5faction_5fprotocal_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_riskapi_5fdata_5fprotocal_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int error_info::kErroridFieldNumber;
const int error_info::kErrormsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

error_info::error_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.error_info)
}
error_info::error_info(const error_info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errormsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.errormsg().size() > 0) {
    errormsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errormsg_);
  }
  errorid_ = from.errorid_;
  // @@protoc_insertion_point(copy_constructor:risk.error_info)
}

void error_info::SharedCtor() {
  errormsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errorid_ = 0;
  _cached_size_ = 0;
}

error_info::~error_info() {
  // @@protoc_insertion_point(destructor:risk.error_info)
  SharedDtor();
}

void error_info::SharedDtor() {
  errormsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void error_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* error_info::descriptor() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const error_info& error_info::default_instance() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

error_info* error_info::New(::google::protobuf::Arena* arena) const {
  error_info* n = new error_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void error_info::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.error_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errormsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errorid_ = 0;
  _internal_metadata_.Clear();
}

bool error_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.error_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // sint32 errorid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &errorid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string errormsg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errormsg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->errormsg().data(), static_cast<int>(this->errormsg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.error_info.errormsg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.error_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.error_info)
  return false;
#undef DO_
}

void error_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.error_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 errorid = 1;
  if (this->errorid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->errorid(), output);
  }

  // string errormsg = 2;
  if (this->errormsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errormsg().data(), static_cast<int>(this->errormsg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.error_info.errormsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errormsg(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.error_info)
}

::google::protobuf::uint8* error_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.error_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 errorid = 1;
  if (this->errorid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->errorid(), target);
  }

  // string errormsg = 2;
  if (this->errormsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errormsg().data(), static_cast<int>(this->errormsg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.error_info.errormsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errormsg(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.error_info)
  return target;
}

size_t error_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.error_info)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string errormsg = 2;
  if (this->errormsg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errormsg());
  }

  // sint32 errorid = 1;
  if (this->errorid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->errorid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void error_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.error_info)
  GOOGLE_DCHECK_NE(&from, this);
  const error_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const error_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.error_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.error_info)
    MergeFrom(*source);
  }
}

void error_info::MergeFrom(const error_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.error_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.errormsg().size() > 0) {

    errormsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errormsg_);
  }
  if (from.errorid() != 0) {
    set_errorid(from.errorid());
  }
}

void error_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.error_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void error_info::CopyFrom(const error_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.error_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool error_info::IsInitialized() const {
  return true;
}

void error_info::Swap(error_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void error_info::InternalSwap(error_info* other) {
  using std::swap;
  errormsg_.Swap(&other->errormsg_);
  swap(errorid_, other->errorid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata error_info::GetMetadata() const {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// error_info

// sint32 errorid = 1;
void error_info::clear_errorid() {
  errorid_ = 0;
}
::google::protobuf::int32 error_info::errorid() const {
  // @@protoc_insertion_point(field_get:risk.error_info.errorid)
  return errorid_;
}
void error_info::set_errorid(::google::protobuf::int32 value) {
  
  errorid_ = value;
  // @@protoc_insertion_point(field_set:risk.error_info.errorid)
}

// string errormsg = 2;
void error_info::clear_errormsg() {
  errormsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& error_info::errormsg() const {
  // @@protoc_insertion_point(field_get:risk.error_info.errormsg)
  return errormsg_.GetNoArena();
}
void error_info::set_errormsg(const ::std::string& value) {
  
  errormsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.error_info.errormsg)
}
#if LANG_CXX11
void error_info::set_errormsg(::std::string&& value) {
  
  errormsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.error_info.errormsg)
}
#endif
void error_info::set_errormsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  errormsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.error_info.errormsg)
}
void error_info::set_errormsg(const char* value, size_t size) {
  
  errormsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.error_info.errormsg)
}
::std::string* error_info::mutable_errormsg() {
  
  // @@protoc_insertion_point(field_mutable:risk.error_info.errormsg)
  return errormsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* error_info::release_errormsg() {
  // @@protoc_insertion_point(field_release:risk.error_info.errormsg)
  
  return errormsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void error_info::set_allocated_errormsg(::std::string* errormsg) {
  if (errormsg != NULL) {
    
  } else {
    
  }
  errormsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errormsg);
  // @@protoc_insertion_point(field_set_allocated:risk.error_info.errormsg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rsp_head_info::kRequestidFieldNumber;
const int rsp_head_info::kInfoFieldNumber;
const int rsp_head_info::kIslastFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rsp_head_info::rsp_head_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.rsp_head_info)
}
rsp_head_info::rsp_head_info(const rsp_head_info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_info()) {
    info_ = new ::risk::error_info(*from.info_);
  } else {
    info_ = NULL;
  }
  ::memcpy(&requestid_, &from.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&islast_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(islast_));
  // @@protoc_insertion_point(copy_constructor:risk.rsp_head_info)
}

void rsp_head_info::SharedCtor() {
  ::memset(&info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&islast_) -
      reinterpret_cast<char*>(&info_)) + sizeof(islast_));
  _cached_size_ = 0;
}

rsp_head_info::~rsp_head_info() {
  // @@protoc_insertion_point(destructor:risk.rsp_head_info)
  SharedDtor();
}

void rsp_head_info::SharedDtor() {
  if (this != internal_default_instance()) delete info_;
}

void rsp_head_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rsp_head_info::descriptor() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const rsp_head_info& rsp_head_info::default_instance() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

rsp_head_info* rsp_head_info::New(::google::protobuf::Arena* arena) const {
  rsp_head_info* n = new rsp_head_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rsp_head_info::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.rsp_head_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && info_ != NULL) {
    delete info_;
  }
  info_ = NULL;
  ::memset(&requestid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&islast_) -
      reinterpret_cast<char*>(&requestid_)) + sizeof(islast_));
  _internal_metadata_.Clear();
}

bool rsp_head_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.rsp_head_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 requestid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .risk.error_info info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool islast = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &islast_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.rsp_head_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.rsp_head_info)
  return false;
#undef DO_
}

void rsp_head_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.rsp_head_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 requestid = 1;
  if (this->requestid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // .risk.error_info info = 2;
  if (this->has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->info_, output);
  }

  // bool islast = 3;
  if (this->islast() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->islast(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.rsp_head_info)
}

::google::protobuf::uint8* rsp_head_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.rsp_head_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 requestid = 1;
  if (this->requestid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // .risk.error_info info = 2;
  if (this->has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->info_, deterministic, target);
  }

  // bool islast = 3;
  if (this->islast() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->islast(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.rsp_head_info)
  return target;
}

size_t rsp_head_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.rsp_head_info)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .risk.error_info info = 2;
  if (this->has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->info_);
  }

  // int32 requestid = 1;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->requestid());
  }

  // bool islast = 3;
  if (this->islast() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rsp_head_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.rsp_head_info)
  GOOGLE_DCHECK_NE(&from, this);
  const rsp_head_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const rsp_head_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.rsp_head_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.rsp_head_info)
    MergeFrom(*source);
  }
}

void rsp_head_info::MergeFrom(const rsp_head_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.rsp_head_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    mutable_info()->::risk::error_info::MergeFrom(from.info());
  }
  if (from.requestid() != 0) {
    set_requestid(from.requestid());
  }
  if (from.islast() != 0) {
    set_islast(from.islast());
  }
}

void rsp_head_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.rsp_head_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rsp_head_info::CopyFrom(const rsp_head_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.rsp_head_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rsp_head_info::IsInitialized() const {
  return true;
}

void rsp_head_info::Swap(rsp_head_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rsp_head_info::InternalSwap(rsp_head_info* other) {
  using std::swap;
  swap(info_, other->info_);
  swap(requestid_, other->requestid_);
  swap(islast_, other->islast_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rsp_head_info::GetMetadata() const {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rsp_head_info

// int32 requestid = 1;
void rsp_head_info::clear_requestid() {
  requestid_ = 0;
}
::google::protobuf::int32 rsp_head_info::requestid() const {
  // @@protoc_insertion_point(field_get:risk.rsp_head_info.requestid)
  return requestid_;
}
void rsp_head_info::set_requestid(::google::protobuf::int32 value) {
  
  requestid_ = value;
  // @@protoc_insertion_point(field_set:risk.rsp_head_info.requestid)
}

// .risk.error_info info = 2;
bool rsp_head_info::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
void rsp_head_info::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
const ::risk::error_info& rsp_head_info::info() const {
  const ::risk::error_info* p = info_;
  // @@protoc_insertion_point(field_get:risk.rsp_head_info.info)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::error_info*>(
      &::risk::_error_info_default_instance_);
}
::risk::error_info* rsp_head_info::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::risk::error_info;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_head_info.info)
  return info_;
}
::risk::error_info* rsp_head_info::release_info() {
  // @@protoc_insertion_point(field_release:risk.rsp_head_info.info)
  
  ::risk::error_info* temp = info_;
  info_ = NULL;
  return temp;
}
void rsp_head_info::set_allocated_info(::risk::error_info* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_head_info.info)
}

// bool islast = 3;
void rsp_head_info::clear_islast() {
  islast_ = false;
}
bool rsp_head_info::islast() const {
  // @@protoc_insertion_point(field_get:risk.rsp_head_info.islast)
  return islast_;
}
void rsp_head_info::set_islast(bool value) {
  
  islast_ = value;
  // @@protoc_insertion_point(field_set:risk.rsp_head_info.islast)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rsp_risker_login::kRequestidFieldNumber;
const int rsp_risker_login::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rsp_risker_login::rsp_risker_login()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.rsp_risker_login)
}
rsp_risker_login::rsp_risker_login(const rsp_risker_login& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_info()) {
    info_ = new ::risk::error_info(*from.info_);
  } else {
    info_ = NULL;
  }
  requestid_ = from.requestid_;
  // @@protoc_insertion_point(copy_constructor:risk.rsp_risker_login)
}

void rsp_risker_login::SharedCtor() {
  ::memset(&info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&requestid_) -
      reinterpret_cast<char*>(&info_)) + sizeof(requestid_));
  _cached_size_ = 0;
}

rsp_risker_login::~rsp_risker_login() {
  // @@protoc_insertion_point(destructor:risk.rsp_risker_login)
  SharedDtor();
}

void rsp_risker_login::SharedDtor() {
  if (this != internal_default_instance()) delete info_;
}

void rsp_risker_login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rsp_risker_login::descriptor() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const rsp_risker_login& rsp_risker_login::default_instance() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

rsp_risker_login* rsp_risker_login::New(::google::protobuf::Arena* arena) const {
  rsp_risker_login* n = new rsp_risker_login;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rsp_risker_login::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.rsp_risker_login)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && info_ != NULL) {
    delete info_;
  }
  info_ = NULL;
  requestid_ = 0;
  _internal_metadata_.Clear();
}

bool rsp_risker_login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.rsp_risker_login)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 requestid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .risk.error_info info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.rsp_risker_login)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.rsp_risker_login)
  return false;
#undef DO_
}

void rsp_risker_login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.rsp_risker_login)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 requestid = 1;
  if (this->requestid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // .risk.error_info info = 2;
  if (this->has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.rsp_risker_login)
}

::google::protobuf::uint8* rsp_risker_login::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.rsp_risker_login)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 requestid = 1;
  if (this->requestid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // .risk.error_info info = 2;
  if (this->has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.rsp_risker_login)
  return target;
}

size_t rsp_risker_login::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.rsp_risker_login)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .risk.error_info info = 2;
  if (this->has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->info_);
  }

  // int32 requestid = 1;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->requestid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rsp_risker_login::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.rsp_risker_login)
  GOOGLE_DCHECK_NE(&from, this);
  const rsp_risker_login* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const rsp_risker_login>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.rsp_risker_login)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.rsp_risker_login)
    MergeFrom(*source);
  }
}

void rsp_risker_login::MergeFrom(const rsp_risker_login& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.rsp_risker_login)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    mutable_info()->::risk::error_info::MergeFrom(from.info());
  }
  if (from.requestid() != 0) {
    set_requestid(from.requestid());
  }
}

void rsp_risker_login::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.rsp_risker_login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rsp_risker_login::CopyFrom(const rsp_risker_login& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.rsp_risker_login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rsp_risker_login::IsInitialized() const {
  return true;
}

void rsp_risker_login::Swap(rsp_risker_login* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rsp_risker_login::InternalSwap(rsp_risker_login* other) {
  using std::swap;
  swap(info_, other->info_);
  swap(requestid_, other->requestid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rsp_risker_login::GetMetadata() const {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rsp_risker_login

// int32 requestid = 1;
void rsp_risker_login::clear_requestid() {
  requestid_ = 0;
}
::google::protobuf::int32 rsp_risker_login::requestid() const {
  // @@protoc_insertion_point(field_get:risk.rsp_risker_login.requestid)
  return requestid_;
}
void rsp_risker_login::set_requestid(::google::protobuf::int32 value) {
  
  requestid_ = value;
  // @@protoc_insertion_point(field_set:risk.rsp_risker_login.requestid)
}

// .risk.error_info info = 2;
bool rsp_risker_login::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
void rsp_risker_login::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
const ::risk::error_info& rsp_risker_login::info() const {
  const ::risk::error_info* p = info_;
  // @@protoc_insertion_point(field_get:risk.rsp_risker_login.info)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::error_info*>(
      &::risk::_error_info_default_instance_);
}
::risk::error_info* rsp_risker_login::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::risk::error_info;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_risker_login.info)
  return info_;
}
::risk::error_info* rsp_risker_login::release_info() {
  // @@protoc_insertion_point(field_release:risk.rsp_risker_login.info)
  
  ::risk::error_info* temp = info_;
  info_ = NULL;
  return temp;
}
void rsp_risker_login::set_allocated_info(::risk::error_info* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_risker_login.info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int instrument_info::kContractcodeFieldNumber;
const int instrument_info::kProductcodeFieldNumber;
const int instrument_info::kProductkindFieldNumber;
const int instrument_info::kExchangecodeFieldNumber;
const int instrument_info::kMarketcodeFieldNumber;
const int instrument_info::kCreatedateFieldNumber;
const int instrument_info::kOpendateFieldNumber;
const int instrument_info::kExpiredateFieldNumber;
const int instrument_info::kMultiplierFieldNumber;
const int instrument_info::kPricetickFieldNumber;
const int instrument_info::kContractnameFieldNumber;
const int instrument_info::kDelivbegindateFieldNumber;
const int instrument_info::kDelivenddateFieldNumber;
const int instrument_info::kExcontractnameFieldNumber;
const int instrument_info::kExproductnameFieldNumber;
const int instrument_info::kIsmrgndiscFieldNumber;
const int instrument_info::kProductclassFieldNumber;
const int instrument_info::kBasepriceFieldNumber;
const int instrument_info::kOptionstypeFieldNumber;
const int instrument_info::kStrikepriceFieldNumber;
const int instrument_info::kUnderlyinginstridFieldNumber;
const int instrument_info::kStrikemodeFieldNumber;
const int instrument_info::kUnderlyingmultipleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

instrument_info::instrument_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.instrument_info)
}
instrument_info::instrument_info(const instrument_info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  contractcode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.contractcode().size() > 0) {
    contractcode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contractcode_);
  }
  productcode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.productcode().size() > 0) {
    productcode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productcode_);
  }
  productkind_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.productkind().size() > 0) {
    productkind_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productkind_);
  }
  exchangecode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.exchangecode().size() > 0) {
    exchangecode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchangecode_);
  }
  marketcode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.marketcode().size() > 0) {
    marketcode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketcode_);
  }
  createdate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.createdate().size() > 0) {
    createdate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.createdate_);
  }
  opendate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.opendate().size() > 0) {
    opendate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.opendate_);
  }
  expiredate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.expiredate().size() > 0) {
    expiredate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.expiredate_);
  }
  contractname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.contractname().size() > 0) {
    contractname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contractname_);
  }
  delivbegindate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.delivbegindate().size() > 0) {
    delivbegindate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.delivbegindate_);
  }
  delivenddate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.delivenddate().size() > 0) {
    delivenddate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.delivenddate_);
  }
  excontractname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.excontractname().size() > 0) {
    excontractname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.excontractname_);
  }
  exproductname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.exproductname().size() > 0) {
    exproductname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exproductname_);
  }
  ismrgndisc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ismrgndisc().size() > 0) {
    ismrgndisc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ismrgndisc_);
  }
  productclass_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.productclass().size() > 0) {
    productclass_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productclass_);
  }
  optionstype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.optionstype().size() > 0) {
    optionstype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.optionstype_);
  }
  underlyinginstrid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.underlyinginstrid().size() > 0) {
    underlyinginstrid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.underlyinginstrid_);
  }
  strikemode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strikemode().size() > 0) {
    strikemode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strikemode_);
  }
  ::memcpy(&pricetick_, &from.pricetick_,
    static_cast<size_t>(reinterpret_cast<char*>(&multiplier_) -
    reinterpret_cast<char*>(&pricetick_)) + sizeof(multiplier_));
  // @@protoc_insertion_point(copy_constructor:risk.instrument_info)
}

void instrument_info::SharedCtor() {
  contractcode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  productcode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  productkind_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangecode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  marketcode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  createdate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  opendate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expiredate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contractname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  delivbegindate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  delivenddate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  excontractname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exproductname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ismrgndisc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  productclass_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  optionstype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  underlyinginstrid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strikemode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&pricetick_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&multiplier_) -
      reinterpret_cast<char*>(&pricetick_)) + sizeof(multiplier_));
  _cached_size_ = 0;
}

instrument_info::~instrument_info() {
  // @@protoc_insertion_point(destructor:risk.instrument_info)
  SharedDtor();
}

void instrument_info::SharedDtor() {
  contractcode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  productcode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  productkind_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangecode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  marketcode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  createdate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  opendate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expiredate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contractname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  delivbegindate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  delivenddate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  excontractname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exproductname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ismrgndisc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  productclass_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  optionstype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  underlyinginstrid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strikemode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void instrument_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* instrument_info::descriptor() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const instrument_info& instrument_info::default_instance() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

instrument_info* instrument_info::New(::google::protobuf::Arena* arena) const {
  instrument_info* n = new instrument_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void instrument_info::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.instrument_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contractcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  productcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  productkind_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangecode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  marketcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  createdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  opendate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expiredate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contractname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  delivbegindate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  delivenddate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  excontractname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exproductname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ismrgndisc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  productclass_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  optionstype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  underlyinginstrid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strikemode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&pricetick_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&multiplier_) -
      reinterpret_cast<char*>(&pricetick_)) + sizeof(multiplier_));
  _internal_metadata_.Clear();
}

bool instrument_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.instrument_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string contractcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contractcode()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->contractcode().data(), static_cast<int>(this->contractcode().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.instrument_info.contractcode"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string productcode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productcode()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->productcode().data(), static_cast<int>(this->productcode().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.instrument_info.productcode"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string productkind = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productkind()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->productkind().data(), static_cast<int>(this->productkind().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.instrument_info.productkind"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string exchangecode = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangecode()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchangecode().data(), static_cast<int>(this->exchangecode().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.instrument_info.exchangecode"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string marketcode = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_marketcode()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->marketcode().data(), static_cast<int>(this->marketcode().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.instrument_info.marketcode"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string createdate = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_createdate()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->createdate().data(), static_cast<int>(this->createdate().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.instrument_info.createdate"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string opendate = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_opendate()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->opendate().data(), static_cast<int>(this->opendate().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.instrument_info.opendate"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string expiredate = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_expiredate()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->expiredate().data(), static_cast<int>(this->expiredate().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.instrument_info.expiredate"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 multiplier = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &multiplier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double pricetick = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pricetick_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string contractname = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contractname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->contractname().data(), static_cast<int>(this->contractname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.instrument_info.contractname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string delivbegindate = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_delivbegindate()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->delivbegindate().data(), static_cast<int>(this->delivbegindate().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.instrument_info.delivbegindate"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string delivenddate = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_delivenddate()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->delivenddate().data(), static_cast<int>(this->delivenddate().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.instrument_info.delivenddate"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string excontractname = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_excontractname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->excontractname().data(), static_cast<int>(this->excontractname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.instrument_info.excontractname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string exproductname = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exproductname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exproductname().data(), static_cast<int>(this->exproductname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.instrument_info.exproductname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ismrgndisc = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ismrgndisc()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ismrgndisc().data(), static_cast<int>(this->ismrgndisc().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.instrument_info.ismrgndisc"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string productclass = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productclass()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->productclass().data(), static_cast<int>(this->productclass().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.instrument_info.productclass"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double baseprice = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(145u /* 145 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &baseprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string optionstype = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_optionstype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->optionstype().data(), static_cast<int>(this->optionstype().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.instrument_info.optionstype"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double strikeprice = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(161u /* 161 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &strikeprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string underlyinginstrid = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_underlyinginstrid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->underlyinginstrid().data(), static_cast<int>(this->underlyinginstrid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.instrument_info.underlyinginstrid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string strikemode = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strikemode()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strikemode().data(), static_cast<int>(this->strikemode().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.instrument_info.strikemode"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double underlyingmultiple = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(185u /* 185 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &underlyingmultiple_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.instrument_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.instrument_info)
  return false;
#undef DO_
}

void instrument_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.instrument_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string contractcode = 1;
  if (this->contractcode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->contractcode().data(), static_cast<int>(this->contractcode().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.contractcode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->contractcode(), output);
  }

  // string productcode = 2;
  if (this->productcode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->productcode().data(), static_cast<int>(this->productcode().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.productcode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->productcode(), output);
  }

  // string productkind = 3;
  if (this->productkind().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->productkind().data(), static_cast<int>(this->productkind().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.productkind");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->productkind(), output);
  }

  // string exchangecode = 4;
  if (this->exchangecode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchangecode().data(), static_cast<int>(this->exchangecode().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.exchangecode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->exchangecode(), output);
  }

  // string marketcode = 5;
  if (this->marketcode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketcode().data(), static_cast<int>(this->marketcode().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.marketcode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->marketcode(), output);
  }

  // string createdate = 6;
  if (this->createdate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->createdate().data(), static_cast<int>(this->createdate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.createdate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->createdate(), output);
  }

  // string opendate = 7;
  if (this->opendate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->opendate().data(), static_cast<int>(this->opendate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.opendate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->opendate(), output);
  }

  // string expiredate = 8;
  if (this->expiredate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->expiredate().data(), static_cast<int>(this->expiredate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.expiredate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->expiredate(), output);
  }

  // int32 multiplier = 9;
  if (this->multiplier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->multiplier(), output);
  }

  // double pricetick = 10;
  if (this->pricetick() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->pricetick(), output);
  }

  // string contractname = 11;
  if (this->contractname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->contractname().data(), static_cast<int>(this->contractname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.contractname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->contractname(), output);
  }

  // string delivbegindate = 12;
  if (this->delivbegindate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->delivbegindate().data(), static_cast<int>(this->delivbegindate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.delivbegindate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->delivbegindate(), output);
  }

  // string delivenddate = 13;
  if (this->delivenddate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->delivenddate().data(), static_cast<int>(this->delivenddate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.delivenddate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->delivenddate(), output);
  }

  // string excontractname = 14;
  if (this->excontractname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->excontractname().data(), static_cast<int>(this->excontractname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.excontractname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->excontractname(), output);
  }

  // string exproductname = 15;
  if (this->exproductname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exproductname().data(), static_cast<int>(this->exproductname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.exproductname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->exproductname(), output);
  }

  // string ismrgndisc = 16;
  if (this->ismrgndisc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ismrgndisc().data(), static_cast<int>(this->ismrgndisc().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.ismrgndisc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->ismrgndisc(), output);
  }

  // string productclass = 17;
  if (this->productclass().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->productclass().data(), static_cast<int>(this->productclass().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.productclass");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->productclass(), output);
  }

  // double baseprice = 18;
  if (this->baseprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->baseprice(), output);
  }

  // string optionstype = 19;
  if (this->optionstype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->optionstype().data(), static_cast<int>(this->optionstype().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.optionstype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->optionstype(), output);
  }

  // double strikeprice = 20;
  if (this->strikeprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->strikeprice(), output);
  }

  // string underlyinginstrid = 21;
  if (this->underlyinginstrid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->underlyinginstrid().data(), static_cast<int>(this->underlyinginstrid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.underlyinginstrid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->underlyinginstrid(), output);
  }

  // string strikemode = 22;
  if (this->strikemode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strikemode().data(), static_cast<int>(this->strikemode().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.strikemode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->strikemode(), output);
  }

  // double underlyingmultiple = 23;
  if (this->underlyingmultiple() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->underlyingmultiple(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.instrument_info)
}

::google::protobuf::uint8* instrument_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.instrument_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string contractcode = 1;
  if (this->contractcode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->contractcode().data(), static_cast<int>(this->contractcode().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.contractcode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->contractcode(), target);
  }

  // string productcode = 2;
  if (this->productcode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->productcode().data(), static_cast<int>(this->productcode().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.productcode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->productcode(), target);
  }

  // string productkind = 3;
  if (this->productkind().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->productkind().data(), static_cast<int>(this->productkind().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.productkind");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->productkind(), target);
  }

  // string exchangecode = 4;
  if (this->exchangecode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchangecode().data(), static_cast<int>(this->exchangecode().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.exchangecode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->exchangecode(), target);
  }

  // string marketcode = 5;
  if (this->marketcode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketcode().data(), static_cast<int>(this->marketcode().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.marketcode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->marketcode(), target);
  }

  // string createdate = 6;
  if (this->createdate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->createdate().data(), static_cast<int>(this->createdate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.createdate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->createdate(), target);
  }

  // string opendate = 7;
  if (this->opendate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->opendate().data(), static_cast<int>(this->opendate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.opendate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->opendate(), target);
  }

  // string expiredate = 8;
  if (this->expiredate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->expiredate().data(), static_cast<int>(this->expiredate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.expiredate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->expiredate(), target);
  }

  // int32 multiplier = 9;
  if (this->multiplier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->multiplier(), target);
  }

  // double pricetick = 10;
  if (this->pricetick() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->pricetick(), target);
  }

  // string contractname = 11;
  if (this->contractname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->contractname().data(), static_cast<int>(this->contractname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.contractname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->contractname(), target);
  }

  // string delivbegindate = 12;
  if (this->delivbegindate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->delivbegindate().data(), static_cast<int>(this->delivbegindate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.delivbegindate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->delivbegindate(), target);
  }

  // string delivenddate = 13;
  if (this->delivenddate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->delivenddate().data(), static_cast<int>(this->delivenddate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.delivenddate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->delivenddate(), target);
  }

  // string excontractname = 14;
  if (this->excontractname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->excontractname().data(), static_cast<int>(this->excontractname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.excontractname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->excontractname(), target);
  }

  // string exproductname = 15;
  if (this->exproductname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exproductname().data(), static_cast<int>(this->exproductname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.exproductname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->exproductname(), target);
  }

  // string ismrgndisc = 16;
  if (this->ismrgndisc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ismrgndisc().data(), static_cast<int>(this->ismrgndisc().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.ismrgndisc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->ismrgndisc(), target);
  }

  // string productclass = 17;
  if (this->productclass().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->productclass().data(), static_cast<int>(this->productclass().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.productclass");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->productclass(), target);
  }

  // double baseprice = 18;
  if (this->baseprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->baseprice(), target);
  }

  // string optionstype = 19;
  if (this->optionstype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->optionstype().data(), static_cast<int>(this->optionstype().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.optionstype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->optionstype(), target);
  }

  // double strikeprice = 20;
  if (this->strikeprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->strikeprice(), target);
  }

  // string underlyinginstrid = 21;
  if (this->underlyinginstrid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->underlyinginstrid().data(), static_cast<int>(this->underlyinginstrid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.underlyinginstrid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->underlyinginstrid(), target);
  }

  // string strikemode = 22;
  if (this->strikemode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strikemode().data(), static_cast<int>(this->strikemode().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.instrument_info.strikemode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->strikemode(), target);
  }

  // double underlyingmultiple = 23;
  if (this->underlyingmultiple() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->underlyingmultiple(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.instrument_info)
  return target;
}

size_t instrument_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.instrument_info)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string contractcode = 1;
  if (this->contractcode().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->contractcode());
  }

  // string productcode = 2;
  if (this->productcode().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->productcode());
  }

  // string productkind = 3;
  if (this->productkind().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->productkind());
  }

  // string exchangecode = 4;
  if (this->exchangecode().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchangecode());
  }

  // string marketcode = 5;
  if (this->marketcode().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->marketcode());
  }

  // string createdate = 6;
  if (this->createdate().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->createdate());
  }

  // string opendate = 7;
  if (this->opendate().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->opendate());
  }

  // string expiredate = 8;
  if (this->expiredate().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->expiredate());
  }

  // string contractname = 11;
  if (this->contractname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->contractname());
  }

  // string delivbegindate = 12;
  if (this->delivbegindate().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->delivbegindate());
  }

  // string delivenddate = 13;
  if (this->delivenddate().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->delivenddate());
  }

  // string excontractname = 14;
  if (this->excontractname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->excontractname());
  }

  // string exproductname = 15;
  if (this->exproductname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exproductname());
  }

  // string ismrgndisc = 16;
  if (this->ismrgndisc().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ismrgndisc());
  }

  // string productclass = 17;
  if (this->productclass().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->productclass());
  }

  // string optionstype = 19;
  if (this->optionstype().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->optionstype());
  }

  // string underlyinginstrid = 21;
  if (this->underlyinginstrid().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->underlyinginstrid());
  }

  // string strikemode = 22;
  if (this->strikemode().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strikemode());
  }

  // double pricetick = 10;
  if (this->pricetick() != 0) {
    total_size += 1 + 8;
  }

  // double baseprice = 18;
  if (this->baseprice() != 0) {
    total_size += 2 + 8;
  }

  // double strikeprice = 20;
  if (this->strikeprice() != 0) {
    total_size += 2 + 8;
  }

  // double underlyingmultiple = 23;
  if (this->underlyingmultiple() != 0) {
    total_size += 2 + 8;
  }

  // int32 multiplier = 9;
  if (this->multiplier() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->multiplier());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void instrument_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.instrument_info)
  GOOGLE_DCHECK_NE(&from, this);
  const instrument_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const instrument_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.instrument_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.instrument_info)
    MergeFrom(*source);
  }
}

void instrument_info::MergeFrom(const instrument_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.instrument_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.contractcode().size() > 0) {

    contractcode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contractcode_);
  }
  if (from.productcode().size() > 0) {

    productcode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productcode_);
  }
  if (from.productkind().size() > 0) {

    productkind_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productkind_);
  }
  if (from.exchangecode().size() > 0) {

    exchangecode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchangecode_);
  }
  if (from.marketcode().size() > 0) {

    marketcode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketcode_);
  }
  if (from.createdate().size() > 0) {

    createdate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.createdate_);
  }
  if (from.opendate().size() > 0) {

    opendate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.opendate_);
  }
  if (from.expiredate().size() > 0) {

    expiredate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.expiredate_);
  }
  if (from.contractname().size() > 0) {

    contractname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contractname_);
  }
  if (from.delivbegindate().size() > 0) {

    delivbegindate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.delivbegindate_);
  }
  if (from.delivenddate().size() > 0) {

    delivenddate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.delivenddate_);
  }
  if (from.excontractname().size() > 0) {

    excontractname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.excontractname_);
  }
  if (from.exproductname().size() > 0) {

    exproductname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exproductname_);
  }
  if (from.ismrgndisc().size() > 0) {

    ismrgndisc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ismrgndisc_);
  }
  if (from.productclass().size() > 0) {

    productclass_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.productclass_);
  }
  if (from.optionstype().size() > 0) {

    optionstype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.optionstype_);
  }
  if (from.underlyinginstrid().size() > 0) {

    underlyinginstrid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.underlyinginstrid_);
  }
  if (from.strikemode().size() > 0) {

    strikemode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strikemode_);
  }
  if (from.pricetick() != 0) {
    set_pricetick(from.pricetick());
  }
  if (from.baseprice() != 0) {
    set_baseprice(from.baseprice());
  }
  if (from.strikeprice() != 0) {
    set_strikeprice(from.strikeprice());
  }
  if (from.underlyingmultiple() != 0) {
    set_underlyingmultiple(from.underlyingmultiple());
  }
  if (from.multiplier() != 0) {
    set_multiplier(from.multiplier());
  }
}

void instrument_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.instrument_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void instrument_info::CopyFrom(const instrument_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.instrument_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool instrument_info::IsInitialized() const {
  return true;
}

void instrument_info::Swap(instrument_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void instrument_info::InternalSwap(instrument_info* other) {
  using std::swap;
  contractcode_.Swap(&other->contractcode_);
  productcode_.Swap(&other->productcode_);
  productkind_.Swap(&other->productkind_);
  exchangecode_.Swap(&other->exchangecode_);
  marketcode_.Swap(&other->marketcode_);
  createdate_.Swap(&other->createdate_);
  opendate_.Swap(&other->opendate_);
  expiredate_.Swap(&other->expiredate_);
  contractname_.Swap(&other->contractname_);
  delivbegindate_.Swap(&other->delivbegindate_);
  delivenddate_.Swap(&other->delivenddate_);
  excontractname_.Swap(&other->excontractname_);
  exproductname_.Swap(&other->exproductname_);
  ismrgndisc_.Swap(&other->ismrgndisc_);
  productclass_.Swap(&other->productclass_);
  optionstype_.Swap(&other->optionstype_);
  underlyinginstrid_.Swap(&other->underlyinginstrid_);
  strikemode_.Swap(&other->strikemode_);
  swap(pricetick_, other->pricetick_);
  swap(baseprice_, other->baseprice_);
  swap(strikeprice_, other->strikeprice_);
  swap(underlyingmultiple_, other->underlyingmultiple_);
  swap(multiplier_, other->multiplier_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata instrument_info::GetMetadata() const {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// instrument_info

// string contractcode = 1;
void instrument_info::clear_contractcode() {
  contractcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& instrument_info::contractcode() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.contractcode)
  return contractcode_.GetNoArena();
}
void instrument_info::set_contractcode(const ::std::string& value) {
  
  contractcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.contractcode)
}
#if LANG_CXX11
void instrument_info::set_contractcode(::std::string&& value) {
  
  contractcode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.contractcode)
}
#endif
void instrument_info::set_contractcode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  contractcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.contractcode)
}
void instrument_info::set_contractcode(const char* value, size_t size) {
  
  contractcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.contractcode)
}
::std::string* instrument_info::mutable_contractcode() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.contractcode)
  return contractcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* instrument_info::release_contractcode() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.contractcode)
  
  return contractcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void instrument_info::set_allocated_contractcode(::std::string* contractcode) {
  if (contractcode != NULL) {
    
  } else {
    
  }
  contractcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contractcode);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.contractcode)
}

// string productcode = 2;
void instrument_info::clear_productcode() {
  productcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& instrument_info::productcode() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.productcode)
  return productcode_.GetNoArena();
}
void instrument_info::set_productcode(const ::std::string& value) {
  
  productcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.productcode)
}
#if LANG_CXX11
void instrument_info::set_productcode(::std::string&& value) {
  
  productcode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.productcode)
}
#endif
void instrument_info::set_productcode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  productcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.productcode)
}
void instrument_info::set_productcode(const char* value, size_t size) {
  
  productcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.productcode)
}
::std::string* instrument_info::mutable_productcode() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.productcode)
  return productcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* instrument_info::release_productcode() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.productcode)
  
  return productcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void instrument_info::set_allocated_productcode(::std::string* productcode) {
  if (productcode != NULL) {
    
  } else {
    
  }
  productcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productcode);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.productcode)
}

// string productkind = 3;
void instrument_info::clear_productkind() {
  productkind_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& instrument_info::productkind() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.productkind)
  return productkind_.GetNoArena();
}
void instrument_info::set_productkind(const ::std::string& value) {
  
  productkind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.productkind)
}
#if LANG_CXX11
void instrument_info::set_productkind(::std::string&& value) {
  
  productkind_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.productkind)
}
#endif
void instrument_info::set_productkind(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  productkind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.productkind)
}
void instrument_info::set_productkind(const char* value, size_t size) {
  
  productkind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.productkind)
}
::std::string* instrument_info::mutable_productkind() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.productkind)
  return productkind_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* instrument_info::release_productkind() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.productkind)
  
  return productkind_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void instrument_info::set_allocated_productkind(::std::string* productkind) {
  if (productkind != NULL) {
    
  } else {
    
  }
  productkind_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productkind);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.productkind)
}

// string exchangecode = 4;
void instrument_info::clear_exchangecode() {
  exchangecode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& instrument_info::exchangecode() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.exchangecode)
  return exchangecode_.GetNoArena();
}
void instrument_info::set_exchangecode(const ::std::string& value) {
  
  exchangecode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.exchangecode)
}
#if LANG_CXX11
void instrument_info::set_exchangecode(::std::string&& value) {
  
  exchangecode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.exchangecode)
}
#endif
void instrument_info::set_exchangecode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exchangecode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.exchangecode)
}
void instrument_info::set_exchangecode(const char* value, size_t size) {
  
  exchangecode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.exchangecode)
}
::std::string* instrument_info::mutable_exchangecode() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.exchangecode)
  return exchangecode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* instrument_info::release_exchangecode() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.exchangecode)
  
  return exchangecode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void instrument_info::set_allocated_exchangecode(::std::string* exchangecode) {
  if (exchangecode != NULL) {
    
  } else {
    
  }
  exchangecode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchangecode);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.exchangecode)
}

// string marketcode = 5;
void instrument_info::clear_marketcode() {
  marketcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& instrument_info::marketcode() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.marketcode)
  return marketcode_.GetNoArena();
}
void instrument_info::set_marketcode(const ::std::string& value) {
  
  marketcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.marketcode)
}
#if LANG_CXX11
void instrument_info::set_marketcode(::std::string&& value) {
  
  marketcode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.marketcode)
}
#endif
void instrument_info::set_marketcode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  marketcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.marketcode)
}
void instrument_info::set_marketcode(const char* value, size_t size) {
  
  marketcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.marketcode)
}
::std::string* instrument_info::mutable_marketcode() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.marketcode)
  return marketcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* instrument_info::release_marketcode() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.marketcode)
  
  return marketcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void instrument_info::set_allocated_marketcode(::std::string* marketcode) {
  if (marketcode != NULL) {
    
  } else {
    
  }
  marketcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), marketcode);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.marketcode)
}

// string createdate = 6;
void instrument_info::clear_createdate() {
  createdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& instrument_info::createdate() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.createdate)
  return createdate_.GetNoArena();
}
void instrument_info::set_createdate(const ::std::string& value) {
  
  createdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.createdate)
}
#if LANG_CXX11
void instrument_info::set_createdate(::std::string&& value) {
  
  createdate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.createdate)
}
#endif
void instrument_info::set_createdate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  createdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.createdate)
}
void instrument_info::set_createdate(const char* value, size_t size) {
  
  createdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.createdate)
}
::std::string* instrument_info::mutable_createdate() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.createdate)
  return createdate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* instrument_info::release_createdate() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.createdate)
  
  return createdate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void instrument_info::set_allocated_createdate(::std::string* createdate) {
  if (createdate != NULL) {
    
  } else {
    
  }
  createdate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), createdate);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.createdate)
}

// string opendate = 7;
void instrument_info::clear_opendate() {
  opendate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& instrument_info::opendate() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.opendate)
  return opendate_.GetNoArena();
}
void instrument_info::set_opendate(const ::std::string& value) {
  
  opendate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.opendate)
}
#if LANG_CXX11
void instrument_info::set_opendate(::std::string&& value) {
  
  opendate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.opendate)
}
#endif
void instrument_info::set_opendate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  opendate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.opendate)
}
void instrument_info::set_opendate(const char* value, size_t size) {
  
  opendate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.opendate)
}
::std::string* instrument_info::mutable_opendate() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.opendate)
  return opendate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* instrument_info::release_opendate() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.opendate)
  
  return opendate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void instrument_info::set_allocated_opendate(::std::string* opendate) {
  if (opendate != NULL) {
    
  } else {
    
  }
  opendate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), opendate);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.opendate)
}

// string expiredate = 8;
void instrument_info::clear_expiredate() {
  expiredate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& instrument_info::expiredate() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.expiredate)
  return expiredate_.GetNoArena();
}
void instrument_info::set_expiredate(const ::std::string& value) {
  
  expiredate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.expiredate)
}
#if LANG_CXX11
void instrument_info::set_expiredate(::std::string&& value) {
  
  expiredate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.expiredate)
}
#endif
void instrument_info::set_expiredate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  expiredate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.expiredate)
}
void instrument_info::set_expiredate(const char* value, size_t size) {
  
  expiredate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.expiredate)
}
::std::string* instrument_info::mutable_expiredate() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.expiredate)
  return expiredate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* instrument_info::release_expiredate() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.expiredate)
  
  return expiredate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void instrument_info::set_allocated_expiredate(::std::string* expiredate) {
  if (expiredate != NULL) {
    
  } else {
    
  }
  expiredate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), expiredate);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.expiredate)
}

// int32 multiplier = 9;
void instrument_info::clear_multiplier() {
  multiplier_ = 0;
}
::google::protobuf::int32 instrument_info::multiplier() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.multiplier)
  return multiplier_;
}
void instrument_info::set_multiplier(::google::protobuf::int32 value) {
  
  multiplier_ = value;
  // @@protoc_insertion_point(field_set:risk.instrument_info.multiplier)
}

// double pricetick = 10;
void instrument_info::clear_pricetick() {
  pricetick_ = 0;
}
double instrument_info::pricetick() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.pricetick)
  return pricetick_;
}
void instrument_info::set_pricetick(double value) {
  
  pricetick_ = value;
  // @@protoc_insertion_point(field_set:risk.instrument_info.pricetick)
}

// string contractname = 11;
void instrument_info::clear_contractname() {
  contractname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& instrument_info::contractname() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.contractname)
  return contractname_.GetNoArena();
}
void instrument_info::set_contractname(const ::std::string& value) {
  
  contractname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.contractname)
}
#if LANG_CXX11
void instrument_info::set_contractname(::std::string&& value) {
  
  contractname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.contractname)
}
#endif
void instrument_info::set_contractname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  contractname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.contractname)
}
void instrument_info::set_contractname(const char* value, size_t size) {
  
  contractname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.contractname)
}
::std::string* instrument_info::mutable_contractname() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.contractname)
  return contractname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* instrument_info::release_contractname() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.contractname)
  
  return contractname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void instrument_info::set_allocated_contractname(::std::string* contractname) {
  if (contractname != NULL) {
    
  } else {
    
  }
  contractname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contractname);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.contractname)
}

// string delivbegindate = 12;
void instrument_info::clear_delivbegindate() {
  delivbegindate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& instrument_info::delivbegindate() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.delivbegindate)
  return delivbegindate_.GetNoArena();
}
void instrument_info::set_delivbegindate(const ::std::string& value) {
  
  delivbegindate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.delivbegindate)
}
#if LANG_CXX11
void instrument_info::set_delivbegindate(::std::string&& value) {
  
  delivbegindate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.delivbegindate)
}
#endif
void instrument_info::set_delivbegindate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  delivbegindate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.delivbegindate)
}
void instrument_info::set_delivbegindate(const char* value, size_t size) {
  
  delivbegindate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.delivbegindate)
}
::std::string* instrument_info::mutable_delivbegindate() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.delivbegindate)
  return delivbegindate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* instrument_info::release_delivbegindate() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.delivbegindate)
  
  return delivbegindate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void instrument_info::set_allocated_delivbegindate(::std::string* delivbegindate) {
  if (delivbegindate != NULL) {
    
  } else {
    
  }
  delivbegindate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), delivbegindate);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.delivbegindate)
}

// string delivenddate = 13;
void instrument_info::clear_delivenddate() {
  delivenddate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& instrument_info::delivenddate() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.delivenddate)
  return delivenddate_.GetNoArena();
}
void instrument_info::set_delivenddate(const ::std::string& value) {
  
  delivenddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.delivenddate)
}
#if LANG_CXX11
void instrument_info::set_delivenddate(::std::string&& value) {
  
  delivenddate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.delivenddate)
}
#endif
void instrument_info::set_delivenddate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  delivenddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.delivenddate)
}
void instrument_info::set_delivenddate(const char* value, size_t size) {
  
  delivenddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.delivenddate)
}
::std::string* instrument_info::mutable_delivenddate() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.delivenddate)
  return delivenddate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* instrument_info::release_delivenddate() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.delivenddate)
  
  return delivenddate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void instrument_info::set_allocated_delivenddate(::std::string* delivenddate) {
  if (delivenddate != NULL) {
    
  } else {
    
  }
  delivenddate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), delivenddate);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.delivenddate)
}

// string excontractname = 14;
void instrument_info::clear_excontractname() {
  excontractname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& instrument_info::excontractname() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.excontractname)
  return excontractname_.GetNoArena();
}
void instrument_info::set_excontractname(const ::std::string& value) {
  
  excontractname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.excontractname)
}
#if LANG_CXX11
void instrument_info::set_excontractname(::std::string&& value) {
  
  excontractname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.excontractname)
}
#endif
void instrument_info::set_excontractname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  excontractname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.excontractname)
}
void instrument_info::set_excontractname(const char* value, size_t size) {
  
  excontractname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.excontractname)
}
::std::string* instrument_info::mutable_excontractname() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.excontractname)
  return excontractname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* instrument_info::release_excontractname() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.excontractname)
  
  return excontractname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void instrument_info::set_allocated_excontractname(::std::string* excontractname) {
  if (excontractname != NULL) {
    
  } else {
    
  }
  excontractname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), excontractname);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.excontractname)
}

// string exproductname = 15;
void instrument_info::clear_exproductname() {
  exproductname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& instrument_info::exproductname() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.exproductname)
  return exproductname_.GetNoArena();
}
void instrument_info::set_exproductname(const ::std::string& value) {
  
  exproductname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.exproductname)
}
#if LANG_CXX11
void instrument_info::set_exproductname(::std::string&& value) {
  
  exproductname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.exproductname)
}
#endif
void instrument_info::set_exproductname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exproductname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.exproductname)
}
void instrument_info::set_exproductname(const char* value, size_t size) {
  
  exproductname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.exproductname)
}
::std::string* instrument_info::mutable_exproductname() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.exproductname)
  return exproductname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* instrument_info::release_exproductname() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.exproductname)
  
  return exproductname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void instrument_info::set_allocated_exproductname(::std::string* exproductname) {
  if (exproductname != NULL) {
    
  } else {
    
  }
  exproductname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exproductname);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.exproductname)
}

// string ismrgndisc = 16;
void instrument_info::clear_ismrgndisc() {
  ismrgndisc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& instrument_info::ismrgndisc() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.ismrgndisc)
  return ismrgndisc_.GetNoArena();
}
void instrument_info::set_ismrgndisc(const ::std::string& value) {
  
  ismrgndisc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.ismrgndisc)
}
#if LANG_CXX11
void instrument_info::set_ismrgndisc(::std::string&& value) {
  
  ismrgndisc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.ismrgndisc)
}
#endif
void instrument_info::set_ismrgndisc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ismrgndisc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.ismrgndisc)
}
void instrument_info::set_ismrgndisc(const char* value, size_t size) {
  
  ismrgndisc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.ismrgndisc)
}
::std::string* instrument_info::mutable_ismrgndisc() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.ismrgndisc)
  return ismrgndisc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* instrument_info::release_ismrgndisc() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.ismrgndisc)
  
  return ismrgndisc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void instrument_info::set_allocated_ismrgndisc(::std::string* ismrgndisc) {
  if (ismrgndisc != NULL) {
    
  } else {
    
  }
  ismrgndisc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ismrgndisc);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.ismrgndisc)
}

// string productclass = 17;
void instrument_info::clear_productclass() {
  productclass_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& instrument_info::productclass() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.productclass)
  return productclass_.GetNoArena();
}
void instrument_info::set_productclass(const ::std::string& value) {
  
  productclass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.productclass)
}
#if LANG_CXX11
void instrument_info::set_productclass(::std::string&& value) {
  
  productclass_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.productclass)
}
#endif
void instrument_info::set_productclass(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  productclass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.productclass)
}
void instrument_info::set_productclass(const char* value, size_t size) {
  
  productclass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.productclass)
}
::std::string* instrument_info::mutable_productclass() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.productclass)
  return productclass_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* instrument_info::release_productclass() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.productclass)
  
  return productclass_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void instrument_info::set_allocated_productclass(::std::string* productclass) {
  if (productclass != NULL) {
    
  } else {
    
  }
  productclass_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productclass);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.productclass)
}

// double baseprice = 18;
void instrument_info::clear_baseprice() {
  baseprice_ = 0;
}
double instrument_info::baseprice() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.baseprice)
  return baseprice_;
}
void instrument_info::set_baseprice(double value) {
  
  baseprice_ = value;
  // @@protoc_insertion_point(field_set:risk.instrument_info.baseprice)
}

// string optionstype = 19;
void instrument_info::clear_optionstype() {
  optionstype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& instrument_info::optionstype() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.optionstype)
  return optionstype_.GetNoArena();
}
void instrument_info::set_optionstype(const ::std::string& value) {
  
  optionstype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.optionstype)
}
#if LANG_CXX11
void instrument_info::set_optionstype(::std::string&& value) {
  
  optionstype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.optionstype)
}
#endif
void instrument_info::set_optionstype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  optionstype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.optionstype)
}
void instrument_info::set_optionstype(const char* value, size_t size) {
  
  optionstype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.optionstype)
}
::std::string* instrument_info::mutable_optionstype() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.optionstype)
  return optionstype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* instrument_info::release_optionstype() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.optionstype)
  
  return optionstype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void instrument_info::set_allocated_optionstype(::std::string* optionstype) {
  if (optionstype != NULL) {
    
  } else {
    
  }
  optionstype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), optionstype);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.optionstype)
}

// double strikeprice = 20;
void instrument_info::clear_strikeprice() {
  strikeprice_ = 0;
}
double instrument_info::strikeprice() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.strikeprice)
  return strikeprice_;
}
void instrument_info::set_strikeprice(double value) {
  
  strikeprice_ = value;
  // @@protoc_insertion_point(field_set:risk.instrument_info.strikeprice)
}

// string underlyinginstrid = 21;
void instrument_info::clear_underlyinginstrid() {
  underlyinginstrid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& instrument_info::underlyinginstrid() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.underlyinginstrid)
  return underlyinginstrid_.GetNoArena();
}
void instrument_info::set_underlyinginstrid(const ::std::string& value) {
  
  underlyinginstrid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.underlyinginstrid)
}
#if LANG_CXX11
void instrument_info::set_underlyinginstrid(::std::string&& value) {
  
  underlyinginstrid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.underlyinginstrid)
}
#endif
void instrument_info::set_underlyinginstrid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  underlyinginstrid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.underlyinginstrid)
}
void instrument_info::set_underlyinginstrid(const char* value, size_t size) {
  
  underlyinginstrid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.underlyinginstrid)
}
::std::string* instrument_info::mutable_underlyinginstrid() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.underlyinginstrid)
  return underlyinginstrid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* instrument_info::release_underlyinginstrid() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.underlyinginstrid)
  
  return underlyinginstrid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void instrument_info::set_allocated_underlyinginstrid(::std::string* underlyinginstrid) {
  if (underlyinginstrid != NULL) {
    
  } else {
    
  }
  underlyinginstrid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), underlyinginstrid);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.underlyinginstrid)
}

// string strikemode = 22;
void instrument_info::clear_strikemode() {
  strikemode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& instrument_info::strikemode() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.strikemode)
  return strikemode_.GetNoArena();
}
void instrument_info::set_strikemode(const ::std::string& value) {
  
  strikemode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.instrument_info.strikemode)
}
#if LANG_CXX11
void instrument_info::set_strikemode(::std::string&& value) {
  
  strikemode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.instrument_info.strikemode)
}
#endif
void instrument_info::set_strikemode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  strikemode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.instrument_info.strikemode)
}
void instrument_info::set_strikemode(const char* value, size_t size) {
  
  strikemode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.instrument_info.strikemode)
}
::std::string* instrument_info::mutable_strikemode() {
  
  // @@protoc_insertion_point(field_mutable:risk.instrument_info.strikemode)
  return strikemode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* instrument_info::release_strikemode() {
  // @@protoc_insertion_point(field_release:risk.instrument_info.strikemode)
  
  return strikemode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void instrument_info::set_allocated_strikemode(::std::string* strikemode) {
  if (strikemode != NULL) {
    
  } else {
    
  }
  strikemode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strikemode);
  // @@protoc_insertion_point(field_set_allocated:risk.instrument_info.strikemode)
}

// double underlyingmultiple = 23;
void instrument_info::clear_underlyingmultiple() {
  underlyingmultiple_ = 0;
}
double instrument_info::underlyingmultiple() const {
  // @@protoc_insertion_point(field_get:risk.instrument_info.underlyingmultiple)
  return underlyingmultiple_;
}
void instrument_info::set_underlyingmultiple(double value) {
  
  underlyingmultiple_ = value;
  // @@protoc_insertion_point(field_set:risk.instrument_info.underlyingmultiple)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rsp_instrument_field::kHeaderFieldNumber;
const int rsp_instrument_field::kFieldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rsp_instrument_field::rsp_instrument_field()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.rsp_instrument_field)
}
rsp_instrument_field::rsp_instrument_field(const rsp_instrument_field& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::risk::rsp_head_info(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_field()) {
    field_ = new ::risk::instrument_info(*from.field_);
  } else {
    field_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:risk.rsp_instrument_field)
}

void rsp_instrument_field::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&field_) -
      reinterpret_cast<char*>(&header_)) + sizeof(field_));
  _cached_size_ = 0;
}

rsp_instrument_field::~rsp_instrument_field() {
  // @@protoc_insertion_point(destructor:risk.rsp_instrument_field)
  SharedDtor();
}

void rsp_instrument_field::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete field_;
}

void rsp_instrument_field::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rsp_instrument_field::descriptor() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const rsp_instrument_field& rsp_instrument_field::default_instance() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

rsp_instrument_field* rsp_instrument_field::New(::google::protobuf::Arena* arena) const {
  rsp_instrument_field* n = new rsp_instrument_field;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rsp_instrument_field::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.rsp_instrument_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && field_ != NULL) {
    delete field_;
  }
  field_ = NULL;
  _internal_metadata_.Clear();
}

bool rsp_instrument_field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.rsp_instrument_field)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .risk.rsp_head_info header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .risk.instrument_info field = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.rsp_instrument_field)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.rsp_instrument_field)
  return false;
#undef DO_
}

void rsp_instrument_field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.rsp_instrument_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .risk.rsp_head_info header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .risk.instrument_info field = 2;
  if (this->has_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->field_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.rsp_instrument_field)
}

::google::protobuf::uint8* rsp_instrument_field::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.rsp_instrument_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .risk.rsp_head_info header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .risk.instrument_info field = 2;
  if (this->has_field()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->field_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.rsp_instrument_field)
  return target;
}

size_t rsp_instrument_field::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.rsp_instrument_field)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .risk.rsp_head_info header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .risk.instrument_info field = 2;
  if (this->has_field()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->field_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rsp_instrument_field::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.rsp_instrument_field)
  GOOGLE_DCHECK_NE(&from, this);
  const rsp_instrument_field* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const rsp_instrument_field>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.rsp_instrument_field)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.rsp_instrument_field)
    MergeFrom(*source);
  }
}

void rsp_instrument_field::MergeFrom(const rsp_instrument_field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.rsp_instrument_field)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::risk::rsp_head_info::MergeFrom(from.header());
  }
  if (from.has_field()) {
    mutable_field()->::risk::instrument_info::MergeFrom(from.field());
  }
}

void rsp_instrument_field::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.rsp_instrument_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rsp_instrument_field::CopyFrom(const rsp_instrument_field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.rsp_instrument_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rsp_instrument_field::IsInitialized() const {
  return true;
}

void rsp_instrument_field::Swap(rsp_instrument_field* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rsp_instrument_field::InternalSwap(rsp_instrument_field* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(field_, other->field_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rsp_instrument_field::GetMetadata() const {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rsp_instrument_field

// .risk.rsp_head_info header = 1;
bool rsp_instrument_field::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void rsp_instrument_field::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::risk::rsp_head_info& rsp_instrument_field::header() const {
  const ::risk::rsp_head_info* p = header_;
  // @@protoc_insertion_point(field_get:risk.rsp_instrument_field.header)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::rsp_head_info*>(
      &::risk::_rsp_head_info_default_instance_);
}
::risk::rsp_head_info* rsp_instrument_field::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::risk::rsp_head_info;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_instrument_field.header)
  return header_;
}
::risk::rsp_head_info* rsp_instrument_field::release_header() {
  // @@protoc_insertion_point(field_release:risk.rsp_instrument_field.header)
  
  ::risk::rsp_head_info* temp = header_;
  header_ = NULL;
  return temp;
}
void rsp_instrument_field::set_allocated_header(::risk::rsp_head_info* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_instrument_field.header)
}

// .risk.instrument_info field = 2;
bool rsp_instrument_field::has_field() const {
  return this != internal_default_instance() && field_ != NULL;
}
void rsp_instrument_field::clear_field() {
  if (GetArenaNoVirtual() == NULL && field_ != NULL) delete field_;
  field_ = NULL;
}
const ::risk::instrument_info& rsp_instrument_field::field() const {
  const ::risk::instrument_info* p = field_;
  // @@protoc_insertion_point(field_get:risk.rsp_instrument_field.field)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::instrument_info*>(
      &::risk::_instrument_info_default_instance_);
}
::risk::instrument_info* rsp_instrument_field::mutable_field() {
  
  if (field_ == NULL) {
    field_ = new ::risk::instrument_info;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_instrument_field.field)
  return field_;
}
::risk::instrument_info* rsp_instrument_field::release_field() {
  // @@protoc_insertion_point(field_release:risk.rsp_instrument_field.field)
  
  ::risk::instrument_info* temp = field_;
  field_ = NULL;
  return temp;
}
void rsp_instrument_field::set_allocated_field(::risk::instrument_info* field) {
  delete field_;
  field_ = field;
  if (field) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_instrument_field.field)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rtn_quote_field::kFieldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rtn_quote_field::rtn_quote_field()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.rtn_quote_field)
}
rtn_quote_field::rtn_quote_field(const rtn_quote_field& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_field()) {
    field_ = new ::risk::quote_gateway_market_field(*from.field_);
  } else {
    field_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:risk.rtn_quote_field)
}

void rtn_quote_field::SharedCtor() {
  field_ = NULL;
  _cached_size_ = 0;
}

rtn_quote_field::~rtn_quote_field() {
  // @@protoc_insertion_point(destructor:risk.rtn_quote_field)
  SharedDtor();
}

void rtn_quote_field::SharedDtor() {
  if (this != internal_default_instance()) delete field_;
}

void rtn_quote_field::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rtn_quote_field::descriptor() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const rtn_quote_field& rtn_quote_field::default_instance() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

rtn_quote_field* rtn_quote_field::New(::google::protobuf::Arena* arena) const {
  rtn_quote_field* n = new rtn_quote_field;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rtn_quote_field::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.rtn_quote_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && field_ != NULL) {
    delete field_;
  }
  field_ = NULL;
  _internal_metadata_.Clear();
}

bool rtn_quote_field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.rtn_quote_field)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .risk.quote_gateway_market_field field = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.rtn_quote_field)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.rtn_quote_field)
  return false;
#undef DO_
}

void rtn_quote_field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.rtn_quote_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .risk.quote_gateway_market_field field = 1;
  if (this->has_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->field_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.rtn_quote_field)
}

::google::protobuf::uint8* rtn_quote_field::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.rtn_quote_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .risk.quote_gateway_market_field field = 1;
  if (this->has_field()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->field_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.rtn_quote_field)
  return target;
}

size_t rtn_quote_field::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.rtn_quote_field)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .risk.quote_gateway_market_field field = 1;
  if (this->has_field()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->field_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rtn_quote_field::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.rtn_quote_field)
  GOOGLE_DCHECK_NE(&from, this);
  const rtn_quote_field* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const rtn_quote_field>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.rtn_quote_field)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.rtn_quote_field)
    MergeFrom(*source);
  }
}

void rtn_quote_field::MergeFrom(const rtn_quote_field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.rtn_quote_field)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_field()) {
    mutable_field()->::risk::quote_gateway_market_field::MergeFrom(from.field());
  }
}

void rtn_quote_field::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.rtn_quote_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rtn_quote_field::CopyFrom(const rtn_quote_field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.rtn_quote_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rtn_quote_field::IsInitialized() const {
  return true;
}

void rtn_quote_field::Swap(rtn_quote_field* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rtn_quote_field::InternalSwap(rtn_quote_field* other) {
  using std::swap;
  swap(field_, other->field_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rtn_quote_field::GetMetadata() const {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rtn_quote_field

// .risk.quote_gateway_market_field field = 1;
bool rtn_quote_field::has_field() const {
  return this != internal_default_instance() && field_ != NULL;
}
void rtn_quote_field::clear_field() {
  if (GetArenaNoVirtual() == NULL && field_ != NULL) delete field_;
  field_ = NULL;
}
const ::risk::quote_gateway_market_field& rtn_quote_field::field() const {
  const ::risk::quote_gateway_market_field* p = field_;
  // @@protoc_insertion_point(field_get:risk.rtn_quote_field.field)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::quote_gateway_market_field*>(
      &::risk::_quote_gateway_market_field_default_instance_);
}
::risk::quote_gateway_market_field* rtn_quote_field::mutable_field() {
  
  if (field_ == NULL) {
    field_ = new ::risk::quote_gateway_market_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.rtn_quote_field.field)
  return field_;
}
::risk::quote_gateway_market_field* rtn_quote_field::release_field() {
  // @@protoc_insertion_point(field_release:risk.rtn_quote_field.field)
  
  ::risk::quote_gateway_market_field* temp = field_;
  field_ = NULL;
  return temp;
}
void rtn_quote_field::set_allocated_field(::risk::quote_gateway_market_field* field) {
  delete field_;
  field_ = field;
  if (field) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rtn_quote_field.field)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rsp_position_field::kHeaderFieldNumber;
const int rsp_position_field::kFieldFieldNumber;
const int rsp_position_field::kTrypositionprofitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rsp_position_field::rsp_position_field()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.rsp_position_field)
}
rsp_position_field::rsp_position_field(const rsp_position_field& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::risk::rsp_head_info(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_field()) {
    field_ = new ::risk::trade_gateway_position_field(*from.field_);
  } else {
    field_ = NULL;
  }
  trypositionprofit_ = from.trypositionprofit_;
  // @@protoc_insertion_point(copy_constructor:risk.rsp_position_field)
}

void rsp_position_field::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trypositionprofit_) -
      reinterpret_cast<char*>(&header_)) + sizeof(trypositionprofit_));
  _cached_size_ = 0;
}

rsp_position_field::~rsp_position_field() {
  // @@protoc_insertion_point(destructor:risk.rsp_position_field)
  SharedDtor();
}

void rsp_position_field::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete field_;
}

void rsp_position_field::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rsp_position_field::descriptor() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const rsp_position_field& rsp_position_field::default_instance() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

rsp_position_field* rsp_position_field::New(::google::protobuf::Arena* arena) const {
  rsp_position_field* n = new rsp_position_field;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rsp_position_field::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.rsp_position_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && field_ != NULL) {
    delete field_;
  }
  field_ = NULL;
  trypositionprofit_ = 0;
  _internal_metadata_.Clear();
}

bool rsp_position_field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.rsp_position_field)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .risk.rsp_head_info header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .risk.trade_gateway_position_field field = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double trypositionprofit = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &trypositionprofit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.rsp_position_field)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.rsp_position_field)
  return false;
#undef DO_
}

void rsp_position_field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.rsp_position_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .risk.rsp_head_info header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .risk.trade_gateway_position_field field = 2;
  if (this->has_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->field_, output);
  }

  // double trypositionprofit = 3;
  if (this->trypositionprofit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->trypositionprofit(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.rsp_position_field)
}

::google::protobuf::uint8* rsp_position_field::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.rsp_position_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .risk.rsp_head_info header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .risk.trade_gateway_position_field field = 2;
  if (this->has_field()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->field_, deterministic, target);
  }

  // double trypositionprofit = 3;
  if (this->trypositionprofit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->trypositionprofit(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.rsp_position_field)
  return target;
}

size_t rsp_position_field::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.rsp_position_field)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .risk.rsp_head_info header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .risk.trade_gateway_position_field field = 2;
  if (this->has_field()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->field_);
  }

  // double trypositionprofit = 3;
  if (this->trypositionprofit() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rsp_position_field::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.rsp_position_field)
  GOOGLE_DCHECK_NE(&from, this);
  const rsp_position_field* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const rsp_position_field>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.rsp_position_field)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.rsp_position_field)
    MergeFrom(*source);
  }
}

void rsp_position_field::MergeFrom(const rsp_position_field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.rsp_position_field)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::risk::rsp_head_info::MergeFrom(from.header());
  }
  if (from.has_field()) {
    mutable_field()->::risk::trade_gateway_position_field::MergeFrom(from.field());
  }
  if (from.trypositionprofit() != 0) {
    set_trypositionprofit(from.trypositionprofit());
  }
}

void rsp_position_field::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.rsp_position_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rsp_position_field::CopyFrom(const rsp_position_field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.rsp_position_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rsp_position_field::IsInitialized() const {
  return true;
}

void rsp_position_field::Swap(rsp_position_field* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rsp_position_field::InternalSwap(rsp_position_field* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(field_, other->field_);
  swap(trypositionprofit_, other->trypositionprofit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rsp_position_field::GetMetadata() const {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rsp_position_field

// .risk.rsp_head_info header = 1;
bool rsp_position_field::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void rsp_position_field::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::risk::rsp_head_info& rsp_position_field::header() const {
  const ::risk::rsp_head_info* p = header_;
  // @@protoc_insertion_point(field_get:risk.rsp_position_field.header)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::rsp_head_info*>(
      &::risk::_rsp_head_info_default_instance_);
}
::risk::rsp_head_info* rsp_position_field::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::risk::rsp_head_info;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_position_field.header)
  return header_;
}
::risk::rsp_head_info* rsp_position_field::release_header() {
  // @@protoc_insertion_point(field_release:risk.rsp_position_field.header)
  
  ::risk::rsp_head_info* temp = header_;
  header_ = NULL;
  return temp;
}
void rsp_position_field::set_allocated_header(::risk::rsp_head_info* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_position_field.header)
}

// .risk.trade_gateway_position_field field = 2;
bool rsp_position_field::has_field() const {
  return this != internal_default_instance() && field_ != NULL;
}
void rsp_position_field::clear_field() {
  if (GetArenaNoVirtual() == NULL && field_ != NULL) delete field_;
  field_ = NULL;
}
const ::risk::trade_gateway_position_field& rsp_position_field::field() const {
  const ::risk::trade_gateway_position_field* p = field_;
  // @@protoc_insertion_point(field_get:risk.rsp_position_field.field)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::trade_gateway_position_field*>(
      &::risk::_trade_gateway_position_field_default_instance_);
}
::risk::trade_gateway_position_field* rsp_position_field::mutable_field() {
  
  if (field_ == NULL) {
    field_ = new ::risk::trade_gateway_position_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_position_field.field)
  return field_;
}
::risk::trade_gateway_position_field* rsp_position_field::release_field() {
  // @@protoc_insertion_point(field_release:risk.rsp_position_field.field)
  
  ::risk::trade_gateway_position_field* temp = field_;
  field_ = NULL;
  return temp;
}
void rsp_position_field::set_allocated_field(::risk::trade_gateway_position_field* field) {
  delete field_;
  field_ = field;
  if (field) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_position_field.field)
}

// double trypositionprofit = 3;
void rsp_position_field::clear_trypositionprofit() {
  trypositionprofit_ = 0;
}
double rsp_position_field::trypositionprofit() const {
  // @@protoc_insertion_point(field_get:risk.rsp_position_field.trypositionprofit)
  return trypositionprofit_;
}
void rsp_position_field::set_trypositionprofit(double value) {
  
  trypositionprofit_ = value;
  // @@protoc_insertion_point(field_set:risk.rsp_position_field.trypositionprofit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rtn_position_field::kFieldFieldNumber;
const int rtn_position_field::kTrypositionprofitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rtn_position_field::rtn_position_field()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.rtn_position_field)
}
rtn_position_field::rtn_position_field(const rtn_position_field& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_field()) {
    field_ = new ::risk::trade_gateway_position_field(*from.field_);
  } else {
    field_ = NULL;
  }
  trypositionprofit_ = from.trypositionprofit_;
  // @@protoc_insertion_point(copy_constructor:risk.rtn_position_field)
}

void rtn_position_field::SharedCtor() {
  ::memset(&field_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trypositionprofit_) -
      reinterpret_cast<char*>(&field_)) + sizeof(trypositionprofit_));
  _cached_size_ = 0;
}

rtn_position_field::~rtn_position_field() {
  // @@protoc_insertion_point(destructor:risk.rtn_position_field)
  SharedDtor();
}

void rtn_position_field::SharedDtor() {
  if (this != internal_default_instance()) delete field_;
}

void rtn_position_field::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rtn_position_field::descriptor() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const rtn_position_field& rtn_position_field::default_instance() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

rtn_position_field* rtn_position_field::New(::google::protobuf::Arena* arena) const {
  rtn_position_field* n = new rtn_position_field;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rtn_position_field::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.rtn_position_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && field_ != NULL) {
    delete field_;
  }
  field_ = NULL;
  trypositionprofit_ = 0;
  _internal_metadata_.Clear();
}

bool rtn_position_field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.rtn_position_field)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .risk.trade_gateway_position_field field = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double trypositionprofit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &trypositionprofit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.rtn_position_field)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.rtn_position_field)
  return false;
#undef DO_
}

void rtn_position_field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.rtn_position_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .risk.trade_gateway_position_field field = 1;
  if (this->has_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->field_, output);
  }

  // double trypositionprofit = 2;
  if (this->trypositionprofit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->trypositionprofit(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.rtn_position_field)
}

::google::protobuf::uint8* rtn_position_field::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.rtn_position_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .risk.trade_gateway_position_field field = 1;
  if (this->has_field()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->field_, deterministic, target);
  }

  // double trypositionprofit = 2;
  if (this->trypositionprofit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->trypositionprofit(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.rtn_position_field)
  return target;
}

size_t rtn_position_field::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.rtn_position_field)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .risk.trade_gateway_position_field field = 1;
  if (this->has_field()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->field_);
  }

  // double trypositionprofit = 2;
  if (this->trypositionprofit() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rtn_position_field::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.rtn_position_field)
  GOOGLE_DCHECK_NE(&from, this);
  const rtn_position_field* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const rtn_position_field>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.rtn_position_field)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.rtn_position_field)
    MergeFrom(*source);
  }
}

void rtn_position_field::MergeFrom(const rtn_position_field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.rtn_position_field)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_field()) {
    mutable_field()->::risk::trade_gateway_position_field::MergeFrom(from.field());
  }
  if (from.trypositionprofit() != 0) {
    set_trypositionprofit(from.trypositionprofit());
  }
}

void rtn_position_field::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.rtn_position_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rtn_position_field::CopyFrom(const rtn_position_field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.rtn_position_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rtn_position_field::IsInitialized() const {
  return true;
}

void rtn_position_field::Swap(rtn_position_field* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rtn_position_field::InternalSwap(rtn_position_field* other) {
  using std::swap;
  swap(field_, other->field_);
  swap(trypositionprofit_, other->trypositionprofit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rtn_position_field::GetMetadata() const {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rtn_position_field

// .risk.trade_gateway_position_field field = 1;
bool rtn_position_field::has_field() const {
  return this != internal_default_instance() && field_ != NULL;
}
void rtn_position_field::clear_field() {
  if (GetArenaNoVirtual() == NULL && field_ != NULL) delete field_;
  field_ = NULL;
}
const ::risk::trade_gateway_position_field& rtn_position_field::field() const {
  const ::risk::trade_gateway_position_field* p = field_;
  // @@protoc_insertion_point(field_get:risk.rtn_position_field.field)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::trade_gateway_position_field*>(
      &::risk::_trade_gateway_position_field_default_instance_);
}
::risk::trade_gateway_position_field* rtn_position_field::mutable_field() {
  
  if (field_ == NULL) {
    field_ = new ::risk::trade_gateway_position_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.rtn_position_field.field)
  return field_;
}
::risk::trade_gateway_position_field* rtn_position_field::release_field() {
  // @@protoc_insertion_point(field_release:risk.rtn_position_field.field)
  
  ::risk::trade_gateway_position_field* temp = field_;
  field_ = NULL;
  return temp;
}
void rtn_position_field::set_allocated_field(::risk::trade_gateway_position_field* field) {
  delete field_;
  field_ = field;
  if (field) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rtn_position_field.field)
}

// double trypositionprofit = 2;
void rtn_position_field::clear_trypositionprofit() {
  trypositionprofit_ = 0;
}
double rtn_position_field::trypositionprofit() const {
  // @@protoc_insertion_point(field_get:risk.rtn_position_field.trypositionprofit)
  return trypositionprofit_;
}
void rtn_position_field::set_trypositionprofit(double value) {
  
  trypositionprofit_ = value;
  // @@protoc_insertion_point(field_set:risk.rtn_position_field.trypositionprofit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rsp_trade_field::kHeaderFieldNumber;
const int rsp_trade_field::kFieldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rsp_trade_field::rsp_trade_field()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.rsp_trade_field)
}
rsp_trade_field::rsp_trade_field(const rsp_trade_field& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::risk::rsp_head_info(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_field()) {
    field_ = new ::risk::trade_gateway_trade_field(*from.field_);
  } else {
    field_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:risk.rsp_trade_field)
}

void rsp_trade_field::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&field_) -
      reinterpret_cast<char*>(&header_)) + sizeof(field_));
  _cached_size_ = 0;
}

rsp_trade_field::~rsp_trade_field() {
  // @@protoc_insertion_point(destructor:risk.rsp_trade_field)
  SharedDtor();
}

void rsp_trade_field::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete field_;
}

void rsp_trade_field::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rsp_trade_field::descriptor() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const rsp_trade_field& rsp_trade_field::default_instance() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

rsp_trade_field* rsp_trade_field::New(::google::protobuf::Arena* arena) const {
  rsp_trade_field* n = new rsp_trade_field;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rsp_trade_field::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.rsp_trade_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && field_ != NULL) {
    delete field_;
  }
  field_ = NULL;
  _internal_metadata_.Clear();
}

bool rsp_trade_field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.rsp_trade_field)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .risk.rsp_head_info header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .risk.trade_gateway_trade_field field = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.rsp_trade_field)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.rsp_trade_field)
  return false;
#undef DO_
}

void rsp_trade_field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.rsp_trade_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .risk.rsp_head_info header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .risk.trade_gateway_trade_field field = 2;
  if (this->has_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->field_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.rsp_trade_field)
}

::google::protobuf::uint8* rsp_trade_field::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.rsp_trade_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .risk.rsp_head_info header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .risk.trade_gateway_trade_field field = 2;
  if (this->has_field()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->field_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.rsp_trade_field)
  return target;
}

size_t rsp_trade_field::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.rsp_trade_field)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .risk.rsp_head_info header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .risk.trade_gateway_trade_field field = 2;
  if (this->has_field()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->field_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rsp_trade_field::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.rsp_trade_field)
  GOOGLE_DCHECK_NE(&from, this);
  const rsp_trade_field* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const rsp_trade_field>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.rsp_trade_field)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.rsp_trade_field)
    MergeFrom(*source);
  }
}

void rsp_trade_field::MergeFrom(const rsp_trade_field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.rsp_trade_field)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::risk::rsp_head_info::MergeFrom(from.header());
  }
  if (from.has_field()) {
    mutable_field()->::risk::trade_gateway_trade_field::MergeFrom(from.field());
  }
}

void rsp_trade_field::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.rsp_trade_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rsp_trade_field::CopyFrom(const rsp_trade_field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.rsp_trade_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rsp_trade_field::IsInitialized() const {
  return true;
}

void rsp_trade_field::Swap(rsp_trade_field* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rsp_trade_field::InternalSwap(rsp_trade_field* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(field_, other->field_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rsp_trade_field::GetMetadata() const {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rsp_trade_field

// .risk.rsp_head_info header = 1;
bool rsp_trade_field::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void rsp_trade_field::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::risk::rsp_head_info& rsp_trade_field::header() const {
  const ::risk::rsp_head_info* p = header_;
  // @@protoc_insertion_point(field_get:risk.rsp_trade_field.header)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::rsp_head_info*>(
      &::risk::_rsp_head_info_default_instance_);
}
::risk::rsp_head_info* rsp_trade_field::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::risk::rsp_head_info;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_trade_field.header)
  return header_;
}
::risk::rsp_head_info* rsp_trade_field::release_header() {
  // @@protoc_insertion_point(field_release:risk.rsp_trade_field.header)
  
  ::risk::rsp_head_info* temp = header_;
  header_ = NULL;
  return temp;
}
void rsp_trade_field::set_allocated_header(::risk::rsp_head_info* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_trade_field.header)
}

// .risk.trade_gateway_trade_field field = 2;
bool rsp_trade_field::has_field() const {
  return this != internal_default_instance() && field_ != NULL;
}
void rsp_trade_field::clear_field() {
  if (GetArenaNoVirtual() == NULL && field_ != NULL) delete field_;
  field_ = NULL;
}
const ::risk::trade_gateway_trade_field& rsp_trade_field::field() const {
  const ::risk::trade_gateway_trade_field* p = field_;
  // @@protoc_insertion_point(field_get:risk.rsp_trade_field.field)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::trade_gateway_trade_field*>(
      &::risk::_trade_gateway_trade_field_default_instance_);
}
::risk::trade_gateway_trade_field* rsp_trade_field::mutable_field() {
  
  if (field_ == NULL) {
    field_ = new ::risk::trade_gateway_trade_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_trade_field.field)
  return field_;
}
::risk::trade_gateway_trade_field* rsp_trade_field::release_field() {
  // @@protoc_insertion_point(field_release:risk.rsp_trade_field.field)
  
  ::risk::trade_gateway_trade_field* temp = field_;
  field_ = NULL;
  return temp;
}
void rsp_trade_field::set_allocated_field(::risk::trade_gateway_trade_field* field) {
  delete field_;
  field_ = field;
  if (field) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_trade_field.field)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rsp_order_field::kHeaderFieldNumber;
const int rsp_order_field::kFieldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rsp_order_field::rsp_order_field()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.rsp_order_field)
}
rsp_order_field::rsp_order_field(const rsp_order_field& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::risk::rsp_head_info(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_field()) {
    field_ = new ::risk::trade_gateway_order_field(*from.field_);
  } else {
    field_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:risk.rsp_order_field)
}

void rsp_order_field::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&field_) -
      reinterpret_cast<char*>(&header_)) + sizeof(field_));
  _cached_size_ = 0;
}

rsp_order_field::~rsp_order_field() {
  // @@protoc_insertion_point(destructor:risk.rsp_order_field)
  SharedDtor();
}

void rsp_order_field::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete field_;
}

void rsp_order_field::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rsp_order_field::descriptor() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const rsp_order_field& rsp_order_field::default_instance() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

rsp_order_field* rsp_order_field::New(::google::protobuf::Arena* arena) const {
  rsp_order_field* n = new rsp_order_field;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rsp_order_field::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.rsp_order_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && field_ != NULL) {
    delete field_;
  }
  field_ = NULL;
  _internal_metadata_.Clear();
}

bool rsp_order_field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.rsp_order_field)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .risk.rsp_head_info header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .risk.trade_gateway_order_field field = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.rsp_order_field)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.rsp_order_field)
  return false;
#undef DO_
}

void rsp_order_field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.rsp_order_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .risk.rsp_head_info header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .risk.trade_gateway_order_field field = 2;
  if (this->has_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->field_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.rsp_order_field)
}

::google::protobuf::uint8* rsp_order_field::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.rsp_order_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .risk.rsp_head_info header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .risk.trade_gateway_order_field field = 2;
  if (this->has_field()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->field_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.rsp_order_field)
  return target;
}

size_t rsp_order_field::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.rsp_order_field)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .risk.rsp_head_info header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .risk.trade_gateway_order_field field = 2;
  if (this->has_field()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->field_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rsp_order_field::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.rsp_order_field)
  GOOGLE_DCHECK_NE(&from, this);
  const rsp_order_field* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const rsp_order_field>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.rsp_order_field)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.rsp_order_field)
    MergeFrom(*source);
  }
}

void rsp_order_field::MergeFrom(const rsp_order_field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.rsp_order_field)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::risk::rsp_head_info::MergeFrom(from.header());
  }
  if (from.has_field()) {
    mutable_field()->::risk::trade_gateway_order_field::MergeFrom(from.field());
  }
}

void rsp_order_field::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.rsp_order_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rsp_order_field::CopyFrom(const rsp_order_field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.rsp_order_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rsp_order_field::IsInitialized() const {
  return true;
}

void rsp_order_field::Swap(rsp_order_field* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rsp_order_field::InternalSwap(rsp_order_field* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(field_, other->field_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rsp_order_field::GetMetadata() const {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rsp_order_field

// .risk.rsp_head_info header = 1;
bool rsp_order_field::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void rsp_order_field::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::risk::rsp_head_info& rsp_order_field::header() const {
  const ::risk::rsp_head_info* p = header_;
  // @@protoc_insertion_point(field_get:risk.rsp_order_field.header)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::rsp_head_info*>(
      &::risk::_rsp_head_info_default_instance_);
}
::risk::rsp_head_info* rsp_order_field::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::risk::rsp_head_info;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_order_field.header)
  return header_;
}
::risk::rsp_head_info* rsp_order_field::release_header() {
  // @@protoc_insertion_point(field_release:risk.rsp_order_field.header)
  
  ::risk::rsp_head_info* temp = header_;
  header_ = NULL;
  return temp;
}
void rsp_order_field::set_allocated_header(::risk::rsp_head_info* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_order_field.header)
}

// .risk.trade_gateway_order_field field = 2;
bool rsp_order_field::has_field() const {
  return this != internal_default_instance() && field_ != NULL;
}
void rsp_order_field::clear_field() {
  if (GetArenaNoVirtual() == NULL && field_ != NULL) delete field_;
  field_ = NULL;
}
const ::risk::trade_gateway_order_field& rsp_order_field::field() const {
  const ::risk::trade_gateway_order_field* p = field_;
  // @@protoc_insertion_point(field_get:risk.rsp_order_field.field)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::trade_gateway_order_field*>(
      &::risk::_trade_gateway_order_field_default_instance_);
}
::risk::trade_gateway_order_field* rsp_order_field::mutable_field() {
  
  if (field_ == NULL) {
    field_ = new ::risk::trade_gateway_order_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_order_field.field)
  return field_;
}
::risk::trade_gateway_order_field* rsp_order_field::release_field() {
  // @@protoc_insertion_point(field_release:risk.rsp_order_field.field)
  
  ::risk::trade_gateway_order_field* temp = field_;
  field_ = NULL;
  return temp;
}
void rsp_order_field::set_allocated_field(::risk::trade_gateway_order_field* field) {
  delete field_;
  field_ = field;
  if (field) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_order_field.field)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rtn_trade_field::kFieldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rtn_trade_field::rtn_trade_field()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.rtn_trade_field)
}
rtn_trade_field::rtn_trade_field(const rtn_trade_field& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_field()) {
    field_ = new ::risk::trade_gateway_trade_field(*from.field_);
  } else {
    field_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:risk.rtn_trade_field)
}

void rtn_trade_field::SharedCtor() {
  field_ = NULL;
  _cached_size_ = 0;
}

rtn_trade_field::~rtn_trade_field() {
  // @@protoc_insertion_point(destructor:risk.rtn_trade_field)
  SharedDtor();
}

void rtn_trade_field::SharedDtor() {
  if (this != internal_default_instance()) delete field_;
}

void rtn_trade_field::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rtn_trade_field::descriptor() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const rtn_trade_field& rtn_trade_field::default_instance() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

rtn_trade_field* rtn_trade_field::New(::google::protobuf::Arena* arena) const {
  rtn_trade_field* n = new rtn_trade_field;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rtn_trade_field::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.rtn_trade_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && field_ != NULL) {
    delete field_;
  }
  field_ = NULL;
  _internal_metadata_.Clear();
}

bool rtn_trade_field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.rtn_trade_field)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .risk.trade_gateway_trade_field field = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.rtn_trade_field)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.rtn_trade_field)
  return false;
#undef DO_
}

void rtn_trade_field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.rtn_trade_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .risk.trade_gateway_trade_field field = 1;
  if (this->has_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->field_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.rtn_trade_field)
}

::google::protobuf::uint8* rtn_trade_field::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.rtn_trade_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .risk.trade_gateway_trade_field field = 1;
  if (this->has_field()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->field_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.rtn_trade_field)
  return target;
}

size_t rtn_trade_field::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.rtn_trade_field)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .risk.trade_gateway_trade_field field = 1;
  if (this->has_field()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->field_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rtn_trade_field::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.rtn_trade_field)
  GOOGLE_DCHECK_NE(&from, this);
  const rtn_trade_field* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const rtn_trade_field>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.rtn_trade_field)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.rtn_trade_field)
    MergeFrom(*source);
  }
}

void rtn_trade_field::MergeFrom(const rtn_trade_field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.rtn_trade_field)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_field()) {
    mutable_field()->::risk::trade_gateway_trade_field::MergeFrom(from.field());
  }
}

void rtn_trade_field::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.rtn_trade_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rtn_trade_field::CopyFrom(const rtn_trade_field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.rtn_trade_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rtn_trade_field::IsInitialized() const {
  return true;
}

void rtn_trade_field::Swap(rtn_trade_field* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rtn_trade_field::InternalSwap(rtn_trade_field* other) {
  using std::swap;
  swap(field_, other->field_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rtn_trade_field::GetMetadata() const {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rtn_trade_field

// .risk.trade_gateway_trade_field field = 1;
bool rtn_trade_field::has_field() const {
  return this != internal_default_instance() && field_ != NULL;
}
void rtn_trade_field::clear_field() {
  if (GetArenaNoVirtual() == NULL && field_ != NULL) delete field_;
  field_ = NULL;
}
const ::risk::trade_gateway_trade_field& rtn_trade_field::field() const {
  const ::risk::trade_gateway_trade_field* p = field_;
  // @@protoc_insertion_point(field_get:risk.rtn_trade_field.field)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::trade_gateway_trade_field*>(
      &::risk::_trade_gateway_trade_field_default_instance_);
}
::risk::trade_gateway_trade_field* rtn_trade_field::mutable_field() {
  
  if (field_ == NULL) {
    field_ = new ::risk::trade_gateway_trade_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.rtn_trade_field.field)
  return field_;
}
::risk::trade_gateway_trade_field* rtn_trade_field::release_field() {
  // @@protoc_insertion_point(field_release:risk.rtn_trade_field.field)
  
  ::risk::trade_gateway_trade_field* temp = field_;
  field_ = NULL;
  return temp;
}
void rtn_trade_field::set_allocated_field(::risk::trade_gateway_trade_field* field) {
  delete field_;
  field_ = field;
  if (field) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rtn_trade_field.field)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rtn_order_field::kFieldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rtn_order_field::rtn_order_field()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.rtn_order_field)
}
rtn_order_field::rtn_order_field(const rtn_order_field& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_field()) {
    field_ = new ::risk::trade_gateway_order_field(*from.field_);
  } else {
    field_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:risk.rtn_order_field)
}

void rtn_order_field::SharedCtor() {
  field_ = NULL;
  _cached_size_ = 0;
}

rtn_order_field::~rtn_order_field() {
  // @@protoc_insertion_point(destructor:risk.rtn_order_field)
  SharedDtor();
}

void rtn_order_field::SharedDtor() {
  if (this != internal_default_instance()) delete field_;
}

void rtn_order_field::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rtn_order_field::descriptor() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const rtn_order_field& rtn_order_field::default_instance() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

rtn_order_field* rtn_order_field::New(::google::protobuf::Arena* arena) const {
  rtn_order_field* n = new rtn_order_field;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rtn_order_field::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.rtn_order_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && field_ != NULL) {
    delete field_;
  }
  field_ = NULL;
  _internal_metadata_.Clear();
}

bool rtn_order_field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.rtn_order_field)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .risk.trade_gateway_order_field field = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.rtn_order_field)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.rtn_order_field)
  return false;
#undef DO_
}

void rtn_order_field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.rtn_order_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .risk.trade_gateway_order_field field = 1;
  if (this->has_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->field_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.rtn_order_field)
}

::google::protobuf::uint8* rtn_order_field::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.rtn_order_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .risk.trade_gateway_order_field field = 1;
  if (this->has_field()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->field_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.rtn_order_field)
  return target;
}

size_t rtn_order_field::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.rtn_order_field)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .risk.trade_gateway_order_field field = 1;
  if (this->has_field()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->field_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rtn_order_field::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.rtn_order_field)
  GOOGLE_DCHECK_NE(&from, this);
  const rtn_order_field* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const rtn_order_field>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.rtn_order_field)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.rtn_order_field)
    MergeFrom(*source);
  }
}

void rtn_order_field::MergeFrom(const rtn_order_field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.rtn_order_field)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_field()) {
    mutable_field()->::risk::trade_gateway_order_field::MergeFrom(from.field());
  }
}

void rtn_order_field::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.rtn_order_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rtn_order_field::CopyFrom(const rtn_order_field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.rtn_order_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rtn_order_field::IsInitialized() const {
  return true;
}

void rtn_order_field::Swap(rtn_order_field* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rtn_order_field::InternalSwap(rtn_order_field* other) {
  using std::swap;
  swap(field_, other->field_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rtn_order_field::GetMetadata() const {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rtn_order_field

// .risk.trade_gateway_order_field field = 1;
bool rtn_order_field::has_field() const {
  return this != internal_default_instance() && field_ != NULL;
}
void rtn_order_field::clear_field() {
  if (GetArenaNoVirtual() == NULL && field_ != NULL) delete field_;
  field_ = NULL;
}
const ::risk::trade_gateway_order_field& rtn_order_field::field() const {
  const ::risk::trade_gateway_order_field* p = field_;
  // @@protoc_insertion_point(field_get:risk.rtn_order_field.field)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::trade_gateway_order_field*>(
      &::risk::_trade_gateway_order_field_default_instance_);
}
::risk::trade_gateway_order_field* rtn_order_field::mutable_field() {
  
  if (field_ == NULL) {
    field_ = new ::risk::trade_gateway_order_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.rtn_order_field.field)
  return field_;
}
::risk::trade_gateway_order_field* rtn_order_field::release_field() {
  // @@protoc_insertion_point(field_release:risk.rtn_order_field.field)
  
  ::risk::trade_gateway_order_field* temp = field_;
  field_ = NULL;
  return temp;
}
void rtn_order_field::set_allocated_field(::risk::trade_gateway_order_field* field) {
  delete field_;
  field_ = field;
  if (field) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rtn_order_field.field)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rsp_sync_account_field::kHeaderFieldNumber;
const int rsp_sync_account_field::kFieldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rsp_sync_account_field::rsp_sync_account_field()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.rsp_sync_account_field)
}
rsp_sync_account_field::rsp_sync_account_field(const rsp_sync_account_field& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::risk::rsp_head_info(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_field()) {
    field_ = new ::risk::trade_gateway_sync_account_field(*from.field_);
  } else {
    field_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:risk.rsp_sync_account_field)
}

void rsp_sync_account_field::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&field_) -
      reinterpret_cast<char*>(&header_)) + sizeof(field_));
  _cached_size_ = 0;
}

rsp_sync_account_field::~rsp_sync_account_field() {
  // @@protoc_insertion_point(destructor:risk.rsp_sync_account_field)
  SharedDtor();
}

void rsp_sync_account_field::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete field_;
}

void rsp_sync_account_field::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rsp_sync_account_field::descriptor() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const rsp_sync_account_field& rsp_sync_account_field::default_instance() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

rsp_sync_account_field* rsp_sync_account_field::New(::google::protobuf::Arena* arena) const {
  rsp_sync_account_field* n = new rsp_sync_account_field;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rsp_sync_account_field::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.rsp_sync_account_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && field_ != NULL) {
    delete field_;
  }
  field_ = NULL;
  _internal_metadata_.Clear();
}

bool rsp_sync_account_field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.rsp_sync_account_field)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .risk.rsp_head_info header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .risk.trade_gateway_sync_account_field field = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.rsp_sync_account_field)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.rsp_sync_account_field)
  return false;
#undef DO_
}

void rsp_sync_account_field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.rsp_sync_account_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .risk.rsp_head_info header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .risk.trade_gateway_sync_account_field field = 2;
  if (this->has_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->field_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.rsp_sync_account_field)
}

::google::protobuf::uint8* rsp_sync_account_field::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.rsp_sync_account_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .risk.rsp_head_info header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .risk.trade_gateway_sync_account_field field = 2;
  if (this->has_field()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->field_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.rsp_sync_account_field)
  return target;
}

size_t rsp_sync_account_field::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.rsp_sync_account_field)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .risk.rsp_head_info header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .risk.trade_gateway_sync_account_field field = 2;
  if (this->has_field()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->field_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rsp_sync_account_field::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.rsp_sync_account_field)
  GOOGLE_DCHECK_NE(&from, this);
  const rsp_sync_account_field* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const rsp_sync_account_field>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.rsp_sync_account_field)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.rsp_sync_account_field)
    MergeFrom(*source);
  }
}

void rsp_sync_account_field::MergeFrom(const rsp_sync_account_field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.rsp_sync_account_field)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::risk::rsp_head_info::MergeFrom(from.header());
  }
  if (from.has_field()) {
    mutable_field()->::risk::trade_gateway_sync_account_field::MergeFrom(from.field());
  }
}

void rsp_sync_account_field::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.rsp_sync_account_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rsp_sync_account_field::CopyFrom(const rsp_sync_account_field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.rsp_sync_account_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rsp_sync_account_field::IsInitialized() const {
  return true;
}

void rsp_sync_account_field::Swap(rsp_sync_account_field* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rsp_sync_account_field::InternalSwap(rsp_sync_account_field* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(field_, other->field_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rsp_sync_account_field::GetMetadata() const {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rsp_sync_account_field

// .risk.rsp_head_info header = 1;
bool rsp_sync_account_field::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void rsp_sync_account_field::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::risk::rsp_head_info& rsp_sync_account_field::header() const {
  const ::risk::rsp_head_info* p = header_;
  // @@protoc_insertion_point(field_get:risk.rsp_sync_account_field.header)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::rsp_head_info*>(
      &::risk::_rsp_head_info_default_instance_);
}
::risk::rsp_head_info* rsp_sync_account_field::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::risk::rsp_head_info;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_sync_account_field.header)
  return header_;
}
::risk::rsp_head_info* rsp_sync_account_field::release_header() {
  // @@protoc_insertion_point(field_release:risk.rsp_sync_account_field.header)
  
  ::risk::rsp_head_info* temp = header_;
  header_ = NULL;
  return temp;
}
void rsp_sync_account_field::set_allocated_header(::risk::rsp_head_info* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_sync_account_field.header)
}

// .risk.trade_gateway_sync_account_field field = 2;
bool rsp_sync_account_field::has_field() const {
  return this != internal_default_instance() && field_ != NULL;
}
void rsp_sync_account_field::clear_field() {
  if (GetArenaNoVirtual() == NULL && field_ != NULL) delete field_;
  field_ = NULL;
}
const ::risk::trade_gateway_sync_account_field& rsp_sync_account_field::field() const {
  const ::risk::trade_gateway_sync_account_field* p = field_;
  // @@protoc_insertion_point(field_get:risk.rsp_sync_account_field.field)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::trade_gateway_sync_account_field*>(
      &::risk::_trade_gateway_sync_account_field_default_instance_);
}
::risk::trade_gateway_sync_account_field* rsp_sync_account_field::mutable_field() {
  
  if (field_ == NULL) {
    field_ = new ::risk::trade_gateway_sync_account_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_sync_account_field.field)
  return field_;
}
::risk::trade_gateway_sync_account_field* rsp_sync_account_field::release_field() {
  // @@protoc_insertion_point(field_release:risk.rsp_sync_account_field.field)
  
  ::risk::trade_gateway_sync_account_field* temp = field_;
  field_ = NULL;
  return temp;
}
void rsp_sync_account_field::set_allocated_field(::risk::trade_gateway_sync_account_field* field) {
  delete field_;
  field_ = field;
  if (field) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_sync_account_field.field)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rtn_sync_account_field::kFieldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rtn_sync_account_field::rtn_sync_account_field()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.rtn_sync_account_field)
}
rtn_sync_account_field::rtn_sync_account_field(const rtn_sync_account_field& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_field()) {
    field_ = new ::risk::trade_gateway_sync_account_field(*from.field_);
  } else {
    field_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:risk.rtn_sync_account_field)
}

void rtn_sync_account_field::SharedCtor() {
  field_ = NULL;
  _cached_size_ = 0;
}

rtn_sync_account_field::~rtn_sync_account_field() {
  // @@protoc_insertion_point(destructor:risk.rtn_sync_account_field)
  SharedDtor();
}

void rtn_sync_account_field::SharedDtor() {
  if (this != internal_default_instance()) delete field_;
}

void rtn_sync_account_field::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rtn_sync_account_field::descriptor() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const rtn_sync_account_field& rtn_sync_account_field::default_instance() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

rtn_sync_account_field* rtn_sync_account_field::New(::google::protobuf::Arena* arena) const {
  rtn_sync_account_field* n = new rtn_sync_account_field;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rtn_sync_account_field::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.rtn_sync_account_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && field_ != NULL) {
    delete field_;
  }
  field_ = NULL;
  _internal_metadata_.Clear();
}

bool rtn_sync_account_field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.rtn_sync_account_field)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .risk.trade_gateway_sync_account_field field = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.rtn_sync_account_field)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.rtn_sync_account_field)
  return false;
#undef DO_
}

void rtn_sync_account_field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.rtn_sync_account_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .risk.trade_gateway_sync_account_field field = 1;
  if (this->has_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->field_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.rtn_sync_account_field)
}

::google::protobuf::uint8* rtn_sync_account_field::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.rtn_sync_account_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .risk.trade_gateway_sync_account_field field = 1;
  if (this->has_field()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->field_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.rtn_sync_account_field)
  return target;
}

size_t rtn_sync_account_field::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.rtn_sync_account_field)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .risk.trade_gateway_sync_account_field field = 1;
  if (this->has_field()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->field_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rtn_sync_account_field::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.rtn_sync_account_field)
  GOOGLE_DCHECK_NE(&from, this);
  const rtn_sync_account_field* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const rtn_sync_account_field>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.rtn_sync_account_field)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.rtn_sync_account_field)
    MergeFrom(*source);
  }
}

void rtn_sync_account_field::MergeFrom(const rtn_sync_account_field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.rtn_sync_account_field)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_field()) {
    mutable_field()->::risk::trade_gateway_sync_account_field::MergeFrom(from.field());
  }
}

void rtn_sync_account_field::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.rtn_sync_account_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rtn_sync_account_field::CopyFrom(const rtn_sync_account_field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.rtn_sync_account_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rtn_sync_account_field::IsInitialized() const {
  return true;
}

void rtn_sync_account_field::Swap(rtn_sync_account_field* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rtn_sync_account_field::InternalSwap(rtn_sync_account_field* other) {
  using std::swap;
  swap(field_, other->field_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rtn_sync_account_field::GetMetadata() const {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rtn_sync_account_field

// .risk.trade_gateway_sync_account_field field = 1;
bool rtn_sync_account_field::has_field() const {
  return this != internal_default_instance() && field_ != NULL;
}
void rtn_sync_account_field::clear_field() {
  if (GetArenaNoVirtual() == NULL && field_ != NULL) delete field_;
  field_ = NULL;
}
const ::risk::trade_gateway_sync_account_field& rtn_sync_account_field::field() const {
  const ::risk::trade_gateway_sync_account_field* p = field_;
  // @@protoc_insertion_point(field_get:risk.rtn_sync_account_field.field)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::trade_gateway_sync_account_field*>(
      &::risk::_trade_gateway_sync_account_field_default_instance_);
}
::risk::trade_gateway_sync_account_field* rtn_sync_account_field::mutable_field() {
  
  if (field_ == NULL) {
    field_ = new ::risk::trade_gateway_sync_account_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.rtn_sync_account_field.field)
  return field_;
}
::risk::trade_gateway_sync_account_field* rtn_sync_account_field::release_field() {
  // @@protoc_insertion_point(field_release:risk.rtn_sync_account_field.field)
  
  ::risk::trade_gateway_sync_account_field* temp = field_;
  field_ = NULL;
  return temp;
}
void rtn_sync_account_field::set_allocated_field(::risk::trade_gateway_sync_account_field* field) {
  delete field_;
  field_ = field;
  if (field) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rtn_sync_account_field.field)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int shfe_margin_field::kPreFavorableFieldNumber;
const int shfe_margin_field::kBigSideFavorableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

shfe_margin_field::shfe_margin_field()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.shfe_margin_field)
}
shfe_margin_field::shfe_margin_field(const shfe_margin_field& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pre_favorable_, &from.pre_favorable_,
    static_cast<size_t>(reinterpret_cast<char*>(&big_side_favorable_) -
    reinterpret_cast<char*>(&pre_favorable_)) + sizeof(big_side_favorable_));
  // @@protoc_insertion_point(copy_constructor:risk.shfe_margin_field)
}

void shfe_margin_field::SharedCtor() {
  ::memset(&pre_favorable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&big_side_favorable_) -
      reinterpret_cast<char*>(&pre_favorable_)) + sizeof(big_side_favorable_));
  _cached_size_ = 0;
}

shfe_margin_field::~shfe_margin_field() {
  // @@protoc_insertion_point(destructor:risk.shfe_margin_field)
  SharedDtor();
}

void shfe_margin_field::SharedDtor() {
}

void shfe_margin_field::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* shfe_margin_field::descriptor() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const shfe_margin_field& shfe_margin_field::default_instance() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

shfe_margin_field* shfe_margin_field::New(::google::protobuf::Arena* arena) const {
  shfe_margin_field* n = new shfe_margin_field;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void shfe_margin_field::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.shfe_margin_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pre_favorable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&big_side_favorable_) -
      reinterpret_cast<char*>(&pre_favorable_)) + sizeof(big_side_favorable_));
  _internal_metadata_.Clear();
}

bool shfe_margin_field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.shfe_margin_field)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double pre_favorable = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pre_favorable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double big_side_favorable = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &big_side_favorable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.shfe_margin_field)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.shfe_margin_field)
  return false;
#undef DO_
}

void shfe_margin_field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.shfe_margin_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double pre_favorable = 1;
  if (this->pre_favorable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->pre_favorable(), output);
  }

  // double big_side_favorable = 2;
  if (this->big_side_favorable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->big_side_favorable(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.shfe_margin_field)
}

::google::protobuf::uint8* shfe_margin_field::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.shfe_margin_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double pre_favorable = 1;
  if (this->pre_favorable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->pre_favorable(), target);
  }

  // double big_side_favorable = 2;
  if (this->big_side_favorable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->big_side_favorable(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.shfe_margin_field)
  return target;
}

size_t shfe_margin_field::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.shfe_margin_field)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double pre_favorable = 1;
  if (this->pre_favorable() != 0) {
    total_size += 1 + 8;
  }

  // double big_side_favorable = 2;
  if (this->big_side_favorable() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void shfe_margin_field::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.shfe_margin_field)
  GOOGLE_DCHECK_NE(&from, this);
  const shfe_margin_field* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const shfe_margin_field>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.shfe_margin_field)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.shfe_margin_field)
    MergeFrom(*source);
  }
}

void shfe_margin_field::MergeFrom(const shfe_margin_field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.shfe_margin_field)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pre_favorable() != 0) {
    set_pre_favorable(from.pre_favorable());
  }
  if (from.big_side_favorable() != 0) {
    set_big_side_favorable(from.big_side_favorable());
  }
}

void shfe_margin_field::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.shfe_margin_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void shfe_margin_field::CopyFrom(const shfe_margin_field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.shfe_margin_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool shfe_margin_field::IsInitialized() const {
  return true;
}

void shfe_margin_field::Swap(shfe_margin_field* other) {
  if (other == this) return;
  InternalSwap(other);
}
void shfe_margin_field::InternalSwap(shfe_margin_field* other) {
  using std::swap;
  swap(pre_favorable_, other->pre_favorable_);
  swap(big_side_favorable_, other->big_side_favorable_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata shfe_margin_field::GetMetadata() const {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// shfe_margin_field

// double pre_favorable = 1;
void shfe_margin_field::clear_pre_favorable() {
  pre_favorable_ = 0;
}
double shfe_margin_field::pre_favorable() const {
  // @@protoc_insertion_point(field_get:risk.shfe_margin_field.pre_favorable)
  return pre_favorable_;
}
void shfe_margin_field::set_pre_favorable(double value) {
  
  pre_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.shfe_margin_field.pre_favorable)
}

// double big_side_favorable = 2;
void shfe_margin_field::clear_big_side_favorable() {
  big_side_favorable_ = 0;
}
double shfe_margin_field::big_side_favorable() const {
  // @@protoc_insertion_point(field_get:risk.shfe_margin_field.big_side_favorable)
  return big_side_favorable_;
}
void shfe_margin_field::set_big_side_favorable(double value) {
  
  big_side_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.shfe_margin_field.big_side_favorable)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int cffex_margin_field::kPreFavorableFieldNumber;
const int cffex_margin_field::kSpeculationFavorableFieldNumber;
const int cffex_margin_field::kHedgingFavorableFieldNumber;
const int cffex_margin_field::kArbitrageFavorableFieldNumber;
const int cffex_margin_field::kMarketFavorableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

cffex_margin_field::cffex_margin_field()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.cffex_margin_field)
}
cffex_margin_field::cffex_margin_field(const cffex_margin_field& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pre_favorable_, &from.pre_favorable_,
    static_cast<size_t>(reinterpret_cast<char*>(&market_favorable_) -
    reinterpret_cast<char*>(&pre_favorable_)) + sizeof(market_favorable_));
  // @@protoc_insertion_point(copy_constructor:risk.cffex_margin_field)
}

void cffex_margin_field::SharedCtor() {
  ::memset(&pre_favorable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&market_favorable_) -
      reinterpret_cast<char*>(&pre_favorable_)) + sizeof(market_favorable_));
  _cached_size_ = 0;
}

cffex_margin_field::~cffex_margin_field() {
  // @@protoc_insertion_point(destructor:risk.cffex_margin_field)
  SharedDtor();
}

void cffex_margin_field::SharedDtor() {
}

void cffex_margin_field::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cffex_margin_field::descriptor() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const cffex_margin_field& cffex_margin_field::default_instance() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

cffex_margin_field* cffex_margin_field::New(::google::protobuf::Arena* arena) const {
  cffex_margin_field* n = new cffex_margin_field;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void cffex_margin_field::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.cffex_margin_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pre_favorable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&market_favorable_) -
      reinterpret_cast<char*>(&pre_favorable_)) + sizeof(market_favorable_));
  _internal_metadata_.Clear();
}

bool cffex_margin_field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.cffex_margin_field)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double pre_favorable = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pre_favorable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double speculation_favorable = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speculation_favorable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double hedging_favorable = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &hedging_favorable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double arbitrage_favorable = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &arbitrage_favorable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double market_favorable = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &market_favorable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.cffex_margin_field)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.cffex_margin_field)
  return false;
#undef DO_
}

void cffex_margin_field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.cffex_margin_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double pre_favorable = 1;
  if (this->pre_favorable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->pre_favorable(), output);
  }

  // double speculation_favorable = 2;
  if (this->speculation_favorable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->speculation_favorable(), output);
  }

  // double hedging_favorable = 3;
  if (this->hedging_favorable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->hedging_favorable(), output);
  }

  // double arbitrage_favorable = 4;
  if (this->arbitrage_favorable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->arbitrage_favorable(), output);
  }

  // double market_favorable = 5;
  if (this->market_favorable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->market_favorable(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.cffex_margin_field)
}

::google::protobuf::uint8* cffex_margin_field::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.cffex_margin_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double pre_favorable = 1;
  if (this->pre_favorable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->pre_favorable(), target);
  }

  // double speculation_favorable = 2;
  if (this->speculation_favorable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->speculation_favorable(), target);
  }

  // double hedging_favorable = 3;
  if (this->hedging_favorable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->hedging_favorable(), target);
  }

  // double arbitrage_favorable = 4;
  if (this->arbitrage_favorable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->arbitrage_favorable(), target);
  }

  // double market_favorable = 5;
  if (this->market_favorable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->market_favorable(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.cffex_margin_field)
  return target;
}

size_t cffex_margin_field::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.cffex_margin_field)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double pre_favorable = 1;
  if (this->pre_favorable() != 0) {
    total_size += 1 + 8;
  }

  // double speculation_favorable = 2;
  if (this->speculation_favorable() != 0) {
    total_size += 1 + 8;
  }

  // double hedging_favorable = 3;
  if (this->hedging_favorable() != 0) {
    total_size += 1 + 8;
  }

  // double arbitrage_favorable = 4;
  if (this->arbitrage_favorable() != 0) {
    total_size += 1 + 8;
  }

  // double market_favorable = 5;
  if (this->market_favorable() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cffex_margin_field::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.cffex_margin_field)
  GOOGLE_DCHECK_NE(&from, this);
  const cffex_margin_field* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const cffex_margin_field>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.cffex_margin_field)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.cffex_margin_field)
    MergeFrom(*source);
  }
}

void cffex_margin_field::MergeFrom(const cffex_margin_field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.cffex_margin_field)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pre_favorable() != 0) {
    set_pre_favorable(from.pre_favorable());
  }
  if (from.speculation_favorable() != 0) {
    set_speculation_favorable(from.speculation_favorable());
  }
  if (from.hedging_favorable() != 0) {
    set_hedging_favorable(from.hedging_favorable());
  }
  if (from.arbitrage_favorable() != 0) {
    set_arbitrage_favorable(from.arbitrage_favorable());
  }
  if (from.market_favorable() != 0) {
    set_market_favorable(from.market_favorable());
  }
}

void cffex_margin_field::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.cffex_margin_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cffex_margin_field::CopyFrom(const cffex_margin_field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.cffex_margin_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cffex_margin_field::IsInitialized() const {
  return true;
}

void cffex_margin_field::Swap(cffex_margin_field* other) {
  if (other == this) return;
  InternalSwap(other);
}
void cffex_margin_field::InternalSwap(cffex_margin_field* other) {
  using std::swap;
  swap(pre_favorable_, other->pre_favorable_);
  swap(speculation_favorable_, other->speculation_favorable_);
  swap(hedging_favorable_, other->hedging_favorable_);
  swap(arbitrage_favorable_, other->arbitrage_favorable_);
  swap(market_favorable_, other->market_favorable_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata cffex_margin_field::GetMetadata() const {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// cffex_margin_field

// double pre_favorable = 1;
void cffex_margin_field::clear_pre_favorable() {
  pre_favorable_ = 0;
}
double cffex_margin_field::pre_favorable() const {
  // @@protoc_insertion_point(field_get:risk.cffex_margin_field.pre_favorable)
  return pre_favorable_;
}
void cffex_margin_field::set_pre_favorable(double value) {
  
  pre_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.cffex_margin_field.pre_favorable)
}

// double speculation_favorable = 2;
void cffex_margin_field::clear_speculation_favorable() {
  speculation_favorable_ = 0;
}
double cffex_margin_field::speculation_favorable() const {
  // @@protoc_insertion_point(field_get:risk.cffex_margin_field.speculation_favorable)
  return speculation_favorable_;
}
void cffex_margin_field::set_speculation_favorable(double value) {
  
  speculation_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.cffex_margin_field.speculation_favorable)
}

// double hedging_favorable = 3;
void cffex_margin_field::clear_hedging_favorable() {
  hedging_favorable_ = 0;
}
double cffex_margin_field::hedging_favorable() const {
  // @@protoc_insertion_point(field_get:risk.cffex_margin_field.hedging_favorable)
  return hedging_favorable_;
}
void cffex_margin_field::set_hedging_favorable(double value) {
  
  hedging_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.cffex_margin_field.hedging_favorable)
}

// double arbitrage_favorable = 4;
void cffex_margin_field::clear_arbitrage_favorable() {
  arbitrage_favorable_ = 0;
}
double cffex_margin_field::arbitrage_favorable() const {
  // @@protoc_insertion_point(field_get:risk.cffex_margin_field.arbitrage_favorable)
  return arbitrage_favorable_;
}
void cffex_margin_field::set_arbitrage_favorable(double value) {
  
  arbitrage_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.cffex_margin_field.arbitrage_favorable)
}

// double market_favorable = 5;
void cffex_margin_field::clear_market_favorable() {
  market_favorable_ = 0;
}
double cffex_margin_field::market_favorable() const {
  // @@protoc_insertion_point(field_get:risk.cffex_margin_field.market_favorable)
  return market_favorable_;
}
void cffex_margin_field::set_market_favorable(double value) {
  
  market_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.cffex_margin_field.market_favorable)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int dce_margin_field::kPreFavorableFieldNumber;
const int dce_margin_field::kSpFavorableFieldNumber;
const int dce_margin_field::kSpcFavorableFieldNumber;
const int dce_margin_field::kLockedFavorableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

dce_margin_field::dce_margin_field()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.dce_margin_field)
}
dce_margin_field::dce_margin_field(const dce_margin_field& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pre_favorable_, &from.pre_favorable_,
    static_cast<size_t>(reinterpret_cast<char*>(&locked_favorable_) -
    reinterpret_cast<char*>(&pre_favorable_)) + sizeof(locked_favorable_));
  // @@protoc_insertion_point(copy_constructor:risk.dce_margin_field)
}

void dce_margin_field::SharedCtor() {
  ::memset(&pre_favorable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&locked_favorable_) -
      reinterpret_cast<char*>(&pre_favorable_)) + sizeof(locked_favorable_));
  _cached_size_ = 0;
}

dce_margin_field::~dce_margin_field() {
  // @@protoc_insertion_point(destructor:risk.dce_margin_field)
  SharedDtor();
}

void dce_margin_field::SharedDtor() {
}

void dce_margin_field::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dce_margin_field::descriptor() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const dce_margin_field& dce_margin_field::default_instance() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

dce_margin_field* dce_margin_field::New(::google::protobuf::Arena* arena) const {
  dce_margin_field* n = new dce_margin_field;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void dce_margin_field::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.dce_margin_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pre_favorable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&locked_favorable_) -
      reinterpret_cast<char*>(&pre_favorable_)) + sizeof(locked_favorable_));
  _internal_metadata_.Clear();
}

bool dce_margin_field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.dce_margin_field)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double pre_favorable = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pre_favorable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double sp_favorable = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sp_favorable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double spc_favorable = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &spc_favorable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double locked_favorable = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &locked_favorable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.dce_margin_field)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.dce_margin_field)
  return false;
#undef DO_
}

void dce_margin_field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.dce_margin_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double pre_favorable = 1;
  if (this->pre_favorable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->pre_favorable(), output);
  }

  // double sp_favorable = 2;
  if (this->sp_favorable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->sp_favorable(), output);
  }

  // double spc_favorable = 3;
  if (this->spc_favorable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->spc_favorable(), output);
  }

  // double locked_favorable = 4;
  if (this->locked_favorable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->locked_favorable(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.dce_margin_field)
}

::google::protobuf::uint8* dce_margin_field::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.dce_margin_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double pre_favorable = 1;
  if (this->pre_favorable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->pre_favorable(), target);
  }

  // double sp_favorable = 2;
  if (this->sp_favorable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->sp_favorable(), target);
  }

  // double spc_favorable = 3;
  if (this->spc_favorable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->spc_favorable(), target);
  }

  // double locked_favorable = 4;
  if (this->locked_favorable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->locked_favorable(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.dce_margin_field)
  return target;
}

size_t dce_margin_field::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.dce_margin_field)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double pre_favorable = 1;
  if (this->pre_favorable() != 0) {
    total_size += 1 + 8;
  }

  // double sp_favorable = 2;
  if (this->sp_favorable() != 0) {
    total_size += 1 + 8;
  }

  // double spc_favorable = 3;
  if (this->spc_favorable() != 0) {
    total_size += 1 + 8;
  }

  // double locked_favorable = 4;
  if (this->locked_favorable() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dce_margin_field::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.dce_margin_field)
  GOOGLE_DCHECK_NE(&from, this);
  const dce_margin_field* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const dce_margin_field>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.dce_margin_field)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.dce_margin_field)
    MergeFrom(*source);
  }
}

void dce_margin_field::MergeFrom(const dce_margin_field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.dce_margin_field)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pre_favorable() != 0) {
    set_pre_favorable(from.pre_favorable());
  }
  if (from.sp_favorable() != 0) {
    set_sp_favorable(from.sp_favorable());
  }
  if (from.spc_favorable() != 0) {
    set_spc_favorable(from.spc_favorable());
  }
  if (from.locked_favorable() != 0) {
    set_locked_favorable(from.locked_favorable());
  }
}

void dce_margin_field::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.dce_margin_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dce_margin_field::CopyFrom(const dce_margin_field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.dce_margin_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dce_margin_field::IsInitialized() const {
  return true;
}

void dce_margin_field::Swap(dce_margin_field* other) {
  if (other == this) return;
  InternalSwap(other);
}
void dce_margin_field::InternalSwap(dce_margin_field* other) {
  using std::swap;
  swap(pre_favorable_, other->pre_favorable_);
  swap(sp_favorable_, other->sp_favorable_);
  swap(spc_favorable_, other->spc_favorable_);
  swap(locked_favorable_, other->locked_favorable_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata dce_margin_field::GetMetadata() const {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// dce_margin_field

// double pre_favorable = 1;
void dce_margin_field::clear_pre_favorable() {
  pre_favorable_ = 0;
}
double dce_margin_field::pre_favorable() const {
  // @@protoc_insertion_point(field_get:risk.dce_margin_field.pre_favorable)
  return pre_favorable_;
}
void dce_margin_field::set_pre_favorable(double value) {
  
  pre_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.dce_margin_field.pre_favorable)
}

// double sp_favorable = 2;
void dce_margin_field::clear_sp_favorable() {
  sp_favorable_ = 0;
}
double dce_margin_field::sp_favorable() const {
  // @@protoc_insertion_point(field_get:risk.dce_margin_field.sp_favorable)
  return sp_favorable_;
}
void dce_margin_field::set_sp_favorable(double value) {
  
  sp_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.dce_margin_field.sp_favorable)
}

// double spc_favorable = 3;
void dce_margin_field::clear_spc_favorable() {
  spc_favorable_ = 0;
}
double dce_margin_field::spc_favorable() const {
  // @@protoc_insertion_point(field_get:risk.dce_margin_field.spc_favorable)
  return spc_favorable_;
}
void dce_margin_field::set_spc_favorable(double value) {
  
  spc_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.dce_margin_field.spc_favorable)
}

// double locked_favorable = 4;
void dce_margin_field::clear_locked_favorable() {
  locked_favorable_ = 0;
}
double dce_margin_field::locked_favorable() const {
  // @@protoc_insertion_point(field_get:risk.dce_margin_field.locked_favorable)
  return locked_favorable_;
}
void dce_margin_field::set_locked_favorable(double value) {
  
  locked_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.dce_margin_field.locked_favorable)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int czce_margin_field::kPreFavorableFieldNumber;
const int czce_margin_field::kSpdFavorableFieldNumber;
const int czce_margin_field::kIpsFavorableFieldNumber;
const int czce_margin_field::kPrtFavorableFieldNumber;
const int czce_margin_field::kStdFavorableFieldNumber;
const int czce_margin_field::kStgFavorableFieldNumber;
const int czce_margin_field::kZprtFavorableFieldNumber;
const int czce_margin_field::kLockedFavorableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

czce_margin_field::czce_margin_field()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.czce_margin_field)
}
czce_margin_field::czce_margin_field(const czce_margin_field& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pre_favorable_, &from.pre_favorable_,
    static_cast<size_t>(reinterpret_cast<char*>(&locked_favorable_) -
    reinterpret_cast<char*>(&pre_favorable_)) + sizeof(locked_favorable_));
  // @@protoc_insertion_point(copy_constructor:risk.czce_margin_field)
}

void czce_margin_field::SharedCtor() {
  ::memset(&pre_favorable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&locked_favorable_) -
      reinterpret_cast<char*>(&pre_favorable_)) + sizeof(locked_favorable_));
  _cached_size_ = 0;
}

czce_margin_field::~czce_margin_field() {
  // @@protoc_insertion_point(destructor:risk.czce_margin_field)
  SharedDtor();
}

void czce_margin_field::SharedDtor() {
}

void czce_margin_field::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* czce_margin_field::descriptor() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const czce_margin_field& czce_margin_field::default_instance() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

czce_margin_field* czce_margin_field::New(::google::protobuf::Arena* arena) const {
  czce_margin_field* n = new czce_margin_field;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void czce_margin_field::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.czce_margin_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pre_favorable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&locked_favorable_) -
      reinterpret_cast<char*>(&pre_favorable_)) + sizeof(locked_favorable_));
  _internal_metadata_.Clear();
}

bool czce_margin_field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.czce_margin_field)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double pre_favorable = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pre_favorable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double spd_favorable = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &spd_favorable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double ips_favorable = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ips_favorable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double prt_favorable = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &prt_favorable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double std_favorable = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &std_favorable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double stg_favorable = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stg_favorable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double zprt_favorable = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &zprt_favorable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double locked_favorable = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &locked_favorable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.czce_margin_field)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.czce_margin_field)
  return false;
#undef DO_
}

void czce_margin_field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.czce_margin_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double pre_favorable = 1;
  if (this->pre_favorable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->pre_favorable(), output);
  }

  // double spd_favorable = 2;
  if (this->spd_favorable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->spd_favorable(), output);
  }

  // double ips_favorable = 3;
  if (this->ips_favorable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->ips_favorable(), output);
  }

  // double prt_favorable = 4;
  if (this->prt_favorable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->prt_favorable(), output);
  }

  // double std_favorable = 5;
  if (this->std_favorable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->std_favorable(), output);
  }

  // double stg_favorable = 6;
  if (this->stg_favorable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->stg_favorable(), output);
  }

  // double zprt_favorable = 7;
  if (this->zprt_favorable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->zprt_favorable(), output);
  }

  // double locked_favorable = 8;
  if (this->locked_favorable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->locked_favorable(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.czce_margin_field)
}

::google::protobuf::uint8* czce_margin_field::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.czce_margin_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double pre_favorable = 1;
  if (this->pre_favorable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->pre_favorable(), target);
  }

  // double spd_favorable = 2;
  if (this->spd_favorable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->spd_favorable(), target);
  }

  // double ips_favorable = 3;
  if (this->ips_favorable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->ips_favorable(), target);
  }

  // double prt_favorable = 4;
  if (this->prt_favorable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->prt_favorable(), target);
  }

  // double std_favorable = 5;
  if (this->std_favorable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->std_favorable(), target);
  }

  // double stg_favorable = 6;
  if (this->stg_favorable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->stg_favorable(), target);
  }

  // double zprt_favorable = 7;
  if (this->zprt_favorable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->zprt_favorable(), target);
  }

  // double locked_favorable = 8;
  if (this->locked_favorable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->locked_favorable(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.czce_margin_field)
  return target;
}

size_t czce_margin_field::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.czce_margin_field)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double pre_favorable = 1;
  if (this->pre_favorable() != 0) {
    total_size += 1 + 8;
  }

  // double spd_favorable = 2;
  if (this->spd_favorable() != 0) {
    total_size += 1 + 8;
  }

  // double ips_favorable = 3;
  if (this->ips_favorable() != 0) {
    total_size += 1 + 8;
  }

  // double prt_favorable = 4;
  if (this->prt_favorable() != 0) {
    total_size += 1 + 8;
  }

  // double std_favorable = 5;
  if (this->std_favorable() != 0) {
    total_size += 1 + 8;
  }

  // double stg_favorable = 6;
  if (this->stg_favorable() != 0) {
    total_size += 1 + 8;
  }

  // double zprt_favorable = 7;
  if (this->zprt_favorable() != 0) {
    total_size += 1 + 8;
  }

  // double locked_favorable = 8;
  if (this->locked_favorable() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void czce_margin_field::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.czce_margin_field)
  GOOGLE_DCHECK_NE(&from, this);
  const czce_margin_field* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const czce_margin_field>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.czce_margin_field)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.czce_margin_field)
    MergeFrom(*source);
  }
}

void czce_margin_field::MergeFrom(const czce_margin_field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.czce_margin_field)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pre_favorable() != 0) {
    set_pre_favorable(from.pre_favorable());
  }
  if (from.spd_favorable() != 0) {
    set_spd_favorable(from.spd_favorable());
  }
  if (from.ips_favorable() != 0) {
    set_ips_favorable(from.ips_favorable());
  }
  if (from.prt_favorable() != 0) {
    set_prt_favorable(from.prt_favorable());
  }
  if (from.std_favorable() != 0) {
    set_std_favorable(from.std_favorable());
  }
  if (from.stg_favorable() != 0) {
    set_stg_favorable(from.stg_favorable());
  }
  if (from.zprt_favorable() != 0) {
    set_zprt_favorable(from.zprt_favorable());
  }
  if (from.locked_favorable() != 0) {
    set_locked_favorable(from.locked_favorable());
  }
}

void czce_margin_field::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.czce_margin_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void czce_margin_field::CopyFrom(const czce_margin_field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.czce_margin_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool czce_margin_field::IsInitialized() const {
  return true;
}

void czce_margin_field::Swap(czce_margin_field* other) {
  if (other == this) return;
  InternalSwap(other);
}
void czce_margin_field::InternalSwap(czce_margin_field* other) {
  using std::swap;
  swap(pre_favorable_, other->pre_favorable_);
  swap(spd_favorable_, other->spd_favorable_);
  swap(ips_favorable_, other->ips_favorable_);
  swap(prt_favorable_, other->prt_favorable_);
  swap(std_favorable_, other->std_favorable_);
  swap(stg_favorable_, other->stg_favorable_);
  swap(zprt_favorable_, other->zprt_favorable_);
  swap(locked_favorable_, other->locked_favorable_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata czce_margin_field::GetMetadata() const {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// czce_margin_field

// double pre_favorable = 1;
void czce_margin_field::clear_pre_favorable() {
  pre_favorable_ = 0;
}
double czce_margin_field::pre_favorable() const {
  // @@protoc_insertion_point(field_get:risk.czce_margin_field.pre_favorable)
  return pre_favorable_;
}
void czce_margin_field::set_pre_favorable(double value) {
  
  pre_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.czce_margin_field.pre_favorable)
}

// double spd_favorable = 2;
void czce_margin_field::clear_spd_favorable() {
  spd_favorable_ = 0;
}
double czce_margin_field::spd_favorable() const {
  // @@protoc_insertion_point(field_get:risk.czce_margin_field.spd_favorable)
  return spd_favorable_;
}
void czce_margin_field::set_spd_favorable(double value) {
  
  spd_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.czce_margin_field.spd_favorable)
}

// double ips_favorable = 3;
void czce_margin_field::clear_ips_favorable() {
  ips_favorable_ = 0;
}
double czce_margin_field::ips_favorable() const {
  // @@protoc_insertion_point(field_get:risk.czce_margin_field.ips_favorable)
  return ips_favorable_;
}
void czce_margin_field::set_ips_favorable(double value) {
  
  ips_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.czce_margin_field.ips_favorable)
}

// double prt_favorable = 4;
void czce_margin_field::clear_prt_favorable() {
  prt_favorable_ = 0;
}
double czce_margin_field::prt_favorable() const {
  // @@protoc_insertion_point(field_get:risk.czce_margin_field.prt_favorable)
  return prt_favorable_;
}
void czce_margin_field::set_prt_favorable(double value) {
  
  prt_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.czce_margin_field.prt_favorable)
}

// double std_favorable = 5;
void czce_margin_field::clear_std_favorable() {
  std_favorable_ = 0;
}
double czce_margin_field::std_favorable() const {
  // @@protoc_insertion_point(field_get:risk.czce_margin_field.std_favorable)
  return std_favorable_;
}
void czce_margin_field::set_std_favorable(double value) {
  
  std_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.czce_margin_field.std_favorable)
}

// double stg_favorable = 6;
void czce_margin_field::clear_stg_favorable() {
  stg_favorable_ = 0;
}
double czce_margin_field::stg_favorable() const {
  // @@protoc_insertion_point(field_get:risk.czce_margin_field.stg_favorable)
  return stg_favorable_;
}
void czce_margin_field::set_stg_favorable(double value) {
  
  stg_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.czce_margin_field.stg_favorable)
}

// double zprt_favorable = 7;
void czce_margin_field::clear_zprt_favorable() {
  zprt_favorable_ = 0;
}
double czce_margin_field::zprt_favorable() const {
  // @@protoc_insertion_point(field_get:risk.czce_margin_field.zprt_favorable)
  return zprt_favorable_;
}
void czce_margin_field::set_zprt_favorable(double value) {
  
  zprt_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.czce_margin_field.zprt_favorable)
}

// double locked_favorable = 8;
void czce_margin_field::clear_locked_favorable() {
  locked_favorable_ = 0;
}
double czce_margin_field::locked_favorable() const {
  // @@protoc_insertion_point(field_get:risk.czce_margin_field.locked_favorable)
  return locked_favorable_;
}
void czce_margin_field::set_locked_favorable(double value) {
  
  locked_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.czce_margin_field.locked_favorable)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ine_margin_field::kPreFavorableFieldNumber;
const int ine_margin_field::kBigSideFavorableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ine_margin_field::ine_margin_field()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.ine_margin_field)
}
ine_margin_field::ine_margin_field(const ine_margin_field& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pre_favorable_, &from.pre_favorable_,
    static_cast<size_t>(reinterpret_cast<char*>(&big_side_favorable_) -
    reinterpret_cast<char*>(&pre_favorable_)) + sizeof(big_side_favorable_));
  // @@protoc_insertion_point(copy_constructor:risk.ine_margin_field)
}

void ine_margin_field::SharedCtor() {
  ::memset(&pre_favorable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&big_side_favorable_) -
      reinterpret_cast<char*>(&pre_favorable_)) + sizeof(big_side_favorable_));
  _cached_size_ = 0;
}

ine_margin_field::~ine_margin_field() {
  // @@protoc_insertion_point(destructor:risk.ine_margin_field)
  SharedDtor();
}

void ine_margin_field::SharedDtor() {
}

void ine_margin_field::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ine_margin_field::descriptor() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ine_margin_field& ine_margin_field::default_instance() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

ine_margin_field* ine_margin_field::New(::google::protobuf::Arena* arena) const {
  ine_margin_field* n = new ine_margin_field;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ine_margin_field::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.ine_margin_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pre_favorable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&big_side_favorable_) -
      reinterpret_cast<char*>(&pre_favorable_)) + sizeof(big_side_favorable_));
  _internal_metadata_.Clear();
}

bool ine_margin_field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.ine_margin_field)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double pre_favorable = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pre_favorable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double big_side_favorable = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &big_side_favorable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.ine_margin_field)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.ine_margin_field)
  return false;
#undef DO_
}

void ine_margin_field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.ine_margin_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double pre_favorable = 1;
  if (this->pre_favorable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->pre_favorable(), output);
  }

  // double big_side_favorable = 2;
  if (this->big_side_favorable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->big_side_favorable(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.ine_margin_field)
}

::google::protobuf::uint8* ine_margin_field::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.ine_margin_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double pre_favorable = 1;
  if (this->pre_favorable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->pre_favorable(), target);
  }

  // double big_side_favorable = 2;
  if (this->big_side_favorable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->big_side_favorable(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.ine_margin_field)
  return target;
}

size_t ine_margin_field::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.ine_margin_field)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double pre_favorable = 1;
  if (this->pre_favorable() != 0) {
    total_size += 1 + 8;
  }

  // double big_side_favorable = 2;
  if (this->big_side_favorable() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ine_margin_field::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.ine_margin_field)
  GOOGLE_DCHECK_NE(&from, this);
  const ine_margin_field* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ine_margin_field>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.ine_margin_field)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.ine_margin_field)
    MergeFrom(*source);
  }
}

void ine_margin_field::MergeFrom(const ine_margin_field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.ine_margin_field)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pre_favorable() != 0) {
    set_pre_favorable(from.pre_favorable());
  }
  if (from.big_side_favorable() != 0) {
    set_big_side_favorable(from.big_side_favorable());
  }
}

void ine_margin_field::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.ine_margin_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ine_margin_field::CopyFrom(const ine_margin_field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.ine_margin_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ine_margin_field::IsInitialized() const {
  return true;
}

void ine_margin_field::Swap(ine_margin_field* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ine_margin_field::InternalSwap(ine_margin_field* other) {
  using std::swap;
  swap(pre_favorable_, other->pre_favorable_);
  swap(big_side_favorable_, other->big_side_favorable_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ine_margin_field::GetMetadata() const {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ine_margin_field

// double pre_favorable = 1;
void ine_margin_field::clear_pre_favorable() {
  pre_favorable_ = 0;
}
double ine_margin_field::pre_favorable() const {
  // @@protoc_insertion_point(field_get:risk.ine_margin_field.pre_favorable)
  return pre_favorable_;
}
void ine_margin_field::set_pre_favorable(double value) {
  
  pre_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.ine_margin_field.pre_favorable)
}

// double big_side_favorable = 2;
void ine_margin_field::clear_big_side_favorable() {
  big_side_favorable_ = 0;
}
double ine_margin_field::big_side_favorable() const {
  // @@protoc_insertion_point(field_get:risk.ine_margin_field.big_side_favorable)
  return big_side_favorable_;
}
void ine_margin_field::set_big_side_favorable(double value) {
  
  big_side_favorable_ = value;
  // @@protoc_insertion_point(field_set:risk.ine_margin_field.big_side_favorable)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int delivery_margin_field::kShfeMarginFieldNumber;
const int delivery_margin_field::kCffexMarginFieldNumber;
const int delivery_margin_field::kDceMarginFieldNumber;
const int delivery_margin_field::kCzceMarginFieldNumber;
const int delivery_margin_field::kIneMarginFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

delivery_margin_field::delivery_margin_field()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.delivery_margin_field)
}
delivery_margin_field::delivery_margin_field(const delivery_margin_field& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&shfe_margin_, &from.shfe_margin_,
    static_cast<size_t>(reinterpret_cast<char*>(&ine_margin_) -
    reinterpret_cast<char*>(&shfe_margin_)) + sizeof(ine_margin_));
  // @@protoc_insertion_point(copy_constructor:risk.delivery_margin_field)
}

void delivery_margin_field::SharedCtor() {
  ::memset(&shfe_margin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ine_margin_) -
      reinterpret_cast<char*>(&shfe_margin_)) + sizeof(ine_margin_));
  _cached_size_ = 0;
}

delivery_margin_field::~delivery_margin_field() {
  // @@protoc_insertion_point(destructor:risk.delivery_margin_field)
  SharedDtor();
}

void delivery_margin_field::SharedDtor() {
}

void delivery_margin_field::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* delivery_margin_field::descriptor() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const delivery_margin_field& delivery_margin_field::default_instance() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

delivery_margin_field* delivery_margin_field::New(::google::protobuf::Arena* arena) const {
  delivery_margin_field* n = new delivery_margin_field;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void delivery_margin_field::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.delivery_margin_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&shfe_margin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ine_margin_) -
      reinterpret_cast<char*>(&shfe_margin_)) + sizeof(ine_margin_));
  _internal_metadata_.Clear();
}

bool delivery_margin_field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.delivery_margin_field)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double shfe_margin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &shfe_margin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double cffex_margin = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cffex_margin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double dce_margin = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dce_margin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double czce_margin = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &czce_margin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double ine_margin = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ine_margin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.delivery_margin_field)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.delivery_margin_field)
  return false;
#undef DO_
}

void delivery_margin_field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.delivery_margin_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double shfe_margin = 1;
  if (this->shfe_margin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->shfe_margin(), output);
  }

  // double cffex_margin = 2;
  if (this->cffex_margin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->cffex_margin(), output);
  }

  // double dce_margin = 3;
  if (this->dce_margin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->dce_margin(), output);
  }

  // double czce_margin = 4;
  if (this->czce_margin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->czce_margin(), output);
  }

  // double ine_margin = 5;
  if (this->ine_margin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->ine_margin(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.delivery_margin_field)
}

::google::protobuf::uint8* delivery_margin_field::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.delivery_margin_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double shfe_margin = 1;
  if (this->shfe_margin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->shfe_margin(), target);
  }

  // double cffex_margin = 2;
  if (this->cffex_margin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->cffex_margin(), target);
  }

  // double dce_margin = 3;
  if (this->dce_margin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->dce_margin(), target);
  }

  // double czce_margin = 4;
  if (this->czce_margin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->czce_margin(), target);
  }

  // double ine_margin = 5;
  if (this->ine_margin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->ine_margin(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.delivery_margin_field)
  return target;
}

size_t delivery_margin_field::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.delivery_margin_field)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double shfe_margin = 1;
  if (this->shfe_margin() != 0) {
    total_size += 1 + 8;
  }

  // double cffex_margin = 2;
  if (this->cffex_margin() != 0) {
    total_size += 1 + 8;
  }

  // double dce_margin = 3;
  if (this->dce_margin() != 0) {
    total_size += 1 + 8;
  }

  // double czce_margin = 4;
  if (this->czce_margin() != 0) {
    total_size += 1 + 8;
  }

  // double ine_margin = 5;
  if (this->ine_margin() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void delivery_margin_field::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.delivery_margin_field)
  GOOGLE_DCHECK_NE(&from, this);
  const delivery_margin_field* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const delivery_margin_field>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.delivery_margin_field)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.delivery_margin_field)
    MergeFrom(*source);
  }
}

void delivery_margin_field::MergeFrom(const delivery_margin_field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.delivery_margin_field)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.shfe_margin() != 0) {
    set_shfe_margin(from.shfe_margin());
  }
  if (from.cffex_margin() != 0) {
    set_cffex_margin(from.cffex_margin());
  }
  if (from.dce_margin() != 0) {
    set_dce_margin(from.dce_margin());
  }
  if (from.czce_margin() != 0) {
    set_czce_margin(from.czce_margin());
  }
  if (from.ine_margin() != 0) {
    set_ine_margin(from.ine_margin());
  }
}

void delivery_margin_field::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.delivery_margin_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void delivery_margin_field::CopyFrom(const delivery_margin_field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.delivery_margin_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool delivery_margin_field::IsInitialized() const {
  return true;
}

void delivery_margin_field::Swap(delivery_margin_field* other) {
  if (other == this) return;
  InternalSwap(other);
}
void delivery_margin_field::InternalSwap(delivery_margin_field* other) {
  using std::swap;
  swap(shfe_margin_, other->shfe_margin_);
  swap(cffex_margin_, other->cffex_margin_);
  swap(dce_margin_, other->dce_margin_);
  swap(czce_margin_, other->czce_margin_);
  swap(ine_margin_, other->ine_margin_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata delivery_margin_field::GetMetadata() const {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// delivery_margin_field

// double shfe_margin = 1;
void delivery_margin_field::clear_shfe_margin() {
  shfe_margin_ = 0;
}
double delivery_margin_field::shfe_margin() const {
  // @@protoc_insertion_point(field_get:risk.delivery_margin_field.shfe_margin)
  return shfe_margin_;
}
void delivery_margin_field::set_shfe_margin(double value) {
  
  shfe_margin_ = value;
  // @@protoc_insertion_point(field_set:risk.delivery_margin_field.shfe_margin)
}

// double cffex_margin = 2;
void delivery_margin_field::clear_cffex_margin() {
  cffex_margin_ = 0;
}
double delivery_margin_field::cffex_margin() const {
  // @@protoc_insertion_point(field_get:risk.delivery_margin_field.cffex_margin)
  return cffex_margin_;
}
void delivery_margin_field::set_cffex_margin(double value) {
  
  cffex_margin_ = value;
  // @@protoc_insertion_point(field_set:risk.delivery_margin_field.cffex_margin)
}

// double dce_margin = 3;
void delivery_margin_field::clear_dce_margin() {
  dce_margin_ = 0;
}
double delivery_margin_field::dce_margin() const {
  // @@protoc_insertion_point(field_get:risk.delivery_margin_field.dce_margin)
  return dce_margin_;
}
void delivery_margin_field::set_dce_margin(double value) {
  
  dce_margin_ = value;
  // @@protoc_insertion_point(field_set:risk.delivery_margin_field.dce_margin)
}

// double czce_margin = 4;
void delivery_margin_field::clear_czce_margin() {
  czce_margin_ = 0;
}
double delivery_margin_field::czce_margin() const {
  // @@protoc_insertion_point(field_get:risk.delivery_margin_field.czce_margin)
  return czce_margin_;
}
void delivery_margin_field::set_czce_margin(double value) {
  
  czce_margin_ = value;
  // @@protoc_insertion_point(field_set:risk.delivery_margin_field.czce_margin)
}

// double ine_margin = 5;
void delivery_margin_field::clear_ine_margin() {
  ine_margin_ = 0;
}
double delivery_margin_field::ine_margin() const {
  // @@protoc_insertion_point(field_get:risk.delivery_margin_field.ine_margin)
  return ine_margin_;
}
void delivery_margin_field::set_ine_margin(double value) {
  
  ine_margin_ = value;
  // @@protoc_insertion_point(field_set:risk.delivery_margin_field.ine_margin)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rtn_margin_field::kTimestampFieldNumber;
const int rtn_margin_field::kInvestorFieldNumber;
const int rtn_margin_field::kShfeMarginFieldNumber;
const int rtn_margin_field::kCffexMarginFieldNumber;
const int rtn_margin_field::kDceMarginFieldNumber;
const int rtn_margin_field::kCzceMarginFieldNumber;
const int rtn_margin_field::kIneMarginFieldNumber;
const int rtn_margin_field::kDeliveryMarginFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rtn_margin_field::rtn_margin_field()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.rtn_margin_field)
}
rtn_margin_field::rtn_margin_field(const rtn_margin_field& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  investor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.investor().size() > 0) {
    investor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.investor_);
  }
  if (from.has_shfe_margin()) {
    shfe_margin_ = new ::risk::shfe_margin_field(*from.shfe_margin_);
  } else {
    shfe_margin_ = NULL;
  }
  if (from.has_cffex_margin()) {
    cffex_margin_ = new ::risk::cffex_margin_field(*from.cffex_margin_);
  } else {
    cffex_margin_ = NULL;
  }
  if (from.has_dce_margin()) {
    dce_margin_ = new ::risk::dce_margin_field(*from.dce_margin_);
  } else {
    dce_margin_ = NULL;
  }
  if (from.has_czce_margin()) {
    czce_margin_ = new ::risk::czce_margin_field(*from.czce_margin_);
  } else {
    czce_margin_ = NULL;
  }
  if (from.has_ine_margin()) {
    ine_margin_ = new ::risk::ine_margin_field(*from.ine_margin_);
  } else {
    ine_margin_ = NULL;
  }
  if (from.has_delivery_margin()) {
    delivery_margin_ = new ::risk::delivery_margin_field(*from.delivery_margin_);
  } else {
    delivery_margin_ = NULL;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:risk.rtn_margin_field)
}

void rtn_margin_field::SharedCtor() {
  investor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&shfe_margin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&shfe_margin_)) + sizeof(timestamp_));
  _cached_size_ = 0;
}

rtn_margin_field::~rtn_margin_field() {
  // @@protoc_insertion_point(destructor:risk.rtn_margin_field)
  SharedDtor();
}

void rtn_margin_field::SharedDtor() {
  investor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete shfe_margin_;
  if (this != internal_default_instance()) delete cffex_margin_;
  if (this != internal_default_instance()) delete dce_margin_;
  if (this != internal_default_instance()) delete czce_margin_;
  if (this != internal_default_instance()) delete ine_margin_;
  if (this != internal_default_instance()) delete delivery_margin_;
}

void rtn_margin_field::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rtn_margin_field::descriptor() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const rtn_margin_field& rtn_margin_field::default_instance() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

rtn_margin_field* rtn_margin_field::New(::google::protobuf::Arena* arena) const {
  rtn_margin_field* n = new rtn_margin_field;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rtn_margin_field::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.rtn_margin_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  investor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && shfe_margin_ != NULL) {
    delete shfe_margin_;
  }
  shfe_margin_ = NULL;
  if (GetArenaNoVirtual() == NULL && cffex_margin_ != NULL) {
    delete cffex_margin_;
  }
  cffex_margin_ = NULL;
  if (GetArenaNoVirtual() == NULL && dce_margin_ != NULL) {
    delete dce_margin_;
  }
  dce_margin_ = NULL;
  if (GetArenaNoVirtual() == NULL && czce_margin_ != NULL) {
    delete czce_margin_;
  }
  czce_margin_ = NULL;
  if (GetArenaNoVirtual() == NULL && ine_margin_ != NULL) {
    delete ine_margin_;
  }
  ine_margin_ = NULL;
  if (GetArenaNoVirtual() == NULL && delivery_margin_ != NULL) {
    delete delivery_margin_;
  }
  delivery_margin_ = NULL;
  timestamp_ = 0u;
  _internal_metadata_.Clear();
}

bool rtn_margin_field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.rtn_margin_field)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string investor = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_investor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->investor().data(), static_cast<int>(this->investor().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.rtn_margin_field.investor"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .risk.shfe_margin_field shfe_margin = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shfe_margin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .risk.cffex_margin_field cffex_margin = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cffex_margin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .risk.dce_margin_field dce_margin = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dce_margin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .risk.czce_margin_field czce_margin = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_czce_margin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .risk.ine_margin_field ine_margin = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ine_margin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .risk.delivery_margin_field delivery_margin = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_delivery_margin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.rtn_margin_field)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.rtn_margin_field)
  return false;
#undef DO_
}

void rtn_margin_field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.rtn_margin_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->timestamp(), output);
  }

  // string investor = 2;
  if (this->investor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investor().data(), static_cast<int>(this->investor().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.rtn_margin_field.investor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->investor(), output);
  }

  // .risk.shfe_margin_field shfe_margin = 3;
  if (this->has_shfe_margin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->shfe_margin_, output);
  }

  // .risk.cffex_margin_field cffex_margin = 4;
  if (this->has_cffex_margin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->cffex_margin_, output);
  }

  // .risk.dce_margin_field dce_margin = 5;
  if (this->has_dce_margin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->dce_margin_, output);
  }

  // .risk.czce_margin_field czce_margin = 6;
  if (this->has_czce_margin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->czce_margin_, output);
  }

  // .risk.ine_margin_field ine_margin = 7;
  if (this->has_ine_margin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->ine_margin_, output);
  }

  // .risk.delivery_margin_field delivery_margin = 8;
  if (this->has_delivery_margin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->delivery_margin_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.rtn_margin_field)
}

::google::protobuf::uint8* rtn_margin_field::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.rtn_margin_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->timestamp(), target);
  }

  // string investor = 2;
  if (this->investor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investor().data(), static_cast<int>(this->investor().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.rtn_margin_field.investor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->investor(), target);
  }

  // .risk.shfe_margin_field shfe_margin = 3;
  if (this->has_shfe_margin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->shfe_margin_, deterministic, target);
  }

  // .risk.cffex_margin_field cffex_margin = 4;
  if (this->has_cffex_margin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->cffex_margin_, deterministic, target);
  }

  // .risk.dce_margin_field dce_margin = 5;
  if (this->has_dce_margin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->dce_margin_, deterministic, target);
  }

  // .risk.czce_margin_field czce_margin = 6;
  if (this->has_czce_margin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->czce_margin_, deterministic, target);
  }

  // .risk.ine_margin_field ine_margin = 7;
  if (this->has_ine_margin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->ine_margin_, deterministic, target);
  }

  // .risk.delivery_margin_field delivery_margin = 8;
  if (this->has_delivery_margin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->delivery_margin_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.rtn_margin_field)
  return target;
}

size_t rtn_margin_field::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.rtn_margin_field)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string investor = 2;
  if (this->investor().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->investor());
  }

  // .risk.shfe_margin_field shfe_margin = 3;
  if (this->has_shfe_margin()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->shfe_margin_);
  }

  // .risk.cffex_margin_field cffex_margin = 4;
  if (this->has_cffex_margin()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cffex_margin_);
  }

  // .risk.dce_margin_field dce_margin = 5;
  if (this->has_dce_margin()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dce_margin_);
  }

  // .risk.czce_margin_field czce_margin = 6;
  if (this->has_czce_margin()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->czce_margin_);
  }

  // .risk.ine_margin_field ine_margin = 7;
  if (this->has_ine_margin()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ine_margin_);
  }

  // .risk.delivery_margin_field delivery_margin = 8;
  if (this->has_delivery_margin()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->delivery_margin_);
  }

  // uint32 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rtn_margin_field::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.rtn_margin_field)
  GOOGLE_DCHECK_NE(&from, this);
  const rtn_margin_field* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const rtn_margin_field>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.rtn_margin_field)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.rtn_margin_field)
    MergeFrom(*source);
  }
}

void rtn_margin_field::MergeFrom(const rtn_margin_field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.rtn_margin_field)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.investor().size() > 0) {

    investor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.investor_);
  }
  if (from.has_shfe_margin()) {
    mutable_shfe_margin()->::risk::shfe_margin_field::MergeFrom(from.shfe_margin());
  }
  if (from.has_cffex_margin()) {
    mutable_cffex_margin()->::risk::cffex_margin_field::MergeFrom(from.cffex_margin());
  }
  if (from.has_dce_margin()) {
    mutable_dce_margin()->::risk::dce_margin_field::MergeFrom(from.dce_margin());
  }
  if (from.has_czce_margin()) {
    mutable_czce_margin()->::risk::czce_margin_field::MergeFrom(from.czce_margin());
  }
  if (from.has_ine_margin()) {
    mutable_ine_margin()->::risk::ine_margin_field::MergeFrom(from.ine_margin());
  }
  if (from.has_delivery_margin()) {
    mutable_delivery_margin()->::risk::delivery_margin_field::MergeFrom(from.delivery_margin());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void rtn_margin_field::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.rtn_margin_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rtn_margin_field::CopyFrom(const rtn_margin_field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.rtn_margin_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rtn_margin_field::IsInitialized() const {
  return true;
}

void rtn_margin_field::Swap(rtn_margin_field* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rtn_margin_field::InternalSwap(rtn_margin_field* other) {
  using std::swap;
  investor_.Swap(&other->investor_);
  swap(shfe_margin_, other->shfe_margin_);
  swap(cffex_margin_, other->cffex_margin_);
  swap(dce_margin_, other->dce_margin_);
  swap(czce_margin_, other->czce_margin_);
  swap(ine_margin_, other->ine_margin_);
  swap(delivery_margin_, other->delivery_margin_);
  swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rtn_margin_field::GetMetadata() const {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rtn_margin_field

// uint32 timestamp = 1;
void rtn_margin_field::clear_timestamp() {
  timestamp_ = 0u;
}
::google::protobuf::uint32 rtn_margin_field::timestamp() const {
  // @@protoc_insertion_point(field_get:risk.rtn_margin_field.timestamp)
  return timestamp_;
}
void rtn_margin_field::set_timestamp(::google::protobuf::uint32 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:risk.rtn_margin_field.timestamp)
}

// string investor = 2;
void rtn_margin_field::clear_investor() {
  investor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& rtn_margin_field::investor() const {
  // @@protoc_insertion_point(field_get:risk.rtn_margin_field.investor)
  return investor_.GetNoArena();
}
void rtn_margin_field::set_investor(const ::std::string& value) {
  
  investor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.rtn_margin_field.investor)
}
#if LANG_CXX11
void rtn_margin_field::set_investor(::std::string&& value) {
  
  investor_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.rtn_margin_field.investor)
}
#endif
void rtn_margin_field::set_investor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  investor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.rtn_margin_field.investor)
}
void rtn_margin_field::set_investor(const char* value, size_t size) {
  
  investor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.rtn_margin_field.investor)
}
::std::string* rtn_margin_field::mutable_investor() {
  
  // @@protoc_insertion_point(field_mutable:risk.rtn_margin_field.investor)
  return investor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* rtn_margin_field::release_investor() {
  // @@protoc_insertion_point(field_release:risk.rtn_margin_field.investor)
  
  return investor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void rtn_margin_field::set_allocated_investor(::std::string* investor) {
  if (investor != NULL) {
    
  } else {
    
  }
  investor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), investor);
  // @@protoc_insertion_point(field_set_allocated:risk.rtn_margin_field.investor)
}

// .risk.shfe_margin_field shfe_margin = 3;
bool rtn_margin_field::has_shfe_margin() const {
  return this != internal_default_instance() && shfe_margin_ != NULL;
}
void rtn_margin_field::clear_shfe_margin() {
  if (GetArenaNoVirtual() == NULL && shfe_margin_ != NULL) delete shfe_margin_;
  shfe_margin_ = NULL;
}
const ::risk::shfe_margin_field& rtn_margin_field::shfe_margin() const {
  const ::risk::shfe_margin_field* p = shfe_margin_;
  // @@protoc_insertion_point(field_get:risk.rtn_margin_field.shfe_margin)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::shfe_margin_field*>(
      &::risk::_shfe_margin_field_default_instance_);
}
::risk::shfe_margin_field* rtn_margin_field::mutable_shfe_margin() {
  
  if (shfe_margin_ == NULL) {
    shfe_margin_ = new ::risk::shfe_margin_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.rtn_margin_field.shfe_margin)
  return shfe_margin_;
}
::risk::shfe_margin_field* rtn_margin_field::release_shfe_margin() {
  // @@protoc_insertion_point(field_release:risk.rtn_margin_field.shfe_margin)
  
  ::risk::shfe_margin_field* temp = shfe_margin_;
  shfe_margin_ = NULL;
  return temp;
}
void rtn_margin_field::set_allocated_shfe_margin(::risk::shfe_margin_field* shfe_margin) {
  delete shfe_margin_;
  shfe_margin_ = shfe_margin;
  if (shfe_margin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rtn_margin_field.shfe_margin)
}

// .risk.cffex_margin_field cffex_margin = 4;
bool rtn_margin_field::has_cffex_margin() const {
  return this != internal_default_instance() && cffex_margin_ != NULL;
}
void rtn_margin_field::clear_cffex_margin() {
  if (GetArenaNoVirtual() == NULL && cffex_margin_ != NULL) delete cffex_margin_;
  cffex_margin_ = NULL;
}
const ::risk::cffex_margin_field& rtn_margin_field::cffex_margin() const {
  const ::risk::cffex_margin_field* p = cffex_margin_;
  // @@protoc_insertion_point(field_get:risk.rtn_margin_field.cffex_margin)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::cffex_margin_field*>(
      &::risk::_cffex_margin_field_default_instance_);
}
::risk::cffex_margin_field* rtn_margin_field::mutable_cffex_margin() {
  
  if (cffex_margin_ == NULL) {
    cffex_margin_ = new ::risk::cffex_margin_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.rtn_margin_field.cffex_margin)
  return cffex_margin_;
}
::risk::cffex_margin_field* rtn_margin_field::release_cffex_margin() {
  // @@protoc_insertion_point(field_release:risk.rtn_margin_field.cffex_margin)
  
  ::risk::cffex_margin_field* temp = cffex_margin_;
  cffex_margin_ = NULL;
  return temp;
}
void rtn_margin_field::set_allocated_cffex_margin(::risk::cffex_margin_field* cffex_margin) {
  delete cffex_margin_;
  cffex_margin_ = cffex_margin;
  if (cffex_margin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rtn_margin_field.cffex_margin)
}

// .risk.dce_margin_field dce_margin = 5;
bool rtn_margin_field::has_dce_margin() const {
  return this != internal_default_instance() && dce_margin_ != NULL;
}
void rtn_margin_field::clear_dce_margin() {
  if (GetArenaNoVirtual() == NULL && dce_margin_ != NULL) delete dce_margin_;
  dce_margin_ = NULL;
}
const ::risk::dce_margin_field& rtn_margin_field::dce_margin() const {
  const ::risk::dce_margin_field* p = dce_margin_;
  // @@protoc_insertion_point(field_get:risk.rtn_margin_field.dce_margin)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::dce_margin_field*>(
      &::risk::_dce_margin_field_default_instance_);
}
::risk::dce_margin_field* rtn_margin_field::mutable_dce_margin() {
  
  if (dce_margin_ == NULL) {
    dce_margin_ = new ::risk::dce_margin_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.rtn_margin_field.dce_margin)
  return dce_margin_;
}
::risk::dce_margin_field* rtn_margin_field::release_dce_margin() {
  // @@protoc_insertion_point(field_release:risk.rtn_margin_field.dce_margin)
  
  ::risk::dce_margin_field* temp = dce_margin_;
  dce_margin_ = NULL;
  return temp;
}
void rtn_margin_field::set_allocated_dce_margin(::risk::dce_margin_field* dce_margin) {
  delete dce_margin_;
  dce_margin_ = dce_margin;
  if (dce_margin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rtn_margin_field.dce_margin)
}

// .risk.czce_margin_field czce_margin = 6;
bool rtn_margin_field::has_czce_margin() const {
  return this != internal_default_instance() && czce_margin_ != NULL;
}
void rtn_margin_field::clear_czce_margin() {
  if (GetArenaNoVirtual() == NULL && czce_margin_ != NULL) delete czce_margin_;
  czce_margin_ = NULL;
}
const ::risk::czce_margin_field& rtn_margin_field::czce_margin() const {
  const ::risk::czce_margin_field* p = czce_margin_;
  // @@protoc_insertion_point(field_get:risk.rtn_margin_field.czce_margin)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::czce_margin_field*>(
      &::risk::_czce_margin_field_default_instance_);
}
::risk::czce_margin_field* rtn_margin_field::mutable_czce_margin() {
  
  if (czce_margin_ == NULL) {
    czce_margin_ = new ::risk::czce_margin_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.rtn_margin_field.czce_margin)
  return czce_margin_;
}
::risk::czce_margin_field* rtn_margin_field::release_czce_margin() {
  // @@protoc_insertion_point(field_release:risk.rtn_margin_field.czce_margin)
  
  ::risk::czce_margin_field* temp = czce_margin_;
  czce_margin_ = NULL;
  return temp;
}
void rtn_margin_field::set_allocated_czce_margin(::risk::czce_margin_field* czce_margin) {
  delete czce_margin_;
  czce_margin_ = czce_margin;
  if (czce_margin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rtn_margin_field.czce_margin)
}

// .risk.ine_margin_field ine_margin = 7;
bool rtn_margin_field::has_ine_margin() const {
  return this != internal_default_instance() && ine_margin_ != NULL;
}
void rtn_margin_field::clear_ine_margin() {
  if (GetArenaNoVirtual() == NULL && ine_margin_ != NULL) delete ine_margin_;
  ine_margin_ = NULL;
}
const ::risk::ine_margin_field& rtn_margin_field::ine_margin() const {
  const ::risk::ine_margin_field* p = ine_margin_;
  // @@protoc_insertion_point(field_get:risk.rtn_margin_field.ine_margin)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::ine_margin_field*>(
      &::risk::_ine_margin_field_default_instance_);
}
::risk::ine_margin_field* rtn_margin_field::mutable_ine_margin() {
  
  if (ine_margin_ == NULL) {
    ine_margin_ = new ::risk::ine_margin_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.rtn_margin_field.ine_margin)
  return ine_margin_;
}
::risk::ine_margin_field* rtn_margin_field::release_ine_margin() {
  // @@protoc_insertion_point(field_release:risk.rtn_margin_field.ine_margin)
  
  ::risk::ine_margin_field* temp = ine_margin_;
  ine_margin_ = NULL;
  return temp;
}
void rtn_margin_field::set_allocated_ine_margin(::risk::ine_margin_field* ine_margin) {
  delete ine_margin_;
  ine_margin_ = ine_margin;
  if (ine_margin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rtn_margin_field.ine_margin)
}

// .risk.delivery_margin_field delivery_margin = 8;
bool rtn_margin_field::has_delivery_margin() const {
  return this != internal_default_instance() && delivery_margin_ != NULL;
}
void rtn_margin_field::clear_delivery_margin() {
  if (GetArenaNoVirtual() == NULL && delivery_margin_ != NULL) delete delivery_margin_;
  delivery_margin_ = NULL;
}
const ::risk::delivery_margin_field& rtn_margin_field::delivery_margin() const {
  const ::risk::delivery_margin_field* p = delivery_margin_;
  // @@protoc_insertion_point(field_get:risk.rtn_margin_field.delivery_margin)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::delivery_margin_field*>(
      &::risk::_delivery_margin_field_default_instance_);
}
::risk::delivery_margin_field* rtn_margin_field::mutable_delivery_margin() {
  
  if (delivery_margin_ == NULL) {
    delivery_margin_ = new ::risk::delivery_margin_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.rtn_margin_field.delivery_margin)
  return delivery_margin_;
}
::risk::delivery_margin_field* rtn_margin_field::release_delivery_margin() {
  // @@protoc_insertion_point(field_release:risk.rtn_margin_field.delivery_margin)
  
  ::risk::delivery_margin_field* temp = delivery_margin_;
  delivery_margin_ = NULL;
  return temp;
}
void rtn_margin_field::set_allocated_delivery_margin(::risk::delivery_margin_field* delivery_margin) {
  delete delivery_margin_;
  delivery_margin_ = delivery_margin;
  if (delivery_margin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rtn_margin_field.delivery_margin)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rsp_margin_field::kHeaderFieldNumber;
const int rsp_margin_field::kFieldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rsp_margin_field::rsp_margin_field()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.rsp_margin_field)
}
rsp_margin_field::rsp_margin_field(const rsp_margin_field& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::risk::rsp_head_info(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_field()) {
    field_ = new ::risk::rtn_margin_field(*from.field_);
  } else {
    field_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:risk.rsp_margin_field)
}

void rsp_margin_field::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&field_) -
      reinterpret_cast<char*>(&header_)) + sizeof(field_));
  _cached_size_ = 0;
}

rsp_margin_field::~rsp_margin_field() {
  // @@protoc_insertion_point(destructor:risk.rsp_margin_field)
  SharedDtor();
}

void rsp_margin_field::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete field_;
}

void rsp_margin_field::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rsp_margin_field::descriptor() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const rsp_margin_field& rsp_margin_field::default_instance() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

rsp_margin_field* rsp_margin_field::New(::google::protobuf::Arena* arena) const {
  rsp_margin_field* n = new rsp_margin_field;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rsp_margin_field::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.rsp_margin_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && field_ != NULL) {
    delete field_;
  }
  field_ = NULL;
  _internal_metadata_.Clear();
}

bool rsp_margin_field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.rsp_margin_field)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .risk.rsp_head_info header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .risk.rtn_margin_field field = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.rsp_margin_field)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.rsp_margin_field)
  return false;
#undef DO_
}

void rsp_margin_field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.rsp_margin_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .risk.rsp_head_info header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .risk.rtn_margin_field field = 2;
  if (this->has_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->field_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.rsp_margin_field)
}

::google::protobuf::uint8* rsp_margin_field::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.rsp_margin_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .risk.rsp_head_info header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .risk.rtn_margin_field field = 2;
  if (this->has_field()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->field_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.rsp_margin_field)
  return target;
}

size_t rsp_margin_field::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.rsp_margin_field)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .risk.rsp_head_info header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .risk.rtn_margin_field field = 2;
  if (this->has_field()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->field_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rsp_margin_field::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.rsp_margin_field)
  GOOGLE_DCHECK_NE(&from, this);
  const rsp_margin_field* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const rsp_margin_field>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.rsp_margin_field)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.rsp_margin_field)
    MergeFrom(*source);
  }
}

void rsp_margin_field::MergeFrom(const rsp_margin_field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.rsp_margin_field)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::risk::rsp_head_info::MergeFrom(from.header());
  }
  if (from.has_field()) {
    mutable_field()->::risk::rtn_margin_field::MergeFrom(from.field());
  }
}

void rsp_margin_field::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.rsp_margin_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rsp_margin_field::CopyFrom(const rsp_margin_field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.rsp_margin_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rsp_margin_field::IsInitialized() const {
  return true;
}

void rsp_margin_field::Swap(rsp_margin_field* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rsp_margin_field::InternalSwap(rsp_margin_field* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(field_, other->field_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rsp_margin_field::GetMetadata() const {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rsp_margin_field

// .risk.rsp_head_info header = 1;
bool rsp_margin_field::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void rsp_margin_field::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::risk::rsp_head_info& rsp_margin_field::header() const {
  const ::risk::rsp_head_info* p = header_;
  // @@protoc_insertion_point(field_get:risk.rsp_margin_field.header)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::rsp_head_info*>(
      &::risk::_rsp_head_info_default_instance_);
}
::risk::rsp_head_info* rsp_margin_field::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::risk::rsp_head_info;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_margin_field.header)
  return header_;
}
::risk::rsp_head_info* rsp_margin_field::release_header() {
  // @@protoc_insertion_point(field_release:risk.rsp_margin_field.header)
  
  ::risk::rsp_head_info* temp = header_;
  header_ = NULL;
  return temp;
}
void rsp_margin_field::set_allocated_header(::risk::rsp_head_info* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_margin_field.header)
}

// .risk.rtn_margin_field field = 2;
bool rsp_margin_field::has_field() const {
  return this != internal_default_instance() && field_ != NULL;
}
void rsp_margin_field::clear_field() {
  if (GetArenaNoVirtual() == NULL && field_ != NULL) delete field_;
  field_ = NULL;
}
const ::risk::rtn_margin_field& rsp_margin_field::field() const {
  const ::risk::rtn_margin_field* p = field_;
  // @@protoc_insertion_point(field_get:risk.rsp_margin_field.field)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::rtn_margin_field*>(
      &::risk::_rtn_margin_field_default_instance_);
}
::risk::rtn_margin_field* rsp_margin_field::mutable_field() {
  
  if (field_ == NULL) {
    field_ = new ::risk::rtn_margin_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_margin_field.field)
  return field_;
}
::risk::rtn_margin_field* rsp_margin_field::release_field() {
  // @@protoc_insertion_point(field_release:risk.rsp_margin_field.field)
  
  ::risk::rtn_margin_field* temp = field_;
  field_ = NULL;
  return temp;
}
void rsp_margin_field::set_allocated_field(::risk::rtn_margin_field* field) {
  delete field_;
  field_ = field;
  if (field) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_margin_field.field)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rsp_risker_investor::kHeaderFieldNumber;
const int rsp_risker_investor::kRiskgroupidFieldNumber;
const int rsp_risker_investor::kInvestoridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rsp_risker_investor::rsp_risker_investor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.rsp_risker_investor)
}
rsp_risker_investor::rsp_risker_investor(const rsp_risker_investor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  riskgroupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.riskgroupid().size() > 0) {
    riskgroupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.riskgroupid_);
  }
  investorid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.investorid().size() > 0) {
    investorid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.investorid_);
  }
  if (from.has_header()) {
    header_ = new ::risk::rsp_head_info(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:risk.rsp_risker_investor)
}

void rsp_risker_investor::SharedCtor() {
  riskgroupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investorid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_ = NULL;
  _cached_size_ = 0;
}

rsp_risker_investor::~rsp_risker_investor() {
  // @@protoc_insertion_point(destructor:risk.rsp_risker_investor)
  SharedDtor();
}

void rsp_risker_investor::SharedDtor() {
  riskgroupid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investorid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void rsp_risker_investor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rsp_risker_investor::descriptor() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const rsp_risker_investor& rsp_risker_investor::default_instance() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

rsp_risker_investor* rsp_risker_investor::New(::google::protobuf::Arena* arena) const {
  rsp_risker_investor* n = new rsp_risker_investor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rsp_risker_investor::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.rsp_risker_investor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  riskgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool rsp_risker_investor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.rsp_risker_investor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .risk.rsp_head_info header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string riskgroupid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_riskgroupid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->riskgroupid().data(), static_cast<int>(this->riskgroupid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.rsp_risker_investor.riskgroupid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string investorid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_investorid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->investorid().data(), static_cast<int>(this->investorid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.rsp_risker_investor.investorid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.rsp_risker_investor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.rsp_risker_investor)
  return false;
#undef DO_
}

void rsp_risker_investor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.rsp_risker_investor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .risk.rsp_head_info header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string riskgroupid = 2;
  if (this->riskgroupid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->riskgroupid().data(), static_cast<int>(this->riskgroupid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.rsp_risker_investor.riskgroupid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->riskgroupid(), output);
  }

  // string investorid = 3;
  if (this->investorid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investorid().data(), static_cast<int>(this->investorid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.rsp_risker_investor.investorid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->investorid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.rsp_risker_investor)
}

::google::protobuf::uint8* rsp_risker_investor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.rsp_risker_investor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .risk.rsp_head_info header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // string riskgroupid = 2;
  if (this->riskgroupid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->riskgroupid().data(), static_cast<int>(this->riskgroupid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.rsp_risker_investor.riskgroupid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->riskgroupid(), target);
  }

  // string investorid = 3;
  if (this->investorid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investorid().data(), static_cast<int>(this->investorid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.rsp_risker_investor.investorid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->investorid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.rsp_risker_investor)
  return target;
}

size_t rsp_risker_investor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.rsp_risker_investor)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string riskgroupid = 2;
  if (this->riskgroupid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->riskgroupid());
  }

  // string investorid = 3;
  if (this->investorid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->investorid());
  }

  // .risk.rsp_head_info header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rsp_risker_investor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.rsp_risker_investor)
  GOOGLE_DCHECK_NE(&from, this);
  const rsp_risker_investor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const rsp_risker_investor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.rsp_risker_investor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.rsp_risker_investor)
    MergeFrom(*source);
  }
}

void rsp_risker_investor::MergeFrom(const rsp_risker_investor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.rsp_risker_investor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.riskgroupid().size() > 0) {

    riskgroupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.riskgroupid_);
  }
  if (from.investorid().size() > 0) {

    investorid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.investorid_);
  }
  if (from.has_header()) {
    mutable_header()->::risk::rsp_head_info::MergeFrom(from.header());
  }
}

void rsp_risker_investor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.rsp_risker_investor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rsp_risker_investor::CopyFrom(const rsp_risker_investor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.rsp_risker_investor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rsp_risker_investor::IsInitialized() const {
  return true;
}

void rsp_risker_investor::Swap(rsp_risker_investor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rsp_risker_investor::InternalSwap(rsp_risker_investor* other) {
  using std::swap;
  riskgroupid_.Swap(&other->riskgroupid_);
  investorid_.Swap(&other->investorid_);
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rsp_risker_investor::GetMetadata() const {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rsp_risker_investor

// .risk.rsp_head_info header = 1;
bool rsp_risker_investor::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void rsp_risker_investor::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::risk::rsp_head_info& rsp_risker_investor::header() const {
  const ::risk::rsp_head_info* p = header_;
  // @@protoc_insertion_point(field_get:risk.rsp_risker_investor.header)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::rsp_head_info*>(
      &::risk::_rsp_head_info_default_instance_);
}
::risk::rsp_head_info* rsp_risker_investor::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::risk::rsp_head_info;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_risker_investor.header)
  return header_;
}
::risk::rsp_head_info* rsp_risker_investor::release_header() {
  // @@protoc_insertion_point(field_release:risk.rsp_risker_investor.header)
  
  ::risk::rsp_head_info* temp = header_;
  header_ = NULL;
  return temp;
}
void rsp_risker_investor::set_allocated_header(::risk::rsp_head_info* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_risker_investor.header)
}

// string riskgroupid = 2;
void rsp_risker_investor::clear_riskgroupid() {
  riskgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& rsp_risker_investor::riskgroupid() const {
  // @@protoc_insertion_point(field_get:risk.rsp_risker_investor.riskgroupid)
  return riskgroupid_.GetNoArena();
}
void rsp_risker_investor::set_riskgroupid(const ::std::string& value) {
  
  riskgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.rsp_risker_investor.riskgroupid)
}
#if LANG_CXX11
void rsp_risker_investor::set_riskgroupid(::std::string&& value) {
  
  riskgroupid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.rsp_risker_investor.riskgroupid)
}
#endif
void rsp_risker_investor::set_riskgroupid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  riskgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.rsp_risker_investor.riskgroupid)
}
void rsp_risker_investor::set_riskgroupid(const char* value, size_t size) {
  
  riskgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.rsp_risker_investor.riskgroupid)
}
::std::string* rsp_risker_investor::mutable_riskgroupid() {
  
  // @@protoc_insertion_point(field_mutable:risk.rsp_risker_investor.riskgroupid)
  return riskgroupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* rsp_risker_investor::release_riskgroupid() {
  // @@protoc_insertion_point(field_release:risk.rsp_risker_investor.riskgroupid)
  
  return riskgroupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void rsp_risker_investor::set_allocated_riskgroupid(::std::string* riskgroupid) {
  if (riskgroupid != NULL) {
    
  } else {
    
  }
  riskgroupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), riskgroupid);
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_risker_investor.riskgroupid)
}

// string investorid = 3;
void rsp_risker_investor::clear_investorid() {
  investorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& rsp_risker_investor::investorid() const {
  // @@protoc_insertion_point(field_get:risk.rsp_risker_investor.investorid)
  return investorid_.GetNoArena();
}
void rsp_risker_investor::set_investorid(const ::std::string& value) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.rsp_risker_investor.investorid)
}
#if LANG_CXX11
void rsp_risker_investor::set_investorid(::std::string&& value) {
  
  investorid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.rsp_risker_investor.investorid)
}
#endif
void rsp_risker_investor::set_investorid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.rsp_risker_investor.investorid)
}
void rsp_risker_investor::set_investorid(const char* value, size_t size) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.rsp_risker_investor.investorid)
}
::std::string* rsp_risker_investor::mutable_investorid() {
  
  // @@protoc_insertion_point(field_mutable:risk.rsp_risker_investor.investorid)
  return investorid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* rsp_risker_investor::release_investorid() {
  // @@protoc_insertion_point(field_release:risk.rsp_risker_investor.investorid)
  
  return investorid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void rsp_risker_investor::set_allocated_investorid(::std::string* investorid) {
  if (investorid != NULL) {
    
  } else {
    
  }
  investorid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), investorid);
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_risker_investor.investorid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rsp_groups::kHeaderFieldNumber;
const int rsp_groups::kInfosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rsp_groups::rsp_groups()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.rsp_groups)
}
rsp_groups::rsp_groups(const rsp_groups& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      infos_(from.infos_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::risk::rsp_head_info(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:risk.rsp_groups)
}

void rsp_groups::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

rsp_groups::~rsp_groups() {
  // @@protoc_insertion_point(destructor:risk.rsp_groups)
  SharedDtor();
}

void rsp_groups::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void rsp_groups::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rsp_groups::descriptor() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const rsp_groups& rsp_groups::default_instance() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

rsp_groups* rsp_groups::New(::google::protobuf::Arena* arena) const {
  rsp_groups* n = new rsp_groups;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rsp_groups::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.rsp_groups)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  infos_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool rsp_groups::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.rsp_groups)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .risk.rsp_head_info header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .risk.sys_group infos = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.rsp_groups)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.rsp_groups)
  return false;
#undef DO_
}

void rsp_groups::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.rsp_groups)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .risk.rsp_head_info header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .risk.sys_group infos = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->infos_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->infos(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.rsp_groups)
}

::google::protobuf::uint8* rsp_groups::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.rsp_groups)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .risk.rsp_head_info header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // repeated .risk.sys_group infos = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->infos_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->infos(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.rsp_groups)
  return target;
}

size_t rsp_groups::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.rsp_groups)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .risk.sys_group infos = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->infos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->infos(static_cast<int>(i)));
    }
  }

  // .risk.rsp_head_info header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rsp_groups::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.rsp_groups)
  GOOGLE_DCHECK_NE(&from, this);
  const rsp_groups* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const rsp_groups>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.rsp_groups)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.rsp_groups)
    MergeFrom(*source);
  }
}

void rsp_groups::MergeFrom(const rsp_groups& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.rsp_groups)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  infos_.MergeFrom(from.infos_);
  if (from.has_header()) {
    mutable_header()->::risk::rsp_head_info::MergeFrom(from.header());
  }
}

void rsp_groups::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.rsp_groups)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rsp_groups::CopyFrom(const rsp_groups& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.rsp_groups)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rsp_groups::IsInitialized() const {
  return true;
}

void rsp_groups::Swap(rsp_groups* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rsp_groups::InternalSwap(rsp_groups* other) {
  using std::swap;
  infos_.InternalSwap(&other->infos_);
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rsp_groups::GetMetadata() const {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rsp_groups

// .risk.rsp_head_info header = 1;
bool rsp_groups::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void rsp_groups::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::risk::rsp_head_info& rsp_groups::header() const {
  const ::risk::rsp_head_info* p = header_;
  // @@protoc_insertion_point(field_get:risk.rsp_groups.header)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::rsp_head_info*>(
      &::risk::_rsp_head_info_default_instance_);
}
::risk::rsp_head_info* rsp_groups::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::risk::rsp_head_info;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_groups.header)
  return header_;
}
::risk::rsp_head_info* rsp_groups::release_header() {
  // @@protoc_insertion_point(field_release:risk.rsp_groups.header)
  
  ::risk::rsp_head_info* temp = header_;
  header_ = NULL;
  return temp;
}
void rsp_groups::set_allocated_header(::risk::rsp_head_info* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_groups.header)
}

// repeated .risk.sys_group infos = 2;
int rsp_groups::infos_size() const {
  return infos_.size();
}
void rsp_groups::clear_infos() {
  infos_.Clear();
}
const ::risk::sys_group& rsp_groups::infos(int index) const {
  // @@protoc_insertion_point(field_get:risk.rsp_groups.infos)
  return infos_.Get(index);
}
::risk::sys_group* rsp_groups::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:risk.rsp_groups.infos)
  return infos_.Mutable(index);
}
::risk::sys_group* rsp_groups::add_infos() {
  // @@protoc_insertion_point(field_add:risk.rsp_groups.infos)
  return infos_.Add();
}
::google::protobuf::RepeatedPtrField< ::risk::sys_group >*
rsp_groups::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:risk.rsp_groups.infos)
  return &infos_;
}
const ::google::protobuf::RepeatedPtrField< ::risk::sys_group >&
rsp_groups::infos() const {
  // @@protoc_insertion_point(field_list:risk.rsp_groups.infos)
  return infos_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rsp_action_info::kRequestidFieldNumber;
const int rsp_action_info::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rsp_action_info::rsp_action_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.rsp_action_info)
}
rsp_action_info::rsp_action_info(const rsp_action_info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_info()) {
    info_ = new ::risk::error_info(*from.info_);
  } else {
    info_ = NULL;
  }
  requestid_ = from.requestid_;
  // @@protoc_insertion_point(copy_constructor:risk.rsp_action_info)
}

void rsp_action_info::SharedCtor() {
  ::memset(&info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&requestid_) -
      reinterpret_cast<char*>(&info_)) + sizeof(requestid_));
  _cached_size_ = 0;
}

rsp_action_info::~rsp_action_info() {
  // @@protoc_insertion_point(destructor:risk.rsp_action_info)
  SharedDtor();
}

void rsp_action_info::SharedDtor() {
  if (this != internal_default_instance()) delete info_;
}

void rsp_action_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rsp_action_info::descriptor() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const rsp_action_info& rsp_action_info::default_instance() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

rsp_action_info* rsp_action_info::New(::google::protobuf::Arena* arena) const {
  rsp_action_info* n = new rsp_action_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rsp_action_info::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.rsp_action_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && info_ != NULL) {
    delete info_;
  }
  info_ = NULL;
  requestid_ = 0;
  _internal_metadata_.Clear();
}

bool rsp_action_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.rsp_action_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 requestid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .risk.error_info info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.rsp_action_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.rsp_action_info)
  return false;
#undef DO_
}

void rsp_action_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.rsp_action_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 requestid = 1;
  if (this->requestid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // .risk.error_info info = 2;
  if (this->has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.rsp_action_info)
}

::google::protobuf::uint8* rsp_action_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.rsp_action_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 requestid = 1;
  if (this->requestid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // .risk.error_info info = 2;
  if (this->has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.rsp_action_info)
  return target;
}

size_t rsp_action_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.rsp_action_info)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .risk.error_info info = 2;
  if (this->has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->info_);
  }

  // int32 requestid = 1;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->requestid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rsp_action_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.rsp_action_info)
  GOOGLE_DCHECK_NE(&from, this);
  const rsp_action_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const rsp_action_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.rsp_action_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.rsp_action_info)
    MergeFrom(*source);
  }
}

void rsp_action_info::MergeFrom(const rsp_action_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.rsp_action_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    mutable_info()->::risk::error_info::MergeFrom(from.info());
  }
  if (from.requestid() != 0) {
    set_requestid(from.requestid());
  }
}

void rsp_action_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.rsp_action_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rsp_action_info::CopyFrom(const rsp_action_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.rsp_action_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rsp_action_info::IsInitialized() const {
  return true;
}

void rsp_action_info::Swap(rsp_action_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rsp_action_info::InternalSwap(rsp_action_info* other) {
  using std::swap;
  swap(info_, other->info_);
  swap(requestid_, other->requestid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rsp_action_info::GetMetadata() const {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rsp_action_info

// int32 requestid = 1;
void rsp_action_info::clear_requestid() {
  requestid_ = 0;
}
::google::protobuf::int32 rsp_action_info::requestid() const {
  // @@protoc_insertion_point(field_get:risk.rsp_action_info.requestid)
  return requestid_;
}
void rsp_action_info::set_requestid(::google::protobuf::int32 value) {
  
  requestid_ = value;
  // @@protoc_insertion_point(field_set:risk.rsp_action_info.requestid)
}

// .risk.error_info info = 2;
bool rsp_action_info::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
void rsp_action_info::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
const ::risk::error_info& rsp_action_info::info() const {
  const ::risk::error_info* p = info_;
  // @@protoc_insertion_point(field_get:risk.rsp_action_info.info)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::error_info*>(
      &::risk::_error_info_default_instance_);
}
::risk::error_info* rsp_action_info::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::risk::error_info;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_action_info.info)
  return info_;
}
::risk::error_info* rsp_action_info::release_info() {
  // @@protoc_insertion_point(field_release:risk.rsp_action_info.info)
  
  ::risk::error_info* temp = info_;
  info_ = NULL;
  return temp;
}
void rsp_action_info::set_allocated_info(::risk::error_info* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_action_info.info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rtn_change_risker::kOperatoridFieldNumber;
const int rtn_change_risker::kUseridFieldNumber;
const int rtn_change_risker::kGroupFieldNumber;
const int rtn_change_risker::kInvestorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rtn_change_risker::rtn_change_risker()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.rtn_change_risker)
}
rtn_change_risker::rtn_change_risker(const rtn_change_risker& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      investor_(from.investor_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.userid().size() > 0) {
    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  if (from.has_group()) {
    group_ = new ::risk::sys_group(*from.group_);
  } else {
    group_ = NULL;
  }
  operatorid_ = from.operatorid_;
  // @@protoc_insertion_point(copy_constructor:risk.rtn_change_risker)
}

void rtn_change_risker::SharedCtor() {
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&group_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operatorid_) -
      reinterpret_cast<char*>(&group_)) + sizeof(operatorid_));
  _cached_size_ = 0;
}

rtn_change_risker::~rtn_change_risker() {
  // @@protoc_insertion_point(destructor:risk.rtn_change_risker)
  SharedDtor();
}

void rtn_change_risker::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete group_;
}

void rtn_change_risker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rtn_change_risker::descriptor() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const rtn_change_risker& rtn_change_risker::default_instance() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

rtn_change_risker* rtn_change_risker::New(::google::protobuf::Arena* arena) const {
  rtn_change_risker* n = new rtn_change_risker;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rtn_change_risker::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.rtn_change_risker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  investor_.Clear();
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && group_ != NULL) {
    delete group_;
  }
  group_ = NULL;
  operatorid_ = 0;
  _internal_metadata_.Clear();
}

bool rtn_change_risker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.rtn_change_risker)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 operatorid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operatorid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string userid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->userid().data(), static_cast<int>(this->userid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.rtn_change_risker.userid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .risk.sys_group group = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string investor = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_investor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->investor(this->investor_size() - 1).data(),
            static_cast<int>(this->investor(this->investor_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.rtn_change_risker.investor"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.rtn_change_risker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.rtn_change_risker)
  return false;
#undef DO_
}

void rtn_change_risker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.rtn_change_risker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 operatorid = 1;
  if (this->operatorid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operatorid(), output);
  }

  // string userid = 2;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), static_cast<int>(this->userid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.rtn_change_risker.userid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->userid(), output);
  }

  // .risk.sys_group group = 3;
  if (this->has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->group_, output);
  }

  // repeated string investor = 4;
  for (int i = 0, n = this->investor_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investor(i).data(), static_cast<int>(this->investor(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.rtn_change_risker.investor");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->investor(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.rtn_change_risker)
}

::google::protobuf::uint8* rtn_change_risker::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.rtn_change_risker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 operatorid = 1;
  if (this->operatorid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operatorid(), target);
  }

  // string userid = 2;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), static_cast<int>(this->userid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.rtn_change_risker.userid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->userid(), target);
  }

  // .risk.sys_group group = 3;
  if (this->has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->group_, deterministic, target);
  }

  // repeated string investor = 4;
  for (int i = 0, n = this->investor_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investor(i).data(), static_cast<int>(this->investor(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.rtn_change_risker.investor");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->investor(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.rtn_change_risker)
  return target;
}

size_t rtn_change_risker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.rtn_change_risker)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string investor = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->investor_size());
  for (int i = 0, n = this->investor_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->investor(i));
  }

  // string userid = 2;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  // .risk.sys_group group = 3;
  if (this->has_group()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->group_);
  }

  // int32 operatorid = 1;
  if (this->operatorid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->operatorid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rtn_change_risker::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.rtn_change_risker)
  GOOGLE_DCHECK_NE(&from, this);
  const rtn_change_risker* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const rtn_change_risker>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.rtn_change_risker)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.rtn_change_risker)
    MergeFrom(*source);
  }
}

void rtn_change_risker::MergeFrom(const rtn_change_risker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.rtn_change_risker)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  investor_.MergeFrom(from.investor_);
  if (from.userid().size() > 0) {

    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  if (from.has_group()) {
    mutable_group()->::risk::sys_group::MergeFrom(from.group());
  }
  if (from.operatorid() != 0) {
    set_operatorid(from.operatorid());
  }
}

void rtn_change_risker::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.rtn_change_risker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rtn_change_risker::CopyFrom(const rtn_change_risker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.rtn_change_risker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rtn_change_risker::IsInitialized() const {
  return true;
}

void rtn_change_risker::Swap(rtn_change_risker* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rtn_change_risker::InternalSwap(rtn_change_risker* other) {
  using std::swap;
  investor_.InternalSwap(&other->investor_);
  userid_.Swap(&other->userid_);
  swap(group_, other->group_);
  swap(operatorid_, other->operatorid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rtn_change_risker::GetMetadata() const {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rtn_change_risker

// int32 operatorid = 1;
void rtn_change_risker::clear_operatorid() {
  operatorid_ = 0;
}
::google::protobuf::int32 rtn_change_risker::operatorid() const {
  // @@protoc_insertion_point(field_get:risk.rtn_change_risker.operatorid)
  return operatorid_;
}
void rtn_change_risker::set_operatorid(::google::protobuf::int32 value) {
  
  operatorid_ = value;
  // @@protoc_insertion_point(field_set:risk.rtn_change_risker.operatorid)
}

// string userid = 2;
void rtn_change_risker::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& rtn_change_risker::userid() const {
  // @@protoc_insertion_point(field_get:risk.rtn_change_risker.userid)
  return userid_.GetNoArena();
}
void rtn_change_risker::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.rtn_change_risker.userid)
}
#if LANG_CXX11
void rtn_change_risker::set_userid(::std::string&& value) {
  
  userid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.rtn_change_risker.userid)
}
#endif
void rtn_change_risker::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.rtn_change_risker.userid)
}
void rtn_change_risker::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.rtn_change_risker.userid)
}
::std::string* rtn_change_risker::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:risk.rtn_change_risker.userid)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* rtn_change_risker::release_userid() {
  // @@protoc_insertion_point(field_release:risk.rtn_change_risker.userid)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void rtn_change_risker::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:risk.rtn_change_risker.userid)
}

// .risk.sys_group group = 3;
bool rtn_change_risker::has_group() const {
  return this != internal_default_instance() && group_ != NULL;
}
void rtn_change_risker::clear_group() {
  if (GetArenaNoVirtual() == NULL && group_ != NULL) delete group_;
  group_ = NULL;
}
const ::risk::sys_group& rtn_change_risker::group() const {
  const ::risk::sys_group* p = group_;
  // @@protoc_insertion_point(field_get:risk.rtn_change_risker.group)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::sys_group*>(
      &::risk::_sys_group_default_instance_);
}
::risk::sys_group* rtn_change_risker::mutable_group() {
  
  if (group_ == NULL) {
    group_ = new ::risk::sys_group;
  }
  // @@protoc_insertion_point(field_mutable:risk.rtn_change_risker.group)
  return group_;
}
::risk::sys_group* rtn_change_risker::release_group() {
  // @@protoc_insertion_point(field_release:risk.rtn_change_risker.group)
  
  ::risk::sys_group* temp = group_;
  group_ = NULL;
  return temp;
}
void rtn_change_risker::set_allocated_group(::risk::sys_group* group) {
  delete group_;
  group_ = group;
  if (group) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rtn_change_risker.group)
}

// repeated string investor = 4;
int rtn_change_risker::investor_size() const {
  return investor_.size();
}
void rtn_change_risker::clear_investor() {
  investor_.Clear();
}
const ::std::string& rtn_change_risker::investor(int index) const {
  // @@protoc_insertion_point(field_get:risk.rtn_change_risker.investor)
  return investor_.Get(index);
}
::std::string* rtn_change_risker::mutable_investor(int index) {
  // @@protoc_insertion_point(field_mutable:risk.rtn_change_risker.investor)
  return investor_.Mutable(index);
}
void rtn_change_risker::set_investor(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:risk.rtn_change_risker.investor)
  investor_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void rtn_change_risker::set_investor(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:risk.rtn_change_risker.investor)
  investor_.Mutable(index)->assign(std::move(value));
}
#endif
void rtn_change_risker::set_investor(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  investor_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:risk.rtn_change_risker.investor)
}
void rtn_change_risker::set_investor(int index, const char* value, size_t size) {
  investor_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:risk.rtn_change_risker.investor)
}
::std::string* rtn_change_risker::add_investor() {
  // @@protoc_insertion_point(field_add_mutable:risk.rtn_change_risker.investor)
  return investor_.Add();
}
void rtn_change_risker::add_investor(const ::std::string& value) {
  investor_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:risk.rtn_change_risker.investor)
}
#if LANG_CXX11
void rtn_change_risker::add_investor(::std::string&& value) {
  investor_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:risk.rtn_change_risker.investor)
}
#endif
void rtn_change_risker::add_investor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  investor_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:risk.rtn_change_risker.investor)
}
void rtn_change_risker::add_investor(const char* value, size_t size) {
  investor_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:risk.rtn_change_risker.investor)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
rtn_change_risker::investor() const {
  // @@protoc_insertion_point(field_list:risk.rtn_change_risker.investor)
  return investor_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
rtn_change_risker::mutable_investor() {
  // @@protoc_insertion_point(field_mutable_list:risk.rtn_change_risker.investor)
  return &investor_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rtn_option_position_risk::kTypeFieldNumber;
const int rtn_option_position_risk::kModelFieldNumber;
const int rtn_option_position_risk::kInstrumentFieldNumber;
const int rtn_option_position_risk::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rtn_option_position_risk::rtn_option_position_risk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.rtn_option_position_risk)
}
rtn_option_position_risk::rtn_option_position_risk(const rtn_option_position_risk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  instrument_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.instrument().size() > 0) {
    instrument_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instrument_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&type_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:risk.rtn_option_position_risk)
}

void rtn_option_position_risk::SharedCtor() {
  instrument_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&type_)) + sizeof(value_));
  _cached_size_ = 0;
}

rtn_option_position_risk::~rtn_option_position_risk() {
  // @@protoc_insertion_point(destructor:risk.rtn_option_position_risk)
  SharedDtor();
}

void rtn_option_position_risk::SharedDtor() {
  instrument_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void rtn_option_position_risk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rtn_option_position_risk::descriptor() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const rtn_option_position_risk& rtn_option_position_risk::default_instance() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

rtn_option_position_risk* rtn_option_position_risk::New(::google::protobuf::Arena* arena) const {
  rtn_option_position_risk* n = new rtn_option_position_risk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rtn_option_position_risk::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.rtn_option_position_risk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  instrument_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&type_)) + sizeof(value_));
  _internal_metadata_.Clear();
}

bool rtn_option_position_risk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.rtn_option_position_risk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 model = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &model_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string instrument = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrument()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->instrument().data(), static_cast<int>(this->instrument().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.rtn_option_position_risk.instrument"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double value = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.rtn_option_position_risk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.rtn_option_position_risk)
  return false;
#undef DO_
}

void rtn_option_position_risk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.rtn_option_position_risk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // int32 model = 2;
  if (this->model() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->model(), output);
  }

  // string instrument = 3;
  if (this->instrument().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instrument().data(), static_cast<int>(this->instrument().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.rtn_option_position_risk.instrument");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->instrument(), output);
  }

  // double value = 4;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.rtn_option_position_risk)
}

::google::protobuf::uint8* rtn_option_position_risk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.rtn_option_position_risk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // int32 model = 2;
  if (this->model() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->model(), target);
  }

  // string instrument = 3;
  if (this->instrument().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instrument().data(), static_cast<int>(this->instrument().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.rtn_option_position_risk.instrument");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->instrument(), target);
  }

  // double value = 4;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.rtn_option_position_risk)
  return target;
}

size_t rtn_option_position_risk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.rtn_option_position_risk)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string instrument = 3;
  if (this->instrument().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->instrument());
  }

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // int32 model = 2;
  if (this->model() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->model());
  }

  // double value = 4;
  if (this->value() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rtn_option_position_risk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.rtn_option_position_risk)
  GOOGLE_DCHECK_NE(&from, this);
  const rtn_option_position_risk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const rtn_option_position_risk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.rtn_option_position_risk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.rtn_option_position_risk)
    MergeFrom(*source);
  }
}

void rtn_option_position_risk::MergeFrom(const rtn_option_position_risk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.rtn_option_position_risk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.instrument().size() > 0) {

    instrument_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instrument_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.model() != 0) {
    set_model(from.model());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void rtn_option_position_risk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.rtn_option_position_risk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rtn_option_position_risk::CopyFrom(const rtn_option_position_risk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.rtn_option_position_risk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rtn_option_position_risk::IsInitialized() const {
  return true;
}

void rtn_option_position_risk::Swap(rtn_option_position_risk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rtn_option_position_risk::InternalSwap(rtn_option_position_risk* other) {
  using std::swap;
  instrument_.Swap(&other->instrument_);
  swap(type_, other->type_);
  swap(model_, other->model_);
  swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rtn_option_position_risk::GetMetadata() const {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rtn_option_position_risk

// int32 type = 1;
void rtn_option_position_risk::clear_type() {
  type_ = 0;
}
::google::protobuf::int32 rtn_option_position_risk::type() const {
  // @@protoc_insertion_point(field_get:risk.rtn_option_position_risk.type)
  return type_;
}
void rtn_option_position_risk::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:risk.rtn_option_position_risk.type)
}

// int32 model = 2;
void rtn_option_position_risk::clear_model() {
  model_ = 0;
}
::google::protobuf::int32 rtn_option_position_risk::model() const {
  // @@protoc_insertion_point(field_get:risk.rtn_option_position_risk.model)
  return model_;
}
void rtn_option_position_risk::set_model(::google::protobuf::int32 value) {
  
  model_ = value;
  // @@protoc_insertion_point(field_set:risk.rtn_option_position_risk.model)
}

// string instrument = 3;
void rtn_option_position_risk::clear_instrument() {
  instrument_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& rtn_option_position_risk::instrument() const {
  // @@protoc_insertion_point(field_get:risk.rtn_option_position_risk.instrument)
  return instrument_.GetNoArena();
}
void rtn_option_position_risk::set_instrument(const ::std::string& value) {
  
  instrument_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.rtn_option_position_risk.instrument)
}
#if LANG_CXX11
void rtn_option_position_risk::set_instrument(::std::string&& value) {
  
  instrument_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.rtn_option_position_risk.instrument)
}
#endif
void rtn_option_position_risk::set_instrument(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  instrument_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.rtn_option_position_risk.instrument)
}
void rtn_option_position_risk::set_instrument(const char* value, size_t size) {
  
  instrument_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.rtn_option_position_risk.instrument)
}
::std::string* rtn_option_position_risk::mutable_instrument() {
  
  // @@protoc_insertion_point(field_mutable:risk.rtn_option_position_risk.instrument)
  return instrument_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* rtn_option_position_risk::release_instrument() {
  // @@protoc_insertion_point(field_release:risk.rtn_option_position_risk.instrument)
  
  return instrument_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void rtn_option_position_risk::set_allocated_instrument(::std::string* instrument) {
  if (instrument != NULL) {
    
  } else {
    
  }
  instrument_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrument);
  // @@protoc_insertion_point(field_set_allocated:risk.rtn_option_position_risk.instrument)
}

// double value = 4;
void rtn_option_position_risk::clear_value() {
  value_ = 0;
}
double rtn_option_position_risk::value() const {
  // @@protoc_insertion_point(field_get:risk.rtn_option_position_risk.value)
  return value_;
}
void rtn_option_position_risk::set_value(double value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:risk.rtn_option_position_risk.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rsp_whatif::kHeaderFieldNumber;
const int rsp_whatif::kTypeFieldNumber;
const int rsp_whatif::kModelFieldNumber;
const int rsp_whatif::kInstrumentFieldNumber;
const int rsp_whatif::kRangeFieldNumber;
const int rsp_whatif::kOptionValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rsp_whatif::rsp_whatif()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.rsp_whatif)
}
rsp_whatif::rsp_whatif(const rsp_whatif& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  instrument_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.instrument().size() > 0) {
    instrument_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instrument_);
  }
  if (from.has_header()) {
    header_ = new ::risk::rsp_head_info(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&option_value_) -
    reinterpret_cast<char*>(&type_)) + sizeof(option_value_));
  // @@protoc_insertion_point(copy_constructor:risk.rsp_whatif)
}

void rsp_whatif::SharedCtor() {
  instrument_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&option_value_) -
      reinterpret_cast<char*>(&header_)) + sizeof(option_value_));
  _cached_size_ = 0;
}

rsp_whatif::~rsp_whatif() {
  // @@protoc_insertion_point(destructor:risk.rsp_whatif)
  SharedDtor();
}

void rsp_whatif::SharedDtor() {
  instrument_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void rsp_whatif::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rsp_whatif::descriptor() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const rsp_whatif& rsp_whatif::default_instance() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

rsp_whatif* rsp_whatif::New(::google::protobuf::Arena* arena) const {
  rsp_whatif* n = new rsp_whatif;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rsp_whatif::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.rsp_whatif)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  instrument_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&option_value_) -
      reinterpret_cast<char*>(&type_)) + sizeof(option_value_));
  _internal_metadata_.Clear();
}

bool rsp_whatif::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.rsp_whatif)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .risk.rsp_head_info header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 model = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &model_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string instrument = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrument()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->instrument().data(), static_cast<int>(this->instrument().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.rsp_whatif.instrument"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double range = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double option_value = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &option_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.rsp_whatif)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.rsp_whatif)
  return false;
#undef DO_
}

void rsp_whatif::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.rsp_whatif)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .risk.rsp_head_info header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // int32 model = 3;
  if (this->model() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->model(), output);
  }

  // string instrument = 4;
  if (this->instrument().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instrument().data(), static_cast<int>(this->instrument().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.rsp_whatif.instrument");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->instrument(), output);
  }

  // double range = 5;
  if (this->range() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->range(), output);
  }

  // double option_value = 6;
  if (this->option_value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->option_value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.rsp_whatif)
}

::google::protobuf::uint8* rsp_whatif::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.rsp_whatif)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .risk.rsp_head_info header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // int32 model = 3;
  if (this->model() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->model(), target);
  }

  // string instrument = 4;
  if (this->instrument().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instrument().data(), static_cast<int>(this->instrument().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.rsp_whatif.instrument");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->instrument(), target);
  }

  // double range = 5;
  if (this->range() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->range(), target);
  }

  // double option_value = 6;
  if (this->option_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->option_value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.rsp_whatif)
  return target;
}

size_t rsp_whatif::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.rsp_whatif)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string instrument = 4;
  if (this->instrument().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->instrument());
  }

  // .risk.rsp_head_info header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // int32 model = 3;
  if (this->model() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->model());
  }

  // double range = 5;
  if (this->range() != 0) {
    total_size += 1 + 8;
  }

  // double option_value = 6;
  if (this->option_value() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rsp_whatif::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.rsp_whatif)
  GOOGLE_DCHECK_NE(&from, this);
  const rsp_whatif* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const rsp_whatif>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.rsp_whatif)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.rsp_whatif)
    MergeFrom(*source);
  }
}

void rsp_whatif::MergeFrom(const rsp_whatif& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.rsp_whatif)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.instrument().size() > 0) {

    instrument_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instrument_);
  }
  if (from.has_header()) {
    mutable_header()->::risk::rsp_head_info::MergeFrom(from.header());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.model() != 0) {
    set_model(from.model());
  }
  if (from.range() != 0) {
    set_range(from.range());
  }
  if (from.option_value() != 0) {
    set_option_value(from.option_value());
  }
}

void rsp_whatif::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.rsp_whatif)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rsp_whatif::CopyFrom(const rsp_whatif& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.rsp_whatif)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rsp_whatif::IsInitialized() const {
  return true;
}

void rsp_whatif::Swap(rsp_whatif* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rsp_whatif::InternalSwap(rsp_whatif* other) {
  using std::swap;
  instrument_.Swap(&other->instrument_);
  swap(header_, other->header_);
  swap(type_, other->type_);
  swap(model_, other->model_);
  swap(range_, other->range_);
  swap(option_value_, other->option_value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rsp_whatif::GetMetadata() const {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rsp_whatif

// .risk.rsp_head_info header = 1;
bool rsp_whatif::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void rsp_whatif::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::risk::rsp_head_info& rsp_whatif::header() const {
  const ::risk::rsp_head_info* p = header_;
  // @@protoc_insertion_point(field_get:risk.rsp_whatif.header)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::rsp_head_info*>(
      &::risk::_rsp_head_info_default_instance_);
}
::risk::rsp_head_info* rsp_whatif::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::risk::rsp_head_info;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_whatif.header)
  return header_;
}
::risk::rsp_head_info* rsp_whatif::release_header() {
  // @@protoc_insertion_point(field_release:risk.rsp_whatif.header)
  
  ::risk::rsp_head_info* temp = header_;
  header_ = NULL;
  return temp;
}
void rsp_whatif::set_allocated_header(::risk::rsp_head_info* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_whatif.header)
}

// int32 type = 2;
void rsp_whatif::clear_type() {
  type_ = 0;
}
::google::protobuf::int32 rsp_whatif::type() const {
  // @@protoc_insertion_point(field_get:risk.rsp_whatif.type)
  return type_;
}
void rsp_whatif::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:risk.rsp_whatif.type)
}

// int32 model = 3;
void rsp_whatif::clear_model() {
  model_ = 0;
}
::google::protobuf::int32 rsp_whatif::model() const {
  // @@protoc_insertion_point(field_get:risk.rsp_whatif.model)
  return model_;
}
void rsp_whatif::set_model(::google::protobuf::int32 value) {
  
  model_ = value;
  // @@protoc_insertion_point(field_set:risk.rsp_whatif.model)
}

// string instrument = 4;
void rsp_whatif::clear_instrument() {
  instrument_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& rsp_whatif::instrument() const {
  // @@protoc_insertion_point(field_get:risk.rsp_whatif.instrument)
  return instrument_.GetNoArena();
}
void rsp_whatif::set_instrument(const ::std::string& value) {
  
  instrument_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.rsp_whatif.instrument)
}
#if LANG_CXX11
void rsp_whatif::set_instrument(::std::string&& value) {
  
  instrument_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.rsp_whatif.instrument)
}
#endif
void rsp_whatif::set_instrument(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  instrument_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.rsp_whatif.instrument)
}
void rsp_whatif::set_instrument(const char* value, size_t size) {
  
  instrument_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.rsp_whatif.instrument)
}
::std::string* rsp_whatif::mutable_instrument() {
  
  // @@protoc_insertion_point(field_mutable:risk.rsp_whatif.instrument)
  return instrument_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* rsp_whatif::release_instrument() {
  // @@protoc_insertion_point(field_release:risk.rsp_whatif.instrument)
  
  return instrument_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void rsp_whatif::set_allocated_instrument(::std::string* instrument) {
  if (instrument != NULL) {
    
  } else {
    
  }
  instrument_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrument);
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_whatif.instrument)
}

// double range = 5;
void rsp_whatif::clear_range() {
  range_ = 0;
}
double rsp_whatif::range() const {
  // @@protoc_insertion_point(field_get:risk.rsp_whatif.range)
  return range_;
}
void rsp_whatif::set_range(double value) {
  
  range_ = value;
  // @@protoc_insertion_point(field_set:risk.rsp_whatif.range)
}

// double option_value = 6;
void rsp_whatif::clear_option_value() {
  option_value_ = 0;
}
double rsp_whatif::option_value() const {
  // @@protoc_insertion_point(field_get:risk.rsp_whatif.option_value)
  return option_value_;
}
void rsp_whatif::set_option_value(double value) {
  
  option_value_ = value;
  // @@protoc_insertion_point(field_set:risk.rsp_whatif.option_value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int option_argv::kModelFieldNumber;
const int option_argv::kPriceTypeFieldNumber;
const int option_argv::kVolFieldNumber;
const int option_argv::kRateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

option_argv::option_argv()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.option_argv)
}
option_argv::option_argv(const option_argv& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&model_, &from.model_,
    static_cast<size_t>(reinterpret_cast<char*>(&rate_) -
    reinterpret_cast<char*>(&model_)) + sizeof(rate_));
  // @@protoc_insertion_point(copy_constructor:risk.option_argv)
}

void option_argv::SharedCtor() {
  ::memset(&model_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rate_) -
      reinterpret_cast<char*>(&model_)) + sizeof(rate_));
  _cached_size_ = 0;
}

option_argv::~option_argv() {
  // @@protoc_insertion_point(destructor:risk.option_argv)
  SharedDtor();
}

void option_argv::SharedDtor() {
}

void option_argv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* option_argv::descriptor() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const option_argv& option_argv::default_instance() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

option_argv* option_argv::New(::google::protobuf::Arena* arena) const {
  option_argv* n = new option_argv;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void option_argv::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.option_argv)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&model_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rate_) -
      reinterpret_cast<char*>(&model_)) + sizeof(rate_));
  _internal_metadata_.Clear();
}

bool option_argv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.option_argv)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 model = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &model_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 price_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double vol = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vol_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double rate = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.option_argv)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.option_argv)
  return false;
#undef DO_
}

void option_argv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.option_argv)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 model = 1;
  if (this->model() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->model(), output);
  }

  // int32 price_type = 2;
  if (this->price_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->price_type(), output);
  }

  // double vol = 3;
  if (this->vol() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->vol(), output);
  }

  // double rate = 4;
  if (this->rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->rate(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.option_argv)
}

::google::protobuf::uint8* option_argv::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.option_argv)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 model = 1;
  if (this->model() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->model(), target);
  }

  // int32 price_type = 2;
  if (this->price_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->price_type(), target);
  }

  // double vol = 3;
  if (this->vol() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->vol(), target);
  }

  // double rate = 4;
  if (this->rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->rate(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.option_argv)
  return target;
}

size_t option_argv::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.option_argv)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 model = 1;
  if (this->model() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->model());
  }

  // int32 price_type = 2;
  if (this->price_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->price_type());
  }

  // double vol = 3;
  if (this->vol() != 0) {
    total_size += 1 + 8;
  }

  // double rate = 4;
  if (this->rate() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void option_argv::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.option_argv)
  GOOGLE_DCHECK_NE(&from, this);
  const option_argv* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const option_argv>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.option_argv)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.option_argv)
    MergeFrom(*source);
  }
}

void option_argv::MergeFrom(const option_argv& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.option_argv)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.model() != 0) {
    set_model(from.model());
  }
  if (from.price_type() != 0) {
    set_price_type(from.price_type());
  }
  if (from.vol() != 0) {
    set_vol(from.vol());
  }
  if (from.rate() != 0) {
    set_rate(from.rate());
  }
}

void option_argv::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.option_argv)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void option_argv::CopyFrom(const option_argv& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.option_argv)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool option_argv::IsInitialized() const {
  return true;
}

void option_argv::Swap(option_argv* other) {
  if (other == this) return;
  InternalSwap(other);
}
void option_argv::InternalSwap(option_argv* other) {
  using std::swap;
  swap(model_, other->model_);
  swap(price_type_, other->price_type_);
  swap(vol_, other->vol_);
  swap(rate_, other->rate_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata option_argv::GetMetadata() const {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// option_argv

// int32 model = 1;
void option_argv::clear_model() {
  model_ = 0;
}
::google::protobuf::int32 option_argv::model() const {
  // @@protoc_insertion_point(field_get:risk.option_argv.model)
  return model_;
}
void option_argv::set_model(::google::protobuf::int32 value) {
  
  model_ = value;
  // @@protoc_insertion_point(field_set:risk.option_argv.model)
}

// int32 price_type = 2;
void option_argv::clear_price_type() {
  price_type_ = 0;
}
::google::protobuf::int32 option_argv::price_type() const {
  // @@protoc_insertion_point(field_get:risk.option_argv.price_type)
  return price_type_;
}
void option_argv::set_price_type(::google::protobuf::int32 value) {
  
  price_type_ = value;
  // @@protoc_insertion_point(field_set:risk.option_argv.price_type)
}

// double vol = 3;
void option_argv::clear_vol() {
  vol_ = 0;
}
double option_argv::vol() const {
  // @@protoc_insertion_point(field_get:risk.option_argv.vol)
  return vol_;
}
void option_argv::set_vol(double value) {
  
  vol_ = value;
  // @@protoc_insertion_point(field_set:risk.option_argv.vol)
}

// double rate = 4;
void option_argv::clear_rate() {
  rate_ = 0;
}
double option_argv::rate() const {
  // @@protoc_insertion_point(field_get:risk.option_argv.rate)
  return rate_;
}
void option_argv::set_rate(double value) {
  
  rate_ = value;
  // @@protoc_insertion_point(field_set:risk.option_argv.rate)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rsp_option_argv::kHeaderFieldNumber;
const int rsp_option_argv::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rsp_option_argv::rsp_option_argv()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.rsp_option_argv)
}
rsp_option_argv::rsp_option_argv(const rsp_option_argv& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::risk::rsp_head_info(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_info()) {
    info_ = new ::risk::option_argv(*from.info_);
  } else {
    info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:risk.rsp_option_argv)
}

void rsp_option_argv::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&info_) -
      reinterpret_cast<char*>(&header_)) + sizeof(info_));
  _cached_size_ = 0;
}

rsp_option_argv::~rsp_option_argv() {
  // @@protoc_insertion_point(destructor:risk.rsp_option_argv)
  SharedDtor();
}

void rsp_option_argv::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete info_;
}

void rsp_option_argv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rsp_option_argv::descriptor() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const rsp_option_argv& rsp_option_argv::default_instance() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

rsp_option_argv* rsp_option_argv::New(::google::protobuf::Arena* arena) const {
  rsp_option_argv* n = new rsp_option_argv;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rsp_option_argv::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.rsp_option_argv)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && info_ != NULL) {
    delete info_;
  }
  info_ = NULL;
  _internal_metadata_.Clear();
}

bool rsp_option_argv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.rsp_option_argv)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .risk.rsp_head_info header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .risk.option_argv info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.rsp_option_argv)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.rsp_option_argv)
  return false;
#undef DO_
}

void rsp_option_argv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.rsp_option_argv)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .risk.rsp_head_info header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .risk.option_argv info = 2;
  if (this->has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.rsp_option_argv)
}

::google::protobuf::uint8* rsp_option_argv::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.rsp_option_argv)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .risk.rsp_head_info header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .risk.option_argv info = 2;
  if (this->has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.rsp_option_argv)
  return target;
}

size_t rsp_option_argv::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.rsp_option_argv)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .risk.rsp_head_info header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .risk.option_argv info = 2;
  if (this->has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rsp_option_argv::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.rsp_option_argv)
  GOOGLE_DCHECK_NE(&from, this);
  const rsp_option_argv* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const rsp_option_argv>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.rsp_option_argv)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.rsp_option_argv)
    MergeFrom(*source);
  }
}

void rsp_option_argv::MergeFrom(const rsp_option_argv& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.rsp_option_argv)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::risk::rsp_head_info::MergeFrom(from.header());
  }
  if (from.has_info()) {
    mutable_info()->::risk::option_argv::MergeFrom(from.info());
  }
}

void rsp_option_argv::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.rsp_option_argv)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rsp_option_argv::CopyFrom(const rsp_option_argv& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.rsp_option_argv)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rsp_option_argv::IsInitialized() const {
  return true;
}

void rsp_option_argv::Swap(rsp_option_argv* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rsp_option_argv::InternalSwap(rsp_option_argv* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(info_, other->info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rsp_option_argv::GetMetadata() const {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rsp_option_argv

// .risk.rsp_head_info header = 1;
bool rsp_option_argv::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void rsp_option_argv::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::risk::rsp_head_info& rsp_option_argv::header() const {
  const ::risk::rsp_head_info* p = header_;
  // @@protoc_insertion_point(field_get:risk.rsp_option_argv.header)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::rsp_head_info*>(
      &::risk::_rsp_head_info_default_instance_);
}
::risk::rsp_head_info* rsp_option_argv::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::risk::rsp_head_info;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_option_argv.header)
  return header_;
}
::risk::rsp_head_info* rsp_option_argv::release_header() {
  // @@protoc_insertion_point(field_release:risk.rsp_option_argv.header)
  
  ::risk::rsp_head_info* temp = header_;
  header_ = NULL;
  return temp;
}
void rsp_option_argv::set_allocated_header(::risk::rsp_head_info* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_option_argv.header)
}

// .risk.option_argv info = 2;
bool rsp_option_argv::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
void rsp_option_argv::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
const ::risk::option_argv& rsp_option_argv::info() const {
  const ::risk::option_argv* p = info_;
  // @@protoc_insertion_point(field_get:risk.rsp_option_argv.info)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::option_argv*>(
      &::risk::_option_argv_default_instance_);
}
::risk::option_argv* rsp_option_argv::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::risk::option_argv;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_option_argv.info)
  return info_;
}
::risk::option_argv* rsp_option_argv::release_info() {
  // @@protoc_insertion_point(field_release:risk.rsp_option_argv.info)
  
  ::risk::option_argv* temp = info_;
  info_ = NULL;
  return temp;
}
void rsp_option_argv::set_allocated_info(::risk::option_argv* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_option_argv.info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rtn_whatif::kFieldFieldNumber;
const int rtn_whatif::kOptionValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rtn_whatif::rtn_whatif()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.rtn_whatif)
}
rtn_whatif::rtn_whatif(const rtn_whatif& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_field()) {
    field_ = new ::risk::whatif_argv(*from.field_);
  } else {
    field_ = NULL;
  }
  option_value_ = from.option_value_;
  // @@protoc_insertion_point(copy_constructor:risk.rtn_whatif)
}

void rtn_whatif::SharedCtor() {
  ::memset(&field_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&option_value_) -
      reinterpret_cast<char*>(&field_)) + sizeof(option_value_));
  _cached_size_ = 0;
}

rtn_whatif::~rtn_whatif() {
  // @@protoc_insertion_point(destructor:risk.rtn_whatif)
  SharedDtor();
}

void rtn_whatif::SharedDtor() {
  if (this != internal_default_instance()) delete field_;
}

void rtn_whatif::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rtn_whatif::descriptor() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const rtn_whatif& rtn_whatif::default_instance() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

rtn_whatif* rtn_whatif::New(::google::protobuf::Arena* arena) const {
  rtn_whatif* n = new rtn_whatif;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rtn_whatif::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.rtn_whatif)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && field_ != NULL) {
    delete field_;
  }
  field_ = NULL;
  option_value_ = 0;
  _internal_metadata_.Clear();
}

bool rtn_whatif::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.rtn_whatif)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .risk.whatif_argv field = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double option_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &option_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.rtn_whatif)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.rtn_whatif)
  return false;
#undef DO_
}

void rtn_whatif::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.rtn_whatif)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .risk.whatif_argv field = 1;
  if (this->has_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->field_, output);
  }

  // double option_value = 2;
  if (this->option_value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->option_value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.rtn_whatif)
}

::google::protobuf::uint8* rtn_whatif::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.rtn_whatif)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .risk.whatif_argv field = 1;
  if (this->has_field()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->field_, deterministic, target);
  }

  // double option_value = 2;
  if (this->option_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->option_value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.rtn_whatif)
  return target;
}

size_t rtn_whatif::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.rtn_whatif)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .risk.whatif_argv field = 1;
  if (this->has_field()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->field_);
  }

  // double option_value = 2;
  if (this->option_value() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rtn_whatif::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.rtn_whatif)
  GOOGLE_DCHECK_NE(&from, this);
  const rtn_whatif* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const rtn_whatif>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.rtn_whatif)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.rtn_whatif)
    MergeFrom(*source);
  }
}

void rtn_whatif::MergeFrom(const rtn_whatif& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.rtn_whatif)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_field()) {
    mutable_field()->::risk::whatif_argv::MergeFrom(from.field());
  }
  if (from.option_value() != 0) {
    set_option_value(from.option_value());
  }
}

void rtn_whatif::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.rtn_whatif)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rtn_whatif::CopyFrom(const rtn_whatif& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.rtn_whatif)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rtn_whatif::IsInitialized() const {
  return true;
}

void rtn_whatif::Swap(rtn_whatif* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rtn_whatif::InternalSwap(rtn_whatif* other) {
  using std::swap;
  swap(field_, other->field_);
  swap(option_value_, other->option_value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rtn_whatif::GetMetadata() const {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rtn_whatif

// .risk.whatif_argv field = 1;
bool rtn_whatif::has_field() const {
  return this != internal_default_instance() && field_ != NULL;
}
void rtn_whatif::clear_field() {
  if (GetArenaNoVirtual() == NULL && field_ != NULL) delete field_;
  field_ = NULL;
}
const ::risk::whatif_argv& rtn_whatif::field() const {
  const ::risk::whatif_argv* p = field_;
  // @@protoc_insertion_point(field_get:risk.rtn_whatif.field)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::whatif_argv*>(
      &::risk::_whatif_argv_default_instance_);
}
::risk::whatif_argv* rtn_whatif::mutable_field() {
  
  if (field_ == NULL) {
    field_ = new ::risk::whatif_argv;
  }
  // @@protoc_insertion_point(field_mutable:risk.rtn_whatif.field)
  return field_;
}
::risk::whatif_argv* rtn_whatif::release_field() {
  // @@protoc_insertion_point(field_release:risk.rtn_whatif.field)
  
  ::risk::whatif_argv* temp = field_;
  field_ = NULL;
  return temp;
}
void rtn_whatif::set_allocated_field(::risk::whatif_argv* field) {
  delete field_;
  field_ = field;
  if (field) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rtn_whatif.field)
}

// double option_value = 2;
void rtn_whatif::clear_option_value() {
  option_value_ = 0;
}
double rtn_whatif::option_value() const {
  // @@protoc_insertion_point(field_get:risk.rtn_whatif.option_value)
  return option_value_;
}
void rtn_whatif::set_option_value(double value) {
  
  option_value_ = value;
  // @@protoc_insertion_point(field_set:risk.rtn_whatif.option_value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int investor_info::kInvestoridFieldNumber;
const int investor_info::kBrokeridFieldNumber;
const int investor_info::kInvestortypeFieldNumber;
const int investor_info::kInvestornameFieldNumber;
const int investor_info::kIdentifiedcardtypeFieldNumber;
const int investor_info::kIdentifiedcardnoFieldNumber;
const int investor_info::kCountryFieldNumber;
const int investor_info::kProvinceFieldNumber;
const int investor_info::kCityFieldNumber;
const int investor_info::kBirthdayFieldNumber;
const int investor_info::kSexFieldNumber;
const int investor_info::kProfessionFieldNumber;
const int investor_info::kNationalFieldNumber;
const int investor_info::kCapitalFieldNumber;
const int investor_info::kCapitalcurrencyFieldNumber;
const int investor_info::kTelephoneFieldNumber;
const int investor_info::kAddressFieldNumber;
const int investor_info::kZipcodeFieldNumber;
const int investor_info::kEmailFieldNumber;
const int investor_info::kMemoFieldNumber;
const int investor_info::kOpeninvestornameFieldNumber;
const int investor_info::kOrderinvestornameFieldNumber;
const int investor_info::kFundinvestornameFieldNumber;
const int investor_info::kSettleinvestornameFieldNumber;
const int investor_info::kIsactiveFieldNumber;
const int investor_info::kDepartmentidFieldNumber;
const int investor_info::kInvestorfullnameFieldNumber;
const int investor_info::kIsemailFieldNumber;
const int investor_info::kIssmsFieldNumber;
const int investor_info::kIsusingotpFieldNumber;
const int investor_info::kClientregionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

investor_info::investor_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.investor_info)
}
investor_info::investor_info(const investor_info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  investorid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.investorid().size() > 0) {
    investorid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.investorid_);
  }
  brokerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.brokerid().size() > 0) {
    brokerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.brokerid_);
  }
  investortype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.investortype().size() > 0) {
    investortype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.investortype_);
  }
  investorname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.investorname().size() > 0) {
    investorname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.investorname_);
  }
  identifiedcardtype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.identifiedcardtype().size() > 0) {
    identifiedcardtype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.identifiedcardtype_);
  }
  identifiedcardno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.identifiedcardno().size() > 0) {
    identifiedcardno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.identifiedcardno_);
  }
  country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.country().size() > 0) {
    country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_);
  }
  province_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.province().size() > 0) {
    province_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.province_);
  }
  city_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.city().size() > 0) {
    city_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.city_);
  }
  birthday_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.birthday().size() > 0) {
    birthday_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.birthday_);
  }
  sex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sex().size() > 0) {
    sex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sex_);
  }
  profession_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.profession().size() > 0) {
    profession_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.profession_);
  }
  national_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.national().size() > 0) {
    national_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.national_);
  }
  capitalcurrency_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.capitalcurrency().size() > 0) {
    capitalcurrency_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.capitalcurrency_);
  }
  telephone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.telephone().size() > 0) {
    telephone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.telephone_);
  }
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.address().size() > 0) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  zipcode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.zipcode().size() > 0) {
    zipcode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zipcode_);
  }
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.email().size() > 0) {
    email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  memo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.memo().size() > 0) {
    memo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.memo_);
  }
  openinvestorname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.openinvestorname().size() > 0) {
    openinvestorname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.openinvestorname_);
  }
  orderinvestorname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.orderinvestorname().size() > 0) {
    orderinvestorname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderinvestorname_);
  }
  fundinvestorname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.fundinvestorname().size() > 0) {
    fundinvestorname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fundinvestorname_);
  }
  settleinvestorname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.settleinvestorname().size() > 0) {
    settleinvestorname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.settleinvestorname_);
  }
  departmentid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.departmentid().size() > 0) {
    departmentid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.departmentid_);
  }
  investorfullname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.investorfullname().size() > 0) {
    investorfullname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.investorfullname_);
  }
  clientregion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.clientregion().size() > 0) {
    clientregion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientregion_);
  }
  ::memcpy(&capital_, &from.capital_,
    static_cast<size_t>(reinterpret_cast<char*>(&isusingotp_) -
    reinterpret_cast<char*>(&capital_)) + sizeof(isusingotp_));
  // @@protoc_insertion_point(copy_constructor:risk.investor_info)
}

void investor_info::SharedCtor() {
  investorid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  brokerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investortype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investorname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  identifiedcardtype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  identifiedcardno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  province_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  birthday_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  profession_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  national_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  capitalcurrency_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  telephone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zipcode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  memo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  openinvestorname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderinvestorname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fundinvestorname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  settleinvestorname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  departmentid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investorfullname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientregion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&capital_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isusingotp_) -
      reinterpret_cast<char*>(&capital_)) + sizeof(isusingotp_));
  _cached_size_ = 0;
}

investor_info::~investor_info() {
  // @@protoc_insertion_point(destructor:risk.investor_info)
  SharedDtor();
}

void investor_info::SharedDtor() {
  investorid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  brokerid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investortype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investorname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  identifiedcardtype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  identifiedcardno_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  province_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  birthday_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sex_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  profession_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  national_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  capitalcurrency_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  telephone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zipcode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  memo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  openinvestorname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderinvestorname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fundinvestorname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  settleinvestorname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  departmentid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investorfullname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientregion_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void investor_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* investor_info::descriptor() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const investor_info& investor_info::default_instance() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

investor_info* investor_info::New(::google::protobuf::Arena* arena) const {
  investor_info* n = new investor_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void investor_info::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.investor_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  investorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investortype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investorname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  identifiedcardtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  identifiedcardno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  province_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  birthday_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  profession_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  national_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  capitalcurrency_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  telephone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zipcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  memo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  openinvestorname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderinvestorname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fundinvestorname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  settleinvestorname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  departmentid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investorfullname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientregion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&capital_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isusingotp_) -
      reinterpret_cast<char*>(&capital_)) + sizeof(isusingotp_));
  _internal_metadata_.Clear();
}

bool investor_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.investor_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string investorid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_investorid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->investorid().data(), static_cast<int>(this->investorid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.investor_info.investorid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string brokerid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brokerid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->brokerid().data(), static_cast<int>(this->brokerid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.investor_info.brokerid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string investortype = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_investortype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->investortype().data(), static_cast<int>(this->investortype().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.investor_info.investortype"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string investorname = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_investorname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->investorname().data(), static_cast<int>(this->investorname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.investor_info.investorname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string identifiedcardtype = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_identifiedcardtype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->identifiedcardtype().data(), static_cast<int>(this->identifiedcardtype().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.investor_info.identifiedcardtype"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string identifiedcardno = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_identifiedcardno()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->identifiedcardno().data(), static_cast<int>(this->identifiedcardno().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.investor_info.identifiedcardno"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string country = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->country().data(), static_cast<int>(this->country().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.investor_info.country"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string province = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_province()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->province().data(), static_cast<int>(this->province().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.investor_info.province"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string city = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->city().data(), static_cast<int>(this->city().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.investor_info.city"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string birthday = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_birthday()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->birthday().data(), static_cast<int>(this->birthday().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.investor_info.birthday"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sex = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sex()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sex().data(), static_cast<int>(this->sex().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.investor_info.sex"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string profession = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_profession()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->profession().data(), static_cast<int>(this->profession().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.investor_info.profession"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string national = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_national()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->national().data(), static_cast<int>(this->national().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.investor_info.national"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double capital = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &capital_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string capitalcurrency = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_capitalcurrency()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->capitalcurrency().data(), static_cast<int>(this->capitalcurrency().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.investor_info.capitalcurrency"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string telephone = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_telephone()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->telephone().data(), static_cast<int>(this->telephone().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.investor_info.telephone"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string address = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.investor_info.address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string zipcode = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zipcode()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->zipcode().data(), static_cast<int>(this->zipcode().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.investor_info.zipcode"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string email = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->email().data(), static_cast<int>(this->email().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.investor_info.email"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string memo = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_memo()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->memo().data(), static_cast<int>(this->memo().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.investor_info.memo"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string openinvestorname = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openinvestorname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->openinvestorname().data(), static_cast<int>(this->openinvestorname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.investor_info.openinvestorname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string orderinvestorname = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderinvestorname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->orderinvestorname().data(), static_cast<int>(this->orderinvestorname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.investor_info.orderinvestorname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string fundinvestorname = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fundinvestorname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fundinvestorname().data(), static_cast<int>(this->fundinvestorname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.investor_info.fundinvestorname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string settleinvestorname = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_settleinvestorname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->settleinvestorname().data(), static_cast<int>(this->settleinvestorname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.investor_info.settleinvestorname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 isactive = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isactive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string departmentid = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_departmentid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->departmentid().data(), static_cast<int>(this->departmentid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.investor_info.departmentid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string investorfullname = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 218 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_investorfullname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->investorfullname().data(), static_cast<int>(this->investorfullname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.investor_info.investorfullname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 isemail = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 224 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isemail_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 issms = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 232 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &issms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 isusingotp = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isusingotp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string clientregion = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 250 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientregion()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->clientregion().data(), static_cast<int>(this->clientregion().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.investor_info.clientregion"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.investor_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.investor_info)
  return false;
#undef DO_
}

void investor_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.investor_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string investorid = 1;
  if (this->investorid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investorid().data(), static_cast<int>(this->investorid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.investor_info.investorid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->investorid(), output);
  }

  // string brokerid = 2;
  if (this->brokerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->brokerid().data(), static_cast<int>(this->brokerid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.investor_info.brokerid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->brokerid(), output);
  }

  // string investortype = 3;
  if (this->investortype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investortype().data(), static_cast<int>(this->investortype().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.investor_info.investortype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->investortype(), output);
  }

  // string investorname = 4;
  if (this->investorname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investorname().data(), static_cast<int>(this->investorname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.investor_info.investorname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->investorname(), output);
  }

  // string identifiedcardtype = 5;
  if (this->identifiedcardtype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->identifiedcardtype().data(), static_cast<int>(this->identifiedcardtype().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.investor_info.identifiedcardtype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->identifiedcardtype(), output);
  }

  // string identifiedcardno = 6;
  if (this->identifiedcardno().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->identifiedcardno().data(), static_cast<int>(this->identifiedcardno().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.investor_info.identifiedcardno");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->identifiedcardno(), output);
  }

  // string country = 7;
  if (this->country().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->country().data(), static_cast<int>(this->country().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.investor_info.country");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->country(), output);
  }

  // string province = 8;
  if (this->province().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->province().data(), static_cast<int>(this->province().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.investor_info.province");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->province(), output);
  }

  // string city = 9;
  if (this->city().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->city().data(), static_cast<int>(this->city().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.investor_info.city");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->city(), output);
  }

  // string birthday = 10;
  if (this->birthday().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->birthday().data(), static_cast<int>(this->birthday().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.investor_info.birthday");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->birthday(), output);
  }

  // string sex = 11;
  if (this->sex().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sex().data(), static_cast<int>(this->sex().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.investor_info.sex");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->sex(), output);
  }

  // string profession = 12;
  if (this->profession().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->profession().data(), static_cast<int>(this->profession().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.investor_info.profession");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->profession(), output);
  }

  // string national = 13;
  if (this->national().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->national().data(), static_cast<int>(this->national().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.investor_info.national");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->national(), output);
  }

  // double capital = 14;
  if (this->capital() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->capital(), output);
  }

  // string capitalcurrency = 15;
  if (this->capitalcurrency().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->capitalcurrency().data(), static_cast<int>(this->capitalcurrency().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.investor_info.capitalcurrency");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->capitalcurrency(), output);
  }

  // string telephone = 16;
  if (this->telephone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->telephone().data(), static_cast<int>(this->telephone().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.investor_info.telephone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->telephone(), output);
  }

  // string address = 17;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.investor_info.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->address(), output);
  }

  // string zipcode = 18;
  if (this->zipcode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zipcode().data(), static_cast<int>(this->zipcode().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.investor_info.zipcode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->zipcode(), output);
  }

  // string email = 19;
  if (this->email().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->email().data(), static_cast<int>(this->email().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.investor_info.email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->email(), output);
  }

  // string memo = 20;
  if (this->memo().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->memo().data(), static_cast<int>(this->memo().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.investor_info.memo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->memo(), output);
  }

  // string openinvestorname = 21;
  if (this->openinvestorname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->openinvestorname().data(), static_cast<int>(this->openinvestorname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.investor_info.openinvestorname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->openinvestorname(), output);
  }

  // string orderinvestorname = 22;
  if (this->orderinvestorname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orderinvestorname().data(), static_cast<int>(this->orderinvestorname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.investor_info.orderinvestorname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->orderinvestorname(), output);
  }

  // string fundinvestorname = 23;
  if (this->fundinvestorname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fundinvestorname().data(), static_cast<int>(this->fundinvestorname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.investor_info.fundinvestorname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->fundinvestorname(), output);
  }

  // string settleinvestorname = 24;
  if (this->settleinvestorname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->settleinvestorname().data(), static_cast<int>(this->settleinvestorname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.investor_info.settleinvestorname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      24, this->settleinvestorname(), output);
  }

  // int32 isactive = 25;
  if (this->isactive() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->isactive(), output);
  }

  // string departmentid = 26;
  if (this->departmentid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->departmentid().data(), static_cast<int>(this->departmentid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.investor_info.departmentid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      26, this->departmentid(), output);
  }

  // string investorfullname = 27;
  if (this->investorfullname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investorfullname().data(), static_cast<int>(this->investorfullname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.investor_info.investorfullname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      27, this->investorfullname(), output);
  }

  // int32 isemail = 28;
  if (this->isemail() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->isemail(), output);
  }

  // int32 issms = 29;
  if (this->issms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->issms(), output);
  }

  // int32 isusingotp = 30;
  if (this->isusingotp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->isusingotp(), output);
  }

  // string clientregion = 31;
  if (this->clientregion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientregion().data(), static_cast<int>(this->clientregion().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.investor_info.clientregion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      31, this->clientregion(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.investor_info)
}

::google::protobuf::uint8* investor_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.investor_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string investorid = 1;
  if (this->investorid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investorid().data(), static_cast<int>(this->investorid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.investor_info.investorid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->investorid(), target);
  }

  // string brokerid = 2;
  if (this->brokerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->brokerid().data(), static_cast<int>(this->brokerid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.investor_info.brokerid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->brokerid(), target);
  }

  // string investortype = 3;
  if (this->investortype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investortype().data(), static_cast<int>(this->investortype().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.investor_info.investortype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->investortype(), target);
  }

  // string investorname = 4;
  if (this->investorname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investorname().data(), static_cast<int>(this->investorname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.investor_info.investorname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->investorname(), target);
  }

  // string identifiedcardtype = 5;
  if (this->identifiedcardtype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->identifiedcardtype().data(), static_cast<int>(this->identifiedcardtype().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.investor_info.identifiedcardtype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->identifiedcardtype(), target);
  }

  // string identifiedcardno = 6;
  if (this->identifiedcardno().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->identifiedcardno().data(), static_cast<int>(this->identifiedcardno().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.investor_info.identifiedcardno");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->identifiedcardno(), target);
  }

  // string country = 7;
  if (this->country().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->country().data(), static_cast<int>(this->country().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.investor_info.country");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->country(), target);
  }

  // string province = 8;
  if (this->province().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->province().data(), static_cast<int>(this->province().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.investor_info.province");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->province(), target);
  }

  // string city = 9;
  if (this->city().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->city().data(), static_cast<int>(this->city().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.investor_info.city");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->city(), target);
  }

  // string birthday = 10;
  if (this->birthday().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->birthday().data(), static_cast<int>(this->birthday().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.investor_info.birthday");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->birthday(), target);
  }

  // string sex = 11;
  if (this->sex().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sex().data(), static_cast<int>(this->sex().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.investor_info.sex");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->sex(), target);
  }

  // string profession = 12;
  if (this->profession().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->profession().data(), static_cast<int>(this->profession().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.investor_info.profession");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->profession(), target);
  }

  // string national = 13;
  if (this->national().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->national().data(), static_cast<int>(this->national().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.investor_info.national");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->national(), target);
  }

  // double capital = 14;
  if (this->capital() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->capital(), target);
  }

  // string capitalcurrency = 15;
  if (this->capitalcurrency().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->capitalcurrency().data(), static_cast<int>(this->capitalcurrency().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.investor_info.capitalcurrency");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->capitalcurrency(), target);
  }

  // string telephone = 16;
  if (this->telephone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->telephone().data(), static_cast<int>(this->telephone().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.investor_info.telephone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->telephone(), target);
  }

  // string address = 17;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.investor_info.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->address(), target);
  }

  // string zipcode = 18;
  if (this->zipcode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zipcode().data(), static_cast<int>(this->zipcode().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.investor_info.zipcode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->zipcode(), target);
  }

  // string email = 19;
  if (this->email().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->email().data(), static_cast<int>(this->email().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.investor_info.email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->email(), target);
  }

  // string memo = 20;
  if (this->memo().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->memo().data(), static_cast<int>(this->memo().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.investor_info.memo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->memo(), target);
  }

  // string openinvestorname = 21;
  if (this->openinvestorname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->openinvestorname().data(), static_cast<int>(this->openinvestorname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.investor_info.openinvestorname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->openinvestorname(), target);
  }

  // string orderinvestorname = 22;
  if (this->orderinvestorname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orderinvestorname().data(), static_cast<int>(this->orderinvestorname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.investor_info.orderinvestorname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->orderinvestorname(), target);
  }

  // string fundinvestorname = 23;
  if (this->fundinvestorname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fundinvestorname().data(), static_cast<int>(this->fundinvestorname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.investor_info.fundinvestorname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->fundinvestorname(), target);
  }

  // string settleinvestorname = 24;
  if (this->settleinvestorname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->settleinvestorname().data(), static_cast<int>(this->settleinvestorname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.investor_info.settleinvestorname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->settleinvestorname(), target);
  }

  // int32 isactive = 25;
  if (this->isactive() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->isactive(), target);
  }

  // string departmentid = 26;
  if (this->departmentid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->departmentid().data(), static_cast<int>(this->departmentid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.investor_info.departmentid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->departmentid(), target);
  }

  // string investorfullname = 27;
  if (this->investorfullname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investorfullname().data(), static_cast<int>(this->investorfullname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.investor_info.investorfullname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->investorfullname(), target);
  }

  // int32 isemail = 28;
  if (this->isemail() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->isemail(), target);
  }

  // int32 issms = 29;
  if (this->issms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->issms(), target);
  }

  // int32 isusingotp = 30;
  if (this->isusingotp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->isusingotp(), target);
  }

  // string clientregion = 31;
  if (this->clientregion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientregion().data(), static_cast<int>(this->clientregion().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.investor_info.clientregion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->clientregion(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.investor_info)
  return target;
}

size_t investor_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.investor_info)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string investorid = 1;
  if (this->investorid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->investorid());
  }

  // string brokerid = 2;
  if (this->brokerid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->brokerid());
  }

  // string investortype = 3;
  if (this->investortype().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->investortype());
  }

  // string investorname = 4;
  if (this->investorname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->investorname());
  }

  // string identifiedcardtype = 5;
  if (this->identifiedcardtype().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->identifiedcardtype());
  }

  // string identifiedcardno = 6;
  if (this->identifiedcardno().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->identifiedcardno());
  }

  // string country = 7;
  if (this->country().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->country());
  }

  // string province = 8;
  if (this->province().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->province());
  }

  // string city = 9;
  if (this->city().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->city());
  }

  // string birthday = 10;
  if (this->birthday().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->birthday());
  }

  // string sex = 11;
  if (this->sex().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sex());
  }

  // string profession = 12;
  if (this->profession().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->profession());
  }

  // string national = 13;
  if (this->national().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->national());
  }

  // string capitalcurrency = 15;
  if (this->capitalcurrency().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->capitalcurrency());
  }

  // string telephone = 16;
  if (this->telephone().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->telephone());
  }

  // string address = 17;
  if (this->address().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  // string zipcode = 18;
  if (this->zipcode().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->zipcode());
  }

  // string email = 19;
  if (this->email().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->email());
  }

  // string memo = 20;
  if (this->memo().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->memo());
  }

  // string openinvestorname = 21;
  if (this->openinvestorname().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->openinvestorname());
  }

  // string orderinvestorname = 22;
  if (this->orderinvestorname().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->orderinvestorname());
  }

  // string fundinvestorname = 23;
  if (this->fundinvestorname().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fundinvestorname());
  }

  // string settleinvestorname = 24;
  if (this->settleinvestorname().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->settleinvestorname());
  }

  // string departmentid = 26;
  if (this->departmentid().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->departmentid());
  }

  // string investorfullname = 27;
  if (this->investorfullname().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->investorfullname());
  }

  // string clientregion = 31;
  if (this->clientregion().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientregion());
  }

  // double capital = 14;
  if (this->capital() != 0) {
    total_size += 1 + 8;
  }

  // int32 isactive = 25;
  if (this->isactive() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->isactive());
  }

  // int32 isemail = 28;
  if (this->isemail() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->isemail());
  }

  // int32 issms = 29;
  if (this->issms() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->issms());
  }

  // int32 isusingotp = 30;
  if (this->isusingotp() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->isusingotp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void investor_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.investor_info)
  GOOGLE_DCHECK_NE(&from, this);
  const investor_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const investor_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.investor_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.investor_info)
    MergeFrom(*source);
  }
}

void investor_info::MergeFrom(const investor_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.investor_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.investorid().size() > 0) {

    investorid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.investorid_);
  }
  if (from.brokerid().size() > 0) {

    brokerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.brokerid_);
  }
  if (from.investortype().size() > 0) {

    investortype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.investortype_);
  }
  if (from.investorname().size() > 0) {

    investorname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.investorname_);
  }
  if (from.identifiedcardtype().size() > 0) {

    identifiedcardtype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.identifiedcardtype_);
  }
  if (from.identifiedcardno().size() > 0) {

    identifiedcardno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.identifiedcardno_);
  }
  if (from.country().size() > 0) {

    country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_);
  }
  if (from.province().size() > 0) {

    province_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.province_);
  }
  if (from.city().size() > 0) {

    city_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.city_);
  }
  if (from.birthday().size() > 0) {

    birthday_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.birthday_);
  }
  if (from.sex().size() > 0) {

    sex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sex_);
  }
  if (from.profession().size() > 0) {

    profession_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.profession_);
  }
  if (from.national().size() > 0) {

    national_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.national_);
  }
  if (from.capitalcurrency().size() > 0) {

    capitalcurrency_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.capitalcurrency_);
  }
  if (from.telephone().size() > 0) {

    telephone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.telephone_);
  }
  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.zipcode().size() > 0) {

    zipcode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zipcode_);
  }
  if (from.email().size() > 0) {

    email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  if (from.memo().size() > 0) {

    memo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.memo_);
  }
  if (from.openinvestorname().size() > 0) {

    openinvestorname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.openinvestorname_);
  }
  if (from.orderinvestorname().size() > 0) {

    orderinvestorname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderinvestorname_);
  }
  if (from.fundinvestorname().size() > 0) {

    fundinvestorname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fundinvestorname_);
  }
  if (from.settleinvestorname().size() > 0) {

    settleinvestorname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.settleinvestorname_);
  }
  if (from.departmentid().size() > 0) {

    departmentid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.departmentid_);
  }
  if (from.investorfullname().size() > 0) {

    investorfullname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.investorfullname_);
  }
  if (from.clientregion().size() > 0) {

    clientregion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientregion_);
  }
  if (from.capital() != 0) {
    set_capital(from.capital());
  }
  if (from.isactive() != 0) {
    set_isactive(from.isactive());
  }
  if (from.isemail() != 0) {
    set_isemail(from.isemail());
  }
  if (from.issms() != 0) {
    set_issms(from.issms());
  }
  if (from.isusingotp() != 0) {
    set_isusingotp(from.isusingotp());
  }
}

void investor_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.investor_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void investor_info::CopyFrom(const investor_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.investor_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool investor_info::IsInitialized() const {
  return true;
}

void investor_info::Swap(investor_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void investor_info::InternalSwap(investor_info* other) {
  using std::swap;
  investorid_.Swap(&other->investorid_);
  brokerid_.Swap(&other->brokerid_);
  investortype_.Swap(&other->investortype_);
  investorname_.Swap(&other->investorname_);
  identifiedcardtype_.Swap(&other->identifiedcardtype_);
  identifiedcardno_.Swap(&other->identifiedcardno_);
  country_.Swap(&other->country_);
  province_.Swap(&other->province_);
  city_.Swap(&other->city_);
  birthday_.Swap(&other->birthday_);
  sex_.Swap(&other->sex_);
  profession_.Swap(&other->profession_);
  national_.Swap(&other->national_);
  capitalcurrency_.Swap(&other->capitalcurrency_);
  telephone_.Swap(&other->telephone_);
  address_.Swap(&other->address_);
  zipcode_.Swap(&other->zipcode_);
  email_.Swap(&other->email_);
  memo_.Swap(&other->memo_);
  openinvestorname_.Swap(&other->openinvestorname_);
  orderinvestorname_.Swap(&other->orderinvestorname_);
  fundinvestorname_.Swap(&other->fundinvestorname_);
  settleinvestorname_.Swap(&other->settleinvestorname_);
  departmentid_.Swap(&other->departmentid_);
  investorfullname_.Swap(&other->investorfullname_);
  clientregion_.Swap(&other->clientregion_);
  swap(capital_, other->capital_);
  swap(isactive_, other->isactive_);
  swap(isemail_, other->isemail_);
  swap(issms_, other->issms_);
  swap(isusingotp_, other->isusingotp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata investor_info::GetMetadata() const {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// investor_info

// string investorid = 1;
void investor_info::clear_investorid() {
  investorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& investor_info::investorid() const {
  // @@protoc_insertion_point(field_get:risk.investor_info.investorid)
  return investorid_.GetNoArena();
}
void investor_info::set_investorid(const ::std::string& value) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.investor_info.investorid)
}
#if LANG_CXX11
void investor_info::set_investorid(::std::string&& value) {
  
  investorid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.investor_info.investorid)
}
#endif
void investor_info::set_investorid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.investor_info.investorid)
}
void investor_info::set_investorid(const char* value, size_t size) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.investor_info.investorid)
}
::std::string* investor_info::mutable_investorid() {
  
  // @@protoc_insertion_point(field_mutable:risk.investor_info.investorid)
  return investorid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* investor_info::release_investorid() {
  // @@protoc_insertion_point(field_release:risk.investor_info.investorid)
  
  return investorid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void investor_info::set_allocated_investorid(::std::string* investorid) {
  if (investorid != NULL) {
    
  } else {
    
  }
  investorid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), investorid);
  // @@protoc_insertion_point(field_set_allocated:risk.investor_info.investorid)
}

// string brokerid = 2;
void investor_info::clear_brokerid() {
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& investor_info::brokerid() const {
  // @@protoc_insertion_point(field_get:risk.investor_info.brokerid)
  return brokerid_.GetNoArena();
}
void investor_info::set_brokerid(const ::std::string& value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.investor_info.brokerid)
}
#if LANG_CXX11
void investor_info::set_brokerid(::std::string&& value) {
  
  brokerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.investor_info.brokerid)
}
#endif
void investor_info::set_brokerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.investor_info.brokerid)
}
void investor_info::set_brokerid(const char* value, size_t size) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.investor_info.brokerid)
}
::std::string* investor_info::mutable_brokerid() {
  
  // @@protoc_insertion_point(field_mutable:risk.investor_info.brokerid)
  return brokerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* investor_info::release_brokerid() {
  // @@protoc_insertion_point(field_release:risk.investor_info.brokerid)
  
  return brokerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void investor_info::set_allocated_brokerid(::std::string* brokerid) {
  if (brokerid != NULL) {
    
  } else {
    
  }
  brokerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brokerid);
  // @@protoc_insertion_point(field_set_allocated:risk.investor_info.brokerid)
}

// string investortype = 3;
void investor_info::clear_investortype() {
  investortype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& investor_info::investortype() const {
  // @@protoc_insertion_point(field_get:risk.investor_info.investortype)
  return investortype_.GetNoArena();
}
void investor_info::set_investortype(const ::std::string& value) {
  
  investortype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.investor_info.investortype)
}
#if LANG_CXX11
void investor_info::set_investortype(::std::string&& value) {
  
  investortype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.investor_info.investortype)
}
#endif
void investor_info::set_investortype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  investortype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.investor_info.investortype)
}
void investor_info::set_investortype(const char* value, size_t size) {
  
  investortype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.investor_info.investortype)
}
::std::string* investor_info::mutable_investortype() {
  
  // @@protoc_insertion_point(field_mutable:risk.investor_info.investortype)
  return investortype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* investor_info::release_investortype() {
  // @@protoc_insertion_point(field_release:risk.investor_info.investortype)
  
  return investortype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void investor_info::set_allocated_investortype(::std::string* investortype) {
  if (investortype != NULL) {
    
  } else {
    
  }
  investortype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), investortype);
  // @@protoc_insertion_point(field_set_allocated:risk.investor_info.investortype)
}

// string investorname = 4;
void investor_info::clear_investorname() {
  investorname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& investor_info::investorname() const {
  // @@protoc_insertion_point(field_get:risk.investor_info.investorname)
  return investorname_.GetNoArena();
}
void investor_info::set_investorname(const ::std::string& value) {
  
  investorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.investor_info.investorname)
}
#if LANG_CXX11
void investor_info::set_investorname(::std::string&& value) {
  
  investorname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.investor_info.investorname)
}
#endif
void investor_info::set_investorname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  investorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.investor_info.investorname)
}
void investor_info::set_investorname(const char* value, size_t size) {
  
  investorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.investor_info.investorname)
}
::std::string* investor_info::mutable_investorname() {
  
  // @@protoc_insertion_point(field_mutable:risk.investor_info.investorname)
  return investorname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* investor_info::release_investorname() {
  // @@protoc_insertion_point(field_release:risk.investor_info.investorname)
  
  return investorname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void investor_info::set_allocated_investorname(::std::string* investorname) {
  if (investorname != NULL) {
    
  } else {
    
  }
  investorname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), investorname);
  // @@protoc_insertion_point(field_set_allocated:risk.investor_info.investorname)
}

// string identifiedcardtype = 5;
void investor_info::clear_identifiedcardtype() {
  identifiedcardtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& investor_info::identifiedcardtype() const {
  // @@protoc_insertion_point(field_get:risk.investor_info.identifiedcardtype)
  return identifiedcardtype_.GetNoArena();
}
void investor_info::set_identifiedcardtype(const ::std::string& value) {
  
  identifiedcardtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.investor_info.identifiedcardtype)
}
#if LANG_CXX11
void investor_info::set_identifiedcardtype(::std::string&& value) {
  
  identifiedcardtype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.investor_info.identifiedcardtype)
}
#endif
void investor_info::set_identifiedcardtype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  identifiedcardtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.investor_info.identifiedcardtype)
}
void investor_info::set_identifiedcardtype(const char* value, size_t size) {
  
  identifiedcardtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.investor_info.identifiedcardtype)
}
::std::string* investor_info::mutable_identifiedcardtype() {
  
  // @@protoc_insertion_point(field_mutable:risk.investor_info.identifiedcardtype)
  return identifiedcardtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* investor_info::release_identifiedcardtype() {
  // @@protoc_insertion_point(field_release:risk.investor_info.identifiedcardtype)
  
  return identifiedcardtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void investor_info::set_allocated_identifiedcardtype(::std::string* identifiedcardtype) {
  if (identifiedcardtype != NULL) {
    
  } else {
    
  }
  identifiedcardtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), identifiedcardtype);
  // @@protoc_insertion_point(field_set_allocated:risk.investor_info.identifiedcardtype)
}

// string identifiedcardno = 6;
void investor_info::clear_identifiedcardno() {
  identifiedcardno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& investor_info::identifiedcardno() const {
  // @@protoc_insertion_point(field_get:risk.investor_info.identifiedcardno)
  return identifiedcardno_.GetNoArena();
}
void investor_info::set_identifiedcardno(const ::std::string& value) {
  
  identifiedcardno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.investor_info.identifiedcardno)
}
#if LANG_CXX11
void investor_info::set_identifiedcardno(::std::string&& value) {
  
  identifiedcardno_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.investor_info.identifiedcardno)
}
#endif
void investor_info::set_identifiedcardno(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  identifiedcardno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.investor_info.identifiedcardno)
}
void investor_info::set_identifiedcardno(const char* value, size_t size) {
  
  identifiedcardno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.investor_info.identifiedcardno)
}
::std::string* investor_info::mutable_identifiedcardno() {
  
  // @@protoc_insertion_point(field_mutable:risk.investor_info.identifiedcardno)
  return identifiedcardno_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* investor_info::release_identifiedcardno() {
  // @@protoc_insertion_point(field_release:risk.investor_info.identifiedcardno)
  
  return identifiedcardno_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void investor_info::set_allocated_identifiedcardno(::std::string* identifiedcardno) {
  if (identifiedcardno != NULL) {
    
  } else {
    
  }
  identifiedcardno_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), identifiedcardno);
  // @@protoc_insertion_point(field_set_allocated:risk.investor_info.identifiedcardno)
}

// string country = 7;
void investor_info::clear_country() {
  country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& investor_info::country() const {
  // @@protoc_insertion_point(field_get:risk.investor_info.country)
  return country_.GetNoArena();
}
void investor_info::set_country(const ::std::string& value) {
  
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.investor_info.country)
}
#if LANG_CXX11
void investor_info::set_country(::std::string&& value) {
  
  country_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.investor_info.country)
}
#endif
void investor_info::set_country(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.investor_info.country)
}
void investor_info::set_country(const char* value, size_t size) {
  
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.investor_info.country)
}
::std::string* investor_info::mutable_country() {
  
  // @@protoc_insertion_point(field_mutable:risk.investor_info.country)
  return country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* investor_info::release_country() {
  // @@protoc_insertion_point(field_release:risk.investor_info.country)
  
  return country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void investor_info::set_allocated_country(::std::string* country) {
  if (country != NULL) {
    
  } else {
    
  }
  country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:risk.investor_info.country)
}

// string province = 8;
void investor_info::clear_province() {
  province_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& investor_info::province() const {
  // @@protoc_insertion_point(field_get:risk.investor_info.province)
  return province_.GetNoArena();
}
void investor_info::set_province(const ::std::string& value) {
  
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.investor_info.province)
}
#if LANG_CXX11
void investor_info::set_province(::std::string&& value) {
  
  province_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.investor_info.province)
}
#endif
void investor_info::set_province(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.investor_info.province)
}
void investor_info::set_province(const char* value, size_t size) {
  
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.investor_info.province)
}
::std::string* investor_info::mutable_province() {
  
  // @@protoc_insertion_point(field_mutable:risk.investor_info.province)
  return province_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* investor_info::release_province() {
  // @@protoc_insertion_point(field_release:risk.investor_info.province)
  
  return province_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void investor_info::set_allocated_province(::std::string* province) {
  if (province != NULL) {
    
  } else {
    
  }
  province_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), province);
  // @@protoc_insertion_point(field_set_allocated:risk.investor_info.province)
}

// string city = 9;
void investor_info::clear_city() {
  city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& investor_info::city() const {
  // @@protoc_insertion_point(field_get:risk.investor_info.city)
  return city_.GetNoArena();
}
void investor_info::set_city(const ::std::string& value) {
  
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.investor_info.city)
}
#if LANG_CXX11
void investor_info::set_city(::std::string&& value) {
  
  city_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.investor_info.city)
}
#endif
void investor_info::set_city(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.investor_info.city)
}
void investor_info::set_city(const char* value, size_t size) {
  
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.investor_info.city)
}
::std::string* investor_info::mutable_city() {
  
  // @@protoc_insertion_point(field_mutable:risk.investor_info.city)
  return city_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* investor_info::release_city() {
  // @@protoc_insertion_point(field_release:risk.investor_info.city)
  
  return city_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void investor_info::set_allocated_city(::std::string* city) {
  if (city != NULL) {
    
  } else {
    
  }
  city_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), city);
  // @@protoc_insertion_point(field_set_allocated:risk.investor_info.city)
}

// string birthday = 10;
void investor_info::clear_birthday() {
  birthday_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& investor_info::birthday() const {
  // @@protoc_insertion_point(field_get:risk.investor_info.birthday)
  return birthday_.GetNoArena();
}
void investor_info::set_birthday(const ::std::string& value) {
  
  birthday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.investor_info.birthday)
}
#if LANG_CXX11
void investor_info::set_birthday(::std::string&& value) {
  
  birthday_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.investor_info.birthday)
}
#endif
void investor_info::set_birthday(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  birthday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.investor_info.birthday)
}
void investor_info::set_birthday(const char* value, size_t size) {
  
  birthday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.investor_info.birthday)
}
::std::string* investor_info::mutable_birthday() {
  
  // @@protoc_insertion_point(field_mutable:risk.investor_info.birthday)
  return birthday_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* investor_info::release_birthday() {
  // @@protoc_insertion_point(field_release:risk.investor_info.birthday)
  
  return birthday_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void investor_info::set_allocated_birthday(::std::string* birthday) {
  if (birthday != NULL) {
    
  } else {
    
  }
  birthday_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), birthday);
  // @@protoc_insertion_point(field_set_allocated:risk.investor_info.birthday)
}

// string sex = 11;
void investor_info::clear_sex() {
  sex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& investor_info::sex() const {
  // @@protoc_insertion_point(field_get:risk.investor_info.sex)
  return sex_.GetNoArena();
}
void investor_info::set_sex(const ::std::string& value) {
  
  sex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.investor_info.sex)
}
#if LANG_CXX11
void investor_info::set_sex(::std::string&& value) {
  
  sex_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.investor_info.sex)
}
#endif
void investor_info::set_sex(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.investor_info.sex)
}
void investor_info::set_sex(const char* value, size_t size) {
  
  sex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.investor_info.sex)
}
::std::string* investor_info::mutable_sex() {
  
  // @@protoc_insertion_point(field_mutable:risk.investor_info.sex)
  return sex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* investor_info::release_sex() {
  // @@protoc_insertion_point(field_release:risk.investor_info.sex)
  
  return sex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void investor_info::set_allocated_sex(::std::string* sex) {
  if (sex != NULL) {
    
  } else {
    
  }
  sex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sex);
  // @@protoc_insertion_point(field_set_allocated:risk.investor_info.sex)
}

// string profession = 12;
void investor_info::clear_profession() {
  profession_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& investor_info::profession() const {
  // @@protoc_insertion_point(field_get:risk.investor_info.profession)
  return profession_.GetNoArena();
}
void investor_info::set_profession(const ::std::string& value) {
  
  profession_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.investor_info.profession)
}
#if LANG_CXX11
void investor_info::set_profession(::std::string&& value) {
  
  profession_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.investor_info.profession)
}
#endif
void investor_info::set_profession(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  profession_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.investor_info.profession)
}
void investor_info::set_profession(const char* value, size_t size) {
  
  profession_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.investor_info.profession)
}
::std::string* investor_info::mutable_profession() {
  
  // @@protoc_insertion_point(field_mutable:risk.investor_info.profession)
  return profession_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* investor_info::release_profession() {
  // @@protoc_insertion_point(field_release:risk.investor_info.profession)
  
  return profession_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void investor_info::set_allocated_profession(::std::string* profession) {
  if (profession != NULL) {
    
  } else {
    
  }
  profession_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), profession);
  // @@protoc_insertion_point(field_set_allocated:risk.investor_info.profession)
}

// string national = 13;
void investor_info::clear_national() {
  national_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& investor_info::national() const {
  // @@protoc_insertion_point(field_get:risk.investor_info.national)
  return national_.GetNoArena();
}
void investor_info::set_national(const ::std::string& value) {
  
  national_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.investor_info.national)
}
#if LANG_CXX11
void investor_info::set_national(::std::string&& value) {
  
  national_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.investor_info.national)
}
#endif
void investor_info::set_national(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  national_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.investor_info.national)
}
void investor_info::set_national(const char* value, size_t size) {
  
  national_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.investor_info.national)
}
::std::string* investor_info::mutable_national() {
  
  // @@protoc_insertion_point(field_mutable:risk.investor_info.national)
  return national_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* investor_info::release_national() {
  // @@protoc_insertion_point(field_release:risk.investor_info.national)
  
  return national_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void investor_info::set_allocated_national(::std::string* national) {
  if (national != NULL) {
    
  } else {
    
  }
  national_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), national);
  // @@protoc_insertion_point(field_set_allocated:risk.investor_info.national)
}

// double capital = 14;
void investor_info::clear_capital() {
  capital_ = 0;
}
double investor_info::capital() const {
  // @@protoc_insertion_point(field_get:risk.investor_info.capital)
  return capital_;
}
void investor_info::set_capital(double value) {
  
  capital_ = value;
  // @@protoc_insertion_point(field_set:risk.investor_info.capital)
}

// string capitalcurrency = 15;
void investor_info::clear_capitalcurrency() {
  capitalcurrency_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& investor_info::capitalcurrency() const {
  // @@protoc_insertion_point(field_get:risk.investor_info.capitalcurrency)
  return capitalcurrency_.GetNoArena();
}
void investor_info::set_capitalcurrency(const ::std::string& value) {
  
  capitalcurrency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.investor_info.capitalcurrency)
}
#if LANG_CXX11
void investor_info::set_capitalcurrency(::std::string&& value) {
  
  capitalcurrency_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.investor_info.capitalcurrency)
}
#endif
void investor_info::set_capitalcurrency(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  capitalcurrency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.investor_info.capitalcurrency)
}
void investor_info::set_capitalcurrency(const char* value, size_t size) {
  
  capitalcurrency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.investor_info.capitalcurrency)
}
::std::string* investor_info::mutable_capitalcurrency() {
  
  // @@protoc_insertion_point(field_mutable:risk.investor_info.capitalcurrency)
  return capitalcurrency_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* investor_info::release_capitalcurrency() {
  // @@protoc_insertion_point(field_release:risk.investor_info.capitalcurrency)
  
  return capitalcurrency_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void investor_info::set_allocated_capitalcurrency(::std::string* capitalcurrency) {
  if (capitalcurrency != NULL) {
    
  } else {
    
  }
  capitalcurrency_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), capitalcurrency);
  // @@protoc_insertion_point(field_set_allocated:risk.investor_info.capitalcurrency)
}

// string telephone = 16;
void investor_info::clear_telephone() {
  telephone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& investor_info::telephone() const {
  // @@protoc_insertion_point(field_get:risk.investor_info.telephone)
  return telephone_.GetNoArena();
}
void investor_info::set_telephone(const ::std::string& value) {
  
  telephone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.investor_info.telephone)
}
#if LANG_CXX11
void investor_info::set_telephone(::std::string&& value) {
  
  telephone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.investor_info.telephone)
}
#endif
void investor_info::set_telephone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  telephone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.investor_info.telephone)
}
void investor_info::set_telephone(const char* value, size_t size) {
  
  telephone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.investor_info.telephone)
}
::std::string* investor_info::mutable_telephone() {
  
  // @@protoc_insertion_point(field_mutable:risk.investor_info.telephone)
  return telephone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* investor_info::release_telephone() {
  // @@protoc_insertion_point(field_release:risk.investor_info.telephone)
  
  return telephone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void investor_info::set_allocated_telephone(::std::string* telephone) {
  if (telephone != NULL) {
    
  } else {
    
  }
  telephone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), telephone);
  // @@protoc_insertion_point(field_set_allocated:risk.investor_info.telephone)
}

// string address = 17;
void investor_info::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& investor_info::address() const {
  // @@protoc_insertion_point(field_get:risk.investor_info.address)
  return address_.GetNoArena();
}
void investor_info::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.investor_info.address)
}
#if LANG_CXX11
void investor_info::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.investor_info.address)
}
#endif
void investor_info::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.investor_info.address)
}
void investor_info::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.investor_info.address)
}
::std::string* investor_info::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:risk.investor_info.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* investor_info::release_address() {
  // @@protoc_insertion_point(field_release:risk.investor_info.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void investor_info::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:risk.investor_info.address)
}

// string zipcode = 18;
void investor_info::clear_zipcode() {
  zipcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& investor_info::zipcode() const {
  // @@protoc_insertion_point(field_get:risk.investor_info.zipcode)
  return zipcode_.GetNoArena();
}
void investor_info::set_zipcode(const ::std::string& value) {
  
  zipcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.investor_info.zipcode)
}
#if LANG_CXX11
void investor_info::set_zipcode(::std::string&& value) {
  
  zipcode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.investor_info.zipcode)
}
#endif
void investor_info::set_zipcode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zipcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.investor_info.zipcode)
}
void investor_info::set_zipcode(const char* value, size_t size) {
  
  zipcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.investor_info.zipcode)
}
::std::string* investor_info::mutable_zipcode() {
  
  // @@protoc_insertion_point(field_mutable:risk.investor_info.zipcode)
  return zipcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* investor_info::release_zipcode() {
  // @@protoc_insertion_point(field_release:risk.investor_info.zipcode)
  
  return zipcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void investor_info::set_allocated_zipcode(::std::string* zipcode) {
  if (zipcode != NULL) {
    
  } else {
    
  }
  zipcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zipcode);
  // @@protoc_insertion_point(field_set_allocated:risk.investor_info.zipcode)
}

// string email = 19;
void investor_info::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& investor_info::email() const {
  // @@protoc_insertion_point(field_get:risk.investor_info.email)
  return email_.GetNoArena();
}
void investor_info::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.investor_info.email)
}
#if LANG_CXX11
void investor_info::set_email(::std::string&& value) {
  
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.investor_info.email)
}
#endif
void investor_info::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.investor_info.email)
}
void investor_info::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.investor_info.email)
}
::std::string* investor_info::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:risk.investor_info.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* investor_info::release_email() {
  // @@protoc_insertion_point(field_release:risk.investor_info.email)
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void investor_info::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:risk.investor_info.email)
}

// string memo = 20;
void investor_info::clear_memo() {
  memo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& investor_info::memo() const {
  // @@protoc_insertion_point(field_get:risk.investor_info.memo)
  return memo_.GetNoArena();
}
void investor_info::set_memo(const ::std::string& value) {
  
  memo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.investor_info.memo)
}
#if LANG_CXX11
void investor_info::set_memo(::std::string&& value) {
  
  memo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.investor_info.memo)
}
#endif
void investor_info::set_memo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  memo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.investor_info.memo)
}
void investor_info::set_memo(const char* value, size_t size) {
  
  memo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.investor_info.memo)
}
::std::string* investor_info::mutable_memo() {
  
  // @@protoc_insertion_point(field_mutable:risk.investor_info.memo)
  return memo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* investor_info::release_memo() {
  // @@protoc_insertion_point(field_release:risk.investor_info.memo)
  
  return memo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void investor_info::set_allocated_memo(::std::string* memo) {
  if (memo != NULL) {
    
  } else {
    
  }
  memo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), memo);
  // @@protoc_insertion_point(field_set_allocated:risk.investor_info.memo)
}

// string openinvestorname = 21;
void investor_info::clear_openinvestorname() {
  openinvestorname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& investor_info::openinvestorname() const {
  // @@protoc_insertion_point(field_get:risk.investor_info.openinvestorname)
  return openinvestorname_.GetNoArena();
}
void investor_info::set_openinvestorname(const ::std::string& value) {
  
  openinvestorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.investor_info.openinvestorname)
}
#if LANG_CXX11
void investor_info::set_openinvestorname(::std::string&& value) {
  
  openinvestorname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.investor_info.openinvestorname)
}
#endif
void investor_info::set_openinvestorname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  openinvestorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.investor_info.openinvestorname)
}
void investor_info::set_openinvestorname(const char* value, size_t size) {
  
  openinvestorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.investor_info.openinvestorname)
}
::std::string* investor_info::mutable_openinvestorname() {
  
  // @@protoc_insertion_point(field_mutable:risk.investor_info.openinvestorname)
  return openinvestorname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* investor_info::release_openinvestorname() {
  // @@protoc_insertion_point(field_release:risk.investor_info.openinvestorname)
  
  return openinvestorname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void investor_info::set_allocated_openinvestorname(::std::string* openinvestorname) {
  if (openinvestorname != NULL) {
    
  } else {
    
  }
  openinvestorname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), openinvestorname);
  // @@protoc_insertion_point(field_set_allocated:risk.investor_info.openinvestorname)
}

// string orderinvestorname = 22;
void investor_info::clear_orderinvestorname() {
  orderinvestorname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& investor_info::orderinvestorname() const {
  // @@protoc_insertion_point(field_get:risk.investor_info.orderinvestorname)
  return orderinvestorname_.GetNoArena();
}
void investor_info::set_orderinvestorname(const ::std::string& value) {
  
  orderinvestorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.investor_info.orderinvestorname)
}
#if LANG_CXX11
void investor_info::set_orderinvestorname(::std::string&& value) {
  
  orderinvestorname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.investor_info.orderinvestorname)
}
#endif
void investor_info::set_orderinvestorname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  orderinvestorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.investor_info.orderinvestorname)
}
void investor_info::set_orderinvestorname(const char* value, size_t size) {
  
  orderinvestorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.investor_info.orderinvestorname)
}
::std::string* investor_info::mutable_orderinvestorname() {
  
  // @@protoc_insertion_point(field_mutable:risk.investor_info.orderinvestorname)
  return orderinvestorname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* investor_info::release_orderinvestorname() {
  // @@protoc_insertion_point(field_release:risk.investor_info.orderinvestorname)
  
  return orderinvestorname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void investor_info::set_allocated_orderinvestorname(::std::string* orderinvestorname) {
  if (orderinvestorname != NULL) {
    
  } else {
    
  }
  orderinvestorname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderinvestorname);
  // @@protoc_insertion_point(field_set_allocated:risk.investor_info.orderinvestorname)
}

// string fundinvestorname = 23;
void investor_info::clear_fundinvestorname() {
  fundinvestorname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& investor_info::fundinvestorname() const {
  // @@protoc_insertion_point(field_get:risk.investor_info.fundinvestorname)
  return fundinvestorname_.GetNoArena();
}
void investor_info::set_fundinvestorname(const ::std::string& value) {
  
  fundinvestorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.investor_info.fundinvestorname)
}
#if LANG_CXX11
void investor_info::set_fundinvestorname(::std::string&& value) {
  
  fundinvestorname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.investor_info.fundinvestorname)
}
#endif
void investor_info::set_fundinvestorname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fundinvestorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.investor_info.fundinvestorname)
}
void investor_info::set_fundinvestorname(const char* value, size_t size) {
  
  fundinvestorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.investor_info.fundinvestorname)
}
::std::string* investor_info::mutable_fundinvestorname() {
  
  // @@protoc_insertion_point(field_mutable:risk.investor_info.fundinvestorname)
  return fundinvestorname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* investor_info::release_fundinvestorname() {
  // @@protoc_insertion_point(field_release:risk.investor_info.fundinvestorname)
  
  return fundinvestorname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void investor_info::set_allocated_fundinvestorname(::std::string* fundinvestorname) {
  if (fundinvestorname != NULL) {
    
  } else {
    
  }
  fundinvestorname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fundinvestorname);
  // @@protoc_insertion_point(field_set_allocated:risk.investor_info.fundinvestorname)
}

// string settleinvestorname = 24;
void investor_info::clear_settleinvestorname() {
  settleinvestorname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& investor_info::settleinvestorname() const {
  // @@protoc_insertion_point(field_get:risk.investor_info.settleinvestorname)
  return settleinvestorname_.GetNoArena();
}
void investor_info::set_settleinvestorname(const ::std::string& value) {
  
  settleinvestorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.investor_info.settleinvestorname)
}
#if LANG_CXX11
void investor_info::set_settleinvestorname(::std::string&& value) {
  
  settleinvestorname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.investor_info.settleinvestorname)
}
#endif
void investor_info::set_settleinvestorname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  settleinvestorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.investor_info.settleinvestorname)
}
void investor_info::set_settleinvestorname(const char* value, size_t size) {
  
  settleinvestorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.investor_info.settleinvestorname)
}
::std::string* investor_info::mutable_settleinvestorname() {
  
  // @@protoc_insertion_point(field_mutable:risk.investor_info.settleinvestorname)
  return settleinvestorname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* investor_info::release_settleinvestorname() {
  // @@protoc_insertion_point(field_release:risk.investor_info.settleinvestorname)
  
  return settleinvestorname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void investor_info::set_allocated_settleinvestorname(::std::string* settleinvestorname) {
  if (settleinvestorname != NULL) {
    
  } else {
    
  }
  settleinvestorname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), settleinvestorname);
  // @@protoc_insertion_point(field_set_allocated:risk.investor_info.settleinvestorname)
}

// int32 isactive = 25;
void investor_info::clear_isactive() {
  isactive_ = 0;
}
::google::protobuf::int32 investor_info::isactive() const {
  // @@protoc_insertion_point(field_get:risk.investor_info.isactive)
  return isactive_;
}
void investor_info::set_isactive(::google::protobuf::int32 value) {
  
  isactive_ = value;
  // @@protoc_insertion_point(field_set:risk.investor_info.isactive)
}

// string departmentid = 26;
void investor_info::clear_departmentid() {
  departmentid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& investor_info::departmentid() const {
  // @@protoc_insertion_point(field_get:risk.investor_info.departmentid)
  return departmentid_.GetNoArena();
}
void investor_info::set_departmentid(const ::std::string& value) {
  
  departmentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.investor_info.departmentid)
}
#if LANG_CXX11
void investor_info::set_departmentid(::std::string&& value) {
  
  departmentid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.investor_info.departmentid)
}
#endif
void investor_info::set_departmentid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  departmentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.investor_info.departmentid)
}
void investor_info::set_departmentid(const char* value, size_t size) {
  
  departmentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.investor_info.departmentid)
}
::std::string* investor_info::mutable_departmentid() {
  
  // @@protoc_insertion_point(field_mutable:risk.investor_info.departmentid)
  return departmentid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* investor_info::release_departmentid() {
  // @@protoc_insertion_point(field_release:risk.investor_info.departmentid)
  
  return departmentid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void investor_info::set_allocated_departmentid(::std::string* departmentid) {
  if (departmentid != NULL) {
    
  } else {
    
  }
  departmentid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), departmentid);
  // @@protoc_insertion_point(field_set_allocated:risk.investor_info.departmentid)
}

// string investorfullname = 27;
void investor_info::clear_investorfullname() {
  investorfullname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& investor_info::investorfullname() const {
  // @@protoc_insertion_point(field_get:risk.investor_info.investorfullname)
  return investorfullname_.GetNoArena();
}
void investor_info::set_investorfullname(const ::std::string& value) {
  
  investorfullname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.investor_info.investorfullname)
}
#if LANG_CXX11
void investor_info::set_investorfullname(::std::string&& value) {
  
  investorfullname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.investor_info.investorfullname)
}
#endif
void investor_info::set_investorfullname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  investorfullname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.investor_info.investorfullname)
}
void investor_info::set_investorfullname(const char* value, size_t size) {
  
  investorfullname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.investor_info.investorfullname)
}
::std::string* investor_info::mutable_investorfullname() {
  
  // @@protoc_insertion_point(field_mutable:risk.investor_info.investorfullname)
  return investorfullname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* investor_info::release_investorfullname() {
  // @@protoc_insertion_point(field_release:risk.investor_info.investorfullname)
  
  return investorfullname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void investor_info::set_allocated_investorfullname(::std::string* investorfullname) {
  if (investorfullname != NULL) {
    
  } else {
    
  }
  investorfullname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), investorfullname);
  // @@protoc_insertion_point(field_set_allocated:risk.investor_info.investorfullname)
}

// int32 isemail = 28;
void investor_info::clear_isemail() {
  isemail_ = 0;
}
::google::protobuf::int32 investor_info::isemail() const {
  // @@protoc_insertion_point(field_get:risk.investor_info.isemail)
  return isemail_;
}
void investor_info::set_isemail(::google::protobuf::int32 value) {
  
  isemail_ = value;
  // @@protoc_insertion_point(field_set:risk.investor_info.isemail)
}

// int32 issms = 29;
void investor_info::clear_issms() {
  issms_ = 0;
}
::google::protobuf::int32 investor_info::issms() const {
  // @@protoc_insertion_point(field_get:risk.investor_info.issms)
  return issms_;
}
void investor_info::set_issms(::google::protobuf::int32 value) {
  
  issms_ = value;
  // @@protoc_insertion_point(field_set:risk.investor_info.issms)
}

// int32 isusingotp = 30;
void investor_info::clear_isusingotp() {
  isusingotp_ = 0;
}
::google::protobuf::int32 investor_info::isusingotp() const {
  // @@protoc_insertion_point(field_get:risk.investor_info.isusingotp)
  return isusingotp_;
}
void investor_info::set_isusingotp(::google::protobuf::int32 value) {
  
  isusingotp_ = value;
  // @@protoc_insertion_point(field_set:risk.investor_info.isusingotp)
}

// string clientregion = 31;
void investor_info::clear_clientregion() {
  clientregion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& investor_info::clientregion() const {
  // @@protoc_insertion_point(field_get:risk.investor_info.clientregion)
  return clientregion_.GetNoArena();
}
void investor_info::set_clientregion(const ::std::string& value) {
  
  clientregion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.investor_info.clientregion)
}
#if LANG_CXX11
void investor_info::set_clientregion(::std::string&& value) {
  
  clientregion_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.investor_info.clientregion)
}
#endif
void investor_info::set_clientregion(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  clientregion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.investor_info.clientregion)
}
void investor_info::set_clientregion(const char* value, size_t size) {
  
  clientregion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.investor_info.clientregion)
}
::std::string* investor_info::mutable_clientregion() {
  
  // @@protoc_insertion_point(field_mutable:risk.investor_info.clientregion)
  return clientregion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* investor_info::release_clientregion() {
  // @@protoc_insertion_point(field_release:risk.investor_info.clientregion)
  
  return clientregion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void investor_info::set_allocated_clientregion(::std::string* clientregion) {
  if (clientregion != NULL) {
    
  } else {
    
  }
  clientregion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientregion);
  // @@protoc_insertion_point(field_set_allocated:risk.investor_info.clientregion)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rsp_investor_info::kHeaderFieldNumber;
const int rsp_investor_info::kInfosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rsp_investor_info::rsp_investor_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.rsp_investor_info)
}
rsp_investor_info::rsp_investor_info(const rsp_investor_info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      infos_(from.infos_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::risk::rsp_head_info(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:risk.rsp_investor_info)
}

void rsp_investor_info::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

rsp_investor_info::~rsp_investor_info() {
  // @@protoc_insertion_point(destructor:risk.rsp_investor_info)
  SharedDtor();
}

void rsp_investor_info::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void rsp_investor_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rsp_investor_info::descriptor() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const rsp_investor_info& rsp_investor_info::default_instance() {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

rsp_investor_info* rsp_investor_info::New(::google::protobuf::Arena* arena) const {
  rsp_investor_info* n = new rsp_investor_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rsp_investor_info::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.rsp_investor_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  infos_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool rsp_investor_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.rsp_investor_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .risk.rsp_head_info header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .risk.investor_info infos = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.rsp_investor_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.rsp_investor_info)
  return false;
#undef DO_
}

void rsp_investor_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.rsp_investor_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .risk.rsp_head_info header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .risk.investor_info infos = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->infos_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->infos(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.rsp_investor_info)
}

::google::protobuf::uint8* rsp_investor_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.rsp_investor_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .risk.rsp_head_info header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // repeated .risk.investor_info infos = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->infos_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->infos(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.rsp_investor_info)
  return target;
}

size_t rsp_investor_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.rsp_investor_info)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .risk.investor_info infos = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->infos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->infos(static_cast<int>(i)));
    }
  }

  // .risk.rsp_head_info header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rsp_investor_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.rsp_investor_info)
  GOOGLE_DCHECK_NE(&from, this);
  const rsp_investor_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const rsp_investor_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.rsp_investor_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.rsp_investor_info)
    MergeFrom(*source);
  }
}

void rsp_investor_info::MergeFrom(const rsp_investor_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.rsp_investor_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  infos_.MergeFrom(from.infos_);
  if (from.has_header()) {
    mutable_header()->::risk::rsp_head_info::MergeFrom(from.header());
  }
}

void rsp_investor_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.rsp_investor_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rsp_investor_info::CopyFrom(const rsp_investor_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.rsp_investor_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rsp_investor_info::IsInitialized() const {
  return true;
}

void rsp_investor_info::Swap(rsp_investor_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rsp_investor_info::InternalSwap(rsp_investor_info* other) {
  using std::swap;
  infos_.InternalSwap(&other->infos_);
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rsp_investor_info::GetMetadata() const {
  protobuf_riskapi_5fdata_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5fdata_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rsp_investor_info

// .risk.rsp_head_info header = 1;
bool rsp_investor_info::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void rsp_investor_info::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::risk::rsp_head_info& rsp_investor_info::header() const {
  const ::risk::rsp_head_info* p = header_;
  // @@protoc_insertion_point(field_get:risk.rsp_investor_info.header)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::rsp_head_info*>(
      &::risk::_rsp_head_info_default_instance_);
}
::risk::rsp_head_info* rsp_investor_info::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::risk::rsp_head_info;
  }
  // @@protoc_insertion_point(field_mutable:risk.rsp_investor_info.header)
  return header_;
}
::risk::rsp_head_info* rsp_investor_info::release_header() {
  // @@protoc_insertion_point(field_release:risk.rsp_investor_info.header)
  
  ::risk::rsp_head_info* temp = header_;
  header_ = NULL;
  return temp;
}
void rsp_investor_info::set_allocated_header(::risk::rsp_head_info* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.rsp_investor_info.header)
}

// repeated .risk.investor_info infos = 2;
int rsp_investor_info::infos_size() const {
  return infos_.size();
}
void rsp_investor_info::clear_infos() {
  infos_.Clear();
}
const ::risk::investor_info& rsp_investor_info::infos(int index) const {
  // @@protoc_insertion_point(field_get:risk.rsp_investor_info.infos)
  return infos_.Get(index);
}
::risk::investor_info* rsp_investor_info::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:risk.rsp_investor_info.infos)
  return infos_.Mutable(index);
}
::risk::investor_info* rsp_investor_info::add_infos() {
  // @@protoc_insertion_point(field_add:risk.rsp_investor_info.infos)
  return infos_.Add();
}
::google::protobuf::RepeatedPtrField< ::risk::investor_info >*
rsp_investor_info::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:risk.rsp_investor_info.infos)
  return &infos_;
}
const ::google::protobuf::RepeatedPtrField< ::risk::investor_info >&
rsp_investor_info::infos() const {
  // @@protoc_insertion_point(field_list:risk.rsp_investor_info.infos)
  return infos_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace risk

// @@protoc_insertion_point(global_scope)
