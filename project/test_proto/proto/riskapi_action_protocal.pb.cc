// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: riskapi_action_protocal.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "riskapi_action_protocal.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace risk {
class req_risker_loginDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<req_risker_login>
     _instance;
} _req_risker_login_default_instance_;
class req_instrument_listDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<req_instrument_list>
     _instance;
} _req_instrument_list_default_instance_;
class subscribe_quoteDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<subscribe_quote>
     _instance;
} _subscribe_quote_default_instance_;
class unsubscribe_quoteDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<unsubscribe_quote>
     _instance;
} _unsubscribe_quote_default_instance_;
class req_positionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<req_position>
     _instance;
} _req_position_default_instance_;
class subscribe_positionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<subscribe_position>
     _instance;
} _subscribe_position_default_instance_;
class unsubscribe_positionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<unsubscribe_position>
     _instance;
} _unsubscribe_position_default_instance_;
class req_tradeDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<req_trade>
     _instance;
} _req_trade_default_instance_;
class req_orderDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<req_order>
     _instance;
} _req_order_default_instance_;
class private_topic_infoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<private_topic_info>
     _instance;
} _private_topic_info_default_instance_;
class subscribe_private_topicDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<subscribe_private_topic>
     _instance;
} _subscribe_private_topic_default_instance_;
class unsubscribe_private_topicDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<unsubscribe_private_topic>
     _instance;
} _unsubscribe_private_topic_default_instance_;
class req_sync_accountDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<req_sync_account>
     _instance;
} _req_sync_account_default_instance_;
class subscribe_sync_accountDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<subscribe_sync_account>
     _instance;
} _subscribe_sync_account_default_instance_;
class unsubscribe_sync_accountDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<unsubscribe_sync_account>
     _instance;
} _unsubscribe_sync_account_default_instance_;
class req_marginDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<req_margin>
     _instance;
} _req_margin_default_instance_;
class subscribe_marginDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<subscribe_margin>
     _instance;
} _subscribe_margin_default_instance_;
class unsubscribe_marginDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<unsubscribe_margin>
     _instance;
} _unsubscribe_margin_default_instance_;
class req_risker_investorDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<req_risker_investor>
     _instance;
} _req_risker_investor_default_instance_;
class sys_groupDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<sys_group>
     _instance;
} _sys_group_default_instance_;
class req_groupsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<req_groups>
     _instance;
} _req_groups_default_instance_;
class req_add_groupDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<req_add_group>
     _instance;
} _req_add_group_default_instance_;
class req_del_groupDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<req_del_group>
     _instance;
} _req_del_group_default_instance_;
class req_edit_groupDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<req_edit_group>
     _instance;
} _req_edit_group_default_instance_;
class req_insert_investors_to_groupDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<req_insert_investors_to_group>
     _instance;
} _req_insert_investors_to_group_default_instance_;
class req_remove_investors_from_groupDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<req_remove_investors_from_group>
     _instance;
} _req_remove_investors_from_group_default_instance_;
class sub_option_position_riskDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<sub_option_position_risk>
     _instance;
} _sub_option_position_risk_default_instance_;
class unsub_option_position_riskDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<unsub_option_position_risk>
     _instance;
} _unsub_option_position_risk_default_instance_;
class req_whatifDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<req_whatif>
     _instance;
} _req_whatif_default_instance_;
class req_option_argvDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<req_option_argv>
     _instance;
} _req_option_argv_default_instance_;
class whatif_argvDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<whatif_argv>
     _instance;
} _whatif_argv_default_instance_;
class sub_whatifDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<sub_whatif>
     _instance;
} _sub_whatif_default_instance_;
class req_investor_infoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<req_investor_info>
     _instance;
} _req_investor_info_default_instance_;

namespace protobuf_riskapi_5faction_5fprotocal_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[33];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_risker_login, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_risker_login, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_risker_login, riskerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_risker_login, password_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_instrument_list, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_instrument_list, requestid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(subscribe_quote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(subscribe_quote, instrument_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unsubscribe_quote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unsubscribe_quote, instrument_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_position, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_position, investor_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(subscribe_position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(subscribe_position, investor_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unsubscribe_position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unsubscribe_position, investor_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_trade, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_trade, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_trade, investor_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_order, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_order, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_order, investor_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(private_topic_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(private_topic_info, investor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(private_topic_info, id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(subscribe_private_topic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(subscribe_private_topic, field_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unsubscribe_private_topic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unsubscribe_private_topic, investor_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_sync_account, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_sync_account, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_sync_account, investor_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(subscribe_sync_account, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(subscribe_sync_account, investor_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unsubscribe_sync_account, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unsubscribe_sync_account, investor_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_margin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_margin, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_margin, investor_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(subscribe_margin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(subscribe_margin, investor_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unsubscribe_margin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unsubscribe_margin, investor_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_risker_investor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_risker_investor, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_risker_investor, userid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sys_group, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sys_group, riskgroupid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sys_group, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sys_group, desc_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_groups, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_groups, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_groups, userid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_add_group, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_add_group, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_add_group, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_add_group, group_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_del_group, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_del_group, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_del_group, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_del_group, riskgroupid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_edit_group, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_edit_group, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_edit_group, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_edit_group, group_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_insert_investors_to_group, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_insert_investors_to_group, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_insert_investors_to_group, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_insert_investors_to_group, riskgroupid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_insert_investors_to_group, investor_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_remove_investors_from_group, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_remove_investors_from_group, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_remove_investors_from_group, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_remove_investors_from_group, riskgroupid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_remove_investors_from_group, investor_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sub_option_position_risk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sub_option_position_risk, model_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sub_option_position_risk, instrument_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unsub_option_position_risk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unsub_option_position_risk, model_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unsub_option_position_risk, instrument_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_whatif, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_whatif, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_whatif, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_whatif, model_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_whatif, instrument_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_whatif, range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_whatif, base_value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_option_argv, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_option_argv, requestid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(whatif_argv, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(whatif_argv, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(whatif_argv, instrument_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(whatif_argv, range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(whatif_argv, base_value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sub_whatif, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sub_whatif, infos_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_investor_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_investor_info, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_investor_info, investor_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(req_risker_login)},
  { 8, -1, sizeof(req_instrument_list)},
  { 14, -1, sizeof(subscribe_quote)},
  { 20, -1, sizeof(unsubscribe_quote)},
  { 26, -1, sizeof(req_position)},
  { 33, -1, sizeof(subscribe_position)},
  { 39, -1, sizeof(unsubscribe_position)},
  { 45, -1, sizeof(req_trade)},
  { 52, -1, sizeof(req_order)},
  { 59, -1, sizeof(private_topic_info)},
  { 66, -1, sizeof(subscribe_private_topic)},
  { 72, -1, sizeof(unsubscribe_private_topic)},
  { 78, -1, sizeof(req_sync_account)},
  { 85, -1, sizeof(subscribe_sync_account)},
  { 91, -1, sizeof(unsubscribe_sync_account)},
  { 97, -1, sizeof(req_margin)},
  { 104, -1, sizeof(subscribe_margin)},
  { 110, -1, sizeof(unsubscribe_margin)},
  { 116, -1, sizeof(req_risker_investor)},
  { 123, -1, sizeof(sys_group)},
  { 131, -1, sizeof(req_groups)},
  { 138, -1, sizeof(req_add_group)},
  { 146, -1, sizeof(req_del_group)},
  { 154, -1, sizeof(req_edit_group)},
  { 162, -1, sizeof(req_insert_investors_to_group)},
  { 171, -1, sizeof(req_remove_investors_from_group)},
  { 180, -1, sizeof(sub_option_position_risk)},
  { 187, -1, sizeof(unsub_option_position_risk)},
  { 194, -1, sizeof(req_whatif)},
  { 205, -1, sizeof(req_option_argv)},
  { 211, -1, sizeof(whatif_argv)},
  { 220, -1, sizeof(sub_whatif)},
  { 226, -1, sizeof(req_investor_info)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_req_risker_login_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_req_instrument_list_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_subscribe_quote_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_unsubscribe_quote_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_req_position_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_subscribe_position_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_unsubscribe_position_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_req_trade_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_req_order_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_private_topic_info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_subscribe_private_topic_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_unsubscribe_private_topic_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_req_sync_account_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_subscribe_sync_account_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_unsubscribe_sync_account_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_req_margin_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_subscribe_margin_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_unsubscribe_margin_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_req_risker_investor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_sys_group_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_req_groups_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_req_add_group_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_req_del_group_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_req_edit_group_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_req_insert_investors_to_group_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_req_remove_investors_from_group_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_sub_option_position_risk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_unsub_option_position_risk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_req_whatif_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_req_option_argv_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_whatif_argv_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_sub_whatif_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_req_investor_info_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "riskapi_action_protocal.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 33);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _req_risker_login_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_req_risker_login_default_instance_);_req_instrument_list_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_req_instrument_list_default_instance_);_subscribe_quote_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_subscribe_quote_default_instance_);_unsubscribe_quote_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_unsubscribe_quote_default_instance_);_req_position_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_req_position_default_instance_);_subscribe_position_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_subscribe_position_default_instance_);_unsubscribe_position_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_unsubscribe_position_default_instance_);_req_trade_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_req_trade_default_instance_);_req_order_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_req_order_default_instance_);_private_topic_info_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_private_topic_info_default_instance_);_subscribe_private_topic_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_subscribe_private_topic_default_instance_);_unsubscribe_private_topic_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_unsubscribe_private_topic_default_instance_);_req_sync_account_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_req_sync_account_default_instance_);_subscribe_sync_account_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_subscribe_sync_account_default_instance_);_unsubscribe_sync_account_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_unsubscribe_sync_account_default_instance_);_req_margin_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_req_margin_default_instance_);_subscribe_margin_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_subscribe_margin_default_instance_);_unsubscribe_margin_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_unsubscribe_margin_default_instance_);_req_risker_investor_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_req_risker_investor_default_instance_);_sys_group_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_sys_group_default_instance_);_req_groups_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_req_groups_default_instance_);_req_add_group_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_req_add_group_default_instance_);_req_del_group_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_req_del_group_default_instance_);_req_edit_group_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_req_edit_group_default_instance_);_req_insert_investors_to_group_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_req_insert_investors_to_group_default_instance_);_req_remove_investors_from_group_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_req_remove_investors_from_group_default_instance_);_sub_option_position_risk_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_sub_option_position_risk_default_instance_);_unsub_option_position_risk_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_unsub_option_position_risk_default_instance_);_req_whatif_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_req_whatif_default_instance_);_req_option_argv_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_req_option_argv_default_instance_);_whatif_argv_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_whatif_argv_default_instance_);_sub_whatif_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_sub_whatif_default_instance_);_req_investor_info_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_req_investor_info_default_instance_);_req_add_group_default_instance_._instance.get_mutable()->group_ = const_cast< ::risk::sys_group*>(
      ::risk::sys_group::internal_default_instance());
  _req_edit_group_default_instance_._instance.get_mutable()->group_ = const_cast< ::risk::sys_group*>(
      ::risk::sys_group::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\035riskapi_action_protocal.proto\022\004risk\"I\n"
      "\020req_risker_login\022\021\n\trequestid\030\001 \001(\005\022\020\n\010"
      "riskerid\030\002 \001(\t\022\020\n\010password\030\003 \001(\t\"(\n\023req_"
      "instrument_list\022\021\n\trequestid\030\001 \001(\005\"%\n\017su"
      "bscribe_quote\022\022\n\ninstrument\030\001 \003(\t\"\'\n\021uns"
      "ubscribe_quote\022\022\n\ninstrument\030\001 \003(\t\"3\n\014re"
      "q_position\022\021\n\trequestid\030\001 \001(\005\022\020\n\010investo"
      "r\030\002 \003(\t\"&\n\022subscribe_position\022\020\n\010investo"
      "r\030\001 \003(\t\"(\n\024unsubscribe_position\022\020\n\010inves"
      "tor\030\001 \003(\t\"0\n\treq_trade\022\021\n\trequestid\030\001 \001("
      "\005\022\020\n\010investor\030\002 \003(\t\"0\n\treq_order\022\021\n\trequ"
      "estid\030\001 \001(\005\022\020\n\010investor\030\002 \003(\t\"2\n\022private"
      "_topic_info\022\020\n\010investor\030\001 \001(\t\022\n\n\002id\030\002 \001("
      "\005\"B\n\027subscribe_private_topic\022\'\n\005field\030\001 "
      "\003(\0132\030.risk.private_topic_info\"-\n\031unsubsc"
      "ribe_private_topic\022\020\n\010investor\030\001 \003(\t\"7\n\020"
      "req_sync_account\022\021\n\trequestid\030\001 \001(\005\022\020\n\010i"
      "nvestor\030\002 \003(\t\"*\n\026subscribe_sync_account\022"
      "\020\n\010investor\030\001 \003(\t\",\n\030unsubscribe_sync_ac"
      "count\022\020\n\010investor\030\001 \003(\t\"1\n\nreq_margin\022\021\n"
      "\trequestid\030\001 \001(\005\022\020\n\010investor\030\002 \003(\t\"$\n\020su"
      "bscribe_margin\022\020\n\010investor\030\001 \003(\t\"&\n\022unsu"
      "bscribe_margin\022\020\n\010investor\030\001 \003(\t\"8\n\023req_"
      "risker_investor\022\021\n\trequestid\030\001 \001(\005\022\016\n\006us"
      "erid\030\002 \001(\t\"<\n\tsys_group\022\023\n\013riskgroupid\030\001"
      " \001(\t\022\014\n\004name\030\002 \001(\t\022\014\n\004desc\030\003 \001(\t\"/\n\nreq_"
      "groups\022\021\n\trequestid\030\001 \001(\005\022\016\n\006userid\030\002 \001("
      "\t\"R\n\rreq_add_group\022\021\n\trequestid\030\001 \001(\005\022\016\n"
      "\006userid\030\002 \001(\t\022\036\n\005group\030\003 \001(\0132\017.risk.sys_"
      "group\"G\n\rreq_del_group\022\021\n\trequestid\030\001 \001("
      "\005\022\016\n\006userid\030\002 \001(\t\022\023\n\013riskgroupid\030\003 \001(\t\"S"
      "\n\016req_edit_group\022\021\n\trequestid\030\001 \001(\005\022\016\n\006u"
      "serid\030\002 \001(\t\022\036\n\005group\030\003 \001(\0132\017.risk.sys_gr"
      "oup\"i\n\035req_insert_investors_to_group\022\021\n\t"
      "requestid\030\001 \001(\005\022\016\n\006userid\030\002 \001(\t\022\023\n\013riskg"
      "roupid\030\003 \001(\t\022\020\n\010investor\030\004 \003(\t\"k\n\037req_re"
      "move_investors_from_group\022\021\n\trequestid\030\001"
      " \001(\005\022\016\n\006userid\030\002 \001(\t\022\023\n\013riskgroupid\030\003 \001("
      "\t\022\020\n\010investor\030\004 \003(\t\"=\n\030sub_option_positi"
      "on_risk\022\r\n\005model\030\001 \001(\005\022\022\n\ninstrument\030\002 \003"
      "(\t\"\?\n\032unsub_option_position_risk\022\r\n\005mode"
      "l\030\001 \001(\005\022\022\n\ninstrument\030\002 \003(\t\"s\n\nreq_whati"
      "f\022\021\n\trequestid\030\001 \001(\005\022\014\n\004type\030\002 \001(\005\022\r\n\005mo"
      "del\030\003 \001(\005\022\022\n\ninstrument\030\004 \001(\t\022\r\n\005range\030\005"
      " \001(\001\022\022\n\nbase_value\030\006 \001(\001\"$\n\017req_option_a"
      "rgv\022\021\n\trequestid\030\001 \001(\005\"R\n\013whatif_argv\022\014\n"
      "\004type\030\001 \001(\005\022\022\n\ninstrument\030\002 \001(\t\022\r\n\005range"
      "\030\003 \001(\001\022\022\n\nbase_value\030\004 \001(\001\".\n\nsub_whatif"
      "\022 \n\005infos\030\001 \003(\0132\021.risk.whatif_argv\"8\n\021re"
      "q_investor_info\022\021\n\trequestid\030\001 \001(\005\022\020\n\010in"
      "vestor\030\002 \003(\tb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2020);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "riskapi_action_protocal.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_riskapi_5faction_5fprotocal_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int req_risker_login::kRequestidFieldNumber;
const int req_risker_login::kRiskeridFieldNumber;
const int req_risker_login::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

req_risker_login::req_risker_login()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5faction_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.req_risker_login)
}
req_risker_login::req_risker_login(const req_risker_login& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  riskerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.riskerid().size() > 0) {
    riskerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.riskerid_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.password().size() > 0) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  requestid_ = from.requestid_;
  // @@protoc_insertion_point(copy_constructor:risk.req_risker_login)
}

void req_risker_login::SharedCtor() {
  riskerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestid_ = 0;
  _cached_size_ = 0;
}

req_risker_login::~req_risker_login() {
  // @@protoc_insertion_point(destructor:risk.req_risker_login)
  SharedDtor();
}

void req_risker_login::SharedDtor() {
  riskerid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void req_risker_login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* req_risker_login::descriptor() {
  protobuf_riskapi_5faction_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5faction_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const req_risker_login& req_risker_login::default_instance() {
  protobuf_riskapi_5faction_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

req_risker_login* req_risker_login::New(::google::protobuf::Arena* arena) const {
  req_risker_login* n = new req_risker_login;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void req_risker_login::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.req_risker_login)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  riskerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestid_ = 0;
  _internal_metadata_.Clear();
}

bool req_risker_login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.req_risker_login)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 requestid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string riskerid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_riskerid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->riskerid().data(), static_cast<int>(this->riskerid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.req_risker_login.riskerid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string password = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.req_risker_login.password"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.req_risker_login)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.req_risker_login)
  return false;
#undef DO_
}

void req_risker_login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.req_risker_login)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 requestid = 1;
  if (this->requestid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // string riskerid = 2;
  if (this->riskerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->riskerid().data(), static_cast<int>(this->riskerid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.req_risker_login.riskerid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->riskerid(), output);
  }

  // string password = 3;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.req_risker_login.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->password(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.req_risker_login)
}

::google::protobuf::uint8* req_risker_login::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.req_risker_login)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 requestid = 1;
  if (this->requestid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // string riskerid = 2;
  if (this->riskerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->riskerid().data(), static_cast<int>(this->riskerid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.req_risker_login.riskerid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->riskerid(), target);
  }

  // string password = 3;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.req_risker_login.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.req_risker_login)
  return target;
}

size_t req_risker_login::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.req_risker_login)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string riskerid = 2;
  if (this->riskerid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->riskerid());
  }

  // string password = 3;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  // int32 requestid = 1;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->requestid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void req_risker_login::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.req_risker_login)
  GOOGLE_DCHECK_NE(&from, this);
  const req_risker_login* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const req_risker_login>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.req_risker_login)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.req_risker_login)
    MergeFrom(*source);
  }
}

void req_risker_login::MergeFrom(const req_risker_login& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.req_risker_login)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.riskerid().size() > 0) {

    riskerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.riskerid_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.requestid() != 0) {
    set_requestid(from.requestid());
  }
}

void req_risker_login::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.req_risker_login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void req_risker_login::CopyFrom(const req_risker_login& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.req_risker_login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool req_risker_login::IsInitialized() const {
  return true;
}

void req_risker_login::Swap(req_risker_login* other) {
  if (other == this) return;
  InternalSwap(other);
}
void req_risker_login::InternalSwap(req_risker_login* other) {
  using std::swap;
  riskerid_.Swap(&other->riskerid_);
  password_.Swap(&other->password_);
  swap(requestid_, other->requestid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata req_risker_login::GetMetadata() const {
  protobuf_riskapi_5faction_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5faction_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// req_risker_login

// int32 requestid = 1;
void req_risker_login::clear_requestid() {
  requestid_ = 0;
}
::google::protobuf::int32 req_risker_login::requestid() const {
  // @@protoc_insertion_point(field_get:risk.req_risker_login.requestid)
  return requestid_;
}
void req_risker_login::set_requestid(::google::protobuf::int32 value) {
  
  requestid_ = value;
  // @@protoc_insertion_point(field_set:risk.req_risker_login.requestid)
}

// string riskerid = 2;
void req_risker_login::clear_riskerid() {
  riskerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& req_risker_login::riskerid() const {
  // @@protoc_insertion_point(field_get:risk.req_risker_login.riskerid)
  return riskerid_.GetNoArena();
}
void req_risker_login::set_riskerid(const ::std::string& value) {
  
  riskerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.req_risker_login.riskerid)
}
#if LANG_CXX11
void req_risker_login::set_riskerid(::std::string&& value) {
  
  riskerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.req_risker_login.riskerid)
}
#endif
void req_risker_login::set_riskerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  riskerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.req_risker_login.riskerid)
}
void req_risker_login::set_riskerid(const char* value, size_t size) {
  
  riskerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.req_risker_login.riskerid)
}
::std::string* req_risker_login::mutable_riskerid() {
  
  // @@protoc_insertion_point(field_mutable:risk.req_risker_login.riskerid)
  return riskerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* req_risker_login::release_riskerid() {
  // @@protoc_insertion_point(field_release:risk.req_risker_login.riskerid)
  
  return riskerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void req_risker_login::set_allocated_riskerid(::std::string* riskerid) {
  if (riskerid != NULL) {
    
  } else {
    
  }
  riskerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), riskerid);
  // @@protoc_insertion_point(field_set_allocated:risk.req_risker_login.riskerid)
}

// string password = 3;
void req_risker_login::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& req_risker_login::password() const {
  // @@protoc_insertion_point(field_get:risk.req_risker_login.password)
  return password_.GetNoArena();
}
void req_risker_login::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.req_risker_login.password)
}
#if LANG_CXX11
void req_risker_login::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.req_risker_login.password)
}
#endif
void req_risker_login::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.req_risker_login.password)
}
void req_risker_login::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.req_risker_login.password)
}
::std::string* req_risker_login::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:risk.req_risker_login.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* req_risker_login::release_password() {
  // @@protoc_insertion_point(field_release:risk.req_risker_login.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void req_risker_login::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:risk.req_risker_login.password)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int req_instrument_list::kRequestidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

req_instrument_list::req_instrument_list()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5faction_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.req_instrument_list)
}
req_instrument_list::req_instrument_list(const req_instrument_list& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  requestid_ = from.requestid_;
  // @@protoc_insertion_point(copy_constructor:risk.req_instrument_list)
}

void req_instrument_list::SharedCtor() {
  requestid_ = 0;
  _cached_size_ = 0;
}

req_instrument_list::~req_instrument_list() {
  // @@protoc_insertion_point(destructor:risk.req_instrument_list)
  SharedDtor();
}

void req_instrument_list::SharedDtor() {
}

void req_instrument_list::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* req_instrument_list::descriptor() {
  protobuf_riskapi_5faction_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5faction_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const req_instrument_list& req_instrument_list::default_instance() {
  protobuf_riskapi_5faction_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

req_instrument_list* req_instrument_list::New(::google::protobuf::Arena* arena) const {
  req_instrument_list* n = new req_instrument_list;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void req_instrument_list::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.req_instrument_list)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requestid_ = 0;
  _internal_metadata_.Clear();
}

bool req_instrument_list::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.req_instrument_list)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 requestid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.req_instrument_list)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.req_instrument_list)
  return false;
#undef DO_
}

void req_instrument_list::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.req_instrument_list)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 requestid = 1;
  if (this->requestid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.req_instrument_list)
}

::google::protobuf::uint8* req_instrument_list::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.req_instrument_list)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 requestid = 1;
  if (this->requestid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.req_instrument_list)
  return target;
}

size_t req_instrument_list::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.req_instrument_list)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 requestid = 1;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->requestid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void req_instrument_list::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.req_instrument_list)
  GOOGLE_DCHECK_NE(&from, this);
  const req_instrument_list* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const req_instrument_list>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.req_instrument_list)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.req_instrument_list)
    MergeFrom(*source);
  }
}

void req_instrument_list::MergeFrom(const req_instrument_list& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.req_instrument_list)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.requestid() != 0) {
    set_requestid(from.requestid());
  }
}

void req_instrument_list::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.req_instrument_list)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void req_instrument_list::CopyFrom(const req_instrument_list& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.req_instrument_list)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool req_instrument_list::IsInitialized() const {
  return true;
}

void req_instrument_list::Swap(req_instrument_list* other) {
  if (other == this) return;
  InternalSwap(other);
}
void req_instrument_list::InternalSwap(req_instrument_list* other) {
  using std::swap;
  swap(requestid_, other->requestid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata req_instrument_list::GetMetadata() const {
  protobuf_riskapi_5faction_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5faction_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// req_instrument_list

// int32 requestid = 1;
void req_instrument_list::clear_requestid() {
  requestid_ = 0;
}
::google::protobuf::int32 req_instrument_list::requestid() const {
  // @@protoc_insertion_point(field_get:risk.req_instrument_list.requestid)
  return requestid_;
}
void req_instrument_list::set_requestid(::google::protobuf::int32 value) {
  
  requestid_ = value;
  // @@protoc_insertion_point(field_set:risk.req_instrument_list.requestid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int subscribe_quote::kInstrumentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

subscribe_quote::subscribe_quote()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5faction_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.subscribe_quote)
}
subscribe_quote::subscribe_quote(const subscribe_quote& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      instrument_(from.instrument_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:risk.subscribe_quote)
}

void subscribe_quote::SharedCtor() {
  _cached_size_ = 0;
}

subscribe_quote::~subscribe_quote() {
  // @@protoc_insertion_point(destructor:risk.subscribe_quote)
  SharedDtor();
}

void subscribe_quote::SharedDtor() {
}

void subscribe_quote::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* subscribe_quote::descriptor() {
  protobuf_riskapi_5faction_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5faction_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const subscribe_quote& subscribe_quote::default_instance() {
  protobuf_riskapi_5faction_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

subscribe_quote* subscribe_quote::New(::google::protobuf::Arena* arena) const {
  subscribe_quote* n = new subscribe_quote;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void subscribe_quote::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.subscribe_quote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  instrument_.Clear();
  _internal_metadata_.Clear();
}

bool subscribe_quote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.subscribe_quote)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string instrument = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_instrument()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->instrument(this->instrument_size() - 1).data(),
            static_cast<int>(this->instrument(this->instrument_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.subscribe_quote.instrument"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.subscribe_quote)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.subscribe_quote)
  return false;
#undef DO_
}

void subscribe_quote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.subscribe_quote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string instrument = 1;
  for (int i = 0, n = this->instrument_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instrument(i).data(), static_cast<int>(this->instrument(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.subscribe_quote.instrument");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->instrument(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.subscribe_quote)
}

::google::protobuf::uint8* subscribe_quote::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.subscribe_quote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string instrument = 1;
  for (int i = 0, n = this->instrument_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instrument(i).data(), static_cast<int>(this->instrument(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.subscribe_quote.instrument");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->instrument(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.subscribe_quote)
  return target;
}

size_t subscribe_quote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.subscribe_quote)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string instrument = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->instrument_size());
  for (int i = 0, n = this->instrument_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->instrument(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void subscribe_quote::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.subscribe_quote)
  GOOGLE_DCHECK_NE(&from, this);
  const subscribe_quote* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const subscribe_quote>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.subscribe_quote)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.subscribe_quote)
    MergeFrom(*source);
  }
}

void subscribe_quote::MergeFrom(const subscribe_quote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.subscribe_quote)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  instrument_.MergeFrom(from.instrument_);
}

void subscribe_quote::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.subscribe_quote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void subscribe_quote::CopyFrom(const subscribe_quote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.subscribe_quote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool subscribe_quote::IsInitialized() const {
  return true;
}

void subscribe_quote::Swap(subscribe_quote* other) {
  if (other == this) return;
  InternalSwap(other);
}
void subscribe_quote::InternalSwap(subscribe_quote* other) {
  using std::swap;
  instrument_.InternalSwap(&other->instrument_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata subscribe_quote::GetMetadata() const {
  protobuf_riskapi_5faction_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5faction_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// subscribe_quote

// repeated string instrument = 1;
int subscribe_quote::instrument_size() const {
  return instrument_.size();
}
void subscribe_quote::clear_instrument() {
  instrument_.Clear();
}
const ::std::string& subscribe_quote::instrument(int index) const {
  // @@protoc_insertion_point(field_get:risk.subscribe_quote.instrument)
  return instrument_.Get(index);
}
::std::string* subscribe_quote::mutable_instrument(int index) {
  // @@protoc_insertion_point(field_mutable:risk.subscribe_quote.instrument)
  return instrument_.Mutable(index);
}
void subscribe_quote::set_instrument(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:risk.subscribe_quote.instrument)
  instrument_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void subscribe_quote::set_instrument(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:risk.subscribe_quote.instrument)
  instrument_.Mutable(index)->assign(std::move(value));
}
#endif
void subscribe_quote::set_instrument(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  instrument_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:risk.subscribe_quote.instrument)
}
void subscribe_quote::set_instrument(int index, const char* value, size_t size) {
  instrument_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:risk.subscribe_quote.instrument)
}
::std::string* subscribe_quote::add_instrument() {
  // @@protoc_insertion_point(field_add_mutable:risk.subscribe_quote.instrument)
  return instrument_.Add();
}
void subscribe_quote::add_instrument(const ::std::string& value) {
  instrument_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:risk.subscribe_quote.instrument)
}
#if LANG_CXX11
void subscribe_quote::add_instrument(::std::string&& value) {
  instrument_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:risk.subscribe_quote.instrument)
}
#endif
void subscribe_quote::add_instrument(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  instrument_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:risk.subscribe_quote.instrument)
}
void subscribe_quote::add_instrument(const char* value, size_t size) {
  instrument_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:risk.subscribe_quote.instrument)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
subscribe_quote::instrument() const {
  // @@protoc_insertion_point(field_list:risk.subscribe_quote.instrument)
  return instrument_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
subscribe_quote::mutable_instrument() {
  // @@protoc_insertion_point(field_mutable_list:risk.subscribe_quote.instrument)
  return &instrument_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int unsubscribe_quote::kInstrumentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

unsubscribe_quote::unsubscribe_quote()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5faction_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.unsubscribe_quote)
}
unsubscribe_quote::unsubscribe_quote(const unsubscribe_quote& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      instrument_(from.instrument_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:risk.unsubscribe_quote)
}

void unsubscribe_quote::SharedCtor() {
  _cached_size_ = 0;
}

unsubscribe_quote::~unsubscribe_quote() {
  // @@protoc_insertion_point(destructor:risk.unsubscribe_quote)
  SharedDtor();
}

void unsubscribe_quote::SharedDtor() {
}

void unsubscribe_quote::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* unsubscribe_quote::descriptor() {
  protobuf_riskapi_5faction_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5faction_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const unsubscribe_quote& unsubscribe_quote::default_instance() {
  protobuf_riskapi_5faction_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

unsubscribe_quote* unsubscribe_quote::New(::google::protobuf::Arena* arena) const {
  unsubscribe_quote* n = new unsubscribe_quote;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void unsubscribe_quote::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.unsubscribe_quote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  instrument_.Clear();
  _internal_metadata_.Clear();
}

bool unsubscribe_quote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.unsubscribe_quote)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string instrument = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_instrument()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->instrument(this->instrument_size() - 1).data(),
            static_cast<int>(this->instrument(this->instrument_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.unsubscribe_quote.instrument"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.unsubscribe_quote)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.unsubscribe_quote)
  return false;
#undef DO_
}

void unsubscribe_quote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.unsubscribe_quote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string instrument = 1;
  for (int i = 0, n = this->instrument_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instrument(i).data(), static_cast<int>(this->instrument(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.unsubscribe_quote.instrument");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->instrument(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.unsubscribe_quote)
}

::google::protobuf::uint8* unsubscribe_quote::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.unsubscribe_quote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string instrument = 1;
  for (int i = 0, n = this->instrument_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instrument(i).data(), static_cast<int>(this->instrument(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.unsubscribe_quote.instrument");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->instrument(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.unsubscribe_quote)
  return target;
}

size_t unsubscribe_quote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.unsubscribe_quote)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string instrument = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->instrument_size());
  for (int i = 0, n = this->instrument_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->instrument(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void unsubscribe_quote::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.unsubscribe_quote)
  GOOGLE_DCHECK_NE(&from, this);
  const unsubscribe_quote* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const unsubscribe_quote>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.unsubscribe_quote)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.unsubscribe_quote)
    MergeFrom(*source);
  }
}

void unsubscribe_quote::MergeFrom(const unsubscribe_quote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.unsubscribe_quote)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  instrument_.MergeFrom(from.instrument_);
}

void unsubscribe_quote::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.unsubscribe_quote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void unsubscribe_quote::CopyFrom(const unsubscribe_quote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.unsubscribe_quote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool unsubscribe_quote::IsInitialized() const {
  return true;
}

void unsubscribe_quote::Swap(unsubscribe_quote* other) {
  if (other == this) return;
  InternalSwap(other);
}
void unsubscribe_quote::InternalSwap(unsubscribe_quote* other) {
  using std::swap;
  instrument_.InternalSwap(&other->instrument_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata unsubscribe_quote::GetMetadata() const {
  protobuf_riskapi_5faction_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5faction_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// unsubscribe_quote

// repeated string instrument = 1;
int unsubscribe_quote::instrument_size() const {
  return instrument_.size();
}
void unsubscribe_quote::clear_instrument() {
  instrument_.Clear();
}
const ::std::string& unsubscribe_quote::instrument(int index) const {
  // @@protoc_insertion_point(field_get:risk.unsubscribe_quote.instrument)
  return instrument_.Get(index);
}
::std::string* unsubscribe_quote::mutable_instrument(int index) {
  // @@protoc_insertion_point(field_mutable:risk.unsubscribe_quote.instrument)
  return instrument_.Mutable(index);
}
void unsubscribe_quote::set_instrument(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:risk.unsubscribe_quote.instrument)
  instrument_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void unsubscribe_quote::set_instrument(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:risk.unsubscribe_quote.instrument)
  instrument_.Mutable(index)->assign(std::move(value));
}
#endif
void unsubscribe_quote::set_instrument(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  instrument_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:risk.unsubscribe_quote.instrument)
}
void unsubscribe_quote::set_instrument(int index, const char* value, size_t size) {
  instrument_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:risk.unsubscribe_quote.instrument)
}
::std::string* unsubscribe_quote::add_instrument() {
  // @@protoc_insertion_point(field_add_mutable:risk.unsubscribe_quote.instrument)
  return instrument_.Add();
}
void unsubscribe_quote::add_instrument(const ::std::string& value) {
  instrument_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:risk.unsubscribe_quote.instrument)
}
#if LANG_CXX11
void unsubscribe_quote::add_instrument(::std::string&& value) {
  instrument_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:risk.unsubscribe_quote.instrument)
}
#endif
void unsubscribe_quote::add_instrument(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  instrument_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:risk.unsubscribe_quote.instrument)
}
void unsubscribe_quote::add_instrument(const char* value, size_t size) {
  instrument_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:risk.unsubscribe_quote.instrument)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
unsubscribe_quote::instrument() const {
  // @@protoc_insertion_point(field_list:risk.unsubscribe_quote.instrument)
  return instrument_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
unsubscribe_quote::mutable_instrument() {
  // @@protoc_insertion_point(field_mutable_list:risk.unsubscribe_quote.instrument)
  return &instrument_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int req_position::kRequestidFieldNumber;
const int req_position::kInvestorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

req_position::req_position()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5faction_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.req_position)
}
req_position::req_position(const req_position& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      investor_(from.investor_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  requestid_ = from.requestid_;
  // @@protoc_insertion_point(copy_constructor:risk.req_position)
}

void req_position::SharedCtor() {
  requestid_ = 0;
  _cached_size_ = 0;
}

req_position::~req_position() {
  // @@protoc_insertion_point(destructor:risk.req_position)
  SharedDtor();
}

void req_position::SharedDtor() {
}

void req_position::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* req_position::descriptor() {
  protobuf_riskapi_5faction_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5faction_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const req_position& req_position::default_instance() {
  protobuf_riskapi_5faction_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

req_position* req_position::New(::google::protobuf::Arena* arena) const {
  req_position* n = new req_position;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void req_position::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.req_position)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  investor_.Clear();
  requestid_ = 0;
  _internal_metadata_.Clear();
}

bool req_position::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.req_position)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 requestid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string investor = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_investor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->investor(this->investor_size() - 1).data(),
            static_cast<int>(this->investor(this->investor_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.req_position.investor"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.req_position)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.req_position)
  return false;
#undef DO_
}

void req_position::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.req_position)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 requestid = 1;
  if (this->requestid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // repeated string investor = 2;
  for (int i = 0, n = this->investor_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investor(i).data(), static_cast<int>(this->investor(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.req_position.investor");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->investor(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.req_position)
}

::google::protobuf::uint8* req_position::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.req_position)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 requestid = 1;
  if (this->requestid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // repeated string investor = 2;
  for (int i = 0, n = this->investor_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investor(i).data(), static_cast<int>(this->investor(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.req_position.investor");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->investor(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.req_position)
  return target;
}

size_t req_position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.req_position)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string investor = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->investor_size());
  for (int i = 0, n = this->investor_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->investor(i));
  }

  // int32 requestid = 1;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->requestid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void req_position::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.req_position)
  GOOGLE_DCHECK_NE(&from, this);
  const req_position* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const req_position>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.req_position)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.req_position)
    MergeFrom(*source);
  }
}

void req_position::MergeFrom(const req_position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.req_position)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  investor_.MergeFrom(from.investor_);
  if (from.requestid() != 0) {
    set_requestid(from.requestid());
  }
}

void req_position::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.req_position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void req_position::CopyFrom(const req_position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.req_position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool req_position::IsInitialized() const {
  return true;
}

void req_position::Swap(req_position* other) {
  if (other == this) return;
  InternalSwap(other);
}
void req_position::InternalSwap(req_position* other) {
  using std::swap;
  investor_.InternalSwap(&other->investor_);
  swap(requestid_, other->requestid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata req_position::GetMetadata() const {
  protobuf_riskapi_5faction_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5faction_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// req_position

// int32 requestid = 1;
void req_position::clear_requestid() {
  requestid_ = 0;
}
::google::protobuf::int32 req_position::requestid() const {
  // @@protoc_insertion_point(field_get:risk.req_position.requestid)
  return requestid_;
}
void req_position::set_requestid(::google::protobuf::int32 value) {
  
  requestid_ = value;
  // @@protoc_insertion_point(field_set:risk.req_position.requestid)
}

// repeated string investor = 2;
int req_position::investor_size() const {
  return investor_.size();
}
void req_position::clear_investor() {
  investor_.Clear();
}
const ::std::string& req_position::investor(int index) const {
  // @@protoc_insertion_point(field_get:risk.req_position.investor)
  return investor_.Get(index);
}
::std::string* req_position::mutable_investor(int index) {
  // @@protoc_insertion_point(field_mutable:risk.req_position.investor)
  return investor_.Mutable(index);
}
void req_position::set_investor(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:risk.req_position.investor)
  investor_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void req_position::set_investor(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:risk.req_position.investor)
  investor_.Mutable(index)->assign(std::move(value));
}
#endif
void req_position::set_investor(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  investor_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:risk.req_position.investor)
}
void req_position::set_investor(int index, const char* value, size_t size) {
  investor_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:risk.req_position.investor)
}
::std::string* req_position::add_investor() {
  // @@protoc_insertion_point(field_add_mutable:risk.req_position.investor)
  return investor_.Add();
}
void req_position::add_investor(const ::std::string& value) {
  investor_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:risk.req_position.investor)
}
#if LANG_CXX11
void req_position::add_investor(::std::string&& value) {
  investor_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:risk.req_position.investor)
}
#endif
void req_position::add_investor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  investor_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:risk.req_position.investor)
}
void req_position::add_investor(const char* value, size_t size) {
  investor_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:risk.req_position.investor)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
req_position::investor() const {
  // @@protoc_insertion_point(field_list:risk.req_position.investor)
  return investor_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
req_position::mutable_investor() {
  // @@protoc_insertion_point(field_mutable_list:risk.req_position.investor)
  return &investor_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int subscribe_position::kInvestorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

subscribe_position::subscribe_position()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5faction_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.subscribe_position)
}
subscribe_position::subscribe_position(const subscribe_position& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      investor_(from.investor_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:risk.subscribe_position)
}

void subscribe_position::SharedCtor() {
  _cached_size_ = 0;
}

subscribe_position::~subscribe_position() {
  // @@protoc_insertion_point(destructor:risk.subscribe_position)
  SharedDtor();
}

void subscribe_position::SharedDtor() {
}

void subscribe_position::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* subscribe_position::descriptor() {
  protobuf_riskapi_5faction_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5faction_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const subscribe_position& subscribe_position::default_instance() {
  protobuf_riskapi_5faction_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

subscribe_position* subscribe_position::New(::google::protobuf::Arena* arena) const {
  subscribe_position* n = new subscribe_position;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void subscribe_position::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.subscribe_position)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  investor_.Clear();
  _internal_metadata_.Clear();
}

bool subscribe_position::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.subscribe_position)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string investor = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_investor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->investor(this->investor_size() - 1).data(),
            static_cast<int>(this->investor(this->investor_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.subscribe_position.investor"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.subscribe_position)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.subscribe_position)
  return false;
#undef DO_
}

void subscribe_position::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.subscribe_position)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string investor = 1;
  for (int i = 0, n = this->investor_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investor(i).data(), static_cast<int>(this->investor(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.subscribe_position.investor");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->investor(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.subscribe_position)
}

::google::protobuf::uint8* subscribe_position::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.subscribe_position)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string investor = 1;
  for (int i = 0, n = this->investor_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investor(i).data(), static_cast<int>(this->investor(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.subscribe_position.investor");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->investor(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.subscribe_position)
  return target;
}

size_t subscribe_position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.subscribe_position)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string investor = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->investor_size());
  for (int i = 0, n = this->investor_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->investor(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void subscribe_position::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.subscribe_position)
  GOOGLE_DCHECK_NE(&from, this);
  const subscribe_position* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const subscribe_position>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.subscribe_position)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.subscribe_position)
    MergeFrom(*source);
  }
}

void subscribe_position::MergeFrom(const subscribe_position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.subscribe_position)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  investor_.MergeFrom(from.investor_);
}

void subscribe_position::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.subscribe_position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void subscribe_position::CopyFrom(const subscribe_position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.subscribe_position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool subscribe_position::IsInitialized() const {
  return true;
}

void subscribe_position::Swap(subscribe_position* other) {
  if (other == this) return;
  InternalSwap(other);
}
void subscribe_position::InternalSwap(subscribe_position* other) {
  using std::swap;
  investor_.InternalSwap(&other->investor_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata subscribe_position::GetMetadata() const {
  protobuf_riskapi_5faction_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5faction_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// subscribe_position

// repeated string investor = 1;
int subscribe_position::investor_size() const {
  return investor_.size();
}
void subscribe_position::clear_investor() {
  investor_.Clear();
}
const ::std::string& subscribe_position::investor(int index) const {
  // @@protoc_insertion_point(field_get:risk.subscribe_position.investor)
  return investor_.Get(index);
}
::std::string* subscribe_position::mutable_investor(int index) {
  // @@protoc_insertion_point(field_mutable:risk.subscribe_position.investor)
  return investor_.Mutable(index);
}
void subscribe_position::set_investor(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:risk.subscribe_position.investor)
  investor_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void subscribe_position::set_investor(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:risk.subscribe_position.investor)
  investor_.Mutable(index)->assign(std::move(value));
}
#endif
void subscribe_position::set_investor(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  investor_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:risk.subscribe_position.investor)
}
void subscribe_position::set_investor(int index, const char* value, size_t size) {
  investor_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:risk.subscribe_position.investor)
}
::std::string* subscribe_position::add_investor() {
  // @@protoc_insertion_point(field_add_mutable:risk.subscribe_position.investor)
  return investor_.Add();
}
void subscribe_position::add_investor(const ::std::string& value) {
  investor_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:risk.subscribe_position.investor)
}
#if LANG_CXX11
void subscribe_position::add_investor(::std::string&& value) {
  investor_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:risk.subscribe_position.investor)
}
#endif
void subscribe_position::add_investor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  investor_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:risk.subscribe_position.investor)
}
void subscribe_position::add_investor(const char* value, size_t size) {
  investor_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:risk.subscribe_position.investor)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
subscribe_position::investor() const {
  // @@protoc_insertion_point(field_list:risk.subscribe_position.investor)
  return investor_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
subscribe_position::mutable_investor() {
  // @@protoc_insertion_point(field_mutable_list:risk.subscribe_position.investor)
  return &investor_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int unsubscribe_position::kInvestorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

unsubscribe_position::unsubscribe_position()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5faction_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.unsubscribe_position)
}
unsubscribe_position::unsubscribe_position(const unsubscribe_position& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      investor_(from.investor_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:risk.unsubscribe_position)
}

void unsubscribe_position::SharedCtor() {
  _cached_size_ = 0;
}

unsubscribe_position::~unsubscribe_position() {
  // @@protoc_insertion_point(destructor:risk.unsubscribe_position)
  SharedDtor();
}

void unsubscribe_position::SharedDtor() {
}

void unsubscribe_position::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* unsubscribe_position::descriptor() {
  protobuf_riskapi_5faction_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5faction_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const unsubscribe_position& unsubscribe_position::default_instance() {
  protobuf_riskapi_5faction_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

unsubscribe_position* unsubscribe_position::New(::google::protobuf::Arena* arena) const {
  unsubscribe_position* n = new unsubscribe_position;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void unsubscribe_position::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.unsubscribe_position)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  investor_.Clear();
  _internal_metadata_.Clear();
}

bool unsubscribe_position::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.unsubscribe_position)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string investor = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_investor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->investor(this->investor_size() - 1).data(),
            static_cast<int>(this->investor(this->investor_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.unsubscribe_position.investor"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.unsubscribe_position)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.unsubscribe_position)
  return false;
#undef DO_
}

void unsubscribe_position::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.unsubscribe_position)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string investor = 1;
  for (int i = 0, n = this->investor_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investor(i).data(), static_cast<int>(this->investor(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.unsubscribe_position.investor");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->investor(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.unsubscribe_position)
}

::google::protobuf::uint8* unsubscribe_position::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.unsubscribe_position)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string investor = 1;
  for (int i = 0, n = this->investor_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investor(i).data(), static_cast<int>(this->investor(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.unsubscribe_position.investor");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->investor(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.unsubscribe_position)
  return target;
}

size_t unsubscribe_position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.unsubscribe_position)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string investor = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->investor_size());
  for (int i = 0, n = this->investor_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->investor(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void unsubscribe_position::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.unsubscribe_position)
  GOOGLE_DCHECK_NE(&from, this);
  const unsubscribe_position* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const unsubscribe_position>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.unsubscribe_position)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.unsubscribe_position)
    MergeFrom(*source);
  }
}

void unsubscribe_position::MergeFrom(const unsubscribe_position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.unsubscribe_position)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  investor_.MergeFrom(from.investor_);
}

void unsubscribe_position::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.unsubscribe_position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void unsubscribe_position::CopyFrom(const unsubscribe_position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.unsubscribe_position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool unsubscribe_position::IsInitialized() const {
  return true;
}

void unsubscribe_position::Swap(unsubscribe_position* other) {
  if (other == this) return;
  InternalSwap(other);
}
void unsubscribe_position::InternalSwap(unsubscribe_position* other) {
  using std::swap;
  investor_.InternalSwap(&other->investor_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata unsubscribe_position::GetMetadata() const {
  protobuf_riskapi_5faction_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5faction_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// unsubscribe_position

// repeated string investor = 1;
int unsubscribe_position::investor_size() const {
  return investor_.size();
}
void unsubscribe_position::clear_investor() {
  investor_.Clear();
}
const ::std::string& unsubscribe_position::investor(int index) const {
  // @@protoc_insertion_point(field_get:risk.unsubscribe_position.investor)
  return investor_.Get(index);
}
::std::string* unsubscribe_position::mutable_investor(int index) {
  // @@protoc_insertion_point(field_mutable:risk.unsubscribe_position.investor)
  return investor_.Mutable(index);
}
void unsubscribe_position::set_investor(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:risk.unsubscribe_position.investor)
  investor_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void unsubscribe_position::set_investor(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:risk.unsubscribe_position.investor)
  investor_.Mutable(index)->assign(std::move(value));
}
#endif
void unsubscribe_position::set_investor(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  investor_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:risk.unsubscribe_position.investor)
}
void unsubscribe_position::set_investor(int index, const char* value, size_t size) {
  investor_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:risk.unsubscribe_position.investor)
}
::std::string* unsubscribe_position::add_investor() {
  // @@protoc_insertion_point(field_add_mutable:risk.unsubscribe_position.investor)
  return investor_.Add();
}
void unsubscribe_position::add_investor(const ::std::string& value) {
  investor_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:risk.unsubscribe_position.investor)
}
#if LANG_CXX11
void unsubscribe_position::add_investor(::std::string&& value) {
  investor_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:risk.unsubscribe_position.investor)
}
#endif
void unsubscribe_position::add_investor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  investor_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:risk.unsubscribe_position.investor)
}
void unsubscribe_position::add_investor(const char* value, size_t size) {
  investor_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:risk.unsubscribe_position.investor)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
unsubscribe_position::investor() const {
  // @@protoc_insertion_point(field_list:risk.unsubscribe_position.investor)
  return investor_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
unsubscribe_position::mutable_investor() {
  // @@protoc_insertion_point(field_mutable_list:risk.unsubscribe_position.investor)
  return &investor_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int req_trade::kRequestidFieldNumber;
const int req_trade::kInvestorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

req_trade::req_trade()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5faction_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.req_trade)
}
req_trade::req_trade(const req_trade& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      investor_(from.investor_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  requestid_ = from.requestid_;
  // @@protoc_insertion_point(copy_constructor:risk.req_trade)
}

void req_trade::SharedCtor() {
  requestid_ = 0;
  _cached_size_ = 0;
}

req_trade::~req_trade() {
  // @@protoc_insertion_point(destructor:risk.req_trade)
  SharedDtor();
}

void req_trade::SharedDtor() {
}

void req_trade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* req_trade::descriptor() {
  protobuf_riskapi_5faction_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5faction_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const req_trade& req_trade::default_instance() {
  protobuf_riskapi_5faction_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

req_trade* req_trade::New(::google::protobuf::Arena* arena) const {
  req_trade* n = new req_trade;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void req_trade::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.req_trade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  investor_.Clear();
  requestid_ = 0;
  _internal_metadata_.Clear();
}

bool req_trade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.req_trade)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 requestid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string investor = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_investor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->investor(this->investor_size() - 1).data(),
            static_cast<int>(this->investor(this->investor_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.req_trade.investor"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.req_trade)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.req_trade)
  return false;
#undef DO_
}

void req_trade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.req_trade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 requestid = 1;
  if (this->requestid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // repeated string investor = 2;
  for (int i = 0, n = this->investor_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investor(i).data(), static_cast<int>(this->investor(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.req_trade.investor");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->investor(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.req_trade)
}

::google::protobuf::uint8* req_trade::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.req_trade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 requestid = 1;
  if (this->requestid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // repeated string investor = 2;
  for (int i = 0, n = this->investor_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investor(i).data(), static_cast<int>(this->investor(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.req_trade.investor");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->investor(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.req_trade)
  return target;
}

size_t req_trade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.req_trade)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string investor = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->investor_size());
  for (int i = 0, n = this->investor_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->investor(i));
  }

  // int32 requestid = 1;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->requestid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void req_trade::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.req_trade)
  GOOGLE_DCHECK_NE(&from, this);
  const req_trade* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const req_trade>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.req_trade)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.req_trade)
    MergeFrom(*source);
  }
}

void req_trade::MergeFrom(const req_trade& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.req_trade)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  investor_.MergeFrom(from.investor_);
  if (from.requestid() != 0) {
    set_requestid(from.requestid());
  }
}

void req_trade::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.req_trade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void req_trade::CopyFrom(const req_trade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.req_trade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool req_trade::IsInitialized() const {
  return true;
}

void req_trade::Swap(req_trade* other) {
  if (other == this) return;
  InternalSwap(other);
}
void req_trade::InternalSwap(req_trade* other) {
  using std::swap;
  investor_.InternalSwap(&other->investor_);
  swap(requestid_, other->requestid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata req_trade::GetMetadata() const {
  protobuf_riskapi_5faction_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5faction_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// req_trade

// int32 requestid = 1;
void req_trade::clear_requestid() {
  requestid_ = 0;
}
::google::protobuf::int32 req_trade::requestid() const {
  // @@protoc_insertion_point(field_get:risk.req_trade.requestid)
  return requestid_;
}
void req_trade::set_requestid(::google::protobuf::int32 value) {
  
  requestid_ = value;
  // @@protoc_insertion_point(field_set:risk.req_trade.requestid)
}

// repeated string investor = 2;
int req_trade::investor_size() const {
  return investor_.size();
}
void req_trade::clear_investor() {
  investor_.Clear();
}
const ::std::string& req_trade::investor(int index) const {
  // @@protoc_insertion_point(field_get:risk.req_trade.investor)
  return investor_.Get(index);
}
::std::string* req_trade::mutable_investor(int index) {
  // @@protoc_insertion_point(field_mutable:risk.req_trade.investor)
  return investor_.Mutable(index);
}
void req_trade::set_investor(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:risk.req_trade.investor)
  investor_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void req_trade::set_investor(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:risk.req_trade.investor)
  investor_.Mutable(index)->assign(std::move(value));
}
#endif
void req_trade::set_investor(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  investor_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:risk.req_trade.investor)
}
void req_trade::set_investor(int index, const char* value, size_t size) {
  investor_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:risk.req_trade.investor)
}
::std::string* req_trade::add_investor() {
  // @@protoc_insertion_point(field_add_mutable:risk.req_trade.investor)
  return investor_.Add();
}
void req_trade::add_investor(const ::std::string& value) {
  investor_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:risk.req_trade.investor)
}
#if LANG_CXX11
void req_trade::add_investor(::std::string&& value) {
  investor_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:risk.req_trade.investor)
}
#endif
void req_trade::add_investor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  investor_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:risk.req_trade.investor)
}
void req_trade::add_investor(const char* value, size_t size) {
  investor_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:risk.req_trade.investor)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
req_trade::investor() const {
  // @@protoc_insertion_point(field_list:risk.req_trade.investor)
  return investor_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
req_trade::mutable_investor() {
  // @@protoc_insertion_point(field_mutable_list:risk.req_trade.investor)
  return &investor_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int req_order::kRequestidFieldNumber;
const int req_order::kInvestorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

req_order::req_order()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5faction_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.req_order)
}
req_order::req_order(const req_order& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      investor_(from.investor_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  requestid_ = from.requestid_;
  // @@protoc_insertion_point(copy_constructor:risk.req_order)
}

void req_order::SharedCtor() {
  requestid_ = 0;
  _cached_size_ = 0;
}

req_order::~req_order() {
  // @@protoc_insertion_point(destructor:risk.req_order)
  SharedDtor();
}

void req_order::SharedDtor() {
}

void req_order::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* req_order::descriptor() {
  protobuf_riskapi_5faction_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5faction_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const req_order& req_order::default_instance() {
  protobuf_riskapi_5faction_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

req_order* req_order::New(::google::protobuf::Arena* arena) const {
  req_order* n = new req_order;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void req_order::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.req_order)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  investor_.Clear();
  requestid_ = 0;
  _internal_metadata_.Clear();
}

bool req_order::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.req_order)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 requestid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string investor = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_investor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->investor(this->investor_size() - 1).data(),
            static_cast<int>(this->investor(this->investor_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.req_order.investor"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.req_order)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.req_order)
  return false;
#undef DO_
}

void req_order::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.req_order)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 requestid = 1;
  if (this->requestid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // repeated string investor = 2;
  for (int i = 0, n = this->investor_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investor(i).data(), static_cast<int>(this->investor(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.req_order.investor");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->investor(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.req_order)
}

::google::protobuf::uint8* req_order::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.req_order)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 requestid = 1;
  if (this->requestid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // repeated string investor = 2;
  for (int i = 0, n = this->investor_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investor(i).data(), static_cast<int>(this->investor(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.req_order.investor");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->investor(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.req_order)
  return target;
}

size_t req_order::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.req_order)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string investor = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->investor_size());
  for (int i = 0, n = this->investor_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->investor(i));
  }

  // int32 requestid = 1;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->requestid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void req_order::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.req_order)
  GOOGLE_DCHECK_NE(&from, this);
  const req_order* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const req_order>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.req_order)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.req_order)
    MergeFrom(*source);
  }
}

void req_order::MergeFrom(const req_order& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.req_order)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  investor_.MergeFrom(from.investor_);
  if (from.requestid() != 0) {
    set_requestid(from.requestid());
  }
}

void req_order::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.req_order)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void req_order::CopyFrom(const req_order& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.req_order)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool req_order::IsInitialized() const {
  return true;
}

void req_order::Swap(req_order* other) {
  if (other == this) return;
  InternalSwap(other);
}
void req_order::InternalSwap(req_order* other) {
  using std::swap;
  investor_.InternalSwap(&other->investor_);
  swap(requestid_, other->requestid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata req_order::GetMetadata() const {
  protobuf_riskapi_5faction_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5faction_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// req_order

// int32 requestid = 1;
void req_order::clear_requestid() {
  requestid_ = 0;
}
::google::protobuf::int32 req_order::requestid() const {
  // @@protoc_insertion_point(field_get:risk.req_order.requestid)
  return requestid_;
}
void req_order::set_requestid(::google::protobuf::int32 value) {
  
  requestid_ = value;
  // @@protoc_insertion_point(field_set:risk.req_order.requestid)
}

// repeated string investor = 2;
int req_order::investor_size() const {
  return investor_.size();
}
void req_order::clear_investor() {
  investor_.Clear();
}
const ::std::string& req_order::investor(int index) const {
  // @@protoc_insertion_point(field_get:risk.req_order.investor)
  return investor_.Get(index);
}
::std::string* req_order::mutable_investor(int index) {
  // @@protoc_insertion_point(field_mutable:risk.req_order.investor)
  return investor_.Mutable(index);
}
void req_order::set_investor(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:risk.req_order.investor)
  investor_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void req_order::set_investor(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:risk.req_order.investor)
  investor_.Mutable(index)->assign(std::move(value));
}
#endif
void req_order::set_investor(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  investor_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:risk.req_order.investor)
}
void req_order::set_investor(int index, const char* value, size_t size) {
  investor_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:risk.req_order.investor)
}
::std::string* req_order::add_investor() {
  // @@protoc_insertion_point(field_add_mutable:risk.req_order.investor)
  return investor_.Add();
}
void req_order::add_investor(const ::std::string& value) {
  investor_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:risk.req_order.investor)
}
#if LANG_CXX11
void req_order::add_investor(::std::string&& value) {
  investor_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:risk.req_order.investor)
}
#endif
void req_order::add_investor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  investor_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:risk.req_order.investor)
}
void req_order::add_investor(const char* value, size_t size) {
  investor_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:risk.req_order.investor)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
req_order::investor() const {
  // @@protoc_insertion_point(field_list:risk.req_order.investor)
  return investor_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
req_order::mutable_investor() {
  // @@protoc_insertion_point(field_mutable_list:risk.req_order.investor)
  return &investor_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int private_topic_info::kInvestorFieldNumber;
const int private_topic_info::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

private_topic_info::private_topic_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5faction_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.private_topic_info)
}
private_topic_info::private_topic_info(const private_topic_info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  investor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.investor().size() > 0) {
    investor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.investor_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:risk.private_topic_info)
}

void private_topic_info::SharedCtor() {
  investor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  _cached_size_ = 0;
}

private_topic_info::~private_topic_info() {
  // @@protoc_insertion_point(destructor:risk.private_topic_info)
  SharedDtor();
}

void private_topic_info::SharedDtor() {
  investor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void private_topic_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* private_topic_info::descriptor() {
  protobuf_riskapi_5faction_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5faction_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const private_topic_info& private_topic_info::default_instance() {
  protobuf_riskapi_5faction_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

private_topic_info* private_topic_info::New(::google::protobuf::Arena* arena) const {
  private_topic_info* n = new private_topic_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void private_topic_info::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.private_topic_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  investor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  _internal_metadata_.Clear();
}

bool private_topic_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.private_topic_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string investor = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_investor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->investor().data(), static_cast<int>(this->investor().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.private_topic_info.investor"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.private_topic_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.private_topic_info)
  return false;
#undef DO_
}

void private_topic_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.private_topic_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string investor = 1;
  if (this->investor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investor().data(), static_cast<int>(this->investor().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.private_topic_info.investor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->investor(), output);
  }

  // int32 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.private_topic_info)
}

::google::protobuf::uint8* private_topic_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.private_topic_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string investor = 1;
  if (this->investor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investor().data(), static_cast<int>(this->investor().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.private_topic_info.investor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->investor(), target);
  }

  // int32 id = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.private_topic_info)
  return target;
}

size_t private_topic_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.private_topic_info)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string investor = 1;
  if (this->investor().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->investor());
  }

  // int32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void private_topic_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.private_topic_info)
  GOOGLE_DCHECK_NE(&from, this);
  const private_topic_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const private_topic_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.private_topic_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.private_topic_info)
    MergeFrom(*source);
  }
}

void private_topic_info::MergeFrom(const private_topic_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.private_topic_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.investor().size() > 0) {

    investor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.investor_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void private_topic_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.private_topic_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void private_topic_info::CopyFrom(const private_topic_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.private_topic_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool private_topic_info::IsInitialized() const {
  return true;
}

void private_topic_info::Swap(private_topic_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void private_topic_info::InternalSwap(private_topic_info* other) {
  using std::swap;
  investor_.Swap(&other->investor_);
  swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata private_topic_info::GetMetadata() const {
  protobuf_riskapi_5faction_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5faction_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// private_topic_info

// string investor = 1;
void private_topic_info::clear_investor() {
  investor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& private_topic_info::investor() const {
  // @@protoc_insertion_point(field_get:risk.private_topic_info.investor)
  return investor_.GetNoArena();
}
void private_topic_info::set_investor(const ::std::string& value) {
  
  investor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.private_topic_info.investor)
}
#if LANG_CXX11
void private_topic_info::set_investor(::std::string&& value) {
  
  investor_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.private_topic_info.investor)
}
#endif
void private_topic_info::set_investor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  investor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.private_topic_info.investor)
}
void private_topic_info::set_investor(const char* value, size_t size) {
  
  investor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.private_topic_info.investor)
}
::std::string* private_topic_info::mutable_investor() {
  
  // @@protoc_insertion_point(field_mutable:risk.private_topic_info.investor)
  return investor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* private_topic_info::release_investor() {
  // @@protoc_insertion_point(field_release:risk.private_topic_info.investor)
  
  return investor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void private_topic_info::set_allocated_investor(::std::string* investor) {
  if (investor != NULL) {
    
  } else {
    
  }
  investor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), investor);
  // @@protoc_insertion_point(field_set_allocated:risk.private_topic_info.investor)
}

// int32 id = 2;
void private_topic_info::clear_id() {
  id_ = 0;
}
::google::protobuf::int32 private_topic_info::id() const {
  // @@protoc_insertion_point(field_get:risk.private_topic_info.id)
  return id_;
}
void private_topic_info::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:risk.private_topic_info.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int subscribe_private_topic::kFieldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

subscribe_private_topic::subscribe_private_topic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5faction_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.subscribe_private_topic)
}
subscribe_private_topic::subscribe_private_topic(const subscribe_private_topic& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      field_(from.field_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:risk.subscribe_private_topic)
}

void subscribe_private_topic::SharedCtor() {
  _cached_size_ = 0;
}

subscribe_private_topic::~subscribe_private_topic() {
  // @@protoc_insertion_point(destructor:risk.subscribe_private_topic)
  SharedDtor();
}

void subscribe_private_topic::SharedDtor() {
}

void subscribe_private_topic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* subscribe_private_topic::descriptor() {
  protobuf_riskapi_5faction_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5faction_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const subscribe_private_topic& subscribe_private_topic::default_instance() {
  protobuf_riskapi_5faction_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

subscribe_private_topic* subscribe_private_topic::New(::google::protobuf::Arena* arena) const {
  subscribe_private_topic* n = new subscribe_private_topic;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void subscribe_private_topic::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.subscribe_private_topic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_.Clear();
  _internal_metadata_.Clear();
}

bool subscribe_private_topic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.subscribe_private_topic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .risk.private_topic_info field = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.subscribe_private_topic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.subscribe_private_topic)
  return false;
#undef DO_
}

void subscribe_private_topic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.subscribe_private_topic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .risk.private_topic_info field = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->field_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->field(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.subscribe_private_topic)
}

::google::protobuf::uint8* subscribe_private_topic::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.subscribe_private_topic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .risk.private_topic_info field = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->field_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->field(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.subscribe_private_topic)
  return target;
}

size_t subscribe_private_topic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.subscribe_private_topic)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .risk.private_topic_info field = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->field_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->field(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void subscribe_private_topic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.subscribe_private_topic)
  GOOGLE_DCHECK_NE(&from, this);
  const subscribe_private_topic* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const subscribe_private_topic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.subscribe_private_topic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.subscribe_private_topic)
    MergeFrom(*source);
  }
}

void subscribe_private_topic::MergeFrom(const subscribe_private_topic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.subscribe_private_topic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_.MergeFrom(from.field_);
}

void subscribe_private_topic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.subscribe_private_topic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void subscribe_private_topic::CopyFrom(const subscribe_private_topic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.subscribe_private_topic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool subscribe_private_topic::IsInitialized() const {
  return true;
}

void subscribe_private_topic::Swap(subscribe_private_topic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void subscribe_private_topic::InternalSwap(subscribe_private_topic* other) {
  using std::swap;
  field_.InternalSwap(&other->field_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata subscribe_private_topic::GetMetadata() const {
  protobuf_riskapi_5faction_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5faction_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// subscribe_private_topic

// repeated .risk.private_topic_info field = 1;
int subscribe_private_topic::field_size() const {
  return field_.size();
}
void subscribe_private_topic::clear_field() {
  field_.Clear();
}
const ::risk::private_topic_info& subscribe_private_topic::field(int index) const {
  // @@protoc_insertion_point(field_get:risk.subscribe_private_topic.field)
  return field_.Get(index);
}
::risk::private_topic_info* subscribe_private_topic::mutable_field(int index) {
  // @@protoc_insertion_point(field_mutable:risk.subscribe_private_topic.field)
  return field_.Mutable(index);
}
::risk::private_topic_info* subscribe_private_topic::add_field() {
  // @@protoc_insertion_point(field_add:risk.subscribe_private_topic.field)
  return field_.Add();
}
::google::protobuf::RepeatedPtrField< ::risk::private_topic_info >*
subscribe_private_topic::mutable_field() {
  // @@protoc_insertion_point(field_mutable_list:risk.subscribe_private_topic.field)
  return &field_;
}
const ::google::protobuf::RepeatedPtrField< ::risk::private_topic_info >&
subscribe_private_topic::field() const {
  // @@protoc_insertion_point(field_list:risk.subscribe_private_topic.field)
  return field_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int unsubscribe_private_topic::kInvestorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

unsubscribe_private_topic::unsubscribe_private_topic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5faction_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.unsubscribe_private_topic)
}
unsubscribe_private_topic::unsubscribe_private_topic(const unsubscribe_private_topic& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      investor_(from.investor_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:risk.unsubscribe_private_topic)
}

void unsubscribe_private_topic::SharedCtor() {
  _cached_size_ = 0;
}

unsubscribe_private_topic::~unsubscribe_private_topic() {
  // @@protoc_insertion_point(destructor:risk.unsubscribe_private_topic)
  SharedDtor();
}

void unsubscribe_private_topic::SharedDtor() {
}

void unsubscribe_private_topic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* unsubscribe_private_topic::descriptor() {
  protobuf_riskapi_5faction_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5faction_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const unsubscribe_private_topic& unsubscribe_private_topic::default_instance() {
  protobuf_riskapi_5faction_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

unsubscribe_private_topic* unsubscribe_private_topic::New(::google::protobuf::Arena* arena) const {
  unsubscribe_private_topic* n = new unsubscribe_private_topic;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void unsubscribe_private_topic::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.unsubscribe_private_topic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  investor_.Clear();
  _internal_metadata_.Clear();
}

bool unsubscribe_private_topic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.unsubscribe_private_topic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string investor = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_investor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->investor(this->investor_size() - 1).data(),
            static_cast<int>(this->investor(this->investor_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.unsubscribe_private_topic.investor"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.unsubscribe_private_topic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.unsubscribe_private_topic)
  return false;
#undef DO_
}

void unsubscribe_private_topic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.unsubscribe_private_topic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string investor = 1;
  for (int i = 0, n = this->investor_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investor(i).data(), static_cast<int>(this->investor(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.unsubscribe_private_topic.investor");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->investor(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.unsubscribe_private_topic)
}

::google::protobuf::uint8* unsubscribe_private_topic::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.unsubscribe_private_topic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string investor = 1;
  for (int i = 0, n = this->investor_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investor(i).data(), static_cast<int>(this->investor(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.unsubscribe_private_topic.investor");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->investor(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.unsubscribe_private_topic)
  return target;
}

size_t unsubscribe_private_topic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.unsubscribe_private_topic)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string investor = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->investor_size());
  for (int i = 0, n = this->investor_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->investor(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void unsubscribe_private_topic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.unsubscribe_private_topic)
  GOOGLE_DCHECK_NE(&from, this);
  const unsubscribe_private_topic* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const unsubscribe_private_topic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.unsubscribe_private_topic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.unsubscribe_private_topic)
    MergeFrom(*source);
  }
}

void unsubscribe_private_topic::MergeFrom(const unsubscribe_private_topic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.unsubscribe_private_topic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  investor_.MergeFrom(from.investor_);
}

void unsubscribe_private_topic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.unsubscribe_private_topic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void unsubscribe_private_topic::CopyFrom(const unsubscribe_private_topic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.unsubscribe_private_topic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool unsubscribe_private_topic::IsInitialized() const {
  return true;
}

void unsubscribe_private_topic::Swap(unsubscribe_private_topic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void unsubscribe_private_topic::InternalSwap(unsubscribe_private_topic* other) {
  using std::swap;
  investor_.InternalSwap(&other->investor_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata unsubscribe_private_topic::GetMetadata() const {
  protobuf_riskapi_5faction_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5faction_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// unsubscribe_private_topic

// repeated string investor = 1;
int unsubscribe_private_topic::investor_size() const {
  return investor_.size();
}
void unsubscribe_private_topic::clear_investor() {
  investor_.Clear();
}
const ::std::string& unsubscribe_private_topic::investor(int index) const {
  // @@protoc_insertion_point(field_get:risk.unsubscribe_private_topic.investor)
  return investor_.Get(index);
}
::std::string* unsubscribe_private_topic::mutable_investor(int index) {
  // @@protoc_insertion_point(field_mutable:risk.unsubscribe_private_topic.investor)
  return investor_.Mutable(index);
}
void unsubscribe_private_topic::set_investor(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:risk.unsubscribe_private_topic.investor)
  investor_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void unsubscribe_private_topic::set_investor(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:risk.unsubscribe_private_topic.investor)
  investor_.Mutable(index)->assign(std::move(value));
}
#endif
void unsubscribe_private_topic::set_investor(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  investor_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:risk.unsubscribe_private_topic.investor)
}
void unsubscribe_private_topic::set_investor(int index, const char* value, size_t size) {
  investor_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:risk.unsubscribe_private_topic.investor)
}
::std::string* unsubscribe_private_topic::add_investor() {
  // @@protoc_insertion_point(field_add_mutable:risk.unsubscribe_private_topic.investor)
  return investor_.Add();
}
void unsubscribe_private_topic::add_investor(const ::std::string& value) {
  investor_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:risk.unsubscribe_private_topic.investor)
}
#if LANG_CXX11
void unsubscribe_private_topic::add_investor(::std::string&& value) {
  investor_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:risk.unsubscribe_private_topic.investor)
}
#endif
void unsubscribe_private_topic::add_investor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  investor_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:risk.unsubscribe_private_topic.investor)
}
void unsubscribe_private_topic::add_investor(const char* value, size_t size) {
  investor_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:risk.unsubscribe_private_topic.investor)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
unsubscribe_private_topic::investor() const {
  // @@protoc_insertion_point(field_list:risk.unsubscribe_private_topic.investor)
  return investor_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
unsubscribe_private_topic::mutable_investor() {
  // @@protoc_insertion_point(field_mutable_list:risk.unsubscribe_private_topic.investor)
  return &investor_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int req_sync_account::kRequestidFieldNumber;
const int req_sync_account::kInvestorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

req_sync_account::req_sync_account()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5faction_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.req_sync_account)
}
req_sync_account::req_sync_account(const req_sync_account& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      investor_(from.investor_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  requestid_ = from.requestid_;
  // @@protoc_insertion_point(copy_constructor:risk.req_sync_account)
}

void req_sync_account::SharedCtor() {
  requestid_ = 0;
  _cached_size_ = 0;
}

req_sync_account::~req_sync_account() {
  // @@protoc_insertion_point(destructor:risk.req_sync_account)
  SharedDtor();
}

void req_sync_account::SharedDtor() {
}

void req_sync_account::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* req_sync_account::descriptor() {
  protobuf_riskapi_5faction_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5faction_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const req_sync_account& req_sync_account::default_instance() {
  protobuf_riskapi_5faction_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

req_sync_account* req_sync_account::New(::google::protobuf::Arena* arena) const {
  req_sync_account* n = new req_sync_account;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void req_sync_account::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.req_sync_account)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  investor_.Clear();
  requestid_ = 0;
  _internal_metadata_.Clear();
}

bool req_sync_account::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.req_sync_account)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 requestid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string investor = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_investor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->investor(this->investor_size() - 1).data(),
            static_cast<int>(this->investor(this->investor_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.req_sync_account.investor"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.req_sync_account)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.req_sync_account)
  return false;
#undef DO_
}

void req_sync_account::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.req_sync_account)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 requestid = 1;
  if (this->requestid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // repeated string investor = 2;
  for (int i = 0, n = this->investor_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investor(i).data(), static_cast<int>(this->investor(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.req_sync_account.investor");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->investor(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.req_sync_account)
}

::google::protobuf::uint8* req_sync_account::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.req_sync_account)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 requestid = 1;
  if (this->requestid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // repeated string investor = 2;
  for (int i = 0, n = this->investor_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investor(i).data(), static_cast<int>(this->investor(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.req_sync_account.investor");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->investor(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.req_sync_account)
  return target;
}

size_t req_sync_account::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.req_sync_account)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string investor = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->investor_size());
  for (int i = 0, n = this->investor_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->investor(i));
  }

  // int32 requestid = 1;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->requestid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void req_sync_account::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.req_sync_account)
  GOOGLE_DCHECK_NE(&from, this);
  const req_sync_account* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const req_sync_account>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.req_sync_account)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.req_sync_account)
    MergeFrom(*source);
  }
}

void req_sync_account::MergeFrom(const req_sync_account& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.req_sync_account)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  investor_.MergeFrom(from.investor_);
  if (from.requestid() != 0) {
    set_requestid(from.requestid());
  }
}

void req_sync_account::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.req_sync_account)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void req_sync_account::CopyFrom(const req_sync_account& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.req_sync_account)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool req_sync_account::IsInitialized() const {
  return true;
}

void req_sync_account::Swap(req_sync_account* other) {
  if (other == this) return;
  InternalSwap(other);
}
void req_sync_account::InternalSwap(req_sync_account* other) {
  using std::swap;
  investor_.InternalSwap(&other->investor_);
  swap(requestid_, other->requestid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata req_sync_account::GetMetadata() const {
  protobuf_riskapi_5faction_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5faction_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// req_sync_account

// int32 requestid = 1;
void req_sync_account::clear_requestid() {
  requestid_ = 0;
}
::google::protobuf::int32 req_sync_account::requestid() const {
  // @@protoc_insertion_point(field_get:risk.req_sync_account.requestid)
  return requestid_;
}
void req_sync_account::set_requestid(::google::protobuf::int32 value) {
  
  requestid_ = value;
  // @@protoc_insertion_point(field_set:risk.req_sync_account.requestid)
}

// repeated string investor = 2;
int req_sync_account::investor_size() const {
  return investor_.size();
}
void req_sync_account::clear_investor() {
  investor_.Clear();
}
const ::std::string& req_sync_account::investor(int index) const {
  // @@protoc_insertion_point(field_get:risk.req_sync_account.investor)
  return investor_.Get(index);
}
::std::string* req_sync_account::mutable_investor(int index) {
  // @@protoc_insertion_point(field_mutable:risk.req_sync_account.investor)
  return investor_.Mutable(index);
}
void req_sync_account::set_investor(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:risk.req_sync_account.investor)
  investor_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void req_sync_account::set_investor(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:risk.req_sync_account.investor)
  investor_.Mutable(index)->assign(std::move(value));
}
#endif
void req_sync_account::set_investor(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  investor_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:risk.req_sync_account.investor)
}
void req_sync_account::set_investor(int index, const char* value, size_t size) {
  investor_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:risk.req_sync_account.investor)
}
::std::string* req_sync_account::add_investor() {
  // @@protoc_insertion_point(field_add_mutable:risk.req_sync_account.investor)
  return investor_.Add();
}
void req_sync_account::add_investor(const ::std::string& value) {
  investor_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:risk.req_sync_account.investor)
}
#if LANG_CXX11
void req_sync_account::add_investor(::std::string&& value) {
  investor_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:risk.req_sync_account.investor)
}
#endif
void req_sync_account::add_investor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  investor_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:risk.req_sync_account.investor)
}
void req_sync_account::add_investor(const char* value, size_t size) {
  investor_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:risk.req_sync_account.investor)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
req_sync_account::investor() const {
  // @@protoc_insertion_point(field_list:risk.req_sync_account.investor)
  return investor_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
req_sync_account::mutable_investor() {
  // @@protoc_insertion_point(field_mutable_list:risk.req_sync_account.investor)
  return &investor_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int subscribe_sync_account::kInvestorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

subscribe_sync_account::subscribe_sync_account()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5faction_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.subscribe_sync_account)
}
subscribe_sync_account::subscribe_sync_account(const subscribe_sync_account& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      investor_(from.investor_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:risk.subscribe_sync_account)
}

void subscribe_sync_account::SharedCtor() {
  _cached_size_ = 0;
}

subscribe_sync_account::~subscribe_sync_account() {
  // @@protoc_insertion_point(destructor:risk.subscribe_sync_account)
  SharedDtor();
}

void subscribe_sync_account::SharedDtor() {
}

void subscribe_sync_account::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* subscribe_sync_account::descriptor() {
  protobuf_riskapi_5faction_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5faction_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const subscribe_sync_account& subscribe_sync_account::default_instance() {
  protobuf_riskapi_5faction_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

subscribe_sync_account* subscribe_sync_account::New(::google::protobuf::Arena* arena) const {
  subscribe_sync_account* n = new subscribe_sync_account;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void subscribe_sync_account::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.subscribe_sync_account)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  investor_.Clear();
  _internal_metadata_.Clear();
}

bool subscribe_sync_account::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.subscribe_sync_account)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string investor = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_investor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->investor(this->investor_size() - 1).data(),
            static_cast<int>(this->investor(this->investor_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.subscribe_sync_account.investor"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.subscribe_sync_account)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.subscribe_sync_account)
  return false;
#undef DO_
}

void subscribe_sync_account::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.subscribe_sync_account)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string investor = 1;
  for (int i = 0, n = this->investor_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investor(i).data(), static_cast<int>(this->investor(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.subscribe_sync_account.investor");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->investor(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.subscribe_sync_account)
}

::google::protobuf::uint8* subscribe_sync_account::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.subscribe_sync_account)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string investor = 1;
  for (int i = 0, n = this->investor_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investor(i).data(), static_cast<int>(this->investor(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.subscribe_sync_account.investor");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->investor(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.subscribe_sync_account)
  return target;
}

size_t subscribe_sync_account::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.subscribe_sync_account)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string investor = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->investor_size());
  for (int i = 0, n = this->investor_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->investor(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void subscribe_sync_account::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.subscribe_sync_account)
  GOOGLE_DCHECK_NE(&from, this);
  const subscribe_sync_account* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const subscribe_sync_account>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.subscribe_sync_account)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.subscribe_sync_account)
    MergeFrom(*source);
  }
}

void subscribe_sync_account::MergeFrom(const subscribe_sync_account& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.subscribe_sync_account)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  investor_.MergeFrom(from.investor_);
}

void subscribe_sync_account::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.subscribe_sync_account)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void subscribe_sync_account::CopyFrom(const subscribe_sync_account& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.subscribe_sync_account)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool subscribe_sync_account::IsInitialized() const {
  return true;
}

void subscribe_sync_account::Swap(subscribe_sync_account* other) {
  if (other == this) return;
  InternalSwap(other);
}
void subscribe_sync_account::InternalSwap(subscribe_sync_account* other) {
  using std::swap;
  investor_.InternalSwap(&other->investor_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata subscribe_sync_account::GetMetadata() const {
  protobuf_riskapi_5faction_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5faction_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// subscribe_sync_account

// repeated string investor = 1;
int subscribe_sync_account::investor_size() const {
  return investor_.size();
}
void subscribe_sync_account::clear_investor() {
  investor_.Clear();
}
const ::std::string& subscribe_sync_account::investor(int index) const {
  // @@protoc_insertion_point(field_get:risk.subscribe_sync_account.investor)
  return investor_.Get(index);
}
::std::string* subscribe_sync_account::mutable_investor(int index) {
  // @@protoc_insertion_point(field_mutable:risk.subscribe_sync_account.investor)
  return investor_.Mutable(index);
}
void subscribe_sync_account::set_investor(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:risk.subscribe_sync_account.investor)
  investor_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void subscribe_sync_account::set_investor(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:risk.subscribe_sync_account.investor)
  investor_.Mutable(index)->assign(std::move(value));
}
#endif
void subscribe_sync_account::set_investor(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  investor_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:risk.subscribe_sync_account.investor)
}
void subscribe_sync_account::set_investor(int index, const char* value, size_t size) {
  investor_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:risk.subscribe_sync_account.investor)
}
::std::string* subscribe_sync_account::add_investor() {
  // @@protoc_insertion_point(field_add_mutable:risk.subscribe_sync_account.investor)
  return investor_.Add();
}
void subscribe_sync_account::add_investor(const ::std::string& value) {
  investor_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:risk.subscribe_sync_account.investor)
}
#if LANG_CXX11
void subscribe_sync_account::add_investor(::std::string&& value) {
  investor_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:risk.subscribe_sync_account.investor)
}
#endif
void subscribe_sync_account::add_investor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  investor_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:risk.subscribe_sync_account.investor)
}
void subscribe_sync_account::add_investor(const char* value, size_t size) {
  investor_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:risk.subscribe_sync_account.investor)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
subscribe_sync_account::investor() const {
  // @@protoc_insertion_point(field_list:risk.subscribe_sync_account.investor)
  return investor_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
subscribe_sync_account::mutable_investor() {
  // @@protoc_insertion_point(field_mutable_list:risk.subscribe_sync_account.investor)
  return &investor_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int unsubscribe_sync_account::kInvestorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

unsubscribe_sync_account::unsubscribe_sync_account()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5faction_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.unsubscribe_sync_account)
}
unsubscribe_sync_account::unsubscribe_sync_account(const unsubscribe_sync_account& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      investor_(from.investor_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:risk.unsubscribe_sync_account)
}

void unsubscribe_sync_account::SharedCtor() {
  _cached_size_ = 0;
}

unsubscribe_sync_account::~unsubscribe_sync_account() {
  // @@protoc_insertion_point(destructor:risk.unsubscribe_sync_account)
  SharedDtor();
}

void unsubscribe_sync_account::SharedDtor() {
}

void unsubscribe_sync_account::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* unsubscribe_sync_account::descriptor() {
  protobuf_riskapi_5faction_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5faction_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const unsubscribe_sync_account& unsubscribe_sync_account::default_instance() {
  protobuf_riskapi_5faction_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

unsubscribe_sync_account* unsubscribe_sync_account::New(::google::protobuf::Arena* arena) const {
  unsubscribe_sync_account* n = new unsubscribe_sync_account;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void unsubscribe_sync_account::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.unsubscribe_sync_account)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  investor_.Clear();
  _internal_metadata_.Clear();
}

bool unsubscribe_sync_account::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.unsubscribe_sync_account)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string investor = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_investor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->investor(this->investor_size() - 1).data(),
            static_cast<int>(this->investor(this->investor_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.unsubscribe_sync_account.investor"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.unsubscribe_sync_account)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.unsubscribe_sync_account)
  return false;
#undef DO_
}

void unsubscribe_sync_account::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.unsubscribe_sync_account)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string investor = 1;
  for (int i = 0, n = this->investor_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investor(i).data(), static_cast<int>(this->investor(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.unsubscribe_sync_account.investor");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->investor(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.unsubscribe_sync_account)
}

::google::protobuf::uint8* unsubscribe_sync_account::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.unsubscribe_sync_account)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string investor = 1;
  for (int i = 0, n = this->investor_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investor(i).data(), static_cast<int>(this->investor(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.unsubscribe_sync_account.investor");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->investor(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.unsubscribe_sync_account)
  return target;
}

size_t unsubscribe_sync_account::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.unsubscribe_sync_account)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string investor = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->investor_size());
  for (int i = 0, n = this->investor_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->investor(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void unsubscribe_sync_account::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.unsubscribe_sync_account)
  GOOGLE_DCHECK_NE(&from, this);
  const unsubscribe_sync_account* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const unsubscribe_sync_account>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.unsubscribe_sync_account)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.unsubscribe_sync_account)
    MergeFrom(*source);
  }
}

void unsubscribe_sync_account::MergeFrom(const unsubscribe_sync_account& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.unsubscribe_sync_account)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  investor_.MergeFrom(from.investor_);
}

void unsubscribe_sync_account::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.unsubscribe_sync_account)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void unsubscribe_sync_account::CopyFrom(const unsubscribe_sync_account& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.unsubscribe_sync_account)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool unsubscribe_sync_account::IsInitialized() const {
  return true;
}

void unsubscribe_sync_account::Swap(unsubscribe_sync_account* other) {
  if (other == this) return;
  InternalSwap(other);
}
void unsubscribe_sync_account::InternalSwap(unsubscribe_sync_account* other) {
  using std::swap;
  investor_.InternalSwap(&other->investor_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata unsubscribe_sync_account::GetMetadata() const {
  protobuf_riskapi_5faction_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5faction_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// unsubscribe_sync_account

// repeated string investor = 1;
int unsubscribe_sync_account::investor_size() const {
  return investor_.size();
}
void unsubscribe_sync_account::clear_investor() {
  investor_.Clear();
}
const ::std::string& unsubscribe_sync_account::investor(int index) const {
  // @@protoc_insertion_point(field_get:risk.unsubscribe_sync_account.investor)
  return investor_.Get(index);
}
::std::string* unsubscribe_sync_account::mutable_investor(int index) {
  // @@protoc_insertion_point(field_mutable:risk.unsubscribe_sync_account.investor)
  return investor_.Mutable(index);
}
void unsubscribe_sync_account::set_investor(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:risk.unsubscribe_sync_account.investor)
  investor_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void unsubscribe_sync_account::set_investor(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:risk.unsubscribe_sync_account.investor)
  investor_.Mutable(index)->assign(std::move(value));
}
#endif
void unsubscribe_sync_account::set_investor(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  investor_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:risk.unsubscribe_sync_account.investor)
}
void unsubscribe_sync_account::set_investor(int index, const char* value, size_t size) {
  investor_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:risk.unsubscribe_sync_account.investor)
}
::std::string* unsubscribe_sync_account::add_investor() {
  // @@protoc_insertion_point(field_add_mutable:risk.unsubscribe_sync_account.investor)
  return investor_.Add();
}
void unsubscribe_sync_account::add_investor(const ::std::string& value) {
  investor_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:risk.unsubscribe_sync_account.investor)
}
#if LANG_CXX11
void unsubscribe_sync_account::add_investor(::std::string&& value) {
  investor_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:risk.unsubscribe_sync_account.investor)
}
#endif
void unsubscribe_sync_account::add_investor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  investor_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:risk.unsubscribe_sync_account.investor)
}
void unsubscribe_sync_account::add_investor(const char* value, size_t size) {
  investor_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:risk.unsubscribe_sync_account.investor)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
unsubscribe_sync_account::investor() const {
  // @@protoc_insertion_point(field_list:risk.unsubscribe_sync_account.investor)
  return investor_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
unsubscribe_sync_account::mutable_investor() {
  // @@protoc_insertion_point(field_mutable_list:risk.unsubscribe_sync_account.investor)
  return &investor_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int req_margin::kRequestidFieldNumber;
const int req_margin::kInvestorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

req_margin::req_margin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5faction_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.req_margin)
}
req_margin::req_margin(const req_margin& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      investor_(from.investor_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  requestid_ = from.requestid_;
  // @@protoc_insertion_point(copy_constructor:risk.req_margin)
}

void req_margin::SharedCtor() {
  requestid_ = 0;
  _cached_size_ = 0;
}

req_margin::~req_margin() {
  // @@protoc_insertion_point(destructor:risk.req_margin)
  SharedDtor();
}

void req_margin::SharedDtor() {
}

void req_margin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* req_margin::descriptor() {
  protobuf_riskapi_5faction_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5faction_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const req_margin& req_margin::default_instance() {
  protobuf_riskapi_5faction_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

req_margin* req_margin::New(::google::protobuf::Arena* arena) const {
  req_margin* n = new req_margin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void req_margin::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.req_margin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  investor_.Clear();
  requestid_ = 0;
  _internal_metadata_.Clear();
}

bool req_margin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.req_margin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 requestid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string investor = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_investor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->investor(this->investor_size() - 1).data(),
            static_cast<int>(this->investor(this->investor_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.req_margin.investor"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.req_margin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.req_margin)
  return false;
#undef DO_
}

void req_margin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.req_margin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 requestid = 1;
  if (this->requestid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // repeated string investor = 2;
  for (int i = 0, n = this->investor_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investor(i).data(), static_cast<int>(this->investor(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.req_margin.investor");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->investor(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.req_margin)
}

::google::protobuf::uint8* req_margin::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.req_margin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 requestid = 1;
  if (this->requestid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // repeated string investor = 2;
  for (int i = 0, n = this->investor_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investor(i).data(), static_cast<int>(this->investor(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.req_margin.investor");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->investor(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.req_margin)
  return target;
}

size_t req_margin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.req_margin)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string investor = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->investor_size());
  for (int i = 0, n = this->investor_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->investor(i));
  }

  // int32 requestid = 1;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->requestid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void req_margin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.req_margin)
  GOOGLE_DCHECK_NE(&from, this);
  const req_margin* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const req_margin>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.req_margin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.req_margin)
    MergeFrom(*source);
  }
}

void req_margin::MergeFrom(const req_margin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.req_margin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  investor_.MergeFrom(from.investor_);
  if (from.requestid() != 0) {
    set_requestid(from.requestid());
  }
}

void req_margin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.req_margin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void req_margin::CopyFrom(const req_margin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.req_margin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool req_margin::IsInitialized() const {
  return true;
}

void req_margin::Swap(req_margin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void req_margin::InternalSwap(req_margin* other) {
  using std::swap;
  investor_.InternalSwap(&other->investor_);
  swap(requestid_, other->requestid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata req_margin::GetMetadata() const {
  protobuf_riskapi_5faction_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5faction_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// req_margin

// int32 requestid = 1;
void req_margin::clear_requestid() {
  requestid_ = 0;
}
::google::protobuf::int32 req_margin::requestid() const {
  // @@protoc_insertion_point(field_get:risk.req_margin.requestid)
  return requestid_;
}
void req_margin::set_requestid(::google::protobuf::int32 value) {
  
  requestid_ = value;
  // @@protoc_insertion_point(field_set:risk.req_margin.requestid)
}

// repeated string investor = 2;
int req_margin::investor_size() const {
  return investor_.size();
}
void req_margin::clear_investor() {
  investor_.Clear();
}
const ::std::string& req_margin::investor(int index) const {
  // @@protoc_insertion_point(field_get:risk.req_margin.investor)
  return investor_.Get(index);
}
::std::string* req_margin::mutable_investor(int index) {
  // @@protoc_insertion_point(field_mutable:risk.req_margin.investor)
  return investor_.Mutable(index);
}
void req_margin::set_investor(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:risk.req_margin.investor)
  investor_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void req_margin::set_investor(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:risk.req_margin.investor)
  investor_.Mutable(index)->assign(std::move(value));
}
#endif
void req_margin::set_investor(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  investor_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:risk.req_margin.investor)
}
void req_margin::set_investor(int index, const char* value, size_t size) {
  investor_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:risk.req_margin.investor)
}
::std::string* req_margin::add_investor() {
  // @@protoc_insertion_point(field_add_mutable:risk.req_margin.investor)
  return investor_.Add();
}
void req_margin::add_investor(const ::std::string& value) {
  investor_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:risk.req_margin.investor)
}
#if LANG_CXX11
void req_margin::add_investor(::std::string&& value) {
  investor_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:risk.req_margin.investor)
}
#endif
void req_margin::add_investor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  investor_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:risk.req_margin.investor)
}
void req_margin::add_investor(const char* value, size_t size) {
  investor_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:risk.req_margin.investor)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
req_margin::investor() const {
  // @@protoc_insertion_point(field_list:risk.req_margin.investor)
  return investor_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
req_margin::mutable_investor() {
  // @@protoc_insertion_point(field_mutable_list:risk.req_margin.investor)
  return &investor_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int subscribe_margin::kInvestorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

subscribe_margin::subscribe_margin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5faction_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.subscribe_margin)
}
subscribe_margin::subscribe_margin(const subscribe_margin& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      investor_(from.investor_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:risk.subscribe_margin)
}

void subscribe_margin::SharedCtor() {
  _cached_size_ = 0;
}

subscribe_margin::~subscribe_margin() {
  // @@protoc_insertion_point(destructor:risk.subscribe_margin)
  SharedDtor();
}

void subscribe_margin::SharedDtor() {
}

void subscribe_margin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* subscribe_margin::descriptor() {
  protobuf_riskapi_5faction_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5faction_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const subscribe_margin& subscribe_margin::default_instance() {
  protobuf_riskapi_5faction_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

subscribe_margin* subscribe_margin::New(::google::protobuf::Arena* arena) const {
  subscribe_margin* n = new subscribe_margin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void subscribe_margin::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.subscribe_margin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  investor_.Clear();
  _internal_metadata_.Clear();
}

bool subscribe_margin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.subscribe_margin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string investor = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_investor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->investor(this->investor_size() - 1).data(),
            static_cast<int>(this->investor(this->investor_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.subscribe_margin.investor"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.subscribe_margin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.subscribe_margin)
  return false;
#undef DO_
}

void subscribe_margin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.subscribe_margin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string investor = 1;
  for (int i = 0, n = this->investor_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investor(i).data(), static_cast<int>(this->investor(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.subscribe_margin.investor");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->investor(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.subscribe_margin)
}

::google::protobuf::uint8* subscribe_margin::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.subscribe_margin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string investor = 1;
  for (int i = 0, n = this->investor_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investor(i).data(), static_cast<int>(this->investor(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.subscribe_margin.investor");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->investor(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.subscribe_margin)
  return target;
}

size_t subscribe_margin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.subscribe_margin)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string investor = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->investor_size());
  for (int i = 0, n = this->investor_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->investor(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void subscribe_margin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.subscribe_margin)
  GOOGLE_DCHECK_NE(&from, this);
  const subscribe_margin* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const subscribe_margin>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.subscribe_margin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.subscribe_margin)
    MergeFrom(*source);
  }
}

void subscribe_margin::MergeFrom(const subscribe_margin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.subscribe_margin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  investor_.MergeFrom(from.investor_);
}

void subscribe_margin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.subscribe_margin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void subscribe_margin::CopyFrom(const subscribe_margin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.subscribe_margin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool subscribe_margin::IsInitialized() const {
  return true;
}

void subscribe_margin::Swap(subscribe_margin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void subscribe_margin::InternalSwap(subscribe_margin* other) {
  using std::swap;
  investor_.InternalSwap(&other->investor_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata subscribe_margin::GetMetadata() const {
  protobuf_riskapi_5faction_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5faction_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// subscribe_margin

// repeated string investor = 1;
int subscribe_margin::investor_size() const {
  return investor_.size();
}
void subscribe_margin::clear_investor() {
  investor_.Clear();
}
const ::std::string& subscribe_margin::investor(int index) const {
  // @@protoc_insertion_point(field_get:risk.subscribe_margin.investor)
  return investor_.Get(index);
}
::std::string* subscribe_margin::mutable_investor(int index) {
  // @@protoc_insertion_point(field_mutable:risk.subscribe_margin.investor)
  return investor_.Mutable(index);
}
void subscribe_margin::set_investor(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:risk.subscribe_margin.investor)
  investor_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void subscribe_margin::set_investor(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:risk.subscribe_margin.investor)
  investor_.Mutable(index)->assign(std::move(value));
}
#endif
void subscribe_margin::set_investor(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  investor_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:risk.subscribe_margin.investor)
}
void subscribe_margin::set_investor(int index, const char* value, size_t size) {
  investor_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:risk.subscribe_margin.investor)
}
::std::string* subscribe_margin::add_investor() {
  // @@protoc_insertion_point(field_add_mutable:risk.subscribe_margin.investor)
  return investor_.Add();
}
void subscribe_margin::add_investor(const ::std::string& value) {
  investor_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:risk.subscribe_margin.investor)
}
#if LANG_CXX11
void subscribe_margin::add_investor(::std::string&& value) {
  investor_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:risk.subscribe_margin.investor)
}
#endif
void subscribe_margin::add_investor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  investor_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:risk.subscribe_margin.investor)
}
void subscribe_margin::add_investor(const char* value, size_t size) {
  investor_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:risk.subscribe_margin.investor)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
subscribe_margin::investor() const {
  // @@protoc_insertion_point(field_list:risk.subscribe_margin.investor)
  return investor_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
subscribe_margin::mutable_investor() {
  // @@protoc_insertion_point(field_mutable_list:risk.subscribe_margin.investor)
  return &investor_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int unsubscribe_margin::kInvestorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

unsubscribe_margin::unsubscribe_margin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5faction_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.unsubscribe_margin)
}
unsubscribe_margin::unsubscribe_margin(const unsubscribe_margin& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      investor_(from.investor_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:risk.unsubscribe_margin)
}

void unsubscribe_margin::SharedCtor() {
  _cached_size_ = 0;
}

unsubscribe_margin::~unsubscribe_margin() {
  // @@protoc_insertion_point(destructor:risk.unsubscribe_margin)
  SharedDtor();
}

void unsubscribe_margin::SharedDtor() {
}

void unsubscribe_margin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* unsubscribe_margin::descriptor() {
  protobuf_riskapi_5faction_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5faction_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const unsubscribe_margin& unsubscribe_margin::default_instance() {
  protobuf_riskapi_5faction_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

unsubscribe_margin* unsubscribe_margin::New(::google::protobuf::Arena* arena) const {
  unsubscribe_margin* n = new unsubscribe_margin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void unsubscribe_margin::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.unsubscribe_margin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  investor_.Clear();
  _internal_metadata_.Clear();
}

bool unsubscribe_margin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.unsubscribe_margin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string investor = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_investor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->investor(this->investor_size() - 1).data(),
            static_cast<int>(this->investor(this->investor_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.unsubscribe_margin.investor"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.unsubscribe_margin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.unsubscribe_margin)
  return false;
#undef DO_
}

void unsubscribe_margin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.unsubscribe_margin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string investor = 1;
  for (int i = 0, n = this->investor_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investor(i).data(), static_cast<int>(this->investor(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.unsubscribe_margin.investor");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->investor(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.unsubscribe_margin)
}

::google::protobuf::uint8* unsubscribe_margin::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.unsubscribe_margin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string investor = 1;
  for (int i = 0, n = this->investor_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investor(i).data(), static_cast<int>(this->investor(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.unsubscribe_margin.investor");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->investor(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.unsubscribe_margin)
  return target;
}

size_t unsubscribe_margin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.unsubscribe_margin)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string investor = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->investor_size());
  for (int i = 0, n = this->investor_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->investor(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void unsubscribe_margin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.unsubscribe_margin)
  GOOGLE_DCHECK_NE(&from, this);
  const unsubscribe_margin* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const unsubscribe_margin>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.unsubscribe_margin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.unsubscribe_margin)
    MergeFrom(*source);
  }
}

void unsubscribe_margin::MergeFrom(const unsubscribe_margin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.unsubscribe_margin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  investor_.MergeFrom(from.investor_);
}

void unsubscribe_margin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.unsubscribe_margin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void unsubscribe_margin::CopyFrom(const unsubscribe_margin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.unsubscribe_margin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool unsubscribe_margin::IsInitialized() const {
  return true;
}

void unsubscribe_margin::Swap(unsubscribe_margin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void unsubscribe_margin::InternalSwap(unsubscribe_margin* other) {
  using std::swap;
  investor_.InternalSwap(&other->investor_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata unsubscribe_margin::GetMetadata() const {
  protobuf_riskapi_5faction_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5faction_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// unsubscribe_margin

// repeated string investor = 1;
int unsubscribe_margin::investor_size() const {
  return investor_.size();
}
void unsubscribe_margin::clear_investor() {
  investor_.Clear();
}
const ::std::string& unsubscribe_margin::investor(int index) const {
  // @@protoc_insertion_point(field_get:risk.unsubscribe_margin.investor)
  return investor_.Get(index);
}
::std::string* unsubscribe_margin::mutable_investor(int index) {
  // @@protoc_insertion_point(field_mutable:risk.unsubscribe_margin.investor)
  return investor_.Mutable(index);
}
void unsubscribe_margin::set_investor(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:risk.unsubscribe_margin.investor)
  investor_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void unsubscribe_margin::set_investor(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:risk.unsubscribe_margin.investor)
  investor_.Mutable(index)->assign(std::move(value));
}
#endif
void unsubscribe_margin::set_investor(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  investor_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:risk.unsubscribe_margin.investor)
}
void unsubscribe_margin::set_investor(int index, const char* value, size_t size) {
  investor_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:risk.unsubscribe_margin.investor)
}
::std::string* unsubscribe_margin::add_investor() {
  // @@protoc_insertion_point(field_add_mutable:risk.unsubscribe_margin.investor)
  return investor_.Add();
}
void unsubscribe_margin::add_investor(const ::std::string& value) {
  investor_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:risk.unsubscribe_margin.investor)
}
#if LANG_CXX11
void unsubscribe_margin::add_investor(::std::string&& value) {
  investor_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:risk.unsubscribe_margin.investor)
}
#endif
void unsubscribe_margin::add_investor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  investor_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:risk.unsubscribe_margin.investor)
}
void unsubscribe_margin::add_investor(const char* value, size_t size) {
  investor_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:risk.unsubscribe_margin.investor)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
unsubscribe_margin::investor() const {
  // @@protoc_insertion_point(field_list:risk.unsubscribe_margin.investor)
  return investor_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
unsubscribe_margin::mutable_investor() {
  // @@protoc_insertion_point(field_mutable_list:risk.unsubscribe_margin.investor)
  return &investor_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int req_risker_investor::kRequestidFieldNumber;
const int req_risker_investor::kUseridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

req_risker_investor::req_risker_investor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5faction_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.req_risker_investor)
}
req_risker_investor::req_risker_investor(const req_risker_investor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.userid().size() > 0) {
    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  requestid_ = from.requestid_;
  // @@protoc_insertion_point(copy_constructor:risk.req_risker_investor)
}

void req_risker_investor::SharedCtor() {
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestid_ = 0;
  _cached_size_ = 0;
}

req_risker_investor::~req_risker_investor() {
  // @@protoc_insertion_point(destructor:risk.req_risker_investor)
  SharedDtor();
}

void req_risker_investor::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void req_risker_investor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* req_risker_investor::descriptor() {
  protobuf_riskapi_5faction_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5faction_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const req_risker_investor& req_risker_investor::default_instance() {
  protobuf_riskapi_5faction_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

req_risker_investor* req_risker_investor::New(::google::protobuf::Arena* arena) const {
  req_risker_investor* n = new req_risker_investor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void req_risker_investor::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.req_risker_investor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestid_ = 0;
  _internal_metadata_.Clear();
}

bool req_risker_investor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.req_risker_investor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 requestid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string userid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->userid().data(), static_cast<int>(this->userid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.req_risker_investor.userid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.req_risker_investor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.req_risker_investor)
  return false;
#undef DO_
}

void req_risker_investor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.req_risker_investor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 requestid = 1;
  if (this->requestid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // string userid = 2;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), static_cast<int>(this->userid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.req_risker_investor.userid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->userid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.req_risker_investor)
}

::google::protobuf::uint8* req_risker_investor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.req_risker_investor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 requestid = 1;
  if (this->requestid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // string userid = 2;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), static_cast<int>(this->userid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.req_risker_investor.userid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->userid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.req_risker_investor)
  return target;
}

size_t req_risker_investor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.req_risker_investor)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string userid = 2;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  // int32 requestid = 1;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->requestid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void req_risker_investor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.req_risker_investor)
  GOOGLE_DCHECK_NE(&from, this);
  const req_risker_investor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const req_risker_investor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.req_risker_investor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.req_risker_investor)
    MergeFrom(*source);
  }
}

void req_risker_investor::MergeFrom(const req_risker_investor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.req_risker_investor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.userid().size() > 0) {

    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  if (from.requestid() != 0) {
    set_requestid(from.requestid());
  }
}

void req_risker_investor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.req_risker_investor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void req_risker_investor::CopyFrom(const req_risker_investor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.req_risker_investor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool req_risker_investor::IsInitialized() const {
  return true;
}

void req_risker_investor::Swap(req_risker_investor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void req_risker_investor::InternalSwap(req_risker_investor* other) {
  using std::swap;
  userid_.Swap(&other->userid_);
  swap(requestid_, other->requestid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata req_risker_investor::GetMetadata() const {
  protobuf_riskapi_5faction_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5faction_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// req_risker_investor

// int32 requestid = 1;
void req_risker_investor::clear_requestid() {
  requestid_ = 0;
}
::google::protobuf::int32 req_risker_investor::requestid() const {
  // @@protoc_insertion_point(field_get:risk.req_risker_investor.requestid)
  return requestid_;
}
void req_risker_investor::set_requestid(::google::protobuf::int32 value) {
  
  requestid_ = value;
  // @@protoc_insertion_point(field_set:risk.req_risker_investor.requestid)
}

// string userid = 2;
void req_risker_investor::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& req_risker_investor::userid() const {
  // @@protoc_insertion_point(field_get:risk.req_risker_investor.userid)
  return userid_.GetNoArena();
}
void req_risker_investor::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.req_risker_investor.userid)
}
#if LANG_CXX11
void req_risker_investor::set_userid(::std::string&& value) {
  
  userid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.req_risker_investor.userid)
}
#endif
void req_risker_investor::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.req_risker_investor.userid)
}
void req_risker_investor::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.req_risker_investor.userid)
}
::std::string* req_risker_investor::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:risk.req_risker_investor.userid)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* req_risker_investor::release_userid() {
  // @@protoc_insertion_point(field_release:risk.req_risker_investor.userid)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void req_risker_investor::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:risk.req_risker_investor.userid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int sys_group::kRiskgroupidFieldNumber;
const int sys_group::kNameFieldNumber;
const int sys_group::kDescFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

sys_group::sys_group()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5faction_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.sys_group)
}
sys_group::sys_group(const sys_group& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  riskgroupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.riskgroupid().size() > 0) {
    riskgroupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.riskgroupid_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.desc().size() > 0) {
    desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  // @@protoc_insertion_point(copy_constructor:risk.sys_group)
}

void sys_group::SharedCtor() {
  riskgroupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

sys_group::~sys_group() {
  // @@protoc_insertion_point(destructor:risk.sys_group)
  SharedDtor();
}

void sys_group::SharedDtor() {
  riskgroupid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void sys_group::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sys_group::descriptor() {
  protobuf_riskapi_5faction_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5faction_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const sys_group& sys_group::default_instance() {
  protobuf_riskapi_5faction_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

sys_group* sys_group::New(::google::protobuf::Arena* arena) const {
  sys_group* n = new sys_group;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void sys_group::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.sys_group)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  riskgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool sys_group::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.sys_group)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string riskgroupid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_riskgroupid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->riskgroupid().data(), static_cast<int>(this->riskgroupid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.sys_group.riskgroupid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.sys_group.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string desc = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->desc().data(), static_cast<int>(this->desc().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.sys_group.desc"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.sys_group)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.sys_group)
  return false;
#undef DO_
}

void sys_group::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.sys_group)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string riskgroupid = 1;
  if (this->riskgroupid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->riskgroupid().data(), static_cast<int>(this->riskgroupid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.sys_group.riskgroupid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->riskgroupid(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.sys_group.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // string desc = 3;
  if (this->desc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->desc().data(), static_cast<int>(this->desc().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.sys_group.desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->desc(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.sys_group)
}

::google::protobuf::uint8* sys_group::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.sys_group)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string riskgroupid = 1;
  if (this->riskgroupid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->riskgroupid().data(), static_cast<int>(this->riskgroupid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.sys_group.riskgroupid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->riskgroupid(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.sys_group.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // string desc = 3;
  if (this->desc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->desc().data(), static_cast<int>(this->desc().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.sys_group.desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->desc(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.sys_group)
  return target;
}

size_t sys_group::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.sys_group)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string riskgroupid = 1;
  if (this->riskgroupid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->riskgroupid());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string desc = 3;
  if (this->desc().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->desc());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sys_group::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.sys_group)
  GOOGLE_DCHECK_NE(&from, this);
  const sys_group* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const sys_group>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.sys_group)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.sys_group)
    MergeFrom(*source);
  }
}

void sys_group::MergeFrom(const sys_group& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.sys_group)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.riskgroupid().size() > 0) {

    riskgroupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.riskgroupid_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.desc().size() > 0) {

    desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
}

void sys_group::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.sys_group)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sys_group::CopyFrom(const sys_group& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.sys_group)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sys_group::IsInitialized() const {
  return true;
}

void sys_group::Swap(sys_group* other) {
  if (other == this) return;
  InternalSwap(other);
}
void sys_group::InternalSwap(sys_group* other) {
  using std::swap;
  riskgroupid_.Swap(&other->riskgroupid_);
  name_.Swap(&other->name_);
  desc_.Swap(&other->desc_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata sys_group::GetMetadata() const {
  protobuf_riskapi_5faction_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5faction_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// sys_group

// string riskgroupid = 1;
void sys_group::clear_riskgroupid() {
  riskgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& sys_group::riskgroupid() const {
  // @@protoc_insertion_point(field_get:risk.sys_group.riskgroupid)
  return riskgroupid_.GetNoArena();
}
void sys_group::set_riskgroupid(const ::std::string& value) {
  
  riskgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.sys_group.riskgroupid)
}
#if LANG_CXX11
void sys_group::set_riskgroupid(::std::string&& value) {
  
  riskgroupid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.sys_group.riskgroupid)
}
#endif
void sys_group::set_riskgroupid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  riskgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.sys_group.riskgroupid)
}
void sys_group::set_riskgroupid(const char* value, size_t size) {
  
  riskgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.sys_group.riskgroupid)
}
::std::string* sys_group::mutable_riskgroupid() {
  
  // @@protoc_insertion_point(field_mutable:risk.sys_group.riskgroupid)
  return riskgroupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* sys_group::release_riskgroupid() {
  // @@protoc_insertion_point(field_release:risk.sys_group.riskgroupid)
  
  return riskgroupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void sys_group::set_allocated_riskgroupid(::std::string* riskgroupid) {
  if (riskgroupid != NULL) {
    
  } else {
    
  }
  riskgroupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), riskgroupid);
  // @@protoc_insertion_point(field_set_allocated:risk.sys_group.riskgroupid)
}

// string name = 2;
void sys_group::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& sys_group::name() const {
  // @@protoc_insertion_point(field_get:risk.sys_group.name)
  return name_.GetNoArena();
}
void sys_group::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.sys_group.name)
}
#if LANG_CXX11
void sys_group::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.sys_group.name)
}
#endif
void sys_group::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.sys_group.name)
}
void sys_group::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.sys_group.name)
}
::std::string* sys_group::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:risk.sys_group.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* sys_group::release_name() {
  // @@protoc_insertion_point(field_release:risk.sys_group.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void sys_group::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:risk.sys_group.name)
}

// string desc = 3;
void sys_group::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& sys_group::desc() const {
  // @@protoc_insertion_point(field_get:risk.sys_group.desc)
  return desc_.GetNoArena();
}
void sys_group::set_desc(const ::std::string& value) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.sys_group.desc)
}
#if LANG_CXX11
void sys_group::set_desc(::std::string&& value) {
  
  desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.sys_group.desc)
}
#endif
void sys_group::set_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.sys_group.desc)
}
void sys_group::set_desc(const char* value, size_t size) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.sys_group.desc)
}
::std::string* sys_group::mutable_desc() {
  
  // @@protoc_insertion_point(field_mutable:risk.sys_group.desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* sys_group::release_desc() {
  // @@protoc_insertion_point(field_release:risk.sys_group.desc)
  
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void sys_group::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    
  } else {
    
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:risk.sys_group.desc)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int req_groups::kRequestidFieldNumber;
const int req_groups::kUseridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

req_groups::req_groups()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5faction_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.req_groups)
}
req_groups::req_groups(const req_groups& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.userid().size() > 0) {
    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  requestid_ = from.requestid_;
  // @@protoc_insertion_point(copy_constructor:risk.req_groups)
}

void req_groups::SharedCtor() {
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestid_ = 0;
  _cached_size_ = 0;
}

req_groups::~req_groups() {
  // @@protoc_insertion_point(destructor:risk.req_groups)
  SharedDtor();
}

void req_groups::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void req_groups::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* req_groups::descriptor() {
  protobuf_riskapi_5faction_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5faction_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const req_groups& req_groups::default_instance() {
  protobuf_riskapi_5faction_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

req_groups* req_groups::New(::google::protobuf::Arena* arena) const {
  req_groups* n = new req_groups;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void req_groups::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.req_groups)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestid_ = 0;
  _internal_metadata_.Clear();
}

bool req_groups::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.req_groups)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 requestid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string userid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->userid().data(), static_cast<int>(this->userid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.req_groups.userid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.req_groups)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.req_groups)
  return false;
#undef DO_
}

void req_groups::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.req_groups)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 requestid = 1;
  if (this->requestid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // string userid = 2;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), static_cast<int>(this->userid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.req_groups.userid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->userid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.req_groups)
}

::google::protobuf::uint8* req_groups::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.req_groups)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 requestid = 1;
  if (this->requestid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // string userid = 2;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), static_cast<int>(this->userid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.req_groups.userid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->userid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.req_groups)
  return target;
}

size_t req_groups::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.req_groups)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string userid = 2;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  // int32 requestid = 1;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->requestid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void req_groups::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.req_groups)
  GOOGLE_DCHECK_NE(&from, this);
  const req_groups* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const req_groups>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.req_groups)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.req_groups)
    MergeFrom(*source);
  }
}

void req_groups::MergeFrom(const req_groups& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.req_groups)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.userid().size() > 0) {

    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  if (from.requestid() != 0) {
    set_requestid(from.requestid());
  }
}

void req_groups::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.req_groups)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void req_groups::CopyFrom(const req_groups& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.req_groups)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool req_groups::IsInitialized() const {
  return true;
}

void req_groups::Swap(req_groups* other) {
  if (other == this) return;
  InternalSwap(other);
}
void req_groups::InternalSwap(req_groups* other) {
  using std::swap;
  userid_.Swap(&other->userid_);
  swap(requestid_, other->requestid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata req_groups::GetMetadata() const {
  protobuf_riskapi_5faction_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5faction_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// req_groups

// int32 requestid = 1;
void req_groups::clear_requestid() {
  requestid_ = 0;
}
::google::protobuf::int32 req_groups::requestid() const {
  // @@protoc_insertion_point(field_get:risk.req_groups.requestid)
  return requestid_;
}
void req_groups::set_requestid(::google::protobuf::int32 value) {
  
  requestid_ = value;
  // @@protoc_insertion_point(field_set:risk.req_groups.requestid)
}

// string userid = 2;
void req_groups::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& req_groups::userid() const {
  // @@protoc_insertion_point(field_get:risk.req_groups.userid)
  return userid_.GetNoArena();
}
void req_groups::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.req_groups.userid)
}
#if LANG_CXX11
void req_groups::set_userid(::std::string&& value) {
  
  userid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.req_groups.userid)
}
#endif
void req_groups::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.req_groups.userid)
}
void req_groups::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.req_groups.userid)
}
::std::string* req_groups::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:risk.req_groups.userid)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* req_groups::release_userid() {
  // @@protoc_insertion_point(field_release:risk.req_groups.userid)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void req_groups::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:risk.req_groups.userid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int req_add_group::kRequestidFieldNumber;
const int req_add_group::kUseridFieldNumber;
const int req_add_group::kGroupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

req_add_group::req_add_group()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5faction_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.req_add_group)
}
req_add_group::req_add_group(const req_add_group& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.userid().size() > 0) {
    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  if (from.has_group()) {
    group_ = new ::risk::sys_group(*from.group_);
  } else {
    group_ = NULL;
  }
  requestid_ = from.requestid_;
  // @@protoc_insertion_point(copy_constructor:risk.req_add_group)
}

void req_add_group::SharedCtor() {
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&group_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&requestid_) -
      reinterpret_cast<char*>(&group_)) + sizeof(requestid_));
  _cached_size_ = 0;
}

req_add_group::~req_add_group() {
  // @@protoc_insertion_point(destructor:risk.req_add_group)
  SharedDtor();
}

void req_add_group::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete group_;
}

void req_add_group::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* req_add_group::descriptor() {
  protobuf_riskapi_5faction_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5faction_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const req_add_group& req_add_group::default_instance() {
  protobuf_riskapi_5faction_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

req_add_group* req_add_group::New(::google::protobuf::Arena* arena) const {
  req_add_group* n = new req_add_group;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void req_add_group::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.req_add_group)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && group_ != NULL) {
    delete group_;
  }
  group_ = NULL;
  requestid_ = 0;
  _internal_metadata_.Clear();
}

bool req_add_group::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.req_add_group)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 requestid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string userid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->userid().data(), static_cast<int>(this->userid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.req_add_group.userid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .risk.sys_group group = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.req_add_group)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.req_add_group)
  return false;
#undef DO_
}

void req_add_group::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.req_add_group)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 requestid = 1;
  if (this->requestid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // string userid = 2;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), static_cast<int>(this->userid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.req_add_group.userid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->userid(), output);
  }

  // .risk.sys_group group = 3;
  if (this->has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->group_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.req_add_group)
}

::google::protobuf::uint8* req_add_group::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.req_add_group)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 requestid = 1;
  if (this->requestid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // string userid = 2;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), static_cast<int>(this->userid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.req_add_group.userid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->userid(), target);
  }

  // .risk.sys_group group = 3;
  if (this->has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->group_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.req_add_group)
  return target;
}

size_t req_add_group::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.req_add_group)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string userid = 2;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  // .risk.sys_group group = 3;
  if (this->has_group()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->group_);
  }

  // int32 requestid = 1;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->requestid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void req_add_group::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.req_add_group)
  GOOGLE_DCHECK_NE(&from, this);
  const req_add_group* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const req_add_group>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.req_add_group)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.req_add_group)
    MergeFrom(*source);
  }
}

void req_add_group::MergeFrom(const req_add_group& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.req_add_group)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.userid().size() > 0) {

    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  if (from.has_group()) {
    mutable_group()->::risk::sys_group::MergeFrom(from.group());
  }
  if (from.requestid() != 0) {
    set_requestid(from.requestid());
  }
}

void req_add_group::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.req_add_group)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void req_add_group::CopyFrom(const req_add_group& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.req_add_group)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool req_add_group::IsInitialized() const {
  return true;
}

void req_add_group::Swap(req_add_group* other) {
  if (other == this) return;
  InternalSwap(other);
}
void req_add_group::InternalSwap(req_add_group* other) {
  using std::swap;
  userid_.Swap(&other->userid_);
  swap(group_, other->group_);
  swap(requestid_, other->requestid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata req_add_group::GetMetadata() const {
  protobuf_riskapi_5faction_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5faction_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// req_add_group

// int32 requestid = 1;
void req_add_group::clear_requestid() {
  requestid_ = 0;
}
::google::protobuf::int32 req_add_group::requestid() const {
  // @@protoc_insertion_point(field_get:risk.req_add_group.requestid)
  return requestid_;
}
void req_add_group::set_requestid(::google::protobuf::int32 value) {
  
  requestid_ = value;
  // @@protoc_insertion_point(field_set:risk.req_add_group.requestid)
}

// string userid = 2;
void req_add_group::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& req_add_group::userid() const {
  // @@protoc_insertion_point(field_get:risk.req_add_group.userid)
  return userid_.GetNoArena();
}
void req_add_group::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.req_add_group.userid)
}
#if LANG_CXX11
void req_add_group::set_userid(::std::string&& value) {
  
  userid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.req_add_group.userid)
}
#endif
void req_add_group::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.req_add_group.userid)
}
void req_add_group::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.req_add_group.userid)
}
::std::string* req_add_group::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:risk.req_add_group.userid)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* req_add_group::release_userid() {
  // @@protoc_insertion_point(field_release:risk.req_add_group.userid)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void req_add_group::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:risk.req_add_group.userid)
}

// .risk.sys_group group = 3;
bool req_add_group::has_group() const {
  return this != internal_default_instance() && group_ != NULL;
}
void req_add_group::clear_group() {
  if (GetArenaNoVirtual() == NULL && group_ != NULL) delete group_;
  group_ = NULL;
}
const ::risk::sys_group& req_add_group::group() const {
  const ::risk::sys_group* p = group_;
  // @@protoc_insertion_point(field_get:risk.req_add_group.group)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::sys_group*>(
      &::risk::_sys_group_default_instance_);
}
::risk::sys_group* req_add_group::mutable_group() {
  
  if (group_ == NULL) {
    group_ = new ::risk::sys_group;
  }
  // @@protoc_insertion_point(field_mutable:risk.req_add_group.group)
  return group_;
}
::risk::sys_group* req_add_group::release_group() {
  // @@protoc_insertion_point(field_release:risk.req_add_group.group)
  
  ::risk::sys_group* temp = group_;
  group_ = NULL;
  return temp;
}
void req_add_group::set_allocated_group(::risk::sys_group* group) {
  delete group_;
  group_ = group;
  if (group) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.req_add_group.group)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int req_del_group::kRequestidFieldNumber;
const int req_del_group::kUseridFieldNumber;
const int req_del_group::kRiskgroupidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

req_del_group::req_del_group()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5faction_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.req_del_group)
}
req_del_group::req_del_group(const req_del_group& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.userid().size() > 0) {
    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  riskgroupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.riskgroupid().size() > 0) {
    riskgroupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.riskgroupid_);
  }
  requestid_ = from.requestid_;
  // @@protoc_insertion_point(copy_constructor:risk.req_del_group)
}

void req_del_group::SharedCtor() {
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  riskgroupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestid_ = 0;
  _cached_size_ = 0;
}

req_del_group::~req_del_group() {
  // @@protoc_insertion_point(destructor:risk.req_del_group)
  SharedDtor();
}

void req_del_group::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  riskgroupid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void req_del_group::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* req_del_group::descriptor() {
  protobuf_riskapi_5faction_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5faction_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const req_del_group& req_del_group::default_instance() {
  protobuf_riskapi_5faction_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

req_del_group* req_del_group::New(::google::protobuf::Arena* arena) const {
  req_del_group* n = new req_del_group;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void req_del_group::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.req_del_group)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  riskgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestid_ = 0;
  _internal_metadata_.Clear();
}

bool req_del_group::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.req_del_group)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 requestid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string userid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->userid().data(), static_cast<int>(this->userid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.req_del_group.userid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string riskgroupid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_riskgroupid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->riskgroupid().data(), static_cast<int>(this->riskgroupid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.req_del_group.riskgroupid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.req_del_group)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.req_del_group)
  return false;
#undef DO_
}

void req_del_group::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.req_del_group)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 requestid = 1;
  if (this->requestid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // string userid = 2;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), static_cast<int>(this->userid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.req_del_group.userid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->userid(), output);
  }

  // string riskgroupid = 3;
  if (this->riskgroupid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->riskgroupid().data(), static_cast<int>(this->riskgroupid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.req_del_group.riskgroupid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->riskgroupid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.req_del_group)
}

::google::protobuf::uint8* req_del_group::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.req_del_group)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 requestid = 1;
  if (this->requestid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // string userid = 2;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), static_cast<int>(this->userid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.req_del_group.userid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->userid(), target);
  }

  // string riskgroupid = 3;
  if (this->riskgroupid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->riskgroupid().data(), static_cast<int>(this->riskgroupid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.req_del_group.riskgroupid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->riskgroupid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.req_del_group)
  return target;
}

size_t req_del_group::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.req_del_group)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string userid = 2;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  // string riskgroupid = 3;
  if (this->riskgroupid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->riskgroupid());
  }

  // int32 requestid = 1;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->requestid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void req_del_group::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.req_del_group)
  GOOGLE_DCHECK_NE(&from, this);
  const req_del_group* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const req_del_group>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.req_del_group)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.req_del_group)
    MergeFrom(*source);
  }
}

void req_del_group::MergeFrom(const req_del_group& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.req_del_group)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.userid().size() > 0) {

    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  if (from.riskgroupid().size() > 0) {

    riskgroupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.riskgroupid_);
  }
  if (from.requestid() != 0) {
    set_requestid(from.requestid());
  }
}

void req_del_group::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.req_del_group)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void req_del_group::CopyFrom(const req_del_group& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.req_del_group)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool req_del_group::IsInitialized() const {
  return true;
}

void req_del_group::Swap(req_del_group* other) {
  if (other == this) return;
  InternalSwap(other);
}
void req_del_group::InternalSwap(req_del_group* other) {
  using std::swap;
  userid_.Swap(&other->userid_);
  riskgroupid_.Swap(&other->riskgroupid_);
  swap(requestid_, other->requestid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata req_del_group::GetMetadata() const {
  protobuf_riskapi_5faction_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5faction_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// req_del_group

// int32 requestid = 1;
void req_del_group::clear_requestid() {
  requestid_ = 0;
}
::google::protobuf::int32 req_del_group::requestid() const {
  // @@protoc_insertion_point(field_get:risk.req_del_group.requestid)
  return requestid_;
}
void req_del_group::set_requestid(::google::protobuf::int32 value) {
  
  requestid_ = value;
  // @@protoc_insertion_point(field_set:risk.req_del_group.requestid)
}

// string userid = 2;
void req_del_group::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& req_del_group::userid() const {
  // @@protoc_insertion_point(field_get:risk.req_del_group.userid)
  return userid_.GetNoArena();
}
void req_del_group::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.req_del_group.userid)
}
#if LANG_CXX11
void req_del_group::set_userid(::std::string&& value) {
  
  userid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.req_del_group.userid)
}
#endif
void req_del_group::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.req_del_group.userid)
}
void req_del_group::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.req_del_group.userid)
}
::std::string* req_del_group::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:risk.req_del_group.userid)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* req_del_group::release_userid() {
  // @@protoc_insertion_point(field_release:risk.req_del_group.userid)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void req_del_group::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:risk.req_del_group.userid)
}

// string riskgroupid = 3;
void req_del_group::clear_riskgroupid() {
  riskgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& req_del_group::riskgroupid() const {
  // @@protoc_insertion_point(field_get:risk.req_del_group.riskgroupid)
  return riskgroupid_.GetNoArena();
}
void req_del_group::set_riskgroupid(const ::std::string& value) {
  
  riskgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.req_del_group.riskgroupid)
}
#if LANG_CXX11
void req_del_group::set_riskgroupid(::std::string&& value) {
  
  riskgroupid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.req_del_group.riskgroupid)
}
#endif
void req_del_group::set_riskgroupid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  riskgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.req_del_group.riskgroupid)
}
void req_del_group::set_riskgroupid(const char* value, size_t size) {
  
  riskgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.req_del_group.riskgroupid)
}
::std::string* req_del_group::mutable_riskgroupid() {
  
  // @@protoc_insertion_point(field_mutable:risk.req_del_group.riskgroupid)
  return riskgroupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* req_del_group::release_riskgroupid() {
  // @@protoc_insertion_point(field_release:risk.req_del_group.riskgroupid)
  
  return riskgroupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void req_del_group::set_allocated_riskgroupid(::std::string* riskgroupid) {
  if (riskgroupid != NULL) {
    
  } else {
    
  }
  riskgroupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), riskgroupid);
  // @@protoc_insertion_point(field_set_allocated:risk.req_del_group.riskgroupid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int req_edit_group::kRequestidFieldNumber;
const int req_edit_group::kUseridFieldNumber;
const int req_edit_group::kGroupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

req_edit_group::req_edit_group()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5faction_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.req_edit_group)
}
req_edit_group::req_edit_group(const req_edit_group& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.userid().size() > 0) {
    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  if (from.has_group()) {
    group_ = new ::risk::sys_group(*from.group_);
  } else {
    group_ = NULL;
  }
  requestid_ = from.requestid_;
  // @@protoc_insertion_point(copy_constructor:risk.req_edit_group)
}

void req_edit_group::SharedCtor() {
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&group_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&requestid_) -
      reinterpret_cast<char*>(&group_)) + sizeof(requestid_));
  _cached_size_ = 0;
}

req_edit_group::~req_edit_group() {
  // @@protoc_insertion_point(destructor:risk.req_edit_group)
  SharedDtor();
}

void req_edit_group::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete group_;
}

void req_edit_group::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* req_edit_group::descriptor() {
  protobuf_riskapi_5faction_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5faction_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const req_edit_group& req_edit_group::default_instance() {
  protobuf_riskapi_5faction_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

req_edit_group* req_edit_group::New(::google::protobuf::Arena* arena) const {
  req_edit_group* n = new req_edit_group;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void req_edit_group::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.req_edit_group)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && group_ != NULL) {
    delete group_;
  }
  group_ = NULL;
  requestid_ = 0;
  _internal_metadata_.Clear();
}

bool req_edit_group::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.req_edit_group)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 requestid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string userid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->userid().data(), static_cast<int>(this->userid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.req_edit_group.userid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .risk.sys_group group = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.req_edit_group)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.req_edit_group)
  return false;
#undef DO_
}

void req_edit_group::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.req_edit_group)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 requestid = 1;
  if (this->requestid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // string userid = 2;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), static_cast<int>(this->userid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.req_edit_group.userid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->userid(), output);
  }

  // .risk.sys_group group = 3;
  if (this->has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->group_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.req_edit_group)
}

::google::protobuf::uint8* req_edit_group::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.req_edit_group)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 requestid = 1;
  if (this->requestid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // string userid = 2;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), static_cast<int>(this->userid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.req_edit_group.userid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->userid(), target);
  }

  // .risk.sys_group group = 3;
  if (this->has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->group_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.req_edit_group)
  return target;
}

size_t req_edit_group::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.req_edit_group)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string userid = 2;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  // .risk.sys_group group = 3;
  if (this->has_group()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->group_);
  }

  // int32 requestid = 1;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->requestid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void req_edit_group::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.req_edit_group)
  GOOGLE_DCHECK_NE(&from, this);
  const req_edit_group* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const req_edit_group>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.req_edit_group)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.req_edit_group)
    MergeFrom(*source);
  }
}

void req_edit_group::MergeFrom(const req_edit_group& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.req_edit_group)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.userid().size() > 0) {

    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  if (from.has_group()) {
    mutable_group()->::risk::sys_group::MergeFrom(from.group());
  }
  if (from.requestid() != 0) {
    set_requestid(from.requestid());
  }
}

void req_edit_group::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.req_edit_group)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void req_edit_group::CopyFrom(const req_edit_group& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.req_edit_group)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool req_edit_group::IsInitialized() const {
  return true;
}

void req_edit_group::Swap(req_edit_group* other) {
  if (other == this) return;
  InternalSwap(other);
}
void req_edit_group::InternalSwap(req_edit_group* other) {
  using std::swap;
  userid_.Swap(&other->userid_);
  swap(group_, other->group_);
  swap(requestid_, other->requestid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata req_edit_group::GetMetadata() const {
  protobuf_riskapi_5faction_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5faction_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// req_edit_group

// int32 requestid = 1;
void req_edit_group::clear_requestid() {
  requestid_ = 0;
}
::google::protobuf::int32 req_edit_group::requestid() const {
  // @@protoc_insertion_point(field_get:risk.req_edit_group.requestid)
  return requestid_;
}
void req_edit_group::set_requestid(::google::protobuf::int32 value) {
  
  requestid_ = value;
  // @@protoc_insertion_point(field_set:risk.req_edit_group.requestid)
}

// string userid = 2;
void req_edit_group::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& req_edit_group::userid() const {
  // @@protoc_insertion_point(field_get:risk.req_edit_group.userid)
  return userid_.GetNoArena();
}
void req_edit_group::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.req_edit_group.userid)
}
#if LANG_CXX11
void req_edit_group::set_userid(::std::string&& value) {
  
  userid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.req_edit_group.userid)
}
#endif
void req_edit_group::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.req_edit_group.userid)
}
void req_edit_group::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.req_edit_group.userid)
}
::std::string* req_edit_group::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:risk.req_edit_group.userid)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* req_edit_group::release_userid() {
  // @@protoc_insertion_point(field_release:risk.req_edit_group.userid)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void req_edit_group::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:risk.req_edit_group.userid)
}

// .risk.sys_group group = 3;
bool req_edit_group::has_group() const {
  return this != internal_default_instance() && group_ != NULL;
}
void req_edit_group::clear_group() {
  if (GetArenaNoVirtual() == NULL && group_ != NULL) delete group_;
  group_ = NULL;
}
const ::risk::sys_group& req_edit_group::group() const {
  const ::risk::sys_group* p = group_;
  // @@protoc_insertion_point(field_get:risk.req_edit_group.group)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::sys_group*>(
      &::risk::_sys_group_default_instance_);
}
::risk::sys_group* req_edit_group::mutable_group() {
  
  if (group_ == NULL) {
    group_ = new ::risk::sys_group;
  }
  // @@protoc_insertion_point(field_mutable:risk.req_edit_group.group)
  return group_;
}
::risk::sys_group* req_edit_group::release_group() {
  // @@protoc_insertion_point(field_release:risk.req_edit_group.group)
  
  ::risk::sys_group* temp = group_;
  group_ = NULL;
  return temp;
}
void req_edit_group::set_allocated_group(::risk::sys_group* group) {
  delete group_;
  group_ = group;
  if (group) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.req_edit_group.group)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int req_insert_investors_to_group::kRequestidFieldNumber;
const int req_insert_investors_to_group::kUseridFieldNumber;
const int req_insert_investors_to_group::kRiskgroupidFieldNumber;
const int req_insert_investors_to_group::kInvestorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

req_insert_investors_to_group::req_insert_investors_to_group()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5faction_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.req_insert_investors_to_group)
}
req_insert_investors_to_group::req_insert_investors_to_group(const req_insert_investors_to_group& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      investor_(from.investor_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.userid().size() > 0) {
    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  riskgroupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.riskgroupid().size() > 0) {
    riskgroupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.riskgroupid_);
  }
  requestid_ = from.requestid_;
  // @@protoc_insertion_point(copy_constructor:risk.req_insert_investors_to_group)
}

void req_insert_investors_to_group::SharedCtor() {
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  riskgroupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestid_ = 0;
  _cached_size_ = 0;
}

req_insert_investors_to_group::~req_insert_investors_to_group() {
  // @@protoc_insertion_point(destructor:risk.req_insert_investors_to_group)
  SharedDtor();
}

void req_insert_investors_to_group::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  riskgroupid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void req_insert_investors_to_group::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* req_insert_investors_to_group::descriptor() {
  protobuf_riskapi_5faction_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5faction_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const req_insert_investors_to_group& req_insert_investors_to_group::default_instance() {
  protobuf_riskapi_5faction_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

req_insert_investors_to_group* req_insert_investors_to_group::New(::google::protobuf::Arena* arena) const {
  req_insert_investors_to_group* n = new req_insert_investors_to_group;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void req_insert_investors_to_group::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.req_insert_investors_to_group)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  investor_.Clear();
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  riskgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestid_ = 0;
  _internal_metadata_.Clear();
}

bool req_insert_investors_to_group::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.req_insert_investors_to_group)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 requestid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string userid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->userid().data(), static_cast<int>(this->userid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.req_insert_investors_to_group.userid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string riskgroupid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_riskgroupid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->riskgroupid().data(), static_cast<int>(this->riskgroupid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.req_insert_investors_to_group.riskgroupid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string investor = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_investor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->investor(this->investor_size() - 1).data(),
            static_cast<int>(this->investor(this->investor_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.req_insert_investors_to_group.investor"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.req_insert_investors_to_group)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.req_insert_investors_to_group)
  return false;
#undef DO_
}

void req_insert_investors_to_group::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.req_insert_investors_to_group)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 requestid = 1;
  if (this->requestid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // string userid = 2;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), static_cast<int>(this->userid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.req_insert_investors_to_group.userid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->userid(), output);
  }

  // string riskgroupid = 3;
  if (this->riskgroupid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->riskgroupid().data(), static_cast<int>(this->riskgroupid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.req_insert_investors_to_group.riskgroupid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->riskgroupid(), output);
  }

  // repeated string investor = 4;
  for (int i = 0, n = this->investor_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investor(i).data(), static_cast<int>(this->investor(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.req_insert_investors_to_group.investor");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->investor(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.req_insert_investors_to_group)
}

::google::protobuf::uint8* req_insert_investors_to_group::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.req_insert_investors_to_group)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 requestid = 1;
  if (this->requestid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // string userid = 2;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), static_cast<int>(this->userid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.req_insert_investors_to_group.userid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->userid(), target);
  }

  // string riskgroupid = 3;
  if (this->riskgroupid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->riskgroupid().data(), static_cast<int>(this->riskgroupid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.req_insert_investors_to_group.riskgroupid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->riskgroupid(), target);
  }

  // repeated string investor = 4;
  for (int i = 0, n = this->investor_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investor(i).data(), static_cast<int>(this->investor(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.req_insert_investors_to_group.investor");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->investor(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.req_insert_investors_to_group)
  return target;
}

size_t req_insert_investors_to_group::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.req_insert_investors_to_group)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string investor = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->investor_size());
  for (int i = 0, n = this->investor_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->investor(i));
  }

  // string userid = 2;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  // string riskgroupid = 3;
  if (this->riskgroupid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->riskgroupid());
  }

  // int32 requestid = 1;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->requestid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void req_insert_investors_to_group::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.req_insert_investors_to_group)
  GOOGLE_DCHECK_NE(&from, this);
  const req_insert_investors_to_group* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const req_insert_investors_to_group>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.req_insert_investors_to_group)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.req_insert_investors_to_group)
    MergeFrom(*source);
  }
}

void req_insert_investors_to_group::MergeFrom(const req_insert_investors_to_group& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.req_insert_investors_to_group)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  investor_.MergeFrom(from.investor_);
  if (from.userid().size() > 0) {

    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  if (from.riskgroupid().size() > 0) {

    riskgroupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.riskgroupid_);
  }
  if (from.requestid() != 0) {
    set_requestid(from.requestid());
  }
}

void req_insert_investors_to_group::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.req_insert_investors_to_group)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void req_insert_investors_to_group::CopyFrom(const req_insert_investors_to_group& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.req_insert_investors_to_group)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool req_insert_investors_to_group::IsInitialized() const {
  return true;
}

void req_insert_investors_to_group::Swap(req_insert_investors_to_group* other) {
  if (other == this) return;
  InternalSwap(other);
}
void req_insert_investors_to_group::InternalSwap(req_insert_investors_to_group* other) {
  using std::swap;
  investor_.InternalSwap(&other->investor_);
  userid_.Swap(&other->userid_);
  riskgroupid_.Swap(&other->riskgroupid_);
  swap(requestid_, other->requestid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata req_insert_investors_to_group::GetMetadata() const {
  protobuf_riskapi_5faction_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5faction_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// req_insert_investors_to_group

// int32 requestid = 1;
void req_insert_investors_to_group::clear_requestid() {
  requestid_ = 0;
}
::google::protobuf::int32 req_insert_investors_to_group::requestid() const {
  // @@protoc_insertion_point(field_get:risk.req_insert_investors_to_group.requestid)
  return requestid_;
}
void req_insert_investors_to_group::set_requestid(::google::protobuf::int32 value) {
  
  requestid_ = value;
  // @@protoc_insertion_point(field_set:risk.req_insert_investors_to_group.requestid)
}

// string userid = 2;
void req_insert_investors_to_group::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& req_insert_investors_to_group::userid() const {
  // @@protoc_insertion_point(field_get:risk.req_insert_investors_to_group.userid)
  return userid_.GetNoArena();
}
void req_insert_investors_to_group::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.req_insert_investors_to_group.userid)
}
#if LANG_CXX11
void req_insert_investors_to_group::set_userid(::std::string&& value) {
  
  userid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.req_insert_investors_to_group.userid)
}
#endif
void req_insert_investors_to_group::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.req_insert_investors_to_group.userid)
}
void req_insert_investors_to_group::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.req_insert_investors_to_group.userid)
}
::std::string* req_insert_investors_to_group::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:risk.req_insert_investors_to_group.userid)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* req_insert_investors_to_group::release_userid() {
  // @@protoc_insertion_point(field_release:risk.req_insert_investors_to_group.userid)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void req_insert_investors_to_group::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:risk.req_insert_investors_to_group.userid)
}

// string riskgroupid = 3;
void req_insert_investors_to_group::clear_riskgroupid() {
  riskgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& req_insert_investors_to_group::riskgroupid() const {
  // @@protoc_insertion_point(field_get:risk.req_insert_investors_to_group.riskgroupid)
  return riskgroupid_.GetNoArena();
}
void req_insert_investors_to_group::set_riskgroupid(const ::std::string& value) {
  
  riskgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.req_insert_investors_to_group.riskgroupid)
}
#if LANG_CXX11
void req_insert_investors_to_group::set_riskgroupid(::std::string&& value) {
  
  riskgroupid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.req_insert_investors_to_group.riskgroupid)
}
#endif
void req_insert_investors_to_group::set_riskgroupid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  riskgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.req_insert_investors_to_group.riskgroupid)
}
void req_insert_investors_to_group::set_riskgroupid(const char* value, size_t size) {
  
  riskgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.req_insert_investors_to_group.riskgroupid)
}
::std::string* req_insert_investors_to_group::mutable_riskgroupid() {
  
  // @@protoc_insertion_point(field_mutable:risk.req_insert_investors_to_group.riskgroupid)
  return riskgroupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* req_insert_investors_to_group::release_riskgroupid() {
  // @@protoc_insertion_point(field_release:risk.req_insert_investors_to_group.riskgroupid)
  
  return riskgroupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void req_insert_investors_to_group::set_allocated_riskgroupid(::std::string* riskgroupid) {
  if (riskgroupid != NULL) {
    
  } else {
    
  }
  riskgroupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), riskgroupid);
  // @@protoc_insertion_point(field_set_allocated:risk.req_insert_investors_to_group.riskgroupid)
}

// repeated string investor = 4;
int req_insert_investors_to_group::investor_size() const {
  return investor_.size();
}
void req_insert_investors_to_group::clear_investor() {
  investor_.Clear();
}
const ::std::string& req_insert_investors_to_group::investor(int index) const {
  // @@protoc_insertion_point(field_get:risk.req_insert_investors_to_group.investor)
  return investor_.Get(index);
}
::std::string* req_insert_investors_to_group::mutable_investor(int index) {
  // @@protoc_insertion_point(field_mutable:risk.req_insert_investors_to_group.investor)
  return investor_.Mutable(index);
}
void req_insert_investors_to_group::set_investor(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:risk.req_insert_investors_to_group.investor)
  investor_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void req_insert_investors_to_group::set_investor(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:risk.req_insert_investors_to_group.investor)
  investor_.Mutable(index)->assign(std::move(value));
}
#endif
void req_insert_investors_to_group::set_investor(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  investor_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:risk.req_insert_investors_to_group.investor)
}
void req_insert_investors_to_group::set_investor(int index, const char* value, size_t size) {
  investor_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:risk.req_insert_investors_to_group.investor)
}
::std::string* req_insert_investors_to_group::add_investor() {
  // @@protoc_insertion_point(field_add_mutable:risk.req_insert_investors_to_group.investor)
  return investor_.Add();
}
void req_insert_investors_to_group::add_investor(const ::std::string& value) {
  investor_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:risk.req_insert_investors_to_group.investor)
}
#if LANG_CXX11
void req_insert_investors_to_group::add_investor(::std::string&& value) {
  investor_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:risk.req_insert_investors_to_group.investor)
}
#endif
void req_insert_investors_to_group::add_investor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  investor_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:risk.req_insert_investors_to_group.investor)
}
void req_insert_investors_to_group::add_investor(const char* value, size_t size) {
  investor_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:risk.req_insert_investors_to_group.investor)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
req_insert_investors_to_group::investor() const {
  // @@protoc_insertion_point(field_list:risk.req_insert_investors_to_group.investor)
  return investor_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
req_insert_investors_to_group::mutable_investor() {
  // @@protoc_insertion_point(field_mutable_list:risk.req_insert_investors_to_group.investor)
  return &investor_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int req_remove_investors_from_group::kRequestidFieldNumber;
const int req_remove_investors_from_group::kUseridFieldNumber;
const int req_remove_investors_from_group::kRiskgroupidFieldNumber;
const int req_remove_investors_from_group::kInvestorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

req_remove_investors_from_group::req_remove_investors_from_group()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5faction_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.req_remove_investors_from_group)
}
req_remove_investors_from_group::req_remove_investors_from_group(const req_remove_investors_from_group& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      investor_(from.investor_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.userid().size() > 0) {
    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  riskgroupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.riskgroupid().size() > 0) {
    riskgroupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.riskgroupid_);
  }
  requestid_ = from.requestid_;
  // @@protoc_insertion_point(copy_constructor:risk.req_remove_investors_from_group)
}

void req_remove_investors_from_group::SharedCtor() {
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  riskgroupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestid_ = 0;
  _cached_size_ = 0;
}

req_remove_investors_from_group::~req_remove_investors_from_group() {
  // @@protoc_insertion_point(destructor:risk.req_remove_investors_from_group)
  SharedDtor();
}

void req_remove_investors_from_group::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  riskgroupid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void req_remove_investors_from_group::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* req_remove_investors_from_group::descriptor() {
  protobuf_riskapi_5faction_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5faction_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const req_remove_investors_from_group& req_remove_investors_from_group::default_instance() {
  protobuf_riskapi_5faction_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

req_remove_investors_from_group* req_remove_investors_from_group::New(::google::protobuf::Arena* arena) const {
  req_remove_investors_from_group* n = new req_remove_investors_from_group;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void req_remove_investors_from_group::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.req_remove_investors_from_group)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  investor_.Clear();
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  riskgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestid_ = 0;
  _internal_metadata_.Clear();
}

bool req_remove_investors_from_group::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.req_remove_investors_from_group)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 requestid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string userid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->userid().data(), static_cast<int>(this->userid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.req_remove_investors_from_group.userid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string riskgroupid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_riskgroupid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->riskgroupid().data(), static_cast<int>(this->riskgroupid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.req_remove_investors_from_group.riskgroupid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string investor = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_investor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->investor(this->investor_size() - 1).data(),
            static_cast<int>(this->investor(this->investor_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.req_remove_investors_from_group.investor"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.req_remove_investors_from_group)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.req_remove_investors_from_group)
  return false;
#undef DO_
}

void req_remove_investors_from_group::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.req_remove_investors_from_group)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 requestid = 1;
  if (this->requestid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // string userid = 2;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), static_cast<int>(this->userid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.req_remove_investors_from_group.userid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->userid(), output);
  }

  // string riskgroupid = 3;
  if (this->riskgroupid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->riskgroupid().data(), static_cast<int>(this->riskgroupid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.req_remove_investors_from_group.riskgroupid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->riskgroupid(), output);
  }

  // repeated string investor = 4;
  for (int i = 0, n = this->investor_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investor(i).data(), static_cast<int>(this->investor(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.req_remove_investors_from_group.investor");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->investor(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.req_remove_investors_from_group)
}

::google::protobuf::uint8* req_remove_investors_from_group::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.req_remove_investors_from_group)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 requestid = 1;
  if (this->requestid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // string userid = 2;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), static_cast<int>(this->userid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.req_remove_investors_from_group.userid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->userid(), target);
  }

  // string riskgroupid = 3;
  if (this->riskgroupid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->riskgroupid().data(), static_cast<int>(this->riskgroupid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.req_remove_investors_from_group.riskgroupid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->riskgroupid(), target);
  }

  // repeated string investor = 4;
  for (int i = 0, n = this->investor_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investor(i).data(), static_cast<int>(this->investor(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.req_remove_investors_from_group.investor");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->investor(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.req_remove_investors_from_group)
  return target;
}

size_t req_remove_investors_from_group::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.req_remove_investors_from_group)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string investor = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->investor_size());
  for (int i = 0, n = this->investor_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->investor(i));
  }

  // string userid = 2;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  // string riskgroupid = 3;
  if (this->riskgroupid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->riskgroupid());
  }

  // int32 requestid = 1;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->requestid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void req_remove_investors_from_group::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.req_remove_investors_from_group)
  GOOGLE_DCHECK_NE(&from, this);
  const req_remove_investors_from_group* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const req_remove_investors_from_group>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.req_remove_investors_from_group)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.req_remove_investors_from_group)
    MergeFrom(*source);
  }
}

void req_remove_investors_from_group::MergeFrom(const req_remove_investors_from_group& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.req_remove_investors_from_group)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  investor_.MergeFrom(from.investor_);
  if (from.userid().size() > 0) {

    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  if (from.riskgroupid().size() > 0) {

    riskgroupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.riskgroupid_);
  }
  if (from.requestid() != 0) {
    set_requestid(from.requestid());
  }
}

void req_remove_investors_from_group::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.req_remove_investors_from_group)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void req_remove_investors_from_group::CopyFrom(const req_remove_investors_from_group& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.req_remove_investors_from_group)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool req_remove_investors_from_group::IsInitialized() const {
  return true;
}

void req_remove_investors_from_group::Swap(req_remove_investors_from_group* other) {
  if (other == this) return;
  InternalSwap(other);
}
void req_remove_investors_from_group::InternalSwap(req_remove_investors_from_group* other) {
  using std::swap;
  investor_.InternalSwap(&other->investor_);
  userid_.Swap(&other->userid_);
  riskgroupid_.Swap(&other->riskgroupid_);
  swap(requestid_, other->requestid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata req_remove_investors_from_group::GetMetadata() const {
  protobuf_riskapi_5faction_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5faction_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// req_remove_investors_from_group

// int32 requestid = 1;
void req_remove_investors_from_group::clear_requestid() {
  requestid_ = 0;
}
::google::protobuf::int32 req_remove_investors_from_group::requestid() const {
  // @@protoc_insertion_point(field_get:risk.req_remove_investors_from_group.requestid)
  return requestid_;
}
void req_remove_investors_from_group::set_requestid(::google::protobuf::int32 value) {
  
  requestid_ = value;
  // @@protoc_insertion_point(field_set:risk.req_remove_investors_from_group.requestid)
}

// string userid = 2;
void req_remove_investors_from_group::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& req_remove_investors_from_group::userid() const {
  // @@protoc_insertion_point(field_get:risk.req_remove_investors_from_group.userid)
  return userid_.GetNoArena();
}
void req_remove_investors_from_group::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.req_remove_investors_from_group.userid)
}
#if LANG_CXX11
void req_remove_investors_from_group::set_userid(::std::string&& value) {
  
  userid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.req_remove_investors_from_group.userid)
}
#endif
void req_remove_investors_from_group::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.req_remove_investors_from_group.userid)
}
void req_remove_investors_from_group::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.req_remove_investors_from_group.userid)
}
::std::string* req_remove_investors_from_group::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:risk.req_remove_investors_from_group.userid)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* req_remove_investors_from_group::release_userid() {
  // @@protoc_insertion_point(field_release:risk.req_remove_investors_from_group.userid)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void req_remove_investors_from_group::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:risk.req_remove_investors_from_group.userid)
}

// string riskgroupid = 3;
void req_remove_investors_from_group::clear_riskgroupid() {
  riskgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& req_remove_investors_from_group::riskgroupid() const {
  // @@protoc_insertion_point(field_get:risk.req_remove_investors_from_group.riskgroupid)
  return riskgroupid_.GetNoArena();
}
void req_remove_investors_from_group::set_riskgroupid(const ::std::string& value) {
  
  riskgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.req_remove_investors_from_group.riskgroupid)
}
#if LANG_CXX11
void req_remove_investors_from_group::set_riskgroupid(::std::string&& value) {
  
  riskgroupid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.req_remove_investors_from_group.riskgroupid)
}
#endif
void req_remove_investors_from_group::set_riskgroupid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  riskgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.req_remove_investors_from_group.riskgroupid)
}
void req_remove_investors_from_group::set_riskgroupid(const char* value, size_t size) {
  
  riskgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.req_remove_investors_from_group.riskgroupid)
}
::std::string* req_remove_investors_from_group::mutable_riskgroupid() {
  
  // @@protoc_insertion_point(field_mutable:risk.req_remove_investors_from_group.riskgroupid)
  return riskgroupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* req_remove_investors_from_group::release_riskgroupid() {
  // @@protoc_insertion_point(field_release:risk.req_remove_investors_from_group.riskgroupid)
  
  return riskgroupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void req_remove_investors_from_group::set_allocated_riskgroupid(::std::string* riskgroupid) {
  if (riskgroupid != NULL) {
    
  } else {
    
  }
  riskgroupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), riskgroupid);
  // @@protoc_insertion_point(field_set_allocated:risk.req_remove_investors_from_group.riskgroupid)
}

// repeated string investor = 4;
int req_remove_investors_from_group::investor_size() const {
  return investor_.size();
}
void req_remove_investors_from_group::clear_investor() {
  investor_.Clear();
}
const ::std::string& req_remove_investors_from_group::investor(int index) const {
  // @@protoc_insertion_point(field_get:risk.req_remove_investors_from_group.investor)
  return investor_.Get(index);
}
::std::string* req_remove_investors_from_group::mutable_investor(int index) {
  // @@protoc_insertion_point(field_mutable:risk.req_remove_investors_from_group.investor)
  return investor_.Mutable(index);
}
void req_remove_investors_from_group::set_investor(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:risk.req_remove_investors_from_group.investor)
  investor_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void req_remove_investors_from_group::set_investor(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:risk.req_remove_investors_from_group.investor)
  investor_.Mutable(index)->assign(std::move(value));
}
#endif
void req_remove_investors_from_group::set_investor(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  investor_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:risk.req_remove_investors_from_group.investor)
}
void req_remove_investors_from_group::set_investor(int index, const char* value, size_t size) {
  investor_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:risk.req_remove_investors_from_group.investor)
}
::std::string* req_remove_investors_from_group::add_investor() {
  // @@protoc_insertion_point(field_add_mutable:risk.req_remove_investors_from_group.investor)
  return investor_.Add();
}
void req_remove_investors_from_group::add_investor(const ::std::string& value) {
  investor_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:risk.req_remove_investors_from_group.investor)
}
#if LANG_CXX11
void req_remove_investors_from_group::add_investor(::std::string&& value) {
  investor_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:risk.req_remove_investors_from_group.investor)
}
#endif
void req_remove_investors_from_group::add_investor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  investor_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:risk.req_remove_investors_from_group.investor)
}
void req_remove_investors_from_group::add_investor(const char* value, size_t size) {
  investor_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:risk.req_remove_investors_from_group.investor)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
req_remove_investors_from_group::investor() const {
  // @@protoc_insertion_point(field_list:risk.req_remove_investors_from_group.investor)
  return investor_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
req_remove_investors_from_group::mutable_investor() {
  // @@protoc_insertion_point(field_mutable_list:risk.req_remove_investors_from_group.investor)
  return &investor_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int sub_option_position_risk::kModelFieldNumber;
const int sub_option_position_risk::kInstrumentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

sub_option_position_risk::sub_option_position_risk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5faction_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.sub_option_position_risk)
}
sub_option_position_risk::sub_option_position_risk(const sub_option_position_risk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      instrument_(from.instrument_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_ = from.model_;
  // @@protoc_insertion_point(copy_constructor:risk.sub_option_position_risk)
}

void sub_option_position_risk::SharedCtor() {
  model_ = 0;
  _cached_size_ = 0;
}

sub_option_position_risk::~sub_option_position_risk() {
  // @@protoc_insertion_point(destructor:risk.sub_option_position_risk)
  SharedDtor();
}

void sub_option_position_risk::SharedDtor() {
}

void sub_option_position_risk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sub_option_position_risk::descriptor() {
  protobuf_riskapi_5faction_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5faction_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const sub_option_position_risk& sub_option_position_risk::default_instance() {
  protobuf_riskapi_5faction_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

sub_option_position_risk* sub_option_position_risk::New(::google::protobuf::Arena* arena) const {
  sub_option_position_risk* n = new sub_option_position_risk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void sub_option_position_risk::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.sub_option_position_risk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  instrument_.Clear();
  model_ = 0;
  _internal_metadata_.Clear();
}

bool sub_option_position_risk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.sub_option_position_risk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 model = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &model_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string instrument = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_instrument()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->instrument(this->instrument_size() - 1).data(),
            static_cast<int>(this->instrument(this->instrument_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.sub_option_position_risk.instrument"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.sub_option_position_risk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.sub_option_position_risk)
  return false;
#undef DO_
}

void sub_option_position_risk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.sub_option_position_risk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 model = 1;
  if (this->model() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->model(), output);
  }

  // repeated string instrument = 2;
  for (int i = 0, n = this->instrument_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instrument(i).data(), static_cast<int>(this->instrument(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.sub_option_position_risk.instrument");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->instrument(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.sub_option_position_risk)
}

::google::protobuf::uint8* sub_option_position_risk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.sub_option_position_risk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 model = 1;
  if (this->model() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->model(), target);
  }

  // repeated string instrument = 2;
  for (int i = 0, n = this->instrument_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instrument(i).data(), static_cast<int>(this->instrument(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.sub_option_position_risk.instrument");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->instrument(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.sub_option_position_risk)
  return target;
}

size_t sub_option_position_risk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.sub_option_position_risk)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string instrument = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->instrument_size());
  for (int i = 0, n = this->instrument_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->instrument(i));
  }

  // int32 model = 1;
  if (this->model() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->model());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sub_option_position_risk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.sub_option_position_risk)
  GOOGLE_DCHECK_NE(&from, this);
  const sub_option_position_risk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const sub_option_position_risk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.sub_option_position_risk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.sub_option_position_risk)
    MergeFrom(*source);
  }
}

void sub_option_position_risk::MergeFrom(const sub_option_position_risk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.sub_option_position_risk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  instrument_.MergeFrom(from.instrument_);
  if (from.model() != 0) {
    set_model(from.model());
  }
}

void sub_option_position_risk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.sub_option_position_risk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sub_option_position_risk::CopyFrom(const sub_option_position_risk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.sub_option_position_risk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sub_option_position_risk::IsInitialized() const {
  return true;
}

void sub_option_position_risk::Swap(sub_option_position_risk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void sub_option_position_risk::InternalSwap(sub_option_position_risk* other) {
  using std::swap;
  instrument_.InternalSwap(&other->instrument_);
  swap(model_, other->model_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata sub_option_position_risk::GetMetadata() const {
  protobuf_riskapi_5faction_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5faction_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// sub_option_position_risk

// int32 model = 1;
void sub_option_position_risk::clear_model() {
  model_ = 0;
}
::google::protobuf::int32 sub_option_position_risk::model() const {
  // @@protoc_insertion_point(field_get:risk.sub_option_position_risk.model)
  return model_;
}
void sub_option_position_risk::set_model(::google::protobuf::int32 value) {
  
  model_ = value;
  // @@protoc_insertion_point(field_set:risk.sub_option_position_risk.model)
}

// repeated string instrument = 2;
int sub_option_position_risk::instrument_size() const {
  return instrument_.size();
}
void sub_option_position_risk::clear_instrument() {
  instrument_.Clear();
}
const ::std::string& sub_option_position_risk::instrument(int index) const {
  // @@protoc_insertion_point(field_get:risk.sub_option_position_risk.instrument)
  return instrument_.Get(index);
}
::std::string* sub_option_position_risk::mutable_instrument(int index) {
  // @@protoc_insertion_point(field_mutable:risk.sub_option_position_risk.instrument)
  return instrument_.Mutable(index);
}
void sub_option_position_risk::set_instrument(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:risk.sub_option_position_risk.instrument)
  instrument_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void sub_option_position_risk::set_instrument(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:risk.sub_option_position_risk.instrument)
  instrument_.Mutable(index)->assign(std::move(value));
}
#endif
void sub_option_position_risk::set_instrument(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  instrument_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:risk.sub_option_position_risk.instrument)
}
void sub_option_position_risk::set_instrument(int index, const char* value, size_t size) {
  instrument_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:risk.sub_option_position_risk.instrument)
}
::std::string* sub_option_position_risk::add_instrument() {
  // @@protoc_insertion_point(field_add_mutable:risk.sub_option_position_risk.instrument)
  return instrument_.Add();
}
void sub_option_position_risk::add_instrument(const ::std::string& value) {
  instrument_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:risk.sub_option_position_risk.instrument)
}
#if LANG_CXX11
void sub_option_position_risk::add_instrument(::std::string&& value) {
  instrument_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:risk.sub_option_position_risk.instrument)
}
#endif
void sub_option_position_risk::add_instrument(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  instrument_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:risk.sub_option_position_risk.instrument)
}
void sub_option_position_risk::add_instrument(const char* value, size_t size) {
  instrument_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:risk.sub_option_position_risk.instrument)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
sub_option_position_risk::instrument() const {
  // @@protoc_insertion_point(field_list:risk.sub_option_position_risk.instrument)
  return instrument_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
sub_option_position_risk::mutable_instrument() {
  // @@protoc_insertion_point(field_mutable_list:risk.sub_option_position_risk.instrument)
  return &instrument_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int unsub_option_position_risk::kModelFieldNumber;
const int unsub_option_position_risk::kInstrumentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

unsub_option_position_risk::unsub_option_position_risk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5faction_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.unsub_option_position_risk)
}
unsub_option_position_risk::unsub_option_position_risk(const unsub_option_position_risk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      instrument_(from.instrument_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_ = from.model_;
  // @@protoc_insertion_point(copy_constructor:risk.unsub_option_position_risk)
}

void unsub_option_position_risk::SharedCtor() {
  model_ = 0;
  _cached_size_ = 0;
}

unsub_option_position_risk::~unsub_option_position_risk() {
  // @@protoc_insertion_point(destructor:risk.unsub_option_position_risk)
  SharedDtor();
}

void unsub_option_position_risk::SharedDtor() {
}

void unsub_option_position_risk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* unsub_option_position_risk::descriptor() {
  protobuf_riskapi_5faction_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5faction_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const unsub_option_position_risk& unsub_option_position_risk::default_instance() {
  protobuf_riskapi_5faction_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

unsub_option_position_risk* unsub_option_position_risk::New(::google::protobuf::Arena* arena) const {
  unsub_option_position_risk* n = new unsub_option_position_risk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void unsub_option_position_risk::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.unsub_option_position_risk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  instrument_.Clear();
  model_ = 0;
  _internal_metadata_.Clear();
}

bool unsub_option_position_risk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.unsub_option_position_risk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 model = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &model_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string instrument = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_instrument()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->instrument(this->instrument_size() - 1).data(),
            static_cast<int>(this->instrument(this->instrument_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.unsub_option_position_risk.instrument"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.unsub_option_position_risk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.unsub_option_position_risk)
  return false;
#undef DO_
}

void unsub_option_position_risk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.unsub_option_position_risk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 model = 1;
  if (this->model() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->model(), output);
  }

  // repeated string instrument = 2;
  for (int i = 0, n = this->instrument_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instrument(i).data(), static_cast<int>(this->instrument(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.unsub_option_position_risk.instrument");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->instrument(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.unsub_option_position_risk)
}

::google::protobuf::uint8* unsub_option_position_risk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.unsub_option_position_risk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 model = 1;
  if (this->model() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->model(), target);
  }

  // repeated string instrument = 2;
  for (int i = 0, n = this->instrument_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instrument(i).data(), static_cast<int>(this->instrument(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.unsub_option_position_risk.instrument");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->instrument(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.unsub_option_position_risk)
  return target;
}

size_t unsub_option_position_risk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.unsub_option_position_risk)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string instrument = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->instrument_size());
  for (int i = 0, n = this->instrument_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->instrument(i));
  }

  // int32 model = 1;
  if (this->model() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->model());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void unsub_option_position_risk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.unsub_option_position_risk)
  GOOGLE_DCHECK_NE(&from, this);
  const unsub_option_position_risk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const unsub_option_position_risk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.unsub_option_position_risk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.unsub_option_position_risk)
    MergeFrom(*source);
  }
}

void unsub_option_position_risk::MergeFrom(const unsub_option_position_risk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.unsub_option_position_risk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  instrument_.MergeFrom(from.instrument_);
  if (from.model() != 0) {
    set_model(from.model());
  }
}

void unsub_option_position_risk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.unsub_option_position_risk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void unsub_option_position_risk::CopyFrom(const unsub_option_position_risk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.unsub_option_position_risk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool unsub_option_position_risk::IsInitialized() const {
  return true;
}

void unsub_option_position_risk::Swap(unsub_option_position_risk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void unsub_option_position_risk::InternalSwap(unsub_option_position_risk* other) {
  using std::swap;
  instrument_.InternalSwap(&other->instrument_);
  swap(model_, other->model_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata unsub_option_position_risk::GetMetadata() const {
  protobuf_riskapi_5faction_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5faction_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// unsub_option_position_risk

// int32 model = 1;
void unsub_option_position_risk::clear_model() {
  model_ = 0;
}
::google::protobuf::int32 unsub_option_position_risk::model() const {
  // @@protoc_insertion_point(field_get:risk.unsub_option_position_risk.model)
  return model_;
}
void unsub_option_position_risk::set_model(::google::protobuf::int32 value) {
  
  model_ = value;
  // @@protoc_insertion_point(field_set:risk.unsub_option_position_risk.model)
}

// repeated string instrument = 2;
int unsub_option_position_risk::instrument_size() const {
  return instrument_.size();
}
void unsub_option_position_risk::clear_instrument() {
  instrument_.Clear();
}
const ::std::string& unsub_option_position_risk::instrument(int index) const {
  // @@protoc_insertion_point(field_get:risk.unsub_option_position_risk.instrument)
  return instrument_.Get(index);
}
::std::string* unsub_option_position_risk::mutable_instrument(int index) {
  // @@protoc_insertion_point(field_mutable:risk.unsub_option_position_risk.instrument)
  return instrument_.Mutable(index);
}
void unsub_option_position_risk::set_instrument(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:risk.unsub_option_position_risk.instrument)
  instrument_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void unsub_option_position_risk::set_instrument(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:risk.unsub_option_position_risk.instrument)
  instrument_.Mutable(index)->assign(std::move(value));
}
#endif
void unsub_option_position_risk::set_instrument(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  instrument_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:risk.unsub_option_position_risk.instrument)
}
void unsub_option_position_risk::set_instrument(int index, const char* value, size_t size) {
  instrument_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:risk.unsub_option_position_risk.instrument)
}
::std::string* unsub_option_position_risk::add_instrument() {
  // @@protoc_insertion_point(field_add_mutable:risk.unsub_option_position_risk.instrument)
  return instrument_.Add();
}
void unsub_option_position_risk::add_instrument(const ::std::string& value) {
  instrument_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:risk.unsub_option_position_risk.instrument)
}
#if LANG_CXX11
void unsub_option_position_risk::add_instrument(::std::string&& value) {
  instrument_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:risk.unsub_option_position_risk.instrument)
}
#endif
void unsub_option_position_risk::add_instrument(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  instrument_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:risk.unsub_option_position_risk.instrument)
}
void unsub_option_position_risk::add_instrument(const char* value, size_t size) {
  instrument_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:risk.unsub_option_position_risk.instrument)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
unsub_option_position_risk::instrument() const {
  // @@protoc_insertion_point(field_list:risk.unsub_option_position_risk.instrument)
  return instrument_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
unsub_option_position_risk::mutable_instrument() {
  // @@protoc_insertion_point(field_mutable_list:risk.unsub_option_position_risk.instrument)
  return &instrument_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int req_whatif::kRequestidFieldNumber;
const int req_whatif::kTypeFieldNumber;
const int req_whatif::kModelFieldNumber;
const int req_whatif::kInstrumentFieldNumber;
const int req_whatif::kRangeFieldNumber;
const int req_whatif::kBaseValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

req_whatif::req_whatif()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5faction_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.req_whatif)
}
req_whatif::req_whatif(const req_whatif& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  instrument_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.instrument().size() > 0) {
    instrument_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instrument_);
  }
  ::memcpy(&requestid_, &from.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&model_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(model_));
  // @@protoc_insertion_point(copy_constructor:risk.req_whatif)
}

void req_whatif::SharedCtor() {
  instrument_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&requestid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&model_) -
      reinterpret_cast<char*>(&requestid_)) + sizeof(model_));
  _cached_size_ = 0;
}

req_whatif::~req_whatif() {
  // @@protoc_insertion_point(destructor:risk.req_whatif)
  SharedDtor();
}

void req_whatif::SharedDtor() {
  instrument_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void req_whatif::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* req_whatif::descriptor() {
  protobuf_riskapi_5faction_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5faction_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const req_whatif& req_whatif::default_instance() {
  protobuf_riskapi_5faction_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

req_whatif* req_whatif::New(::google::protobuf::Arena* arena) const {
  req_whatif* n = new req_whatif;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void req_whatif::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.req_whatif)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  instrument_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&requestid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&model_) -
      reinterpret_cast<char*>(&requestid_)) + sizeof(model_));
  _internal_metadata_.Clear();
}

bool req_whatif::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.req_whatif)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 requestid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 model = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &model_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string instrument = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrument()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->instrument().data(), static_cast<int>(this->instrument().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.req_whatif.instrument"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double range = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double base_value = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &base_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.req_whatif)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.req_whatif)
  return false;
#undef DO_
}

void req_whatif::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.req_whatif)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 requestid = 1;
  if (this->requestid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // int32 model = 3;
  if (this->model() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->model(), output);
  }

  // string instrument = 4;
  if (this->instrument().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instrument().data(), static_cast<int>(this->instrument().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.req_whatif.instrument");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->instrument(), output);
  }

  // double range = 5;
  if (this->range() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->range(), output);
  }

  // double base_value = 6;
  if (this->base_value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->base_value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.req_whatif)
}

::google::protobuf::uint8* req_whatif::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.req_whatif)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 requestid = 1;
  if (this->requestid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // int32 model = 3;
  if (this->model() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->model(), target);
  }

  // string instrument = 4;
  if (this->instrument().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instrument().data(), static_cast<int>(this->instrument().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.req_whatif.instrument");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->instrument(), target);
  }

  // double range = 5;
  if (this->range() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->range(), target);
  }

  // double base_value = 6;
  if (this->base_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->base_value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.req_whatif)
  return target;
}

size_t req_whatif::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.req_whatif)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string instrument = 4;
  if (this->instrument().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->instrument());
  }

  // int32 requestid = 1;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->requestid());
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // double range = 5;
  if (this->range() != 0) {
    total_size += 1 + 8;
  }

  // double base_value = 6;
  if (this->base_value() != 0) {
    total_size += 1 + 8;
  }

  // int32 model = 3;
  if (this->model() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->model());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void req_whatif::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.req_whatif)
  GOOGLE_DCHECK_NE(&from, this);
  const req_whatif* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const req_whatif>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.req_whatif)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.req_whatif)
    MergeFrom(*source);
  }
}

void req_whatif::MergeFrom(const req_whatif& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.req_whatif)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.instrument().size() > 0) {

    instrument_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instrument_);
  }
  if (from.requestid() != 0) {
    set_requestid(from.requestid());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.range() != 0) {
    set_range(from.range());
  }
  if (from.base_value() != 0) {
    set_base_value(from.base_value());
  }
  if (from.model() != 0) {
    set_model(from.model());
  }
}

void req_whatif::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.req_whatif)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void req_whatif::CopyFrom(const req_whatif& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.req_whatif)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool req_whatif::IsInitialized() const {
  return true;
}

void req_whatif::Swap(req_whatif* other) {
  if (other == this) return;
  InternalSwap(other);
}
void req_whatif::InternalSwap(req_whatif* other) {
  using std::swap;
  instrument_.Swap(&other->instrument_);
  swap(requestid_, other->requestid_);
  swap(type_, other->type_);
  swap(range_, other->range_);
  swap(base_value_, other->base_value_);
  swap(model_, other->model_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata req_whatif::GetMetadata() const {
  protobuf_riskapi_5faction_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5faction_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// req_whatif

// int32 requestid = 1;
void req_whatif::clear_requestid() {
  requestid_ = 0;
}
::google::protobuf::int32 req_whatif::requestid() const {
  // @@protoc_insertion_point(field_get:risk.req_whatif.requestid)
  return requestid_;
}
void req_whatif::set_requestid(::google::protobuf::int32 value) {
  
  requestid_ = value;
  // @@protoc_insertion_point(field_set:risk.req_whatif.requestid)
}

// int32 type = 2;
void req_whatif::clear_type() {
  type_ = 0;
}
::google::protobuf::int32 req_whatif::type() const {
  // @@protoc_insertion_point(field_get:risk.req_whatif.type)
  return type_;
}
void req_whatif::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:risk.req_whatif.type)
}

// int32 model = 3;
void req_whatif::clear_model() {
  model_ = 0;
}
::google::protobuf::int32 req_whatif::model() const {
  // @@protoc_insertion_point(field_get:risk.req_whatif.model)
  return model_;
}
void req_whatif::set_model(::google::protobuf::int32 value) {
  
  model_ = value;
  // @@protoc_insertion_point(field_set:risk.req_whatif.model)
}

// string instrument = 4;
void req_whatif::clear_instrument() {
  instrument_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& req_whatif::instrument() const {
  // @@protoc_insertion_point(field_get:risk.req_whatif.instrument)
  return instrument_.GetNoArena();
}
void req_whatif::set_instrument(const ::std::string& value) {
  
  instrument_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.req_whatif.instrument)
}
#if LANG_CXX11
void req_whatif::set_instrument(::std::string&& value) {
  
  instrument_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.req_whatif.instrument)
}
#endif
void req_whatif::set_instrument(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  instrument_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.req_whatif.instrument)
}
void req_whatif::set_instrument(const char* value, size_t size) {
  
  instrument_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.req_whatif.instrument)
}
::std::string* req_whatif::mutable_instrument() {
  
  // @@protoc_insertion_point(field_mutable:risk.req_whatif.instrument)
  return instrument_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* req_whatif::release_instrument() {
  // @@protoc_insertion_point(field_release:risk.req_whatif.instrument)
  
  return instrument_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void req_whatif::set_allocated_instrument(::std::string* instrument) {
  if (instrument != NULL) {
    
  } else {
    
  }
  instrument_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrument);
  // @@protoc_insertion_point(field_set_allocated:risk.req_whatif.instrument)
}

// double range = 5;
void req_whatif::clear_range() {
  range_ = 0;
}
double req_whatif::range() const {
  // @@protoc_insertion_point(field_get:risk.req_whatif.range)
  return range_;
}
void req_whatif::set_range(double value) {
  
  range_ = value;
  // @@protoc_insertion_point(field_set:risk.req_whatif.range)
}

// double base_value = 6;
void req_whatif::clear_base_value() {
  base_value_ = 0;
}
double req_whatif::base_value() const {
  // @@protoc_insertion_point(field_get:risk.req_whatif.base_value)
  return base_value_;
}
void req_whatif::set_base_value(double value) {
  
  base_value_ = value;
  // @@protoc_insertion_point(field_set:risk.req_whatif.base_value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int req_option_argv::kRequestidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

req_option_argv::req_option_argv()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5faction_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.req_option_argv)
}
req_option_argv::req_option_argv(const req_option_argv& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  requestid_ = from.requestid_;
  // @@protoc_insertion_point(copy_constructor:risk.req_option_argv)
}

void req_option_argv::SharedCtor() {
  requestid_ = 0;
  _cached_size_ = 0;
}

req_option_argv::~req_option_argv() {
  // @@protoc_insertion_point(destructor:risk.req_option_argv)
  SharedDtor();
}

void req_option_argv::SharedDtor() {
}

void req_option_argv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* req_option_argv::descriptor() {
  protobuf_riskapi_5faction_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5faction_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const req_option_argv& req_option_argv::default_instance() {
  protobuf_riskapi_5faction_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

req_option_argv* req_option_argv::New(::google::protobuf::Arena* arena) const {
  req_option_argv* n = new req_option_argv;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void req_option_argv::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.req_option_argv)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requestid_ = 0;
  _internal_metadata_.Clear();
}

bool req_option_argv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.req_option_argv)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 requestid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.req_option_argv)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.req_option_argv)
  return false;
#undef DO_
}

void req_option_argv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.req_option_argv)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 requestid = 1;
  if (this->requestid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.req_option_argv)
}

::google::protobuf::uint8* req_option_argv::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.req_option_argv)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 requestid = 1;
  if (this->requestid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.req_option_argv)
  return target;
}

size_t req_option_argv::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.req_option_argv)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 requestid = 1;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->requestid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void req_option_argv::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.req_option_argv)
  GOOGLE_DCHECK_NE(&from, this);
  const req_option_argv* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const req_option_argv>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.req_option_argv)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.req_option_argv)
    MergeFrom(*source);
  }
}

void req_option_argv::MergeFrom(const req_option_argv& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.req_option_argv)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.requestid() != 0) {
    set_requestid(from.requestid());
  }
}

void req_option_argv::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.req_option_argv)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void req_option_argv::CopyFrom(const req_option_argv& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.req_option_argv)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool req_option_argv::IsInitialized() const {
  return true;
}

void req_option_argv::Swap(req_option_argv* other) {
  if (other == this) return;
  InternalSwap(other);
}
void req_option_argv::InternalSwap(req_option_argv* other) {
  using std::swap;
  swap(requestid_, other->requestid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata req_option_argv::GetMetadata() const {
  protobuf_riskapi_5faction_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5faction_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// req_option_argv

// int32 requestid = 1;
void req_option_argv::clear_requestid() {
  requestid_ = 0;
}
::google::protobuf::int32 req_option_argv::requestid() const {
  // @@protoc_insertion_point(field_get:risk.req_option_argv.requestid)
  return requestid_;
}
void req_option_argv::set_requestid(::google::protobuf::int32 value) {
  
  requestid_ = value;
  // @@protoc_insertion_point(field_set:risk.req_option_argv.requestid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int whatif_argv::kTypeFieldNumber;
const int whatif_argv::kInstrumentFieldNumber;
const int whatif_argv::kRangeFieldNumber;
const int whatif_argv::kBaseValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

whatif_argv::whatif_argv()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5faction_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.whatif_argv)
}
whatif_argv::whatif_argv(const whatif_argv& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  instrument_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.instrument().size() > 0) {
    instrument_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instrument_);
  }
  ::memcpy(&range_, &from.range_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&range_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:risk.whatif_argv)
}

void whatif_argv::SharedCtor() {
  instrument_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&range_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&range_)) + sizeof(type_));
  _cached_size_ = 0;
}

whatif_argv::~whatif_argv() {
  // @@protoc_insertion_point(destructor:risk.whatif_argv)
  SharedDtor();
}

void whatif_argv::SharedDtor() {
  instrument_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void whatif_argv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* whatif_argv::descriptor() {
  protobuf_riskapi_5faction_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5faction_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const whatif_argv& whatif_argv::default_instance() {
  protobuf_riskapi_5faction_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

whatif_argv* whatif_argv::New(::google::protobuf::Arena* arena) const {
  whatif_argv* n = new whatif_argv;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void whatif_argv::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.whatif_argv)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  instrument_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&range_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&range_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

bool whatif_argv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.whatif_argv)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string instrument = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrument()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->instrument().data(), static_cast<int>(this->instrument().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.whatif_argv.instrument"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double range = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double base_value = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &base_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.whatif_argv)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.whatif_argv)
  return false;
#undef DO_
}

void whatif_argv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.whatif_argv)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // string instrument = 2;
  if (this->instrument().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instrument().data(), static_cast<int>(this->instrument().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.whatif_argv.instrument");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->instrument(), output);
  }

  // double range = 3;
  if (this->range() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->range(), output);
  }

  // double base_value = 4;
  if (this->base_value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->base_value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.whatif_argv)
}

::google::protobuf::uint8* whatif_argv::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.whatif_argv)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // string instrument = 2;
  if (this->instrument().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instrument().data(), static_cast<int>(this->instrument().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.whatif_argv.instrument");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->instrument(), target);
  }

  // double range = 3;
  if (this->range() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->range(), target);
  }

  // double base_value = 4;
  if (this->base_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->base_value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.whatif_argv)
  return target;
}

size_t whatif_argv::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.whatif_argv)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string instrument = 2;
  if (this->instrument().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->instrument());
  }

  // double range = 3;
  if (this->range() != 0) {
    total_size += 1 + 8;
  }

  // double base_value = 4;
  if (this->base_value() != 0) {
    total_size += 1 + 8;
  }

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void whatif_argv::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.whatif_argv)
  GOOGLE_DCHECK_NE(&from, this);
  const whatif_argv* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const whatif_argv>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.whatif_argv)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.whatif_argv)
    MergeFrom(*source);
  }
}

void whatif_argv::MergeFrom(const whatif_argv& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.whatif_argv)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.instrument().size() > 0) {

    instrument_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instrument_);
  }
  if (from.range() != 0) {
    set_range(from.range());
  }
  if (from.base_value() != 0) {
    set_base_value(from.base_value());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void whatif_argv::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.whatif_argv)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void whatif_argv::CopyFrom(const whatif_argv& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.whatif_argv)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool whatif_argv::IsInitialized() const {
  return true;
}

void whatif_argv::Swap(whatif_argv* other) {
  if (other == this) return;
  InternalSwap(other);
}
void whatif_argv::InternalSwap(whatif_argv* other) {
  using std::swap;
  instrument_.Swap(&other->instrument_);
  swap(range_, other->range_);
  swap(base_value_, other->base_value_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata whatif_argv::GetMetadata() const {
  protobuf_riskapi_5faction_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5faction_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// whatif_argv

// int32 type = 1;
void whatif_argv::clear_type() {
  type_ = 0;
}
::google::protobuf::int32 whatif_argv::type() const {
  // @@protoc_insertion_point(field_get:risk.whatif_argv.type)
  return type_;
}
void whatif_argv::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:risk.whatif_argv.type)
}

// string instrument = 2;
void whatif_argv::clear_instrument() {
  instrument_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& whatif_argv::instrument() const {
  // @@protoc_insertion_point(field_get:risk.whatif_argv.instrument)
  return instrument_.GetNoArena();
}
void whatif_argv::set_instrument(const ::std::string& value) {
  
  instrument_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.whatif_argv.instrument)
}
#if LANG_CXX11
void whatif_argv::set_instrument(::std::string&& value) {
  
  instrument_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.whatif_argv.instrument)
}
#endif
void whatif_argv::set_instrument(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  instrument_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.whatif_argv.instrument)
}
void whatif_argv::set_instrument(const char* value, size_t size) {
  
  instrument_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.whatif_argv.instrument)
}
::std::string* whatif_argv::mutable_instrument() {
  
  // @@protoc_insertion_point(field_mutable:risk.whatif_argv.instrument)
  return instrument_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* whatif_argv::release_instrument() {
  // @@protoc_insertion_point(field_release:risk.whatif_argv.instrument)
  
  return instrument_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void whatif_argv::set_allocated_instrument(::std::string* instrument) {
  if (instrument != NULL) {
    
  } else {
    
  }
  instrument_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrument);
  // @@protoc_insertion_point(field_set_allocated:risk.whatif_argv.instrument)
}

// double range = 3;
void whatif_argv::clear_range() {
  range_ = 0;
}
double whatif_argv::range() const {
  // @@protoc_insertion_point(field_get:risk.whatif_argv.range)
  return range_;
}
void whatif_argv::set_range(double value) {
  
  range_ = value;
  // @@protoc_insertion_point(field_set:risk.whatif_argv.range)
}

// double base_value = 4;
void whatif_argv::clear_base_value() {
  base_value_ = 0;
}
double whatif_argv::base_value() const {
  // @@protoc_insertion_point(field_get:risk.whatif_argv.base_value)
  return base_value_;
}
void whatif_argv::set_base_value(double value) {
  
  base_value_ = value;
  // @@protoc_insertion_point(field_set:risk.whatif_argv.base_value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int sub_whatif::kInfosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

sub_whatif::sub_whatif()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5faction_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.sub_whatif)
}
sub_whatif::sub_whatif(const sub_whatif& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      infos_(from.infos_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:risk.sub_whatif)
}

void sub_whatif::SharedCtor() {
  _cached_size_ = 0;
}

sub_whatif::~sub_whatif() {
  // @@protoc_insertion_point(destructor:risk.sub_whatif)
  SharedDtor();
}

void sub_whatif::SharedDtor() {
}

void sub_whatif::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sub_whatif::descriptor() {
  protobuf_riskapi_5faction_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5faction_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const sub_whatif& sub_whatif::default_instance() {
  protobuf_riskapi_5faction_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

sub_whatif* sub_whatif::New(::google::protobuf::Arena* arena) const {
  sub_whatif* n = new sub_whatif;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void sub_whatif::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.sub_whatif)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  infos_.Clear();
  _internal_metadata_.Clear();
}

bool sub_whatif::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.sub_whatif)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .risk.whatif_argv infos = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.sub_whatif)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.sub_whatif)
  return false;
#undef DO_
}

void sub_whatif::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.sub_whatif)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .risk.whatif_argv infos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->infos_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infos(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.sub_whatif)
}

::google::protobuf::uint8* sub_whatif::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.sub_whatif)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .risk.whatif_argv infos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->infos_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->infos(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.sub_whatif)
  return target;
}

size_t sub_whatif::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.sub_whatif)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .risk.whatif_argv infos = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->infos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->infos(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sub_whatif::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.sub_whatif)
  GOOGLE_DCHECK_NE(&from, this);
  const sub_whatif* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const sub_whatif>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.sub_whatif)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.sub_whatif)
    MergeFrom(*source);
  }
}

void sub_whatif::MergeFrom(const sub_whatif& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.sub_whatif)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  infos_.MergeFrom(from.infos_);
}

void sub_whatif::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.sub_whatif)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sub_whatif::CopyFrom(const sub_whatif& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.sub_whatif)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sub_whatif::IsInitialized() const {
  return true;
}

void sub_whatif::Swap(sub_whatif* other) {
  if (other == this) return;
  InternalSwap(other);
}
void sub_whatif::InternalSwap(sub_whatif* other) {
  using std::swap;
  infos_.InternalSwap(&other->infos_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata sub_whatif::GetMetadata() const {
  protobuf_riskapi_5faction_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5faction_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// sub_whatif

// repeated .risk.whatif_argv infos = 1;
int sub_whatif::infos_size() const {
  return infos_.size();
}
void sub_whatif::clear_infos() {
  infos_.Clear();
}
const ::risk::whatif_argv& sub_whatif::infos(int index) const {
  // @@protoc_insertion_point(field_get:risk.sub_whatif.infos)
  return infos_.Get(index);
}
::risk::whatif_argv* sub_whatif::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:risk.sub_whatif.infos)
  return infos_.Mutable(index);
}
::risk::whatif_argv* sub_whatif::add_infos() {
  // @@protoc_insertion_point(field_add:risk.sub_whatif.infos)
  return infos_.Add();
}
::google::protobuf::RepeatedPtrField< ::risk::whatif_argv >*
sub_whatif::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:risk.sub_whatif.infos)
  return &infos_;
}
const ::google::protobuf::RepeatedPtrField< ::risk::whatif_argv >&
sub_whatif::infos() const {
  // @@protoc_insertion_point(field_list:risk.sub_whatif.infos)
  return infos_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int req_investor_info::kRequestidFieldNumber;
const int req_investor_info::kInvestorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

req_investor_info::req_investor_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_riskapi_5faction_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.req_investor_info)
}
req_investor_info::req_investor_info(const req_investor_info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      investor_(from.investor_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  requestid_ = from.requestid_;
  // @@protoc_insertion_point(copy_constructor:risk.req_investor_info)
}

void req_investor_info::SharedCtor() {
  requestid_ = 0;
  _cached_size_ = 0;
}

req_investor_info::~req_investor_info() {
  // @@protoc_insertion_point(destructor:risk.req_investor_info)
  SharedDtor();
}

void req_investor_info::SharedDtor() {
}

void req_investor_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* req_investor_info::descriptor() {
  protobuf_riskapi_5faction_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5faction_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const req_investor_info& req_investor_info::default_instance() {
  protobuf_riskapi_5faction_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

req_investor_info* req_investor_info::New(::google::protobuf::Arena* arena) const {
  req_investor_info* n = new req_investor_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void req_investor_info::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.req_investor_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  investor_.Clear();
  requestid_ = 0;
  _internal_metadata_.Clear();
}

bool req_investor_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.req_investor_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 requestid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string investor = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_investor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->investor(this->investor_size() - 1).data(),
            static_cast<int>(this->investor(this->investor_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.req_investor_info.investor"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.req_investor_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.req_investor_info)
  return false;
#undef DO_
}

void req_investor_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.req_investor_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 requestid = 1;
  if (this->requestid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // repeated string investor = 2;
  for (int i = 0, n = this->investor_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investor(i).data(), static_cast<int>(this->investor(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.req_investor_info.investor");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->investor(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.req_investor_info)
}

::google::protobuf::uint8* req_investor_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.req_investor_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 requestid = 1;
  if (this->requestid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // repeated string investor = 2;
  for (int i = 0, n = this->investor_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investor(i).data(), static_cast<int>(this->investor(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.req_investor_info.investor");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->investor(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.req_investor_info)
  return target;
}

size_t req_investor_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.req_investor_info)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string investor = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->investor_size());
  for (int i = 0, n = this->investor_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->investor(i));
  }

  // int32 requestid = 1;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->requestid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void req_investor_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.req_investor_info)
  GOOGLE_DCHECK_NE(&from, this);
  const req_investor_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const req_investor_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.req_investor_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.req_investor_info)
    MergeFrom(*source);
  }
}

void req_investor_info::MergeFrom(const req_investor_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.req_investor_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  investor_.MergeFrom(from.investor_);
  if (from.requestid() != 0) {
    set_requestid(from.requestid());
  }
}

void req_investor_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.req_investor_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void req_investor_info::CopyFrom(const req_investor_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.req_investor_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool req_investor_info::IsInitialized() const {
  return true;
}

void req_investor_info::Swap(req_investor_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void req_investor_info::InternalSwap(req_investor_info* other) {
  using std::swap;
  investor_.InternalSwap(&other->investor_);
  swap(requestid_, other->requestid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata req_investor_info::GetMetadata() const {
  protobuf_riskapi_5faction_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_riskapi_5faction_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// req_investor_info

// int32 requestid = 1;
void req_investor_info::clear_requestid() {
  requestid_ = 0;
}
::google::protobuf::int32 req_investor_info::requestid() const {
  // @@protoc_insertion_point(field_get:risk.req_investor_info.requestid)
  return requestid_;
}
void req_investor_info::set_requestid(::google::protobuf::int32 value) {
  
  requestid_ = value;
  // @@protoc_insertion_point(field_set:risk.req_investor_info.requestid)
}

// repeated string investor = 2;
int req_investor_info::investor_size() const {
  return investor_.size();
}
void req_investor_info::clear_investor() {
  investor_.Clear();
}
const ::std::string& req_investor_info::investor(int index) const {
  // @@protoc_insertion_point(field_get:risk.req_investor_info.investor)
  return investor_.Get(index);
}
::std::string* req_investor_info::mutable_investor(int index) {
  // @@protoc_insertion_point(field_mutable:risk.req_investor_info.investor)
  return investor_.Mutable(index);
}
void req_investor_info::set_investor(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:risk.req_investor_info.investor)
  investor_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void req_investor_info::set_investor(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:risk.req_investor_info.investor)
  investor_.Mutable(index)->assign(std::move(value));
}
#endif
void req_investor_info::set_investor(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  investor_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:risk.req_investor_info.investor)
}
void req_investor_info::set_investor(int index, const char* value, size_t size) {
  investor_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:risk.req_investor_info.investor)
}
::std::string* req_investor_info::add_investor() {
  // @@protoc_insertion_point(field_add_mutable:risk.req_investor_info.investor)
  return investor_.Add();
}
void req_investor_info::add_investor(const ::std::string& value) {
  investor_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:risk.req_investor_info.investor)
}
#if LANG_CXX11
void req_investor_info::add_investor(::std::string&& value) {
  investor_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:risk.req_investor_info.investor)
}
#endif
void req_investor_info::add_investor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  investor_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:risk.req_investor_info.investor)
}
void req_investor_info::add_investor(const char* value, size_t size) {
  investor_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:risk.req_investor_info.investor)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
req_investor_info::investor() const {
  // @@protoc_insertion_point(field_list:risk.req_investor_info.investor)
  return investor_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
req_investor_info::mutable_investor() {
  // @@protoc_insertion_point(field_mutable_list:risk.req_investor_info.investor)
  return &investor_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace risk

// @@protoc_insertion_point(global_scope)
