// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trade_protocal.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "trade_protocal.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace risk {
class trade_gateway_trade_fieldDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<trade_gateway_trade_field>
     _instance;
} _trade_gateway_trade_field_default_instance_;
class trade_gateway_order_fieldDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<trade_gateway_order_field>
     _instance;
} _trade_gateway_order_field_default_instance_;
class trade_gateway_sync_account_fieldDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<trade_gateway_sync_account_field>
     _instance;
} _trade_gateway_sync_account_field_default_instance_;
class trade_gateway_position_fieldDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<trade_gateway_position_field>
     _instance;
} _trade_gateway_position_field_default_instance_;
class investorID_listDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<investorID_list>
     _instance;
} _investorID_list_default_instance_;
class req_trade_loginDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<req_trade_login>
     _instance;
} _req_trade_login_default_instance_;
class rsp_trade_loginDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<rsp_trade_login>
     _instance;
} _rsp_trade_login_default_instance_;

namespace protobuf_trade_5fprotocal_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[7];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_trade_field, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_trade_field, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_trade_field, uniqsequenceno_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_trade_field, brokerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_trade_field, investorid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_trade_field, instrumentid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_trade_field, orderref_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_trade_field, exchangeid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_trade_field, tradeid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_trade_field, direction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_trade_field, ordersysid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_trade_field, offsetflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_trade_field, hedgeflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_trade_field, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_trade_field, volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_trade_field, tradedate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_trade_field, tradetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_trade_field, tradetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_trade_field, orderlocalid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_trade_field, sequenceno_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_trade_field, tradingday_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_trade_field, brokerorderseq_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_order_field, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_order_field, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_order_field, uniqsequenceno_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_order_field, brokerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_order_field, investorid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_order_field, instrumentid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_order_field, orderref_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_order_field, orderpricetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_order_field, direction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_order_field, comboffsetflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_order_field, combhedgeflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_order_field, limitprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_order_field, volumetotaloriginal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_order_field, timecondition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_order_field, gtddate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_order_field, volumecondition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_order_field, minvolume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_order_field, contingentcondition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_order_field, stopprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_order_field, forceclosereason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_order_field, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_order_field, orderlocalid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_order_field, exchangeid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_order_field, ordersubmitstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_order_field, tradingday_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_order_field, ordersysid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_order_field, ordersource_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_order_field, orderstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_order_field, ordertype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_order_field, volumetraded_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_order_field, volumetotal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_order_field, insertdate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_order_field, inserttime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_order_field, activetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_order_field, suspendtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_order_field, updatetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_order_field, canceltime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_order_field, sequenceno_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_order_field, frontid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_order_field, sessionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_order_field, userproductinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_order_field, statusmsg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_order_field, userforceclose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_order_field, brokerorderseq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_order_field, zcetotaltradedvolume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_order_field, isswaporder_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_order_field, branchid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_order_field, currencyid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_order_field, ipaddress_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_order_field, macaddress_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_sync_account_field, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_sync_account_field, brokerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_sync_account_field, investorid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_sync_account_field, withdraw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_sync_account_field, currmargin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_sync_account_field, commission_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_sync_account_field, closeprofit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_sync_account_field, positionprofit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_sync_account_field, balance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_sync_account_field, available_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_sync_account_field, mortgage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_sync_account_field, exchangemargin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_sync_account_field, withdrawquota_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_sync_account_field, frozenmargin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_sync_account_field, frozencommission_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_sync_account_field, currencyid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_sync_account_field, frozenmarginonmortgage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_sync_account_field, marginonmortgage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_sync_account_field, exchmarginonmortgage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_sync_account_field, frozencommissiononmortgage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_sync_account_field, positionprofitonmortgage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_sync_account_field, commissiononmortgage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_sync_account_field, closeprofitonmortgage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_sync_account_field, optioncloseprofit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_sync_account_field, optionvalue_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_sync_account_field, frozencash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_sync_account_field, cashin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_sync_account_field, credit_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_position_field, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_position_field, uniqsequenceno_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_position_field, instrumentid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_position_field, brokerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_position_field, investorid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_position_field, posidirection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_position_field, hedgeflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_position_field, positiondate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_position_field, ydposition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_position_field, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_position_field, longfrozen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_position_field, shortfrozen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_position_field, longfrozenamount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_position_field, shortfrozenamount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_position_field, openvolume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_position_field, closevolume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_position_field, openamount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_position_field, closeamount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_position_field, positioncost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_position_field, premargin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_position_field, usemargin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_position_field, frozenmargin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_position_field, frozencash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_position_field, frozencommission_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_position_field, cashin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_position_field, commission_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_position_field, closeprofit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_position_field, positionprofit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_position_field, presettlementprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_position_field, settlementprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_position_field, tradingday_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_position_field, settlementid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_position_field, opencost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_position_field, exchangemargin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_position_field, combposition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_position_field, comblongfrozen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_position_field, combshortfrozen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_position_field, closeprofitbydate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_position_field, closeprofitbytrade_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_position_field, todayposition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_position_field, marginratebymoney_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_position_field, marginratebyvolume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_position_field, strikefrozen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_position_field, strikefrozenamount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_position_field, abandonfrozen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trade_gateway_position_field, optionvalue_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(investorID_list, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(investorID_list, riskuser_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(investorID_list, investoridlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(investorID_list, islast_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_trade_login, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_trade_login, riskerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_trade_login, password_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_trade_login, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_trade_login, max_id_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(trade_gateway_trade_field)},
  { 26, -1, sizeof(trade_gateway_order_field)},
  { 80, -1, sizeof(trade_gateway_sync_account_field)},
  { 112, -1, sizeof(trade_gateway_position_field)},
  { 162, -1, sizeof(investorID_list)},
  { 170, -1, sizeof(req_trade_login)},
  { 177, -1, sizeof(rsp_trade_login)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_trade_gateway_trade_field_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_trade_gateway_order_field_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_trade_gateway_sync_account_field_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_trade_gateway_position_field_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_investorID_list_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_req_trade_login_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_rsp_trade_login_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "trade_protocal.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _trade_gateway_trade_field_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_trade_gateway_trade_field_default_instance_);_trade_gateway_order_field_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_trade_gateway_order_field_default_instance_);_trade_gateway_sync_account_field_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_trade_gateway_sync_account_field_default_instance_);_trade_gateway_position_field_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_trade_gateway_position_field_default_instance_);_investorID_list_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_investorID_list_default_instance_);_req_trade_login_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_req_trade_login_default_instance_);_rsp_trade_login_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_rsp_trade_login_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\024trade_protocal.proto\022\004risk\"\256\003\n\031trade_g"
      "ateway_trade_field\022\n\n\002Id\030\001 \001(\005\022\026\n\016UniqSe"
      "quenceNo\030\002 \001(\005\022\020\n\010BrokerID\030\003 \001(\t\022\022\n\nInve"
      "storID\030\004 \001(\t\022\024\n\014InstrumentID\030\005 \001(\t\022\020\n\010Or"
      "derRef\030\006 \001(\t\022\022\n\nExchangeID\030\007 \001(\t\022\017\n\007Trad"
      "eID\030\010 \001(\t\022\021\n\tDirection\030\t \001(\005\022\022\n\nOrderSys"
      "ID\030\n \001(\t\022\022\n\nOffsetFlag\030\013 \001(\005\022\021\n\tHedgeFla"
      "g\030\014 \001(\005\022\r\n\005Price\030\r \001(\001\022\016\n\006Volume\030\016 \001(\005\022\021"
      "\n\tTradeDate\030\017 \001(\t\022\021\n\tTradeTime\030\020 \001(\t\022\021\n\t"
      "TradeType\030\021 \001(\t\022\024\n\014OrderLocalID\030\022 \001(\t\022\022\n"
      "\nSequenceNo\030\023 \001(\005\022\022\n\nTradingDay\030\024 \001(\t\022\026\n"
      "\016BrokerOrderSeq\030\025 \001(\005\"\253\010\n\031trade_gateway_"
      "order_field\022\n\n\002Id\030\001 \001(\005\022\026\n\016UniqSequenceN"
      "o\030\002 \001(\005\022\020\n\010BrokerID\030\003 \001(\t\022\022\n\nInvestorID\030"
      "\004 \001(\t\022\024\n\014InstrumentID\030\005 \001(\t\022\020\n\010OrderRef\030"
      "\006 \001(\t\022\026\n\016OrderPriceType\030\007 \001(\t\022\021\n\tDirecti"
      "on\030\010 \001(\005\022\026\n\016CombOffsetFlag\030\t \001(\005\022\025\n\rComb"
      "HedgeFlag\030\n \001(\005\022\022\n\nLimitPrice\030\013 \001(\001\022\033\n\023V"
      "olumeTotalOriginal\030\014 \001(\005\022\025\n\rTimeConditio"
      "n\030\r \001(\t\022\017\n\007GTDDate\030\016 \001(\t\022\027\n\017VolumeCondit"
      "ion\030\017 \001(\t\022\021\n\tMinVolume\030\020 \001(\005\022\033\n\023Continge"
      "ntCondition\030\021 \001(\t\022\021\n\tStopPrice\030\022 \001(\001\022\030\n\020"
      "ForceCloseReason\030\023 \001(\t\022\021\n\tRequestID\030\024 \001("
      "\005\022\024\n\014OrderLocalID\030\025 \001(\t\022\022\n\nExchangeID\030\026 "
      "\001(\t\022\031\n\021OrderSubmitStatus\030\027 \001(\t\022\022\n\nTradin"
      "gDay\030\030 \001(\t\022\022\n\nOrderSysID\030\031 \001(\t\022\023\n\013OrderS"
      "ource\030\032 \001(\t\022\023\n\013OrderStatus\030\033 \001(\t\022\021\n\tOrde"
      "rType\030\034 \001(\t\022\024\n\014VolumeTraded\030\035 \001(\005\022\023\n\013Vol"
      "umeTotal\030\036 \001(\005\022\022\n\nInsertDate\030\037 \001(\t\022\022\n\nIn"
      "sertTime\030  \001(\t\022\022\n\nActiveTime\030! \001(\t\022\023\n\013Su"
      "spendTime\030\" \001(\t\022\022\n\nUpdateTime\030# \001(\t\022\022\n\nC"
      "ancelTime\030$ \001(\t\022\022\n\nSequenceNo\030% \001(\005\022\017\n\007F"
      "rontID\030& \001(\005\022\021\n\tSessionID\030\' \001(\005\022\027\n\017UserP"
      "roductInfo\030( \001(\t\022\021\n\tStatusMsg\030) \001(\014\022\026\n\016U"
      "serForceClose\030* \001(\005\022\026\n\016BrokerOrderSeq\030+ "
      "\001(\005\022\034\n\024ZCETotalTradedVolume\030, \001(\005\022\023\n\013IsS"
      "wapOrder\030- \001(\005\022\020\n\010BranchID\030. \001(\014\022\022\n\nCurr"
      "encyID\030/ \001(\t\022\021\n\tIPAddress\0300 \001(\014\022\022\n\nMacAd"
      "dress\0301 \001(\014\"\227\005\n trade_gateway_sync_accou"
      "nt_field\022\020\n\010BrokerID\030\001 \001(\t\022\022\n\nInvestorID"
      "\030\002 \001(\t\022\020\n\010Withdraw\030\003 \001(\001\022\022\n\nCurrMargin\030\004"
      " \001(\001\022\022\n\nCommission\030\005 \001(\001\022\023\n\013CloseProfit\030"
      "\006 \001(\001\022\026\n\016PositionProfit\030\007 \001(\001\022\017\n\007Balance"
      "\030\010 \001(\001\022\021\n\tAvailable\030\t \001(\001\022\020\n\010Mortgage\030\n "
      "\001(\001\022\026\n\016ExchangeMargin\030\013 \001(\001\022\025\n\rWithdrawQ"
      "uota\030\014 \001(\001\022\024\n\014FrozenMargin\030\r \001(\001\022\030\n\020Froz"
      "enCommission\030\016 \001(\001\022\022\n\nCurrencyID\030\017 \001(\t\022\036"
      "\n\026FrozenMarginOnMortgage\030\020 \001(\001\022\030\n\020Margin"
      "OnMortgage\030\021 \001(\001\022\034\n\024ExchMarginOnMortgage"
      "\030\022 \001(\001\022\"\n\032FrozenCommissionOnMortgage\030\023 \001"
      "(\001\022 \n\030PositionProfitOnMortgage\030\024 \001(\001\022\034\n\024"
      "CommissionOnMortgage\030\025 \001(\001\022\035\n\025CloseProfi"
      "tOnMortgage\030\026 \001(\001\022\031\n\021OptionCloseProfit\030\027"
      " \001(\001\022\023\n\013OptionValue\030\030 \001(\001\022\022\n\nFrozenCash\030"
      "\031 \001(\001\022\016\n\006CashIn\030\032 \001(\001\022\016\n\006Credit\030\033 \001(\001\"\214\010"
      "\n\034trade_gateway_position_field\022\026\n\016UniqSe"
      "quenceNo\030\001 \001(\005\022\024\n\014InstrumentID\030\002 \001(\t\022\020\n\010"
      "BrokerID\030\003 \001(\t\022\022\n\nInvestorID\030\004 \001(\t\022\025\n\rPo"
      "siDirection\030\005 \001(\005\022\021\n\tHedgeFlag\030\006 \001(\005\022\024\n\014"
      "PositionDate\030\007 \001(\t\022\022\n\nYdPosition\030\010 \001(\005\022\020"
      "\n\010Position\030\t \001(\005\022\022\n\nLongFrozen\030\n \001(\005\022\023\n\013"
      "ShortFrozen\030\013 \001(\005\022\030\n\020LongFrozenAmount\030\014 "
      "\001(\001\022\031\n\021ShortFrozenAmount\030\r \001(\001\022\022\n\nOpenVo"
      "lume\030\016 \001(\005\022\023\n\013CloseVolume\030\017 \001(\005\022\022\n\nOpenA"
      "mount\030\020 \001(\001\022\023\n\013CloseAmount\030\021 \001(\001\022\024\n\014Posi"
      "tionCost\030\022 \001(\001\022\021\n\tPreMargin\030\023 \001(\001\022\021\n\tUse"
      "Margin\030\024 \001(\001\022\024\n\014FrozenMargin\030\025 \001(\001\022\022\n\nFr"
      "ozenCash\030\026 \001(\001\022\030\n\020FrozenCommission\030\027 \001(\001"
      "\022\016\n\006CashIn\030\030 \001(\001\022\022\n\nCommission\030\031 \001(\001\022\023\n\013"
      "CloseProfit\030\032 \001(\001\022\026\n\016PositionProfit\030\033 \001("
      "\001\022\032\n\022PreSettlementPrice\030\034 \001(\001\022\027\n\017Settlem"
      "entPrice\030\035 \001(\001\022\022\n\nTradingDay\030\036 \001(\t\022\024\n\014Se"
      "ttlementID\030\037 \001(\005\022\020\n\010OpenCost\030  \001(\001\022\026\n\016Ex"
      "changeMargin\030! \001(\001\022\024\n\014CombPosition\030\" \001(\005"
      "\022\026\n\016CombLongFrozen\030# \001(\005\022\027\n\017CombShortFro"
      "zen\030$ \001(\005\022\031\n\021CloseProfitByDate\030% \001(\001\022\032\n\022"
      "CloseProfitByTrade\030& \001(\001\022\025\n\rTodayPositio"
      "n\030\' \001(\005\022\031\n\021MarginRateByMoney\030( \001(\001\022\032\n\022Ma"
      "rginRateByVolume\030) \001(\001\022\024\n\014StrikeFrozen\030*"
      " \001(\005\022\032\n\022StrikeFrozenAmount\030+ \001(\001\022\025\n\rAban"
      "donFrozen\030, \001(\005\022\023\n\013OptionValue\030- \001(\001\"K\n\017"
      "investorID_list\022\020\n\010RiskUser\030\001 \001(\t\022\026\n\016Inv"
      "estorIDList\030\002 \003(\t\022\016\n\006IsLast\030\003 \001(\010\"5\n\017req"
      "_trade_login\022\020\n\010riskerid\030\001 \001(\t\022\020\n\010passwo"
      "rd\030\002 \001(\t\"!\n\017rsp_trade_login\022\016\n\006max_id\030\001 "
      "\001(\005b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3411);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "trade_protocal.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_trade_5fprotocal_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int trade_gateway_trade_field::kIdFieldNumber;
const int trade_gateway_trade_field::kUniqSequenceNoFieldNumber;
const int trade_gateway_trade_field::kBrokerIDFieldNumber;
const int trade_gateway_trade_field::kInvestorIDFieldNumber;
const int trade_gateway_trade_field::kInstrumentIDFieldNumber;
const int trade_gateway_trade_field::kOrderRefFieldNumber;
const int trade_gateway_trade_field::kExchangeIDFieldNumber;
const int trade_gateway_trade_field::kTradeIDFieldNumber;
const int trade_gateway_trade_field::kDirectionFieldNumber;
const int trade_gateway_trade_field::kOrderSysIDFieldNumber;
const int trade_gateway_trade_field::kOffsetFlagFieldNumber;
const int trade_gateway_trade_field::kHedgeFlagFieldNumber;
const int trade_gateway_trade_field::kPriceFieldNumber;
const int trade_gateway_trade_field::kVolumeFieldNumber;
const int trade_gateway_trade_field::kTradeDateFieldNumber;
const int trade_gateway_trade_field::kTradeTimeFieldNumber;
const int trade_gateway_trade_field::kTradeTypeFieldNumber;
const int trade_gateway_trade_field::kOrderLocalIDFieldNumber;
const int trade_gateway_trade_field::kSequenceNoFieldNumber;
const int trade_gateway_trade_field::kTradingDayFieldNumber;
const int trade_gateway_trade_field::kBrokerOrderSeqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

trade_gateway_trade_field::trade_gateway_trade_field()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_trade_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.trade_gateway_trade_field)
}
trade_gateway_trade_field::trade_gateway_trade_field(const trade_gateway_trade_field& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  brokerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.brokerid().size() > 0) {
    brokerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.brokerid_);
  }
  investorid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.investorid().size() > 0) {
    investorid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.investorid_);
  }
  instrumentid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.instrumentid().size() > 0) {
    instrumentid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instrumentid_);
  }
  orderref_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.orderref().size() > 0) {
    orderref_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderref_);
  }
  exchangeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.exchangeid().size() > 0) {
    exchangeid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchangeid_);
  }
  tradeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tradeid().size() > 0) {
    tradeid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradeid_);
  }
  ordersysid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ordersysid().size() > 0) {
    ordersysid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ordersysid_);
  }
  tradedate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tradedate().size() > 0) {
    tradedate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradedate_);
  }
  tradetime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tradetime().size() > 0) {
    tradetime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradetime_);
  }
  tradetype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tradetype().size() > 0) {
    tradetype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradetype_);
  }
  orderlocalid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.orderlocalid().size() > 0) {
    orderlocalid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderlocalid_);
  }
  tradingday_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tradingday().size() > 0) {
    tradingday_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradingday_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&brokerorderseq_) -
    reinterpret_cast<char*>(&id_)) + sizeof(brokerorderseq_));
  // @@protoc_insertion_point(copy_constructor:risk.trade_gateway_trade_field)
}

void trade_gateway_trade_field::SharedCtor() {
  brokerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investorid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instrumentid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderref_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ordersysid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradedate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradetime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradetype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderlocalid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradingday_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&brokerorderseq_) -
      reinterpret_cast<char*>(&id_)) + sizeof(brokerorderseq_));
  _cached_size_ = 0;
}

trade_gateway_trade_field::~trade_gateway_trade_field() {
  // @@protoc_insertion_point(destructor:risk.trade_gateway_trade_field)
  SharedDtor();
}

void trade_gateway_trade_field::SharedDtor() {
  brokerid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investorid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instrumentid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderref_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangeid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ordersysid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradedate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradetime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradetype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderlocalid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradingday_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void trade_gateway_trade_field::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* trade_gateway_trade_field::descriptor() {
  protobuf_trade_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trade_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const trade_gateway_trade_field& trade_gateway_trade_field::default_instance() {
  protobuf_trade_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

trade_gateway_trade_field* trade_gateway_trade_field::New(::google::protobuf::Arena* arena) const {
  trade_gateway_trade_field* n = new trade_gateway_trade_field;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void trade_gateway_trade_field::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.trade_gateway_trade_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instrumentid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderref_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ordersysid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradedate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradetime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderlocalid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradingday_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&brokerorderseq_) -
      reinterpret_cast<char*>(&id_)) + sizeof(brokerorderseq_));
  _internal_metadata_.Clear();
}

bool trade_gateway_trade_field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.trade_gateway_trade_field)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 Id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 UniqSequenceNo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uniqsequenceno_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string BrokerID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brokerid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->brokerid().data(), static_cast<int>(this->brokerid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.trade_gateway_trade_field.BrokerID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string InvestorID = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_investorid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->investorid().data(), static_cast<int>(this->investorid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.trade_gateway_trade_field.InvestorID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string InstrumentID = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrumentid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->instrumentid().data(), static_cast<int>(this->instrumentid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.trade_gateway_trade_field.InstrumentID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string OrderRef = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderref()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->orderref().data(), static_cast<int>(this->orderref().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.trade_gateway_trade_field.OrderRef"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ExchangeID = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangeid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchangeid().data(), static_cast<int>(this->exchangeid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.trade_gateway_trade_field.ExchangeID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string TradeID = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradeid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tradeid().data(), static_cast<int>(this->tradeid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.trade_gateway_trade_field.TradeID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Direction = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &direction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string OrderSysID = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ordersysid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ordersysid().data(), static_cast<int>(this->ordersysid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.trade_gateway_trade_field.OrderSysID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 OffsetFlag = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offsetflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 HedgeFlag = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hedgeflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double Price = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Volume = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string TradeDate = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradedate()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tradedate().data(), static_cast<int>(this->tradedate().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.trade_gateway_trade_field.TradeDate"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string TradeTime = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradetime()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tradetime().data(), static_cast<int>(this->tradetime().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.trade_gateway_trade_field.TradeTime"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string TradeType = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradetype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tradetype().data(), static_cast<int>(this->tradetype().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.trade_gateway_trade_field.TradeType"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string OrderLocalID = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderlocalid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->orderlocalid().data(), static_cast<int>(this->orderlocalid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.trade_gateway_trade_field.OrderLocalID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 SequenceNo = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequenceno_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string TradingDay = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradingday()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tradingday().data(), static_cast<int>(this->tradingday().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.trade_gateway_trade_field.TradingDay"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 BrokerOrderSeq = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &brokerorderseq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.trade_gateway_trade_field)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.trade_gateway_trade_field)
  return false;
#undef DO_
}

void trade_gateway_trade_field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.trade_gateway_trade_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // int32 UniqSequenceNo = 2;
  if (this->uniqsequenceno() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->uniqsequenceno(), output);
  }

  // string BrokerID = 3;
  if (this->brokerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->brokerid().data(), static_cast<int>(this->brokerid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_trade_field.BrokerID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->brokerid(), output);
  }

  // string InvestorID = 4;
  if (this->investorid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investorid().data(), static_cast<int>(this->investorid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_trade_field.InvestorID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->investorid(), output);
  }

  // string InstrumentID = 5;
  if (this->instrumentid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instrumentid().data(), static_cast<int>(this->instrumentid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_trade_field.InstrumentID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->instrumentid(), output);
  }

  // string OrderRef = 6;
  if (this->orderref().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orderref().data(), static_cast<int>(this->orderref().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_trade_field.OrderRef");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->orderref(), output);
  }

  // string ExchangeID = 7;
  if (this->exchangeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchangeid().data(), static_cast<int>(this->exchangeid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_trade_field.ExchangeID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->exchangeid(), output);
  }

  // string TradeID = 8;
  if (this->tradeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradeid().data(), static_cast<int>(this->tradeid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_trade_field.TradeID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->tradeid(), output);
  }

  // int32 Direction = 9;
  if (this->direction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->direction(), output);
  }

  // string OrderSysID = 10;
  if (this->ordersysid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ordersysid().data(), static_cast<int>(this->ordersysid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_trade_field.OrderSysID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->ordersysid(), output);
  }

  // int32 OffsetFlag = 11;
  if (this->offsetflag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->offsetflag(), output);
  }

  // int32 HedgeFlag = 12;
  if (this->hedgeflag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->hedgeflag(), output);
  }

  // double Price = 13;
  if (this->price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->price(), output);
  }

  // int32 Volume = 14;
  if (this->volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->volume(), output);
  }

  // string TradeDate = 15;
  if (this->tradedate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradedate().data(), static_cast<int>(this->tradedate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_trade_field.TradeDate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->tradedate(), output);
  }

  // string TradeTime = 16;
  if (this->tradetime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradetime().data(), static_cast<int>(this->tradetime().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_trade_field.TradeTime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->tradetime(), output);
  }

  // string TradeType = 17;
  if (this->tradetype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradetype().data(), static_cast<int>(this->tradetype().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_trade_field.TradeType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->tradetype(), output);
  }

  // string OrderLocalID = 18;
  if (this->orderlocalid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orderlocalid().data(), static_cast<int>(this->orderlocalid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_trade_field.OrderLocalID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->orderlocalid(), output);
  }

  // int32 SequenceNo = 19;
  if (this->sequenceno() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->sequenceno(), output);
  }

  // string TradingDay = 20;
  if (this->tradingday().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradingday().data(), static_cast<int>(this->tradingday().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_trade_field.TradingDay");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->tradingday(), output);
  }

  // int32 BrokerOrderSeq = 21;
  if (this->brokerorderseq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->brokerorderseq(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.trade_gateway_trade_field)
}

::google::protobuf::uint8* trade_gateway_trade_field::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.trade_gateway_trade_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // int32 UniqSequenceNo = 2;
  if (this->uniqsequenceno() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->uniqsequenceno(), target);
  }

  // string BrokerID = 3;
  if (this->brokerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->brokerid().data(), static_cast<int>(this->brokerid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_trade_field.BrokerID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->brokerid(), target);
  }

  // string InvestorID = 4;
  if (this->investorid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investorid().data(), static_cast<int>(this->investorid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_trade_field.InvestorID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->investorid(), target);
  }

  // string InstrumentID = 5;
  if (this->instrumentid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instrumentid().data(), static_cast<int>(this->instrumentid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_trade_field.InstrumentID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->instrumentid(), target);
  }

  // string OrderRef = 6;
  if (this->orderref().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orderref().data(), static_cast<int>(this->orderref().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_trade_field.OrderRef");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->orderref(), target);
  }

  // string ExchangeID = 7;
  if (this->exchangeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchangeid().data(), static_cast<int>(this->exchangeid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_trade_field.ExchangeID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->exchangeid(), target);
  }

  // string TradeID = 8;
  if (this->tradeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradeid().data(), static_cast<int>(this->tradeid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_trade_field.TradeID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->tradeid(), target);
  }

  // int32 Direction = 9;
  if (this->direction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->direction(), target);
  }

  // string OrderSysID = 10;
  if (this->ordersysid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ordersysid().data(), static_cast<int>(this->ordersysid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_trade_field.OrderSysID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->ordersysid(), target);
  }

  // int32 OffsetFlag = 11;
  if (this->offsetflag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->offsetflag(), target);
  }

  // int32 HedgeFlag = 12;
  if (this->hedgeflag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->hedgeflag(), target);
  }

  // double Price = 13;
  if (this->price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->price(), target);
  }

  // int32 Volume = 14;
  if (this->volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->volume(), target);
  }

  // string TradeDate = 15;
  if (this->tradedate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradedate().data(), static_cast<int>(this->tradedate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_trade_field.TradeDate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->tradedate(), target);
  }

  // string TradeTime = 16;
  if (this->tradetime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradetime().data(), static_cast<int>(this->tradetime().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_trade_field.TradeTime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->tradetime(), target);
  }

  // string TradeType = 17;
  if (this->tradetype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradetype().data(), static_cast<int>(this->tradetype().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_trade_field.TradeType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->tradetype(), target);
  }

  // string OrderLocalID = 18;
  if (this->orderlocalid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orderlocalid().data(), static_cast<int>(this->orderlocalid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_trade_field.OrderLocalID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->orderlocalid(), target);
  }

  // int32 SequenceNo = 19;
  if (this->sequenceno() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->sequenceno(), target);
  }

  // string TradingDay = 20;
  if (this->tradingday().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradingday().data(), static_cast<int>(this->tradingday().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_trade_field.TradingDay");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->tradingday(), target);
  }

  // int32 BrokerOrderSeq = 21;
  if (this->brokerorderseq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->brokerorderseq(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.trade_gateway_trade_field)
  return target;
}

size_t trade_gateway_trade_field::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.trade_gateway_trade_field)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string BrokerID = 3;
  if (this->brokerid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->brokerid());
  }

  // string InvestorID = 4;
  if (this->investorid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->investorid());
  }

  // string InstrumentID = 5;
  if (this->instrumentid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->instrumentid());
  }

  // string OrderRef = 6;
  if (this->orderref().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->orderref());
  }

  // string ExchangeID = 7;
  if (this->exchangeid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchangeid());
  }

  // string TradeID = 8;
  if (this->tradeid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tradeid());
  }

  // string OrderSysID = 10;
  if (this->ordersysid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ordersysid());
  }

  // string TradeDate = 15;
  if (this->tradedate().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tradedate());
  }

  // string TradeTime = 16;
  if (this->tradetime().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tradetime());
  }

  // string TradeType = 17;
  if (this->tradetype().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tradetype());
  }

  // string OrderLocalID = 18;
  if (this->orderlocalid().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->orderlocalid());
  }

  // string TradingDay = 20;
  if (this->tradingday().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tradingday());
  }

  // int32 Id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 UniqSequenceNo = 2;
  if (this->uniqsequenceno() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->uniqsequenceno());
  }

  // int32 Direction = 9;
  if (this->direction() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->direction());
  }

  // int32 OffsetFlag = 11;
  if (this->offsetflag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->offsetflag());
  }

  // double Price = 13;
  if (this->price() != 0) {
    total_size += 1 + 8;
  }

  // int32 HedgeFlag = 12;
  if (this->hedgeflag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hedgeflag());
  }

  // int32 Volume = 14;
  if (this->volume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->volume());
  }

  // int32 SequenceNo = 19;
  if (this->sequenceno() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sequenceno());
  }

  // int32 BrokerOrderSeq = 21;
  if (this->brokerorderseq() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->brokerorderseq());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void trade_gateway_trade_field::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.trade_gateway_trade_field)
  GOOGLE_DCHECK_NE(&from, this);
  const trade_gateway_trade_field* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const trade_gateway_trade_field>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.trade_gateway_trade_field)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.trade_gateway_trade_field)
    MergeFrom(*source);
  }
}

void trade_gateway_trade_field::MergeFrom(const trade_gateway_trade_field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.trade_gateway_trade_field)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.brokerid().size() > 0) {

    brokerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.brokerid_);
  }
  if (from.investorid().size() > 0) {

    investorid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.investorid_);
  }
  if (from.instrumentid().size() > 0) {

    instrumentid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instrumentid_);
  }
  if (from.orderref().size() > 0) {

    orderref_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderref_);
  }
  if (from.exchangeid().size() > 0) {

    exchangeid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchangeid_);
  }
  if (from.tradeid().size() > 0) {

    tradeid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradeid_);
  }
  if (from.ordersysid().size() > 0) {

    ordersysid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ordersysid_);
  }
  if (from.tradedate().size() > 0) {

    tradedate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradedate_);
  }
  if (from.tradetime().size() > 0) {

    tradetime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradetime_);
  }
  if (from.tradetype().size() > 0) {

    tradetype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradetype_);
  }
  if (from.orderlocalid().size() > 0) {

    orderlocalid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderlocalid_);
  }
  if (from.tradingday().size() > 0) {

    tradingday_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradingday_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.uniqsequenceno() != 0) {
    set_uniqsequenceno(from.uniqsequenceno());
  }
  if (from.direction() != 0) {
    set_direction(from.direction());
  }
  if (from.offsetflag() != 0) {
    set_offsetflag(from.offsetflag());
  }
  if (from.price() != 0) {
    set_price(from.price());
  }
  if (from.hedgeflag() != 0) {
    set_hedgeflag(from.hedgeflag());
  }
  if (from.volume() != 0) {
    set_volume(from.volume());
  }
  if (from.sequenceno() != 0) {
    set_sequenceno(from.sequenceno());
  }
  if (from.brokerorderseq() != 0) {
    set_brokerorderseq(from.brokerorderseq());
  }
}

void trade_gateway_trade_field::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.trade_gateway_trade_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void trade_gateway_trade_field::CopyFrom(const trade_gateway_trade_field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.trade_gateway_trade_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool trade_gateway_trade_field::IsInitialized() const {
  return true;
}

void trade_gateway_trade_field::Swap(trade_gateway_trade_field* other) {
  if (other == this) return;
  InternalSwap(other);
}
void trade_gateway_trade_field::InternalSwap(trade_gateway_trade_field* other) {
  using std::swap;
  brokerid_.Swap(&other->brokerid_);
  investorid_.Swap(&other->investorid_);
  instrumentid_.Swap(&other->instrumentid_);
  orderref_.Swap(&other->orderref_);
  exchangeid_.Swap(&other->exchangeid_);
  tradeid_.Swap(&other->tradeid_);
  ordersysid_.Swap(&other->ordersysid_);
  tradedate_.Swap(&other->tradedate_);
  tradetime_.Swap(&other->tradetime_);
  tradetype_.Swap(&other->tradetype_);
  orderlocalid_.Swap(&other->orderlocalid_);
  tradingday_.Swap(&other->tradingday_);
  swap(id_, other->id_);
  swap(uniqsequenceno_, other->uniqsequenceno_);
  swap(direction_, other->direction_);
  swap(offsetflag_, other->offsetflag_);
  swap(price_, other->price_);
  swap(hedgeflag_, other->hedgeflag_);
  swap(volume_, other->volume_);
  swap(sequenceno_, other->sequenceno_);
  swap(brokerorderseq_, other->brokerorderseq_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata trade_gateway_trade_field::GetMetadata() const {
  protobuf_trade_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trade_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// trade_gateway_trade_field

// int32 Id = 1;
void trade_gateway_trade_field::clear_id() {
  id_ = 0;
}
::google::protobuf::int32 trade_gateway_trade_field::id() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_trade_field.Id)
  return id_;
}
void trade_gateway_trade_field::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_trade_field.Id)
}

// int32 UniqSequenceNo = 2;
void trade_gateway_trade_field::clear_uniqsequenceno() {
  uniqsequenceno_ = 0;
}
::google::protobuf::int32 trade_gateway_trade_field::uniqsequenceno() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_trade_field.UniqSequenceNo)
  return uniqsequenceno_;
}
void trade_gateway_trade_field::set_uniqsequenceno(::google::protobuf::int32 value) {
  
  uniqsequenceno_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_trade_field.UniqSequenceNo)
}

// string BrokerID = 3;
void trade_gateway_trade_field::clear_brokerid() {
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& trade_gateway_trade_field::brokerid() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_trade_field.BrokerID)
  return brokerid_.GetNoArena();
}
void trade_gateway_trade_field::set_brokerid(const ::std::string& value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_trade_field.BrokerID)
}
#if LANG_CXX11
void trade_gateway_trade_field::set_brokerid(::std::string&& value) {
  
  brokerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_trade_field.BrokerID)
}
#endif
void trade_gateway_trade_field::set_brokerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_trade_field.BrokerID)
}
void trade_gateway_trade_field::set_brokerid(const char* value, size_t size) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_trade_field.BrokerID)
}
::std::string* trade_gateway_trade_field::mutable_brokerid() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_trade_field.BrokerID)
  return brokerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* trade_gateway_trade_field::release_brokerid() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_trade_field.BrokerID)
  
  return brokerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void trade_gateway_trade_field::set_allocated_brokerid(::std::string* brokerid) {
  if (brokerid != NULL) {
    
  } else {
    
  }
  brokerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brokerid);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_trade_field.BrokerID)
}

// string InvestorID = 4;
void trade_gateway_trade_field::clear_investorid() {
  investorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& trade_gateway_trade_field::investorid() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_trade_field.InvestorID)
  return investorid_.GetNoArena();
}
void trade_gateway_trade_field::set_investorid(const ::std::string& value) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_trade_field.InvestorID)
}
#if LANG_CXX11
void trade_gateway_trade_field::set_investorid(::std::string&& value) {
  
  investorid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_trade_field.InvestorID)
}
#endif
void trade_gateway_trade_field::set_investorid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_trade_field.InvestorID)
}
void trade_gateway_trade_field::set_investorid(const char* value, size_t size) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_trade_field.InvestorID)
}
::std::string* trade_gateway_trade_field::mutable_investorid() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_trade_field.InvestorID)
  return investorid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* trade_gateway_trade_field::release_investorid() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_trade_field.InvestorID)
  
  return investorid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void trade_gateway_trade_field::set_allocated_investorid(::std::string* investorid) {
  if (investorid != NULL) {
    
  } else {
    
  }
  investorid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), investorid);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_trade_field.InvestorID)
}

// string InstrumentID = 5;
void trade_gateway_trade_field::clear_instrumentid() {
  instrumentid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& trade_gateway_trade_field::instrumentid() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_trade_field.InstrumentID)
  return instrumentid_.GetNoArena();
}
void trade_gateway_trade_field::set_instrumentid(const ::std::string& value) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_trade_field.InstrumentID)
}
#if LANG_CXX11
void trade_gateway_trade_field::set_instrumentid(::std::string&& value) {
  
  instrumentid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_trade_field.InstrumentID)
}
#endif
void trade_gateway_trade_field::set_instrumentid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_trade_field.InstrumentID)
}
void trade_gateway_trade_field::set_instrumentid(const char* value, size_t size) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_trade_field.InstrumentID)
}
::std::string* trade_gateway_trade_field::mutable_instrumentid() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_trade_field.InstrumentID)
  return instrumentid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* trade_gateway_trade_field::release_instrumentid() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_trade_field.InstrumentID)
  
  return instrumentid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void trade_gateway_trade_field::set_allocated_instrumentid(::std::string* instrumentid) {
  if (instrumentid != NULL) {
    
  } else {
    
  }
  instrumentid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrumentid);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_trade_field.InstrumentID)
}

// string OrderRef = 6;
void trade_gateway_trade_field::clear_orderref() {
  orderref_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& trade_gateway_trade_field::orderref() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_trade_field.OrderRef)
  return orderref_.GetNoArena();
}
void trade_gateway_trade_field::set_orderref(const ::std::string& value) {
  
  orderref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_trade_field.OrderRef)
}
#if LANG_CXX11
void trade_gateway_trade_field::set_orderref(::std::string&& value) {
  
  orderref_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_trade_field.OrderRef)
}
#endif
void trade_gateway_trade_field::set_orderref(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  orderref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_trade_field.OrderRef)
}
void trade_gateway_trade_field::set_orderref(const char* value, size_t size) {
  
  orderref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_trade_field.OrderRef)
}
::std::string* trade_gateway_trade_field::mutable_orderref() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_trade_field.OrderRef)
  return orderref_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* trade_gateway_trade_field::release_orderref() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_trade_field.OrderRef)
  
  return orderref_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void trade_gateway_trade_field::set_allocated_orderref(::std::string* orderref) {
  if (orderref != NULL) {
    
  } else {
    
  }
  orderref_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderref);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_trade_field.OrderRef)
}

// string ExchangeID = 7;
void trade_gateway_trade_field::clear_exchangeid() {
  exchangeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& trade_gateway_trade_field::exchangeid() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_trade_field.ExchangeID)
  return exchangeid_.GetNoArena();
}
void trade_gateway_trade_field::set_exchangeid(const ::std::string& value) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_trade_field.ExchangeID)
}
#if LANG_CXX11
void trade_gateway_trade_field::set_exchangeid(::std::string&& value) {
  
  exchangeid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_trade_field.ExchangeID)
}
#endif
void trade_gateway_trade_field::set_exchangeid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_trade_field.ExchangeID)
}
void trade_gateway_trade_field::set_exchangeid(const char* value, size_t size) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_trade_field.ExchangeID)
}
::std::string* trade_gateway_trade_field::mutable_exchangeid() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_trade_field.ExchangeID)
  return exchangeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* trade_gateway_trade_field::release_exchangeid() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_trade_field.ExchangeID)
  
  return exchangeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void trade_gateway_trade_field::set_allocated_exchangeid(::std::string* exchangeid) {
  if (exchangeid != NULL) {
    
  } else {
    
  }
  exchangeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchangeid);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_trade_field.ExchangeID)
}

// string TradeID = 8;
void trade_gateway_trade_field::clear_tradeid() {
  tradeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& trade_gateway_trade_field::tradeid() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_trade_field.TradeID)
  return tradeid_.GetNoArena();
}
void trade_gateway_trade_field::set_tradeid(const ::std::string& value) {
  
  tradeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_trade_field.TradeID)
}
#if LANG_CXX11
void trade_gateway_trade_field::set_tradeid(::std::string&& value) {
  
  tradeid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_trade_field.TradeID)
}
#endif
void trade_gateway_trade_field::set_tradeid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tradeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_trade_field.TradeID)
}
void trade_gateway_trade_field::set_tradeid(const char* value, size_t size) {
  
  tradeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_trade_field.TradeID)
}
::std::string* trade_gateway_trade_field::mutable_tradeid() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_trade_field.TradeID)
  return tradeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* trade_gateway_trade_field::release_tradeid() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_trade_field.TradeID)
  
  return tradeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void trade_gateway_trade_field::set_allocated_tradeid(::std::string* tradeid) {
  if (tradeid != NULL) {
    
  } else {
    
  }
  tradeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradeid);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_trade_field.TradeID)
}

// int32 Direction = 9;
void trade_gateway_trade_field::clear_direction() {
  direction_ = 0;
}
::google::protobuf::int32 trade_gateway_trade_field::direction() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_trade_field.Direction)
  return direction_;
}
void trade_gateway_trade_field::set_direction(::google::protobuf::int32 value) {
  
  direction_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_trade_field.Direction)
}

// string OrderSysID = 10;
void trade_gateway_trade_field::clear_ordersysid() {
  ordersysid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& trade_gateway_trade_field::ordersysid() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_trade_field.OrderSysID)
  return ordersysid_.GetNoArena();
}
void trade_gateway_trade_field::set_ordersysid(const ::std::string& value) {
  
  ordersysid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_trade_field.OrderSysID)
}
#if LANG_CXX11
void trade_gateway_trade_field::set_ordersysid(::std::string&& value) {
  
  ordersysid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_trade_field.OrderSysID)
}
#endif
void trade_gateway_trade_field::set_ordersysid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ordersysid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_trade_field.OrderSysID)
}
void trade_gateway_trade_field::set_ordersysid(const char* value, size_t size) {
  
  ordersysid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_trade_field.OrderSysID)
}
::std::string* trade_gateway_trade_field::mutable_ordersysid() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_trade_field.OrderSysID)
  return ordersysid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* trade_gateway_trade_field::release_ordersysid() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_trade_field.OrderSysID)
  
  return ordersysid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void trade_gateway_trade_field::set_allocated_ordersysid(::std::string* ordersysid) {
  if (ordersysid != NULL) {
    
  } else {
    
  }
  ordersysid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ordersysid);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_trade_field.OrderSysID)
}

// int32 OffsetFlag = 11;
void trade_gateway_trade_field::clear_offsetflag() {
  offsetflag_ = 0;
}
::google::protobuf::int32 trade_gateway_trade_field::offsetflag() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_trade_field.OffsetFlag)
  return offsetflag_;
}
void trade_gateway_trade_field::set_offsetflag(::google::protobuf::int32 value) {
  
  offsetflag_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_trade_field.OffsetFlag)
}

// int32 HedgeFlag = 12;
void trade_gateway_trade_field::clear_hedgeflag() {
  hedgeflag_ = 0;
}
::google::protobuf::int32 trade_gateway_trade_field::hedgeflag() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_trade_field.HedgeFlag)
  return hedgeflag_;
}
void trade_gateway_trade_field::set_hedgeflag(::google::protobuf::int32 value) {
  
  hedgeflag_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_trade_field.HedgeFlag)
}

// double Price = 13;
void trade_gateway_trade_field::clear_price() {
  price_ = 0;
}
double trade_gateway_trade_field::price() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_trade_field.Price)
  return price_;
}
void trade_gateway_trade_field::set_price(double value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_trade_field.Price)
}

// int32 Volume = 14;
void trade_gateway_trade_field::clear_volume() {
  volume_ = 0;
}
::google::protobuf::int32 trade_gateway_trade_field::volume() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_trade_field.Volume)
  return volume_;
}
void trade_gateway_trade_field::set_volume(::google::protobuf::int32 value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_trade_field.Volume)
}

// string TradeDate = 15;
void trade_gateway_trade_field::clear_tradedate() {
  tradedate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& trade_gateway_trade_field::tradedate() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_trade_field.TradeDate)
  return tradedate_.GetNoArena();
}
void trade_gateway_trade_field::set_tradedate(const ::std::string& value) {
  
  tradedate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_trade_field.TradeDate)
}
#if LANG_CXX11
void trade_gateway_trade_field::set_tradedate(::std::string&& value) {
  
  tradedate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_trade_field.TradeDate)
}
#endif
void trade_gateway_trade_field::set_tradedate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tradedate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_trade_field.TradeDate)
}
void trade_gateway_trade_field::set_tradedate(const char* value, size_t size) {
  
  tradedate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_trade_field.TradeDate)
}
::std::string* trade_gateway_trade_field::mutable_tradedate() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_trade_field.TradeDate)
  return tradedate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* trade_gateway_trade_field::release_tradedate() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_trade_field.TradeDate)
  
  return tradedate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void trade_gateway_trade_field::set_allocated_tradedate(::std::string* tradedate) {
  if (tradedate != NULL) {
    
  } else {
    
  }
  tradedate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradedate);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_trade_field.TradeDate)
}

// string TradeTime = 16;
void trade_gateway_trade_field::clear_tradetime() {
  tradetime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& trade_gateway_trade_field::tradetime() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_trade_field.TradeTime)
  return tradetime_.GetNoArena();
}
void trade_gateway_trade_field::set_tradetime(const ::std::string& value) {
  
  tradetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_trade_field.TradeTime)
}
#if LANG_CXX11
void trade_gateway_trade_field::set_tradetime(::std::string&& value) {
  
  tradetime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_trade_field.TradeTime)
}
#endif
void trade_gateway_trade_field::set_tradetime(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tradetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_trade_field.TradeTime)
}
void trade_gateway_trade_field::set_tradetime(const char* value, size_t size) {
  
  tradetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_trade_field.TradeTime)
}
::std::string* trade_gateway_trade_field::mutable_tradetime() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_trade_field.TradeTime)
  return tradetime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* trade_gateway_trade_field::release_tradetime() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_trade_field.TradeTime)
  
  return tradetime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void trade_gateway_trade_field::set_allocated_tradetime(::std::string* tradetime) {
  if (tradetime != NULL) {
    
  } else {
    
  }
  tradetime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradetime);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_trade_field.TradeTime)
}

// string TradeType = 17;
void trade_gateway_trade_field::clear_tradetype() {
  tradetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& trade_gateway_trade_field::tradetype() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_trade_field.TradeType)
  return tradetype_.GetNoArena();
}
void trade_gateway_trade_field::set_tradetype(const ::std::string& value) {
  
  tradetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_trade_field.TradeType)
}
#if LANG_CXX11
void trade_gateway_trade_field::set_tradetype(::std::string&& value) {
  
  tradetype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_trade_field.TradeType)
}
#endif
void trade_gateway_trade_field::set_tradetype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tradetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_trade_field.TradeType)
}
void trade_gateway_trade_field::set_tradetype(const char* value, size_t size) {
  
  tradetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_trade_field.TradeType)
}
::std::string* trade_gateway_trade_field::mutable_tradetype() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_trade_field.TradeType)
  return tradetype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* trade_gateway_trade_field::release_tradetype() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_trade_field.TradeType)
  
  return tradetype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void trade_gateway_trade_field::set_allocated_tradetype(::std::string* tradetype) {
  if (tradetype != NULL) {
    
  } else {
    
  }
  tradetype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradetype);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_trade_field.TradeType)
}

// string OrderLocalID = 18;
void trade_gateway_trade_field::clear_orderlocalid() {
  orderlocalid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& trade_gateway_trade_field::orderlocalid() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_trade_field.OrderLocalID)
  return orderlocalid_.GetNoArena();
}
void trade_gateway_trade_field::set_orderlocalid(const ::std::string& value) {
  
  orderlocalid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_trade_field.OrderLocalID)
}
#if LANG_CXX11
void trade_gateway_trade_field::set_orderlocalid(::std::string&& value) {
  
  orderlocalid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_trade_field.OrderLocalID)
}
#endif
void trade_gateway_trade_field::set_orderlocalid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  orderlocalid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_trade_field.OrderLocalID)
}
void trade_gateway_trade_field::set_orderlocalid(const char* value, size_t size) {
  
  orderlocalid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_trade_field.OrderLocalID)
}
::std::string* trade_gateway_trade_field::mutable_orderlocalid() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_trade_field.OrderLocalID)
  return orderlocalid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* trade_gateway_trade_field::release_orderlocalid() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_trade_field.OrderLocalID)
  
  return orderlocalid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void trade_gateway_trade_field::set_allocated_orderlocalid(::std::string* orderlocalid) {
  if (orderlocalid != NULL) {
    
  } else {
    
  }
  orderlocalid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderlocalid);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_trade_field.OrderLocalID)
}

// int32 SequenceNo = 19;
void trade_gateway_trade_field::clear_sequenceno() {
  sequenceno_ = 0;
}
::google::protobuf::int32 trade_gateway_trade_field::sequenceno() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_trade_field.SequenceNo)
  return sequenceno_;
}
void trade_gateway_trade_field::set_sequenceno(::google::protobuf::int32 value) {
  
  sequenceno_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_trade_field.SequenceNo)
}

// string TradingDay = 20;
void trade_gateway_trade_field::clear_tradingday() {
  tradingday_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& trade_gateway_trade_field::tradingday() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_trade_field.TradingDay)
  return tradingday_.GetNoArena();
}
void trade_gateway_trade_field::set_tradingday(const ::std::string& value) {
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_trade_field.TradingDay)
}
#if LANG_CXX11
void trade_gateway_trade_field::set_tradingday(::std::string&& value) {
  
  tradingday_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_trade_field.TradingDay)
}
#endif
void trade_gateway_trade_field::set_tradingday(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_trade_field.TradingDay)
}
void trade_gateway_trade_field::set_tradingday(const char* value, size_t size) {
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_trade_field.TradingDay)
}
::std::string* trade_gateway_trade_field::mutable_tradingday() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_trade_field.TradingDay)
  return tradingday_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* trade_gateway_trade_field::release_tradingday() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_trade_field.TradingDay)
  
  return tradingday_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void trade_gateway_trade_field::set_allocated_tradingday(::std::string* tradingday) {
  if (tradingday != NULL) {
    
  } else {
    
  }
  tradingday_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradingday);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_trade_field.TradingDay)
}

// int32 BrokerOrderSeq = 21;
void trade_gateway_trade_field::clear_brokerorderseq() {
  brokerorderseq_ = 0;
}
::google::protobuf::int32 trade_gateway_trade_field::brokerorderseq() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_trade_field.BrokerOrderSeq)
  return brokerorderseq_;
}
void trade_gateway_trade_field::set_brokerorderseq(::google::protobuf::int32 value) {
  
  brokerorderseq_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_trade_field.BrokerOrderSeq)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int trade_gateway_order_field::kIdFieldNumber;
const int trade_gateway_order_field::kUniqSequenceNoFieldNumber;
const int trade_gateway_order_field::kBrokerIDFieldNumber;
const int trade_gateway_order_field::kInvestorIDFieldNumber;
const int trade_gateway_order_field::kInstrumentIDFieldNumber;
const int trade_gateway_order_field::kOrderRefFieldNumber;
const int trade_gateway_order_field::kOrderPriceTypeFieldNumber;
const int trade_gateway_order_field::kDirectionFieldNumber;
const int trade_gateway_order_field::kCombOffsetFlagFieldNumber;
const int trade_gateway_order_field::kCombHedgeFlagFieldNumber;
const int trade_gateway_order_field::kLimitPriceFieldNumber;
const int trade_gateway_order_field::kVolumeTotalOriginalFieldNumber;
const int trade_gateway_order_field::kTimeConditionFieldNumber;
const int trade_gateway_order_field::kGTDDateFieldNumber;
const int trade_gateway_order_field::kVolumeConditionFieldNumber;
const int trade_gateway_order_field::kMinVolumeFieldNumber;
const int trade_gateway_order_field::kContingentConditionFieldNumber;
const int trade_gateway_order_field::kStopPriceFieldNumber;
const int trade_gateway_order_field::kForceCloseReasonFieldNumber;
const int trade_gateway_order_field::kRequestIDFieldNumber;
const int trade_gateway_order_field::kOrderLocalIDFieldNumber;
const int trade_gateway_order_field::kExchangeIDFieldNumber;
const int trade_gateway_order_field::kOrderSubmitStatusFieldNumber;
const int trade_gateway_order_field::kTradingDayFieldNumber;
const int trade_gateway_order_field::kOrderSysIDFieldNumber;
const int trade_gateway_order_field::kOrderSourceFieldNumber;
const int trade_gateway_order_field::kOrderStatusFieldNumber;
const int trade_gateway_order_field::kOrderTypeFieldNumber;
const int trade_gateway_order_field::kVolumeTradedFieldNumber;
const int trade_gateway_order_field::kVolumeTotalFieldNumber;
const int trade_gateway_order_field::kInsertDateFieldNumber;
const int trade_gateway_order_field::kInsertTimeFieldNumber;
const int trade_gateway_order_field::kActiveTimeFieldNumber;
const int trade_gateway_order_field::kSuspendTimeFieldNumber;
const int trade_gateway_order_field::kUpdateTimeFieldNumber;
const int trade_gateway_order_field::kCancelTimeFieldNumber;
const int trade_gateway_order_field::kSequenceNoFieldNumber;
const int trade_gateway_order_field::kFrontIDFieldNumber;
const int trade_gateway_order_field::kSessionIDFieldNumber;
const int trade_gateway_order_field::kUserProductInfoFieldNumber;
const int trade_gateway_order_field::kStatusMsgFieldNumber;
const int trade_gateway_order_field::kUserForceCloseFieldNumber;
const int trade_gateway_order_field::kBrokerOrderSeqFieldNumber;
const int trade_gateway_order_field::kZCETotalTradedVolumeFieldNumber;
const int trade_gateway_order_field::kIsSwapOrderFieldNumber;
const int trade_gateway_order_field::kBranchIDFieldNumber;
const int trade_gateway_order_field::kCurrencyIDFieldNumber;
const int trade_gateway_order_field::kIPAddressFieldNumber;
const int trade_gateway_order_field::kMacAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

trade_gateway_order_field::trade_gateway_order_field()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_trade_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.trade_gateway_order_field)
}
trade_gateway_order_field::trade_gateway_order_field(const trade_gateway_order_field& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  brokerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.brokerid().size() > 0) {
    brokerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.brokerid_);
  }
  investorid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.investorid().size() > 0) {
    investorid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.investorid_);
  }
  instrumentid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.instrumentid().size() > 0) {
    instrumentid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instrumentid_);
  }
  orderref_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.orderref().size() > 0) {
    orderref_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderref_);
  }
  orderpricetype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.orderpricetype().size() > 0) {
    orderpricetype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderpricetype_);
  }
  timecondition_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.timecondition().size() > 0) {
    timecondition_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timecondition_);
  }
  gtddate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gtddate().size() > 0) {
    gtddate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gtddate_);
  }
  volumecondition_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.volumecondition().size() > 0) {
    volumecondition_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.volumecondition_);
  }
  contingentcondition_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.contingentcondition().size() > 0) {
    contingentcondition_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contingentcondition_);
  }
  forceclosereason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.forceclosereason().size() > 0) {
    forceclosereason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.forceclosereason_);
  }
  orderlocalid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.orderlocalid().size() > 0) {
    orderlocalid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderlocalid_);
  }
  exchangeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.exchangeid().size() > 0) {
    exchangeid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchangeid_);
  }
  ordersubmitstatus_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ordersubmitstatus().size() > 0) {
    ordersubmitstatus_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ordersubmitstatus_);
  }
  tradingday_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tradingday().size() > 0) {
    tradingday_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradingday_);
  }
  ordersysid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ordersysid().size() > 0) {
    ordersysid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ordersysid_);
  }
  ordersource_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ordersource().size() > 0) {
    ordersource_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ordersource_);
  }
  orderstatus_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.orderstatus().size() > 0) {
    orderstatus_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderstatus_);
  }
  ordertype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ordertype().size() > 0) {
    ordertype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ordertype_);
  }
  insertdate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.insertdate().size() > 0) {
    insertdate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.insertdate_);
  }
  inserttime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.inserttime().size() > 0) {
    inserttime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inserttime_);
  }
  activetime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.activetime().size() > 0) {
    activetime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.activetime_);
  }
  suspendtime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.suspendtime().size() > 0) {
    suspendtime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.suspendtime_);
  }
  updatetime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.updatetime().size() > 0) {
    updatetime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.updatetime_);
  }
  canceltime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.canceltime().size() > 0) {
    canceltime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.canceltime_);
  }
  userproductinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.userproductinfo().size() > 0) {
    userproductinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userproductinfo_);
  }
  statusmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.statusmsg().size() > 0) {
    statusmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.statusmsg_);
  }
  branchid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.branchid().size() > 0) {
    branchid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.branchid_);
  }
  currencyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.currencyid().size() > 0) {
    currencyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currencyid_);
  }
  ipaddress_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ipaddress().size() > 0) {
    ipaddress_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipaddress_);
  }
  macaddress_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.macaddress().size() > 0) {
    macaddress_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.macaddress_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&isswaporder_) -
    reinterpret_cast<char*>(&id_)) + sizeof(isswaporder_));
  // @@protoc_insertion_point(copy_constructor:risk.trade_gateway_order_field)
}

void trade_gateway_order_field::SharedCtor() {
  brokerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investorid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instrumentid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderref_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderpricetype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timecondition_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gtddate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  volumecondition_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contingentcondition_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  forceclosereason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderlocalid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ordersubmitstatus_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradingday_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ordersysid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ordersource_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderstatus_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ordertype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  insertdate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inserttime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  activetime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  suspendtime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  updatetime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  canceltime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userproductinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  statusmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  branchid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currencyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipaddress_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  macaddress_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isswaporder_) -
      reinterpret_cast<char*>(&id_)) + sizeof(isswaporder_));
  _cached_size_ = 0;
}

trade_gateway_order_field::~trade_gateway_order_field() {
  // @@protoc_insertion_point(destructor:risk.trade_gateway_order_field)
  SharedDtor();
}

void trade_gateway_order_field::SharedDtor() {
  brokerid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investorid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instrumentid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderref_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderpricetype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timecondition_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gtddate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  volumecondition_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contingentcondition_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  forceclosereason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderlocalid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangeid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ordersubmitstatus_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradingday_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ordersysid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ordersource_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderstatus_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ordertype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  insertdate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inserttime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  activetime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  suspendtime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  updatetime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  canceltime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userproductinfo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  statusmsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  branchid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currencyid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipaddress_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  macaddress_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void trade_gateway_order_field::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* trade_gateway_order_field::descriptor() {
  protobuf_trade_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trade_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const trade_gateway_order_field& trade_gateway_order_field::default_instance() {
  protobuf_trade_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

trade_gateway_order_field* trade_gateway_order_field::New(::google::protobuf::Arena* arena) const {
  trade_gateway_order_field* n = new trade_gateway_order_field;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void trade_gateway_order_field::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.trade_gateway_order_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instrumentid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderref_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderpricetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timecondition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gtddate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  volumecondition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contingentcondition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  forceclosereason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderlocalid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ordersubmitstatus_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradingday_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ordersysid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ordersource_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderstatus_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ordertype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  insertdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inserttime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  activetime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  suspendtime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  updatetime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  canceltime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userproductinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  statusmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  branchid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currencyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  macaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isswaporder_) -
      reinterpret_cast<char*>(&id_)) + sizeof(isswaporder_));
  _internal_metadata_.Clear();
}

bool trade_gateway_order_field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.trade_gateway_order_field)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 Id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 UniqSequenceNo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uniqsequenceno_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string BrokerID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brokerid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->brokerid().data(), static_cast<int>(this->brokerid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.trade_gateway_order_field.BrokerID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string InvestorID = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_investorid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->investorid().data(), static_cast<int>(this->investorid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.trade_gateway_order_field.InvestorID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string InstrumentID = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrumentid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->instrumentid().data(), static_cast<int>(this->instrumentid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.trade_gateway_order_field.InstrumentID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string OrderRef = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderref()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->orderref().data(), static_cast<int>(this->orderref().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.trade_gateway_order_field.OrderRef"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string OrderPriceType = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderpricetype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->orderpricetype().data(), static_cast<int>(this->orderpricetype().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.trade_gateway_order_field.OrderPriceType"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Direction = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &direction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 CombOffsetFlag = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &comboffsetflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 CombHedgeFlag = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &combhedgeflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double LimitPrice = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &limitprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 VolumeTotalOriginal = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volumetotaloriginal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string TimeCondition = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timecondition()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->timecondition().data(), static_cast<int>(this->timecondition().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.trade_gateway_order_field.TimeCondition"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string GTDDate = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gtddate()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gtddate().data(), static_cast<int>(this->gtddate().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.trade_gateway_order_field.GTDDate"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string VolumeCondition = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_volumecondition()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->volumecondition().data(), static_cast<int>(this->volumecondition().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.trade_gateway_order_field.VolumeCondition"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 MinVolume = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minvolume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ContingentCondition = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contingentcondition()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->contingentcondition().data(), static_cast<int>(this->contingentcondition().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.trade_gateway_order_field.ContingentCondition"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double StopPrice = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(145u /* 145 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stopprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ForceCloseReason = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_forceclosereason()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->forceclosereason().data(), static_cast<int>(this->forceclosereason().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.trade_gateway_order_field.ForceCloseReason"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 RequestID = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string OrderLocalID = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderlocalid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->orderlocalid().data(), static_cast<int>(this->orderlocalid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.trade_gateway_order_field.OrderLocalID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ExchangeID = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangeid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchangeid().data(), static_cast<int>(this->exchangeid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.trade_gateway_order_field.ExchangeID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string OrderSubmitStatus = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ordersubmitstatus()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ordersubmitstatus().data(), static_cast<int>(this->ordersubmitstatus().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.trade_gateway_order_field.OrderSubmitStatus"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string TradingDay = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradingday()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tradingday().data(), static_cast<int>(this->tradingday().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.trade_gateway_order_field.TradingDay"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string OrderSysID = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ordersysid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ordersysid().data(), static_cast<int>(this->ordersysid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.trade_gateway_order_field.OrderSysID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string OrderSource = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ordersource()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ordersource().data(), static_cast<int>(this->ordersource().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.trade_gateway_order_field.OrderSource"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string OrderStatus = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 218 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderstatus()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->orderstatus().data(), static_cast<int>(this->orderstatus().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.trade_gateway_order_field.OrderStatus"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string OrderType = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 226 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ordertype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ordertype().data(), static_cast<int>(this->ordertype().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.trade_gateway_order_field.OrderType"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 VolumeTraded = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 232 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volumetraded_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 VolumeTotal = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volumetotal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string InsertDate = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 250 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_insertdate()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->insertdate().data(), static_cast<int>(this->insertdate().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.trade_gateway_order_field.InsertDate"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string InsertTime = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 258 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inserttime()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->inserttime().data(), static_cast<int>(this->inserttime().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.trade_gateway_order_field.InsertTime"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ActiveTime = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 266 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_activetime()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->activetime().data(), static_cast<int>(this->activetime().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.trade_gateway_order_field.ActiveTime"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string SuspendTime = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 274 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suspendtime()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->suspendtime().data(), static_cast<int>(this->suspendtime().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.trade_gateway_order_field.SuspendTime"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string UpdateTime = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 282 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_updatetime()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->updatetime().data(), static_cast<int>(this->updatetime().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.trade_gateway_order_field.UpdateTime"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string CancelTime = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 290 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_canceltime()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->canceltime().data(), static_cast<int>(this->canceltime().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.trade_gateway_order_field.CancelTime"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 SequenceNo = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 296 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequenceno_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 FrontID = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 304 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frontid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 SessionID = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 312 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string UserProductInfo = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 322 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userproductinfo()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->userproductinfo().data(), static_cast<int>(this->userproductinfo().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.trade_gateway_order_field.UserProductInfo"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes StatusMsg = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 330 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_statusmsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 UserForceClose = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 336 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userforceclose_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 BrokerOrderSeq = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 344 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &brokerorderseq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ZCETotalTradedVolume = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 352 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zcetotaltradedvolume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 IsSwapOrder = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 360 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isswaporder_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes BranchID = 46;
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 370 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_branchid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string CurrencyID = 47;
      case 47: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 378 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currencyid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->currencyid().data(), static_cast<int>(this->currencyid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.trade_gateway_order_field.CurrencyID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes IPAddress = 48;
      case 48: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 386 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ipaddress()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes MacAddress = 49;
      case 49: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 394 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_macaddress()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.trade_gateway_order_field)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.trade_gateway_order_field)
  return false;
#undef DO_
}

void trade_gateway_order_field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.trade_gateway_order_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // int32 UniqSequenceNo = 2;
  if (this->uniqsequenceno() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->uniqsequenceno(), output);
  }

  // string BrokerID = 3;
  if (this->brokerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->brokerid().data(), static_cast<int>(this->brokerid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_order_field.BrokerID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->brokerid(), output);
  }

  // string InvestorID = 4;
  if (this->investorid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investorid().data(), static_cast<int>(this->investorid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_order_field.InvestorID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->investorid(), output);
  }

  // string InstrumentID = 5;
  if (this->instrumentid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instrumentid().data(), static_cast<int>(this->instrumentid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_order_field.InstrumentID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->instrumentid(), output);
  }

  // string OrderRef = 6;
  if (this->orderref().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orderref().data(), static_cast<int>(this->orderref().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_order_field.OrderRef");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->orderref(), output);
  }

  // string OrderPriceType = 7;
  if (this->orderpricetype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orderpricetype().data(), static_cast<int>(this->orderpricetype().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_order_field.OrderPriceType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->orderpricetype(), output);
  }

  // int32 Direction = 8;
  if (this->direction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->direction(), output);
  }

  // int32 CombOffsetFlag = 9;
  if (this->comboffsetflag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->comboffsetflag(), output);
  }

  // int32 CombHedgeFlag = 10;
  if (this->combhedgeflag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->combhedgeflag(), output);
  }

  // double LimitPrice = 11;
  if (this->limitprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->limitprice(), output);
  }

  // int32 VolumeTotalOriginal = 12;
  if (this->volumetotaloriginal() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->volumetotaloriginal(), output);
  }

  // string TimeCondition = 13;
  if (this->timecondition().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timecondition().data(), static_cast<int>(this->timecondition().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_order_field.TimeCondition");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->timecondition(), output);
  }

  // string GTDDate = 14;
  if (this->gtddate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gtddate().data(), static_cast<int>(this->gtddate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_order_field.GTDDate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->gtddate(), output);
  }

  // string VolumeCondition = 15;
  if (this->volumecondition().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->volumecondition().data(), static_cast<int>(this->volumecondition().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_order_field.VolumeCondition");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->volumecondition(), output);
  }

  // int32 MinVolume = 16;
  if (this->minvolume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->minvolume(), output);
  }

  // string ContingentCondition = 17;
  if (this->contingentcondition().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->contingentcondition().data(), static_cast<int>(this->contingentcondition().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_order_field.ContingentCondition");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->contingentcondition(), output);
  }

  // double StopPrice = 18;
  if (this->stopprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->stopprice(), output);
  }

  // string ForceCloseReason = 19;
  if (this->forceclosereason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->forceclosereason().data(), static_cast<int>(this->forceclosereason().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_order_field.ForceCloseReason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->forceclosereason(), output);
  }

  // int32 RequestID = 20;
  if (this->requestid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->requestid(), output);
  }

  // string OrderLocalID = 21;
  if (this->orderlocalid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orderlocalid().data(), static_cast<int>(this->orderlocalid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_order_field.OrderLocalID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->orderlocalid(), output);
  }

  // string ExchangeID = 22;
  if (this->exchangeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchangeid().data(), static_cast<int>(this->exchangeid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_order_field.ExchangeID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->exchangeid(), output);
  }

  // string OrderSubmitStatus = 23;
  if (this->ordersubmitstatus().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ordersubmitstatus().data(), static_cast<int>(this->ordersubmitstatus().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_order_field.OrderSubmitStatus");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->ordersubmitstatus(), output);
  }

  // string TradingDay = 24;
  if (this->tradingday().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradingday().data(), static_cast<int>(this->tradingday().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_order_field.TradingDay");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      24, this->tradingday(), output);
  }

  // string OrderSysID = 25;
  if (this->ordersysid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ordersysid().data(), static_cast<int>(this->ordersysid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_order_field.OrderSysID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      25, this->ordersysid(), output);
  }

  // string OrderSource = 26;
  if (this->ordersource().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ordersource().data(), static_cast<int>(this->ordersource().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_order_field.OrderSource");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      26, this->ordersource(), output);
  }

  // string OrderStatus = 27;
  if (this->orderstatus().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orderstatus().data(), static_cast<int>(this->orderstatus().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_order_field.OrderStatus");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      27, this->orderstatus(), output);
  }

  // string OrderType = 28;
  if (this->ordertype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ordertype().data(), static_cast<int>(this->ordertype().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_order_field.OrderType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      28, this->ordertype(), output);
  }

  // int32 VolumeTraded = 29;
  if (this->volumetraded() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->volumetraded(), output);
  }

  // int32 VolumeTotal = 30;
  if (this->volumetotal() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->volumetotal(), output);
  }

  // string InsertDate = 31;
  if (this->insertdate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->insertdate().data(), static_cast<int>(this->insertdate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_order_field.InsertDate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      31, this->insertdate(), output);
  }

  // string InsertTime = 32;
  if (this->inserttime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->inserttime().data(), static_cast<int>(this->inserttime().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_order_field.InsertTime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      32, this->inserttime(), output);
  }

  // string ActiveTime = 33;
  if (this->activetime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->activetime().data(), static_cast<int>(this->activetime().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_order_field.ActiveTime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      33, this->activetime(), output);
  }

  // string SuspendTime = 34;
  if (this->suspendtime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->suspendtime().data(), static_cast<int>(this->suspendtime().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_order_field.SuspendTime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      34, this->suspendtime(), output);
  }

  // string UpdateTime = 35;
  if (this->updatetime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->updatetime().data(), static_cast<int>(this->updatetime().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_order_field.UpdateTime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      35, this->updatetime(), output);
  }

  // string CancelTime = 36;
  if (this->canceltime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->canceltime().data(), static_cast<int>(this->canceltime().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_order_field.CancelTime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      36, this->canceltime(), output);
  }

  // int32 SequenceNo = 37;
  if (this->sequenceno() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->sequenceno(), output);
  }

  // int32 FrontID = 38;
  if (this->frontid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->frontid(), output);
  }

  // int32 SessionID = 39;
  if (this->sessionid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->sessionid(), output);
  }

  // string UserProductInfo = 40;
  if (this->userproductinfo().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userproductinfo().data(), static_cast<int>(this->userproductinfo().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_order_field.UserProductInfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      40, this->userproductinfo(), output);
  }

  // bytes StatusMsg = 41;
  if (this->statusmsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      41, this->statusmsg(), output);
  }

  // int32 UserForceClose = 42;
  if (this->userforceclose() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(42, this->userforceclose(), output);
  }

  // int32 BrokerOrderSeq = 43;
  if (this->brokerorderseq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(43, this->brokerorderseq(), output);
  }

  // int32 ZCETotalTradedVolume = 44;
  if (this->zcetotaltradedvolume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(44, this->zcetotaltradedvolume(), output);
  }

  // int32 IsSwapOrder = 45;
  if (this->isswaporder() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(45, this->isswaporder(), output);
  }

  // bytes BranchID = 46;
  if (this->branchid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      46, this->branchid(), output);
  }

  // string CurrencyID = 47;
  if (this->currencyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->currencyid().data(), static_cast<int>(this->currencyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_order_field.CurrencyID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      47, this->currencyid(), output);
  }

  // bytes IPAddress = 48;
  if (this->ipaddress().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      48, this->ipaddress(), output);
  }

  // bytes MacAddress = 49;
  if (this->macaddress().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      49, this->macaddress(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.trade_gateway_order_field)
}

::google::protobuf::uint8* trade_gateway_order_field::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.trade_gateway_order_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // int32 UniqSequenceNo = 2;
  if (this->uniqsequenceno() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->uniqsequenceno(), target);
  }

  // string BrokerID = 3;
  if (this->brokerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->brokerid().data(), static_cast<int>(this->brokerid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_order_field.BrokerID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->brokerid(), target);
  }

  // string InvestorID = 4;
  if (this->investorid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investorid().data(), static_cast<int>(this->investorid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_order_field.InvestorID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->investorid(), target);
  }

  // string InstrumentID = 5;
  if (this->instrumentid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instrumentid().data(), static_cast<int>(this->instrumentid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_order_field.InstrumentID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->instrumentid(), target);
  }

  // string OrderRef = 6;
  if (this->orderref().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orderref().data(), static_cast<int>(this->orderref().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_order_field.OrderRef");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->orderref(), target);
  }

  // string OrderPriceType = 7;
  if (this->orderpricetype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orderpricetype().data(), static_cast<int>(this->orderpricetype().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_order_field.OrderPriceType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->orderpricetype(), target);
  }

  // int32 Direction = 8;
  if (this->direction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->direction(), target);
  }

  // int32 CombOffsetFlag = 9;
  if (this->comboffsetflag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->comboffsetflag(), target);
  }

  // int32 CombHedgeFlag = 10;
  if (this->combhedgeflag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->combhedgeflag(), target);
  }

  // double LimitPrice = 11;
  if (this->limitprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->limitprice(), target);
  }

  // int32 VolumeTotalOriginal = 12;
  if (this->volumetotaloriginal() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->volumetotaloriginal(), target);
  }

  // string TimeCondition = 13;
  if (this->timecondition().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timecondition().data(), static_cast<int>(this->timecondition().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_order_field.TimeCondition");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->timecondition(), target);
  }

  // string GTDDate = 14;
  if (this->gtddate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gtddate().data(), static_cast<int>(this->gtddate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_order_field.GTDDate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->gtddate(), target);
  }

  // string VolumeCondition = 15;
  if (this->volumecondition().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->volumecondition().data(), static_cast<int>(this->volumecondition().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_order_field.VolumeCondition");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->volumecondition(), target);
  }

  // int32 MinVolume = 16;
  if (this->minvolume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->minvolume(), target);
  }

  // string ContingentCondition = 17;
  if (this->contingentcondition().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->contingentcondition().data(), static_cast<int>(this->contingentcondition().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_order_field.ContingentCondition");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->contingentcondition(), target);
  }

  // double StopPrice = 18;
  if (this->stopprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->stopprice(), target);
  }

  // string ForceCloseReason = 19;
  if (this->forceclosereason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->forceclosereason().data(), static_cast<int>(this->forceclosereason().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_order_field.ForceCloseReason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->forceclosereason(), target);
  }

  // int32 RequestID = 20;
  if (this->requestid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->requestid(), target);
  }

  // string OrderLocalID = 21;
  if (this->orderlocalid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orderlocalid().data(), static_cast<int>(this->orderlocalid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_order_field.OrderLocalID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->orderlocalid(), target);
  }

  // string ExchangeID = 22;
  if (this->exchangeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchangeid().data(), static_cast<int>(this->exchangeid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_order_field.ExchangeID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->exchangeid(), target);
  }

  // string OrderSubmitStatus = 23;
  if (this->ordersubmitstatus().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ordersubmitstatus().data(), static_cast<int>(this->ordersubmitstatus().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_order_field.OrderSubmitStatus");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->ordersubmitstatus(), target);
  }

  // string TradingDay = 24;
  if (this->tradingday().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradingday().data(), static_cast<int>(this->tradingday().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_order_field.TradingDay");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->tradingday(), target);
  }

  // string OrderSysID = 25;
  if (this->ordersysid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ordersysid().data(), static_cast<int>(this->ordersysid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_order_field.OrderSysID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->ordersysid(), target);
  }

  // string OrderSource = 26;
  if (this->ordersource().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ordersource().data(), static_cast<int>(this->ordersource().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_order_field.OrderSource");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->ordersource(), target);
  }

  // string OrderStatus = 27;
  if (this->orderstatus().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orderstatus().data(), static_cast<int>(this->orderstatus().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_order_field.OrderStatus");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->orderstatus(), target);
  }

  // string OrderType = 28;
  if (this->ordertype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ordertype().data(), static_cast<int>(this->ordertype().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_order_field.OrderType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->ordertype(), target);
  }

  // int32 VolumeTraded = 29;
  if (this->volumetraded() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->volumetraded(), target);
  }

  // int32 VolumeTotal = 30;
  if (this->volumetotal() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->volumetotal(), target);
  }

  // string InsertDate = 31;
  if (this->insertdate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->insertdate().data(), static_cast<int>(this->insertdate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_order_field.InsertDate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->insertdate(), target);
  }

  // string InsertTime = 32;
  if (this->inserttime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->inserttime().data(), static_cast<int>(this->inserttime().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_order_field.InsertTime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        32, this->inserttime(), target);
  }

  // string ActiveTime = 33;
  if (this->activetime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->activetime().data(), static_cast<int>(this->activetime().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_order_field.ActiveTime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        33, this->activetime(), target);
  }

  // string SuspendTime = 34;
  if (this->suspendtime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->suspendtime().data(), static_cast<int>(this->suspendtime().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_order_field.SuspendTime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        34, this->suspendtime(), target);
  }

  // string UpdateTime = 35;
  if (this->updatetime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->updatetime().data(), static_cast<int>(this->updatetime().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_order_field.UpdateTime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        35, this->updatetime(), target);
  }

  // string CancelTime = 36;
  if (this->canceltime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->canceltime().data(), static_cast<int>(this->canceltime().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_order_field.CancelTime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        36, this->canceltime(), target);
  }

  // int32 SequenceNo = 37;
  if (this->sequenceno() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(37, this->sequenceno(), target);
  }

  // int32 FrontID = 38;
  if (this->frontid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->frontid(), target);
  }

  // int32 SessionID = 39;
  if (this->sessionid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(39, this->sessionid(), target);
  }

  // string UserProductInfo = 40;
  if (this->userproductinfo().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userproductinfo().data(), static_cast<int>(this->userproductinfo().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_order_field.UserProductInfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        40, this->userproductinfo(), target);
  }

  // bytes StatusMsg = 41;
  if (this->statusmsg().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        41, this->statusmsg(), target);
  }

  // int32 UserForceClose = 42;
  if (this->userforceclose() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(42, this->userforceclose(), target);
  }

  // int32 BrokerOrderSeq = 43;
  if (this->brokerorderseq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(43, this->brokerorderseq(), target);
  }

  // int32 ZCETotalTradedVolume = 44;
  if (this->zcetotaltradedvolume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(44, this->zcetotaltradedvolume(), target);
  }

  // int32 IsSwapOrder = 45;
  if (this->isswaporder() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(45, this->isswaporder(), target);
  }

  // bytes BranchID = 46;
  if (this->branchid().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        46, this->branchid(), target);
  }

  // string CurrencyID = 47;
  if (this->currencyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->currencyid().data(), static_cast<int>(this->currencyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_order_field.CurrencyID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        47, this->currencyid(), target);
  }

  // bytes IPAddress = 48;
  if (this->ipaddress().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        48, this->ipaddress(), target);
  }

  // bytes MacAddress = 49;
  if (this->macaddress().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        49, this->macaddress(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.trade_gateway_order_field)
  return target;
}

size_t trade_gateway_order_field::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.trade_gateway_order_field)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string BrokerID = 3;
  if (this->brokerid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->brokerid());
  }

  // string InvestorID = 4;
  if (this->investorid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->investorid());
  }

  // string InstrumentID = 5;
  if (this->instrumentid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->instrumentid());
  }

  // string OrderRef = 6;
  if (this->orderref().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->orderref());
  }

  // string OrderPriceType = 7;
  if (this->orderpricetype().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->orderpricetype());
  }

  // string TimeCondition = 13;
  if (this->timecondition().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->timecondition());
  }

  // string GTDDate = 14;
  if (this->gtddate().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gtddate());
  }

  // string VolumeCondition = 15;
  if (this->volumecondition().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->volumecondition());
  }

  // string ContingentCondition = 17;
  if (this->contingentcondition().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->contingentcondition());
  }

  // string ForceCloseReason = 19;
  if (this->forceclosereason().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->forceclosereason());
  }

  // string OrderLocalID = 21;
  if (this->orderlocalid().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->orderlocalid());
  }

  // string ExchangeID = 22;
  if (this->exchangeid().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchangeid());
  }

  // string OrderSubmitStatus = 23;
  if (this->ordersubmitstatus().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ordersubmitstatus());
  }

  // string TradingDay = 24;
  if (this->tradingday().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tradingday());
  }

  // string OrderSysID = 25;
  if (this->ordersysid().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ordersysid());
  }

  // string OrderSource = 26;
  if (this->ordersource().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ordersource());
  }

  // string OrderStatus = 27;
  if (this->orderstatus().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->orderstatus());
  }

  // string OrderType = 28;
  if (this->ordertype().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ordertype());
  }

  // string InsertDate = 31;
  if (this->insertdate().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->insertdate());
  }

  // string InsertTime = 32;
  if (this->inserttime().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->inserttime());
  }

  // string ActiveTime = 33;
  if (this->activetime().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->activetime());
  }

  // string SuspendTime = 34;
  if (this->suspendtime().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->suspendtime());
  }

  // string UpdateTime = 35;
  if (this->updatetime().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->updatetime());
  }

  // string CancelTime = 36;
  if (this->canceltime().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->canceltime());
  }

  // string UserProductInfo = 40;
  if (this->userproductinfo().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userproductinfo());
  }

  // bytes StatusMsg = 41;
  if (this->statusmsg().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->statusmsg());
  }

  // bytes BranchID = 46;
  if (this->branchid().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->branchid());
  }

  // string CurrencyID = 47;
  if (this->currencyid().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->currencyid());
  }

  // bytes IPAddress = 48;
  if (this->ipaddress().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->ipaddress());
  }

  // bytes MacAddress = 49;
  if (this->macaddress().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->macaddress());
  }

  // int32 Id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 UniqSequenceNo = 2;
  if (this->uniqsequenceno() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->uniqsequenceno());
  }

  // int32 Direction = 8;
  if (this->direction() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->direction());
  }

  // int32 CombOffsetFlag = 9;
  if (this->comboffsetflag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->comboffsetflag());
  }

  // double LimitPrice = 11;
  if (this->limitprice() != 0) {
    total_size += 1 + 8;
  }

  // int32 CombHedgeFlag = 10;
  if (this->combhedgeflag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->combhedgeflag());
  }

  // int32 VolumeTotalOriginal = 12;
  if (this->volumetotaloriginal() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->volumetotaloriginal());
  }

  // double StopPrice = 18;
  if (this->stopprice() != 0) {
    total_size += 2 + 8;
  }

  // int32 MinVolume = 16;
  if (this->minvolume() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->minvolume());
  }

  // int32 RequestID = 20;
  if (this->requestid() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->requestid());
  }

  // int32 VolumeTraded = 29;
  if (this->volumetraded() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->volumetraded());
  }

  // int32 VolumeTotal = 30;
  if (this->volumetotal() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->volumetotal());
  }

  // int32 SequenceNo = 37;
  if (this->sequenceno() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sequenceno());
  }

  // int32 FrontID = 38;
  if (this->frontid() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frontid());
  }

  // int32 SessionID = 39;
  if (this->sessionid() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sessionid());
  }

  // int32 UserForceClose = 42;
  if (this->userforceclose() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userforceclose());
  }

  // int32 BrokerOrderSeq = 43;
  if (this->brokerorderseq() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->brokerorderseq());
  }

  // int32 ZCETotalTradedVolume = 44;
  if (this->zcetotaltradedvolume() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->zcetotaltradedvolume());
  }

  // int32 IsSwapOrder = 45;
  if (this->isswaporder() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->isswaporder());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void trade_gateway_order_field::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.trade_gateway_order_field)
  GOOGLE_DCHECK_NE(&from, this);
  const trade_gateway_order_field* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const trade_gateway_order_field>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.trade_gateway_order_field)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.trade_gateway_order_field)
    MergeFrom(*source);
  }
}

void trade_gateway_order_field::MergeFrom(const trade_gateway_order_field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.trade_gateway_order_field)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.brokerid().size() > 0) {

    brokerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.brokerid_);
  }
  if (from.investorid().size() > 0) {

    investorid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.investorid_);
  }
  if (from.instrumentid().size() > 0) {

    instrumentid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instrumentid_);
  }
  if (from.orderref().size() > 0) {

    orderref_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderref_);
  }
  if (from.orderpricetype().size() > 0) {

    orderpricetype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderpricetype_);
  }
  if (from.timecondition().size() > 0) {

    timecondition_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timecondition_);
  }
  if (from.gtddate().size() > 0) {

    gtddate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gtddate_);
  }
  if (from.volumecondition().size() > 0) {

    volumecondition_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.volumecondition_);
  }
  if (from.contingentcondition().size() > 0) {

    contingentcondition_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contingentcondition_);
  }
  if (from.forceclosereason().size() > 0) {

    forceclosereason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.forceclosereason_);
  }
  if (from.orderlocalid().size() > 0) {

    orderlocalid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderlocalid_);
  }
  if (from.exchangeid().size() > 0) {

    exchangeid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchangeid_);
  }
  if (from.ordersubmitstatus().size() > 0) {

    ordersubmitstatus_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ordersubmitstatus_);
  }
  if (from.tradingday().size() > 0) {

    tradingday_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradingday_);
  }
  if (from.ordersysid().size() > 0) {

    ordersysid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ordersysid_);
  }
  if (from.ordersource().size() > 0) {

    ordersource_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ordersource_);
  }
  if (from.orderstatus().size() > 0) {

    orderstatus_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderstatus_);
  }
  if (from.ordertype().size() > 0) {

    ordertype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ordertype_);
  }
  if (from.insertdate().size() > 0) {

    insertdate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.insertdate_);
  }
  if (from.inserttime().size() > 0) {

    inserttime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inserttime_);
  }
  if (from.activetime().size() > 0) {

    activetime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.activetime_);
  }
  if (from.suspendtime().size() > 0) {

    suspendtime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.suspendtime_);
  }
  if (from.updatetime().size() > 0) {

    updatetime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.updatetime_);
  }
  if (from.canceltime().size() > 0) {

    canceltime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.canceltime_);
  }
  if (from.userproductinfo().size() > 0) {

    userproductinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userproductinfo_);
  }
  if (from.statusmsg().size() > 0) {

    statusmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.statusmsg_);
  }
  if (from.branchid().size() > 0) {

    branchid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.branchid_);
  }
  if (from.currencyid().size() > 0) {

    currencyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currencyid_);
  }
  if (from.ipaddress().size() > 0) {

    ipaddress_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipaddress_);
  }
  if (from.macaddress().size() > 0) {

    macaddress_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.macaddress_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.uniqsequenceno() != 0) {
    set_uniqsequenceno(from.uniqsequenceno());
  }
  if (from.direction() != 0) {
    set_direction(from.direction());
  }
  if (from.comboffsetflag() != 0) {
    set_comboffsetflag(from.comboffsetflag());
  }
  if (from.limitprice() != 0) {
    set_limitprice(from.limitprice());
  }
  if (from.combhedgeflag() != 0) {
    set_combhedgeflag(from.combhedgeflag());
  }
  if (from.volumetotaloriginal() != 0) {
    set_volumetotaloriginal(from.volumetotaloriginal());
  }
  if (from.stopprice() != 0) {
    set_stopprice(from.stopprice());
  }
  if (from.minvolume() != 0) {
    set_minvolume(from.minvolume());
  }
  if (from.requestid() != 0) {
    set_requestid(from.requestid());
  }
  if (from.volumetraded() != 0) {
    set_volumetraded(from.volumetraded());
  }
  if (from.volumetotal() != 0) {
    set_volumetotal(from.volumetotal());
  }
  if (from.sequenceno() != 0) {
    set_sequenceno(from.sequenceno());
  }
  if (from.frontid() != 0) {
    set_frontid(from.frontid());
  }
  if (from.sessionid() != 0) {
    set_sessionid(from.sessionid());
  }
  if (from.userforceclose() != 0) {
    set_userforceclose(from.userforceclose());
  }
  if (from.brokerorderseq() != 0) {
    set_brokerorderseq(from.brokerorderseq());
  }
  if (from.zcetotaltradedvolume() != 0) {
    set_zcetotaltradedvolume(from.zcetotaltradedvolume());
  }
  if (from.isswaporder() != 0) {
    set_isswaporder(from.isswaporder());
  }
}

void trade_gateway_order_field::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.trade_gateway_order_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void trade_gateway_order_field::CopyFrom(const trade_gateway_order_field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.trade_gateway_order_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool trade_gateway_order_field::IsInitialized() const {
  return true;
}

void trade_gateway_order_field::Swap(trade_gateway_order_field* other) {
  if (other == this) return;
  InternalSwap(other);
}
void trade_gateway_order_field::InternalSwap(trade_gateway_order_field* other) {
  using std::swap;
  brokerid_.Swap(&other->brokerid_);
  investorid_.Swap(&other->investorid_);
  instrumentid_.Swap(&other->instrumentid_);
  orderref_.Swap(&other->orderref_);
  orderpricetype_.Swap(&other->orderpricetype_);
  timecondition_.Swap(&other->timecondition_);
  gtddate_.Swap(&other->gtddate_);
  volumecondition_.Swap(&other->volumecondition_);
  contingentcondition_.Swap(&other->contingentcondition_);
  forceclosereason_.Swap(&other->forceclosereason_);
  orderlocalid_.Swap(&other->orderlocalid_);
  exchangeid_.Swap(&other->exchangeid_);
  ordersubmitstatus_.Swap(&other->ordersubmitstatus_);
  tradingday_.Swap(&other->tradingday_);
  ordersysid_.Swap(&other->ordersysid_);
  ordersource_.Swap(&other->ordersource_);
  orderstatus_.Swap(&other->orderstatus_);
  ordertype_.Swap(&other->ordertype_);
  insertdate_.Swap(&other->insertdate_);
  inserttime_.Swap(&other->inserttime_);
  activetime_.Swap(&other->activetime_);
  suspendtime_.Swap(&other->suspendtime_);
  updatetime_.Swap(&other->updatetime_);
  canceltime_.Swap(&other->canceltime_);
  userproductinfo_.Swap(&other->userproductinfo_);
  statusmsg_.Swap(&other->statusmsg_);
  branchid_.Swap(&other->branchid_);
  currencyid_.Swap(&other->currencyid_);
  ipaddress_.Swap(&other->ipaddress_);
  macaddress_.Swap(&other->macaddress_);
  swap(id_, other->id_);
  swap(uniqsequenceno_, other->uniqsequenceno_);
  swap(direction_, other->direction_);
  swap(comboffsetflag_, other->comboffsetflag_);
  swap(limitprice_, other->limitprice_);
  swap(combhedgeflag_, other->combhedgeflag_);
  swap(volumetotaloriginal_, other->volumetotaloriginal_);
  swap(stopprice_, other->stopprice_);
  swap(minvolume_, other->minvolume_);
  swap(requestid_, other->requestid_);
  swap(volumetraded_, other->volumetraded_);
  swap(volumetotal_, other->volumetotal_);
  swap(sequenceno_, other->sequenceno_);
  swap(frontid_, other->frontid_);
  swap(sessionid_, other->sessionid_);
  swap(userforceclose_, other->userforceclose_);
  swap(brokerorderseq_, other->brokerorderseq_);
  swap(zcetotaltradedvolume_, other->zcetotaltradedvolume_);
  swap(isswaporder_, other->isswaporder_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata trade_gateway_order_field::GetMetadata() const {
  protobuf_trade_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trade_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// trade_gateway_order_field

// int32 Id = 1;
void trade_gateway_order_field::clear_id() {
  id_ = 0;
}
::google::protobuf::int32 trade_gateway_order_field::id() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.Id)
  return id_;
}
void trade_gateway_order_field::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.Id)
}

// int32 UniqSequenceNo = 2;
void trade_gateway_order_field::clear_uniqsequenceno() {
  uniqsequenceno_ = 0;
}
::google::protobuf::int32 trade_gateway_order_field::uniqsequenceno() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.UniqSequenceNo)
  return uniqsequenceno_;
}
void trade_gateway_order_field::set_uniqsequenceno(::google::protobuf::int32 value) {
  
  uniqsequenceno_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.UniqSequenceNo)
}

// string BrokerID = 3;
void trade_gateway_order_field::clear_brokerid() {
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& trade_gateway_order_field::brokerid() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.BrokerID)
  return brokerid_.GetNoArena();
}
void trade_gateway_order_field::set_brokerid(const ::std::string& value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.BrokerID)
}
#if LANG_CXX11
void trade_gateway_order_field::set_brokerid(::std::string&& value) {
  
  brokerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_order_field.BrokerID)
}
#endif
void trade_gateway_order_field::set_brokerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_order_field.BrokerID)
}
void trade_gateway_order_field::set_brokerid(const char* value, size_t size) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_order_field.BrokerID)
}
::std::string* trade_gateway_order_field::mutable_brokerid() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_order_field.BrokerID)
  return brokerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* trade_gateway_order_field::release_brokerid() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_order_field.BrokerID)
  
  return brokerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void trade_gateway_order_field::set_allocated_brokerid(::std::string* brokerid) {
  if (brokerid != NULL) {
    
  } else {
    
  }
  brokerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brokerid);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_order_field.BrokerID)
}

// string InvestorID = 4;
void trade_gateway_order_field::clear_investorid() {
  investorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& trade_gateway_order_field::investorid() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.InvestorID)
  return investorid_.GetNoArena();
}
void trade_gateway_order_field::set_investorid(const ::std::string& value) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.InvestorID)
}
#if LANG_CXX11
void trade_gateway_order_field::set_investorid(::std::string&& value) {
  
  investorid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_order_field.InvestorID)
}
#endif
void trade_gateway_order_field::set_investorid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_order_field.InvestorID)
}
void trade_gateway_order_field::set_investorid(const char* value, size_t size) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_order_field.InvestorID)
}
::std::string* trade_gateway_order_field::mutable_investorid() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_order_field.InvestorID)
  return investorid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* trade_gateway_order_field::release_investorid() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_order_field.InvestorID)
  
  return investorid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void trade_gateway_order_field::set_allocated_investorid(::std::string* investorid) {
  if (investorid != NULL) {
    
  } else {
    
  }
  investorid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), investorid);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_order_field.InvestorID)
}

// string InstrumentID = 5;
void trade_gateway_order_field::clear_instrumentid() {
  instrumentid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& trade_gateway_order_field::instrumentid() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.InstrumentID)
  return instrumentid_.GetNoArena();
}
void trade_gateway_order_field::set_instrumentid(const ::std::string& value) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.InstrumentID)
}
#if LANG_CXX11
void trade_gateway_order_field::set_instrumentid(::std::string&& value) {
  
  instrumentid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_order_field.InstrumentID)
}
#endif
void trade_gateway_order_field::set_instrumentid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_order_field.InstrumentID)
}
void trade_gateway_order_field::set_instrumentid(const char* value, size_t size) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_order_field.InstrumentID)
}
::std::string* trade_gateway_order_field::mutable_instrumentid() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_order_field.InstrumentID)
  return instrumentid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* trade_gateway_order_field::release_instrumentid() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_order_field.InstrumentID)
  
  return instrumentid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void trade_gateway_order_field::set_allocated_instrumentid(::std::string* instrumentid) {
  if (instrumentid != NULL) {
    
  } else {
    
  }
  instrumentid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrumentid);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_order_field.InstrumentID)
}

// string OrderRef = 6;
void trade_gateway_order_field::clear_orderref() {
  orderref_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& trade_gateway_order_field::orderref() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.OrderRef)
  return orderref_.GetNoArena();
}
void trade_gateway_order_field::set_orderref(const ::std::string& value) {
  
  orderref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.OrderRef)
}
#if LANG_CXX11
void trade_gateway_order_field::set_orderref(::std::string&& value) {
  
  orderref_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_order_field.OrderRef)
}
#endif
void trade_gateway_order_field::set_orderref(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  orderref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_order_field.OrderRef)
}
void trade_gateway_order_field::set_orderref(const char* value, size_t size) {
  
  orderref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_order_field.OrderRef)
}
::std::string* trade_gateway_order_field::mutable_orderref() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_order_field.OrderRef)
  return orderref_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* trade_gateway_order_field::release_orderref() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_order_field.OrderRef)
  
  return orderref_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void trade_gateway_order_field::set_allocated_orderref(::std::string* orderref) {
  if (orderref != NULL) {
    
  } else {
    
  }
  orderref_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderref);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_order_field.OrderRef)
}

// string OrderPriceType = 7;
void trade_gateway_order_field::clear_orderpricetype() {
  orderpricetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& trade_gateway_order_field::orderpricetype() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.OrderPriceType)
  return orderpricetype_.GetNoArena();
}
void trade_gateway_order_field::set_orderpricetype(const ::std::string& value) {
  
  orderpricetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.OrderPriceType)
}
#if LANG_CXX11
void trade_gateway_order_field::set_orderpricetype(::std::string&& value) {
  
  orderpricetype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_order_field.OrderPriceType)
}
#endif
void trade_gateway_order_field::set_orderpricetype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  orderpricetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_order_field.OrderPriceType)
}
void trade_gateway_order_field::set_orderpricetype(const char* value, size_t size) {
  
  orderpricetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_order_field.OrderPriceType)
}
::std::string* trade_gateway_order_field::mutable_orderpricetype() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_order_field.OrderPriceType)
  return orderpricetype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* trade_gateway_order_field::release_orderpricetype() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_order_field.OrderPriceType)
  
  return orderpricetype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void trade_gateway_order_field::set_allocated_orderpricetype(::std::string* orderpricetype) {
  if (orderpricetype != NULL) {
    
  } else {
    
  }
  orderpricetype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderpricetype);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_order_field.OrderPriceType)
}

// int32 Direction = 8;
void trade_gateway_order_field::clear_direction() {
  direction_ = 0;
}
::google::protobuf::int32 trade_gateway_order_field::direction() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.Direction)
  return direction_;
}
void trade_gateway_order_field::set_direction(::google::protobuf::int32 value) {
  
  direction_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.Direction)
}

// int32 CombOffsetFlag = 9;
void trade_gateway_order_field::clear_comboffsetflag() {
  comboffsetflag_ = 0;
}
::google::protobuf::int32 trade_gateway_order_field::comboffsetflag() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.CombOffsetFlag)
  return comboffsetflag_;
}
void trade_gateway_order_field::set_comboffsetflag(::google::protobuf::int32 value) {
  
  comboffsetflag_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.CombOffsetFlag)
}

// int32 CombHedgeFlag = 10;
void trade_gateway_order_field::clear_combhedgeflag() {
  combhedgeflag_ = 0;
}
::google::protobuf::int32 trade_gateway_order_field::combhedgeflag() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.CombHedgeFlag)
  return combhedgeflag_;
}
void trade_gateway_order_field::set_combhedgeflag(::google::protobuf::int32 value) {
  
  combhedgeflag_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.CombHedgeFlag)
}

// double LimitPrice = 11;
void trade_gateway_order_field::clear_limitprice() {
  limitprice_ = 0;
}
double trade_gateway_order_field::limitprice() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.LimitPrice)
  return limitprice_;
}
void trade_gateway_order_field::set_limitprice(double value) {
  
  limitprice_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.LimitPrice)
}

// int32 VolumeTotalOriginal = 12;
void trade_gateway_order_field::clear_volumetotaloriginal() {
  volumetotaloriginal_ = 0;
}
::google::protobuf::int32 trade_gateway_order_field::volumetotaloriginal() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.VolumeTotalOriginal)
  return volumetotaloriginal_;
}
void trade_gateway_order_field::set_volumetotaloriginal(::google::protobuf::int32 value) {
  
  volumetotaloriginal_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.VolumeTotalOriginal)
}

// string TimeCondition = 13;
void trade_gateway_order_field::clear_timecondition() {
  timecondition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& trade_gateway_order_field::timecondition() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.TimeCondition)
  return timecondition_.GetNoArena();
}
void trade_gateway_order_field::set_timecondition(const ::std::string& value) {
  
  timecondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.TimeCondition)
}
#if LANG_CXX11
void trade_gateway_order_field::set_timecondition(::std::string&& value) {
  
  timecondition_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_order_field.TimeCondition)
}
#endif
void trade_gateway_order_field::set_timecondition(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  timecondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_order_field.TimeCondition)
}
void trade_gateway_order_field::set_timecondition(const char* value, size_t size) {
  
  timecondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_order_field.TimeCondition)
}
::std::string* trade_gateway_order_field::mutable_timecondition() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_order_field.TimeCondition)
  return timecondition_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* trade_gateway_order_field::release_timecondition() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_order_field.TimeCondition)
  
  return timecondition_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void trade_gateway_order_field::set_allocated_timecondition(::std::string* timecondition) {
  if (timecondition != NULL) {
    
  } else {
    
  }
  timecondition_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timecondition);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_order_field.TimeCondition)
}

// string GTDDate = 14;
void trade_gateway_order_field::clear_gtddate() {
  gtddate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& trade_gateway_order_field::gtddate() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.GTDDate)
  return gtddate_.GetNoArena();
}
void trade_gateway_order_field::set_gtddate(const ::std::string& value) {
  
  gtddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.GTDDate)
}
#if LANG_CXX11
void trade_gateway_order_field::set_gtddate(::std::string&& value) {
  
  gtddate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_order_field.GTDDate)
}
#endif
void trade_gateway_order_field::set_gtddate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gtddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_order_field.GTDDate)
}
void trade_gateway_order_field::set_gtddate(const char* value, size_t size) {
  
  gtddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_order_field.GTDDate)
}
::std::string* trade_gateway_order_field::mutable_gtddate() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_order_field.GTDDate)
  return gtddate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* trade_gateway_order_field::release_gtddate() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_order_field.GTDDate)
  
  return gtddate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void trade_gateway_order_field::set_allocated_gtddate(::std::string* gtddate) {
  if (gtddate != NULL) {
    
  } else {
    
  }
  gtddate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gtddate);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_order_field.GTDDate)
}

// string VolumeCondition = 15;
void trade_gateway_order_field::clear_volumecondition() {
  volumecondition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& trade_gateway_order_field::volumecondition() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.VolumeCondition)
  return volumecondition_.GetNoArena();
}
void trade_gateway_order_field::set_volumecondition(const ::std::string& value) {
  
  volumecondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.VolumeCondition)
}
#if LANG_CXX11
void trade_gateway_order_field::set_volumecondition(::std::string&& value) {
  
  volumecondition_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_order_field.VolumeCondition)
}
#endif
void trade_gateway_order_field::set_volumecondition(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  volumecondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_order_field.VolumeCondition)
}
void trade_gateway_order_field::set_volumecondition(const char* value, size_t size) {
  
  volumecondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_order_field.VolumeCondition)
}
::std::string* trade_gateway_order_field::mutable_volumecondition() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_order_field.VolumeCondition)
  return volumecondition_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* trade_gateway_order_field::release_volumecondition() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_order_field.VolumeCondition)
  
  return volumecondition_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void trade_gateway_order_field::set_allocated_volumecondition(::std::string* volumecondition) {
  if (volumecondition != NULL) {
    
  } else {
    
  }
  volumecondition_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), volumecondition);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_order_field.VolumeCondition)
}

// int32 MinVolume = 16;
void trade_gateway_order_field::clear_minvolume() {
  minvolume_ = 0;
}
::google::protobuf::int32 trade_gateway_order_field::minvolume() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.MinVolume)
  return minvolume_;
}
void trade_gateway_order_field::set_minvolume(::google::protobuf::int32 value) {
  
  minvolume_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.MinVolume)
}

// string ContingentCondition = 17;
void trade_gateway_order_field::clear_contingentcondition() {
  contingentcondition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& trade_gateway_order_field::contingentcondition() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.ContingentCondition)
  return contingentcondition_.GetNoArena();
}
void trade_gateway_order_field::set_contingentcondition(const ::std::string& value) {
  
  contingentcondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.ContingentCondition)
}
#if LANG_CXX11
void trade_gateway_order_field::set_contingentcondition(::std::string&& value) {
  
  contingentcondition_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_order_field.ContingentCondition)
}
#endif
void trade_gateway_order_field::set_contingentcondition(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  contingentcondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_order_field.ContingentCondition)
}
void trade_gateway_order_field::set_contingentcondition(const char* value, size_t size) {
  
  contingentcondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_order_field.ContingentCondition)
}
::std::string* trade_gateway_order_field::mutable_contingentcondition() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_order_field.ContingentCondition)
  return contingentcondition_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* trade_gateway_order_field::release_contingentcondition() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_order_field.ContingentCondition)
  
  return contingentcondition_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void trade_gateway_order_field::set_allocated_contingentcondition(::std::string* contingentcondition) {
  if (contingentcondition != NULL) {
    
  } else {
    
  }
  contingentcondition_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contingentcondition);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_order_field.ContingentCondition)
}

// double StopPrice = 18;
void trade_gateway_order_field::clear_stopprice() {
  stopprice_ = 0;
}
double trade_gateway_order_field::stopprice() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.StopPrice)
  return stopprice_;
}
void trade_gateway_order_field::set_stopprice(double value) {
  
  stopprice_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.StopPrice)
}

// string ForceCloseReason = 19;
void trade_gateway_order_field::clear_forceclosereason() {
  forceclosereason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& trade_gateway_order_field::forceclosereason() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.ForceCloseReason)
  return forceclosereason_.GetNoArena();
}
void trade_gateway_order_field::set_forceclosereason(const ::std::string& value) {
  
  forceclosereason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.ForceCloseReason)
}
#if LANG_CXX11
void trade_gateway_order_field::set_forceclosereason(::std::string&& value) {
  
  forceclosereason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_order_field.ForceCloseReason)
}
#endif
void trade_gateway_order_field::set_forceclosereason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  forceclosereason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_order_field.ForceCloseReason)
}
void trade_gateway_order_field::set_forceclosereason(const char* value, size_t size) {
  
  forceclosereason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_order_field.ForceCloseReason)
}
::std::string* trade_gateway_order_field::mutable_forceclosereason() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_order_field.ForceCloseReason)
  return forceclosereason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* trade_gateway_order_field::release_forceclosereason() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_order_field.ForceCloseReason)
  
  return forceclosereason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void trade_gateway_order_field::set_allocated_forceclosereason(::std::string* forceclosereason) {
  if (forceclosereason != NULL) {
    
  } else {
    
  }
  forceclosereason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), forceclosereason);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_order_field.ForceCloseReason)
}

// int32 RequestID = 20;
void trade_gateway_order_field::clear_requestid() {
  requestid_ = 0;
}
::google::protobuf::int32 trade_gateway_order_field::requestid() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.RequestID)
  return requestid_;
}
void trade_gateway_order_field::set_requestid(::google::protobuf::int32 value) {
  
  requestid_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.RequestID)
}

// string OrderLocalID = 21;
void trade_gateway_order_field::clear_orderlocalid() {
  orderlocalid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& trade_gateway_order_field::orderlocalid() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.OrderLocalID)
  return orderlocalid_.GetNoArena();
}
void trade_gateway_order_field::set_orderlocalid(const ::std::string& value) {
  
  orderlocalid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.OrderLocalID)
}
#if LANG_CXX11
void trade_gateway_order_field::set_orderlocalid(::std::string&& value) {
  
  orderlocalid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_order_field.OrderLocalID)
}
#endif
void trade_gateway_order_field::set_orderlocalid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  orderlocalid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_order_field.OrderLocalID)
}
void trade_gateway_order_field::set_orderlocalid(const char* value, size_t size) {
  
  orderlocalid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_order_field.OrderLocalID)
}
::std::string* trade_gateway_order_field::mutable_orderlocalid() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_order_field.OrderLocalID)
  return orderlocalid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* trade_gateway_order_field::release_orderlocalid() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_order_field.OrderLocalID)
  
  return orderlocalid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void trade_gateway_order_field::set_allocated_orderlocalid(::std::string* orderlocalid) {
  if (orderlocalid != NULL) {
    
  } else {
    
  }
  orderlocalid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderlocalid);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_order_field.OrderLocalID)
}

// string ExchangeID = 22;
void trade_gateway_order_field::clear_exchangeid() {
  exchangeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& trade_gateway_order_field::exchangeid() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.ExchangeID)
  return exchangeid_.GetNoArena();
}
void trade_gateway_order_field::set_exchangeid(const ::std::string& value) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.ExchangeID)
}
#if LANG_CXX11
void trade_gateway_order_field::set_exchangeid(::std::string&& value) {
  
  exchangeid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_order_field.ExchangeID)
}
#endif
void trade_gateway_order_field::set_exchangeid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_order_field.ExchangeID)
}
void trade_gateway_order_field::set_exchangeid(const char* value, size_t size) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_order_field.ExchangeID)
}
::std::string* trade_gateway_order_field::mutable_exchangeid() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_order_field.ExchangeID)
  return exchangeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* trade_gateway_order_field::release_exchangeid() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_order_field.ExchangeID)
  
  return exchangeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void trade_gateway_order_field::set_allocated_exchangeid(::std::string* exchangeid) {
  if (exchangeid != NULL) {
    
  } else {
    
  }
  exchangeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchangeid);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_order_field.ExchangeID)
}

// string OrderSubmitStatus = 23;
void trade_gateway_order_field::clear_ordersubmitstatus() {
  ordersubmitstatus_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& trade_gateway_order_field::ordersubmitstatus() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.OrderSubmitStatus)
  return ordersubmitstatus_.GetNoArena();
}
void trade_gateway_order_field::set_ordersubmitstatus(const ::std::string& value) {
  
  ordersubmitstatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.OrderSubmitStatus)
}
#if LANG_CXX11
void trade_gateway_order_field::set_ordersubmitstatus(::std::string&& value) {
  
  ordersubmitstatus_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_order_field.OrderSubmitStatus)
}
#endif
void trade_gateway_order_field::set_ordersubmitstatus(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ordersubmitstatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_order_field.OrderSubmitStatus)
}
void trade_gateway_order_field::set_ordersubmitstatus(const char* value, size_t size) {
  
  ordersubmitstatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_order_field.OrderSubmitStatus)
}
::std::string* trade_gateway_order_field::mutable_ordersubmitstatus() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_order_field.OrderSubmitStatus)
  return ordersubmitstatus_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* trade_gateway_order_field::release_ordersubmitstatus() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_order_field.OrderSubmitStatus)
  
  return ordersubmitstatus_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void trade_gateway_order_field::set_allocated_ordersubmitstatus(::std::string* ordersubmitstatus) {
  if (ordersubmitstatus != NULL) {
    
  } else {
    
  }
  ordersubmitstatus_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ordersubmitstatus);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_order_field.OrderSubmitStatus)
}

// string TradingDay = 24;
void trade_gateway_order_field::clear_tradingday() {
  tradingday_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& trade_gateway_order_field::tradingday() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.TradingDay)
  return tradingday_.GetNoArena();
}
void trade_gateway_order_field::set_tradingday(const ::std::string& value) {
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.TradingDay)
}
#if LANG_CXX11
void trade_gateway_order_field::set_tradingday(::std::string&& value) {
  
  tradingday_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_order_field.TradingDay)
}
#endif
void trade_gateway_order_field::set_tradingday(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_order_field.TradingDay)
}
void trade_gateway_order_field::set_tradingday(const char* value, size_t size) {
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_order_field.TradingDay)
}
::std::string* trade_gateway_order_field::mutable_tradingday() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_order_field.TradingDay)
  return tradingday_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* trade_gateway_order_field::release_tradingday() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_order_field.TradingDay)
  
  return tradingday_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void trade_gateway_order_field::set_allocated_tradingday(::std::string* tradingday) {
  if (tradingday != NULL) {
    
  } else {
    
  }
  tradingday_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradingday);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_order_field.TradingDay)
}

// string OrderSysID = 25;
void trade_gateway_order_field::clear_ordersysid() {
  ordersysid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& trade_gateway_order_field::ordersysid() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.OrderSysID)
  return ordersysid_.GetNoArena();
}
void trade_gateway_order_field::set_ordersysid(const ::std::string& value) {
  
  ordersysid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.OrderSysID)
}
#if LANG_CXX11
void trade_gateway_order_field::set_ordersysid(::std::string&& value) {
  
  ordersysid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_order_field.OrderSysID)
}
#endif
void trade_gateway_order_field::set_ordersysid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ordersysid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_order_field.OrderSysID)
}
void trade_gateway_order_field::set_ordersysid(const char* value, size_t size) {
  
  ordersysid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_order_field.OrderSysID)
}
::std::string* trade_gateway_order_field::mutable_ordersysid() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_order_field.OrderSysID)
  return ordersysid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* trade_gateway_order_field::release_ordersysid() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_order_field.OrderSysID)
  
  return ordersysid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void trade_gateway_order_field::set_allocated_ordersysid(::std::string* ordersysid) {
  if (ordersysid != NULL) {
    
  } else {
    
  }
  ordersysid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ordersysid);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_order_field.OrderSysID)
}

// string OrderSource = 26;
void trade_gateway_order_field::clear_ordersource() {
  ordersource_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& trade_gateway_order_field::ordersource() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.OrderSource)
  return ordersource_.GetNoArena();
}
void trade_gateway_order_field::set_ordersource(const ::std::string& value) {
  
  ordersource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.OrderSource)
}
#if LANG_CXX11
void trade_gateway_order_field::set_ordersource(::std::string&& value) {
  
  ordersource_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_order_field.OrderSource)
}
#endif
void trade_gateway_order_field::set_ordersource(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ordersource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_order_field.OrderSource)
}
void trade_gateway_order_field::set_ordersource(const char* value, size_t size) {
  
  ordersource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_order_field.OrderSource)
}
::std::string* trade_gateway_order_field::mutable_ordersource() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_order_field.OrderSource)
  return ordersource_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* trade_gateway_order_field::release_ordersource() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_order_field.OrderSource)
  
  return ordersource_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void trade_gateway_order_field::set_allocated_ordersource(::std::string* ordersource) {
  if (ordersource != NULL) {
    
  } else {
    
  }
  ordersource_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ordersource);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_order_field.OrderSource)
}

// string OrderStatus = 27;
void trade_gateway_order_field::clear_orderstatus() {
  orderstatus_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& trade_gateway_order_field::orderstatus() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.OrderStatus)
  return orderstatus_.GetNoArena();
}
void trade_gateway_order_field::set_orderstatus(const ::std::string& value) {
  
  orderstatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.OrderStatus)
}
#if LANG_CXX11
void trade_gateway_order_field::set_orderstatus(::std::string&& value) {
  
  orderstatus_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_order_field.OrderStatus)
}
#endif
void trade_gateway_order_field::set_orderstatus(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  orderstatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_order_field.OrderStatus)
}
void trade_gateway_order_field::set_orderstatus(const char* value, size_t size) {
  
  orderstatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_order_field.OrderStatus)
}
::std::string* trade_gateway_order_field::mutable_orderstatus() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_order_field.OrderStatus)
  return orderstatus_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* trade_gateway_order_field::release_orderstatus() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_order_field.OrderStatus)
  
  return orderstatus_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void trade_gateway_order_field::set_allocated_orderstatus(::std::string* orderstatus) {
  if (orderstatus != NULL) {
    
  } else {
    
  }
  orderstatus_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderstatus);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_order_field.OrderStatus)
}

// string OrderType = 28;
void trade_gateway_order_field::clear_ordertype() {
  ordertype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& trade_gateway_order_field::ordertype() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.OrderType)
  return ordertype_.GetNoArena();
}
void trade_gateway_order_field::set_ordertype(const ::std::string& value) {
  
  ordertype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.OrderType)
}
#if LANG_CXX11
void trade_gateway_order_field::set_ordertype(::std::string&& value) {
  
  ordertype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_order_field.OrderType)
}
#endif
void trade_gateway_order_field::set_ordertype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ordertype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_order_field.OrderType)
}
void trade_gateway_order_field::set_ordertype(const char* value, size_t size) {
  
  ordertype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_order_field.OrderType)
}
::std::string* trade_gateway_order_field::mutable_ordertype() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_order_field.OrderType)
  return ordertype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* trade_gateway_order_field::release_ordertype() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_order_field.OrderType)
  
  return ordertype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void trade_gateway_order_field::set_allocated_ordertype(::std::string* ordertype) {
  if (ordertype != NULL) {
    
  } else {
    
  }
  ordertype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ordertype);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_order_field.OrderType)
}

// int32 VolumeTraded = 29;
void trade_gateway_order_field::clear_volumetraded() {
  volumetraded_ = 0;
}
::google::protobuf::int32 trade_gateway_order_field::volumetraded() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.VolumeTraded)
  return volumetraded_;
}
void trade_gateway_order_field::set_volumetraded(::google::protobuf::int32 value) {
  
  volumetraded_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.VolumeTraded)
}

// int32 VolumeTotal = 30;
void trade_gateway_order_field::clear_volumetotal() {
  volumetotal_ = 0;
}
::google::protobuf::int32 trade_gateway_order_field::volumetotal() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.VolumeTotal)
  return volumetotal_;
}
void trade_gateway_order_field::set_volumetotal(::google::protobuf::int32 value) {
  
  volumetotal_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.VolumeTotal)
}

// string InsertDate = 31;
void trade_gateway_order_field::clear_insertdate() {
  insertdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& trade_gateway_order_field::insertdate() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.InsertDate)
  return insertdate_.GetNoArena();
}
void trade_gateway_order_field::set_insertdate(const ::std::string& value) {
  
  insertdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.InsertDate)
}
#if LANG_CXX11
void trade_gateway_order_field::set_insertdate(::std::string&& value) {
  
  insertdate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_order_field.InsertDate)
}
#endif
void trade_gateway_order_field::set_insertdate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  insertdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_order_field.InsertDate)
}
void trade_gateway_order_field::set_insertdate(const char* value, size_t size) {
  
  insertdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_order_field.InsertDate)
}
::std::string* trade_gateway_order_field::mutable_insertdate() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_order_field.InsertDate)
  return insertdate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* trade_gateway_order_field::release_insertdate() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_order_field.InsertDate)
  
  return insertdate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void trade_gateway_order_field::set_allocated_insertdate(::std::string* insertdate) {
  if (insertdate != NULL) {
    
  } else {
    
  }
  insertdate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), insertdate);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_order_field.InsertDate)
}

// string InsertTime = 32;
void trade_gateway_order_field::clear_inserttime() {
  inserttime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& trade_gateway_order_field::inserttime() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.InsertTime)
  return inserttime_.GetNoArena();
}
void trade_gateway_order_field::set_inserttime(const ::std::string& value) {
  
  inserttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.InsertTime)
}
#if LANG_CXX11
void trade_gateway_order_field::set_inserttime(::std::string&& value) {
  
  inserttime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_order_field.InsertTime)
}
#endif
void trade_gateway_order_field::set_inserttime(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  inserttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_order_field.InsertTime)
}
void trade_gateway_order_field::set_inserttime(const char* value, size_t size) {
  
  inserttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_order_field.InsertTime)
}
::std::string* trade_gateway_order_field::mutable_inserttime() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_order_field.InsertTime)
  return inserttime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* trade_gateway_order_field::release_inserttime() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_order_field.InsertTime)
  
  return inserttime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void trade_gateway_order_field::set_allocated_inserttime(::std::string* inserttime) {
  if (inserttime != NULL) {
    
  } else {
    
  }
  inserttime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inserttime);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_order_field.InsertTime)
}

// string ActiveTime = 33;
void trade_gateway_order_field::clear_activetime() {
  activetime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& trade_gateway_order_field::activetime() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.ActiveTime)
  return activetime_.GetNoArena();
}
void trade_gateway_order_field::set_activetime(const ::std::string& value) {
  
  activetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.ActiveTime)
}
#if LANG_CXX11
void trade_gateway_order_field::set_activetime(::std::string&& value) {
  
  activetime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_order_field.ActiveTime)
}
#endif
void trade_gateway_order_field::set_activetime(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  activetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_order_field.ActiveTime)
}
void trade_gateway_order_field::set_activetime(const char* value, size_t size) {
  
  activetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_order_field.ActiveTime)
}
::std::string* trade_gateway_order_field::mutable_activetime() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_order_field.ActiveTime)
  return activetime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* trade_gateway_order_field::release_activetime() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_order_field.ActiveTime)
  
  return activetime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void trade_gateway_order_field::set_allocated_activetime(::std::string* activetime) {
  if (activetime != NULL) {
    
  } else {
    
  }
  activetime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), activetime);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_order_field.ActiveTime)
}

// string SuspendTime = 34;
void trade_gateway_order_field::clear_suspendtime() {
  suspendtime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& trade_gateway_order_field::suspendtime() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.SuspendTime)
  return suspendtime_.GetNoArena();
}
void trade_gateway_order_field::set_suspendtime(const ::std::string& value) {
  
  suspendtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.SuspendTime)
}
#if LANG_CXX11
void trade_gateway_order_field::set_suspendtime(::std::string&& value) {
  
  suspendtime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_order_field.SuspendTime)
}
#endif
void trade_gateway_order_field::set_suspendtime(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suspendtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_order_field.SuspendTime)
}
void trade_gateway_order_field::set_suspendtime(const char* value, size_t size) {
  
  suspendtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_order_field.SuspendTime)
}
::std::string* trade_gateway_order_field::mutable_suspendtime() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_order_field.SuspendTime)
  return suspendtime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* trade_gateway_order_field::release_suspendtime() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_order_field.SuspendTime)
  
  return suspendtime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void trade_gateway_order_field::set_allocated_suspendtime(::std::string* suspendtime) {
  if (suspendtime != NULL) {
    
  } else {
    
  }
  suspendtime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suspendtime);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_order_field.SuspendTime)
}

// string UpdateTime = 35;
void trade_gateway_order_field::clear_updatetime() {
  updatetime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& trade_gateway_order_field::updatetime() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.UpdateTime)
  return updatetime_.GetNoArena();
}
void trade_gateway_order_field::set_updatetime(const ::std::string& value) {
  
  updatetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.UpdateTime)
}
#if LANG_CXX11
void trade_gateway_order_field::set_updatetime(::std::string&& value) {
  
  updatetime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_order_field.UpdateTime)
}
#endif
void trade_gateway_order_field::set_updatetime(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  updatetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_order_field.UpdateTime)
}
void trade_gateway_order_field::set_updatetime(const char* value, size_t size) {
  
  updatetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_order_field.UpdateTime)
}
::std::string* trade_gateway_order_field::mutable_updatetime() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_order_field.UpdateTime)
  return updatetime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* trade_gateway_order_field::release_updatetime() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_order_field.UpdateTime)
  
  return updatetime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void trade_gateway_order_field::set_allocated_updatetime(::std::string* updatetime) {
  if (updatetime != NULL) {
    
  } else {
    
  }
  updatetime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), updatetime);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_order_field.UpdateTime)
}

// string CancelTime = 36;
void trade_gateway_order_field::clear_canceltime() {
  canceltime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& trade_gateway_order_field::canceltime() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.CancelTime)
  return canceltime_.GetNoArena();
}
void trade_gateway_order_field::set_canceltime(const ::std::string& value) {
  
  canceltime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.CancelTime)
}
#if LANG_CXX11
void trade_gateway_order_field::set_canceltime(::std::string&& value) {
  
  canceltime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_order_field.CancelTime)
}
#endif
void trade_gateway_order_field::set_canceltime(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  canceltime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_order_field.CancelTime)
}
void trade_gateway_order_field::set_canceltime(const char* value, size_t size) {
  
  canceltime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_order_field.CancelTime)
}
::std::string* trade_gateway_order_field::mutable_canceltime() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_order_field.CancelTime)
  return canceltime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* trade_gateway_order_field::release_canceltime() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_order_field.CancelTime)
  
  return canceltime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void trade_gateway_order_field::set_allocated_canceltime(::std::string* canceltime) {
  if (canceltime != NULL) {
    
  } else {
    
  }
  canceltime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), canceltime);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_order_field.CancelTime)
}

// int32 SequenceNo = 37;
void trade_gateway_order_field::clear_sequenceno() {
  sequenceno_ = 0;
}
::google::protobuf::int32 trade_gateway_order_field::sequenceno() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.SequenceNo)
  return sequenceno_;
}
void trade_gateway_order_field::set_sequenceno(::google::protobuf::int32 value) {
  
  sequenceno_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.SequenceNo)
}

// int32 FrontID = 38;
void trade_gateway_order_field::clear_frontid() {
  frontid_ = 0;
}
::google::protobuf::int32 trade_gateway_order_field::frontid() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.FrontID)
  return frontid_;
}
void trade_gateway_order_field::set_frontid(::google::protobuf::int32 value) {
  
  frontid_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.FrontID)
}

// int32 SessionID = 39;
void trade_gateway_order_field::clear_sessionid() {
  sessionid_ = 0;
}
::google::protobuf::int32 trade_gateway_order_field::sessionid() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.SessionID)
  return sessionid_;
}
void trade_gateway_order_field::set_sessionid(::google::protobuf::int32 value) {
  
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.SessionID)
}

// string UserProductInfo = 40;
void trade_gateway_order_field::clear_userproductinfo() {
  userproductinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& trade_gateway_order_field::userproductinfo() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.UserProductInfo)
  return userproductinfo_.GetNoArena();
}
void trade_gateway_order_field::set_userproductinfo(const ::std::string& value) {
  
  userproductinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.UserProductInfo)
}
#if LANG_CXX11
void trade_gateway_order_field::set_userproductinfo(::std::string&& value) {
  
  userproductinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_order_field.UserProductInfo)
}
#endif
void trade_gateway_order_field::set_userproductinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  userproductinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_order_field.UserProductInfo)
}
void trade_gateway_order_field::set_userproductinfo(const char* value, size_t size) {
  
  userproductinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_order_field.UserProductInfo)
}
::std::string* trade_gateway_order_field::mutable_userproductinfo() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_order_field.UserProductInfo)
  return userproductinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* trade_gateway_order_field::release_userproductinfo() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_order_field.UserProductInfo)
  
  return userproductinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void trade_gateway_order_field::set_allocated_userproductinfo(::std::string* userproductinfo) {
  if (userproductinfo != NULL) {
    
  } else {
    
  }
  userproductinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userproductinfo);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_order_field.UserProductInfo)
}

// bytes StatusMsg = 41;
void trade_gateway_order_field::clear_statusmsg() {
  statusmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& trade_gateway_order_field::statusmsg() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.StatusMsg)
  return statusmsg_.GetNoArena();
}
void trade_gateway_order_field::set_statusmsg(const ::std::string& value) {
  
  statusmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.StatusMsg)
}
#if LANG_CXX11
void trade_gateway_order_field::set_statusmsg(::std::string&& value) {
  
  statusmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_order_field.StatusMsg)
}
#endif
void trade_gateway_order_field::set_statusmsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  statusmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_order_field.StatusMsg)
}
void trade_gateway_order_field::set_statusmsg(const void* value, size_t size) {
  
  statusmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_order_field.StatusMsg)
}
::std::string* trade_gateway_order_field::mutable_statusmsg() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_order_field.StatusMsg)
  return statusmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* trade_gateway_order_field::release_statusmsg() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_order_field.StatusMsg)
  
  return statusmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void trade_gateway_order_field::set_allocated_statusmsg(::std::string* statusmsg) {
  if (statusmsg != NULL) {
    
  } else {
    
  }
  statusmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), statusmsg);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_order_field.StatusMsg)
}

// int32 UserForceClose = 42;
void trade_gateway_order_field::clear_userforceclose() {
  userforceclose_ = 0;
}
::google::protobuf::int32 trade_gateway_order_field::userforceclose() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.UserForceClose)
  return userforceclose_;
}
void trade_gateway_order_field::set_userforceclose(::google::protobuf::int32 value) {
  
  userforceclose_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.UserForceClose)
}

// int32 BrokerOrderSeq = 43;
void trade_gateway_order_field::clear_brokerorderseq() {
  brokerorderseq_ = 0;
}
::google::protobuf::int32 trade_gateway_order_field::brokerorderseq() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.BrokerOrderSeq)
  return brokerorderseq_;
}
void trade_gateway_order_field::set_brokerorderseq(::google::protobuf::int32 value) {
  
  brokerorderseq_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.BrokerOrderSeq)
}

// int32 ZCETotalTradedVolume = 44;
void trade_gateway_order_field::clear_zcetotaltradedvolume() {
  zcetotaltradedvolume_ = 0;
}
::google::protobuf::int32 trade_gateway_order_field::zcetotaltradedvolume() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.ZCETotalTradedVolume)
  return zcetotaltradedvolume_;
}
void trade_gateway_order_field::set_zcetotaltradedvolume(::google::protobuf::int32 value) {
  
  zcetotaltradedvolume_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.ZCETotalTradedVolume)
}

// int32 IsSwapOrder = 45;
void trade_gateway_order_field::clear_isswaporder() {
  isswaporder_ = 0;
}
::google::protobuf::int32 trade_gateway_order_field::isswaporder() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.IsSwapOrder)
  return isswaporder_;
}
void trade_gateway_order_field::set_isswaporder(::google::protobuf::int32 value) {
  
  isswaporder_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.IsSwapOrder)
}

// bytes BranchID = 46;
void trade_gateway_order_field::clear_branchid() {
  branchid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& trade_gateway_order_field::branchid() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.BranchID)
  return branchid_.GetNoArena();
}
void trade_gateway_order_field::set_branchid(const ::std::string& value) {
  
  branchid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.BranchID)
}
#if LANG_CXX11
void trade_gateway_order_field::set_branchid(::std::string&& value) {
  
  branchid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_order_field.BranchID)
}
#endif
void trade_gateway_order_field::set_branchid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  branchid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_order_field.BranchID)
}
void trade_gateway_order_field::set_branchid(const void* value, size_t size) {
  
  branchid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_order_field.BranchID)
}
::std::string* trade_gateway_order_field::mutable_branchid() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_order_field.BranchID)
  return branchid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* trade_gateway_order_field::release_branchid() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_order_field.BranchID)
  
  return branchid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void trade_gateway_order_field::set_allocated_branchid(::std::string* branchid) {
  if (branchid != NULL) {
    
  } else {
    
  }
  branchid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), branchid);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_order_field.BranchID)
}

// string CurrencyID = 47;
void trade_gateway_order_field::clear_currencyid() {
  currencyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& trade_gateway_order_field::currencyid() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.CurrencyID)
  return currencyid_.GetNoArena();
}
void trade_gateway_order_field::set_currencyid(const ::std::string& value) {
  
  currencyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.CurrencyID)
}
#if LANG_CXX11
void trade_gateway_order_field::set_currencyid(::std::string&& value) {
  
  currencyid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_order_field.CurrencyID)
}
#endif
void trade_gateway_order_field::set_currencyid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  currencyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_order_field.CurrencyID)
}
void trade_gateway_order_field::set_currencyid(const char* value, size_t size) {
  
  currencyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_order_field.CurrencyID)
}
::std::string* trade_gateway_order_field::mutable_currencyid() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_order_field.CurrencyID)
  return currencyid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* trade_gateway_order_field::release_currencyid() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_order_field.CurrencyID)
  
  return currencyid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void trade_gateway_order_field::set_allocated_currencyid(::std::string* currencyid) {
  if (currencyid != NULL) {
    
  } else {
    
  }
  currencyid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), currencyid);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_order_field.CurrencyID)
}

// bytes IPAddress = 48;
void trade_gateway_order_field::clear_ipaddress() {
  ipaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& trade_gateway_order_field::ipaddress() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.IPAddress)
  return ipaddress_.GetNoArena();
}
void trade_gateway_order_field::set_ipaddress(const ::std::string& value) {
  
  ipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.IPAddress)
}
#if LANG_CXX11
void trade_gateway_order_field::set_ipaddress(::std::string&& value) {
  
  ipaddress_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_order_field.IPAddress)
}
#endif
void trade_gateway_order_field::set_ipaddress(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_order_field.IPAddress)
}
void trade_gateway_order_field::set_ipaddress(const void* value, size_t size) {
  
  ipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_order_field.IPAddress)
}
::std::string* trade_gateway_order_field::mutable_ipaddress() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_order_field.IPAddress)
  return ipaddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* trade_gateway_order_field::release_ipaddress() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_order_field.IPAddress)
  
  return ipaddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void trade_gateway_order_field::set_allocated_ipaddress(::std::string* ipaddress) {
  if (ipaddress != NULL) {
    
  } else {
    
  }
  ipaddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipaddress);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_order_field.IPAddress)
}

// bytes MacAddress = 49;
void trade_gateway_order_field::clear_macaddress() {
  macaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& trade_gateway_order_field::macaddress() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_order_field.MacAddress)
  return macaddress_.GetNoArena();
}
void trade_gateway_order_field::set_macaddress(const ::std::string& value) {
  
  macaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_order_field.MacAddress)
}
#if LANG_CXX11
void trade_gateway_order_field::set_macaddress(::std::string&& value) {
  
  macaddress_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_order_field.MacAddress)
}
#endif
void trade_gateway_order_field::set_macaddress(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  macaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_order_field.MacAddress)
}
void trade_gateway_order_field::set_macaddress(const void* value, size_t size) {
  
  macaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_order_field.MacAddress)
}
::std::string* trade_gateway_order_field::mutable_macaddress() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_order_field.MacAddress)
  return macaddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* trade_gateway_order_field::release_macaddress() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_order_field.MacAddress)
  
  return macaddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void trade_gateway_order_field::set_allocated_macaddress(::std::string* macaddress) {
  if (macaddress != NULL) {
    
  } else {
    
  }
  macaddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), macaddress);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_order_field.MacAddress)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int trade_gateway_sync_account_field::kBrokerIDFieldNumber;
const int trade_gateway_sync_account_field::kInvestorIDFieldNumber;
const int trade_gateway_sync_account_field::kWithdrawFieldNumber;
const int trade_gateway_sync_account_field::kCurrMarginFieldNumber;
const int trade_gateway_sync_account_field::kCommissionFieldNumber;
const int trade_gateway_sync_account_field::kCloseProfitFieldNumber;
const int trade_gateway_sync_account_field::kPositionProfitFieldNumber;
const int trade_gateway_sync_account_field::kBalanceFieldNumber;
const int trade_gateway_sync_account_field::kAvailableFieldNumber;
const int trade_gateway_sync_account_field::kMortgageFieldNumber;
const int trade_gateway_sync_account_field::kExchangeMarginFieldNumber;
const int trade_gateway_sync_account_field::kWithdrawQuotaFieldNumber;
const int trade_gateway_sync_account_field::kFrozenMarginFieldNumber;
const int trade_gateway_sync_account_field::kFrozenCommissionFieldNumber;
const int trade_gateway_sync_account_field::kCurrencyIDFieldNumber;
const int trade_gateway_sync_account_field::kFrozenMarginOnMortgageFieldNumber;
const int trade_gateway_sync_account_field::kMarginOnMortgageFieldNumber;
const int trade_gateway_sync_account_field::kExchMarginOnMortgageFieldNumber;
const int trade_gateway_sync_account_field::kFrozenCommissionOnMortgageFieldNumber;
const int trade_gateway_sync_account_field::kPositionProfitOnMortgageFieldNumber;
const int trade_gateway_sync_account_field::kCommissionOnMortgageFieldNumber;
const int trade_gateway_sync_account_field::kCloseProfitOnMortgageFieldNumber;
const int trade_gateway_sync_account_field::kOptionCloseProfitFieldNumber;
const int trade_gateway_sync_account_field::kOptionValueFieldNumber;
const int trade_gateway_sync_account_field::kFrozenCashFieldNumber;
const int trade_gateway_sync_account_field::kCashInFieldNumber;
const int trade_gateway_sync_account_field::kCreditFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

trade_gateway_sync_account_field::trade_gateway_sync_account_field()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_trade_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.trade_gateway_sync_account_field)
}
trade_gateway_sync_account_field::trade_gateway_sync_account_field(const trade_gateway_sync_account_field& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  brokerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.brokerid().size() > 0) {
    brokerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.brokerid_);
  }
  investorid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.investorid().size() > 0) {
    investorid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.investorid_);
  }
  currencyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.currencyid().size() > 0) {
    currencyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currencyid_);
  }
  ::memcpy(&withdraw_, &from.withdraw_,
    static_cast<size_t>(reinterpret_cast<char*>(&credit_) -
    reinterpret_cast<char*>(&withdraw_)) + sizeof(credit_));
  // @@protoc_insertion_point(copy_constructor:risk.trade_gateway_sync_account_field)
}

void trade_gateway_sync_account_field::SharedCtor() {
  brokerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investorid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currencyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&withdraw_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&credit_) -
      reinterpret_cast<char*>(&withdraw_)) + sizeof(credit_));
  _cached_size_ = 0;
}

trade_gateway_sync_account_field::~trade_gateway_sync_account_field() {
  // @@protoc_insertion_point(destructor:risk.trade_gateway_sync_account_field)
  SharedDtor();
}

void trade_gateway_sync_account_field::SharedDtor() {
  brokerid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investorid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currencyid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void trade_gateway_sync_account_field::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* trade_gateway_sync_account_field::descriptor() {
  protobuf_trade_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trade_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const trade_gateway_sync_account_field& trade_gateway_sync_account_field::default_instance() {
  protobuf_trade_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

trade_gateway_sync_account_field* trade_gateway_sync_account_field::New(::google::protobuf::Arena* arena) const {
  trade_gateway_sync_account_field* n = new trade_gateway_sync_account_field;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void trade_gateway_sync_account_field::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.trade_gateway_sync_account_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currencyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&withdraw_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&credit_) -
      reinterpret_cast<char*>(&withdraw_)) + sizeof(credit_));
  _internal_metadata_.Clear();
}

bool trade_gateway_sync_account_field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.trade_gateway_sync_account_field)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string BrokerID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brokerid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->brokerid().data(), static_cast<int>(this->brokerid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.trade_gateway_sync_account_field.BrokerID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string InvestorID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_investorid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->investorid().data(), static_cast<int>(this->investorid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.trade_gateway_sync_account_field.InvestorID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double Withdraw = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &withdraw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double CurrMargin = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &currmargin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double Commission = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &commission_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double CloseProfit = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &closeprofit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double PositionProfit = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &positionprofit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double Balance = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &balance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double Available = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &available_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double Mortgage = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mortgage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double ExchangeMargin = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &exchangemargin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double WithdrawQuota = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &withdrawquota_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double FrozenMargin = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frozenmargin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double FrozenCommission = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frozencommission_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string CurrencyID = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currencyid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->currencyid().data(), static_cast<int>(this->currencyid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.trade_gateway_sync_account_field.CurrencyID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double FrozenMarginOnMortgage = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 129 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frozenmarginonmortgage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double MarginOnMortgage = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u /* 137 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &marginonmortgage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double ExchMarginOnMortgage = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(145u /* 145 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &exchmarginonmortgage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double FrozenCommissionOnMortgage = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(153u /* 153 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frozencommissiononmortgage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double PositionProfitOnMortgage = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(161u /* 161 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &positionprofitonmortgage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double CommissionOnMortgage = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(169u /* 169 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &commissiononmortgage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double CloseProfitOnMortgage = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(177u /* 177 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &closeprofitonmortgage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double OptionCloseProfit = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(185u /* 185 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &optioncloseprofit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double OptionValue = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(193u /* 193 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &optionvalue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double FrozenCash = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(201u /* 201 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frozencash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double CashIn = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(209u /* 209 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cashin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double Credit = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(217u /* 217 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &credit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.trade_gateway_sync_account_field)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.trade_gateway_sync_account_field)
  return false;
#undef DO_
}

void trade_gateway_sync_account_field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.trade_gateway_sync_account_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string BrokerID = 1;
  if (this->brokerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->brokerid().data(), static_cast<int>(this->brokerid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_sync_account_field.BrokerID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->brokerid(), output);
  }

  // string InvestorID = 2;
  if (this->investorid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investorid().data(), static_cast<int>(this->investorid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_sync_account_field.InvestorID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->investorid(), output);
  }

  // double Withdraw = 3;
  if (this->withdraw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->withdraw(), output);
  }

  // double CurrMargin = 4;
  if (this->currmargin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->currmargin(), output);
  }

  // double Commission = 5;
  if (this->commission() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->commission(), output);
  }

  // double CloseProfit = 6;
  if (this->closeprofit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->closeprofit(), output);
  }

  // double PositionProfit = 7;
  if (this->positionprofit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->positionprofit(), output);
  }

  // double Balance = 8;
  if (this->balance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->balance(), output);
  }

  // double Available = 9;
  if (this->available() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->available(), output);
  }

  // double Mortgage = 10;
  if (this->mortgage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->mortgage(), output);
  }

  // double ExchangeMargin = 11;
  if (this->exchangemargin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->exchangemargin(), output);
  }

  // double WithdrawQuota = 12;
  if (this->withdrawquota() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->withdrawquota(), output);
  }

  // double FrozenMargin = 13;
  if (this->frozenmargin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->frozenmargin(), output);
  }

  // double FrozenCommission = 14;
  if (this->frozencommission() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->frozencommission(), output);
  }

  // string CurrencyID = 15;
  if (this->currencyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->currencyid().data(), static_cast<int>(this->currencyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_sync_account_field.CurrencyID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->currencyid(), output);
  }

  // double FrozenMarginOnMortgage = 16;
  if (this->frozenmarginonmortgage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->frozenmarginonmortgage(), output);
  }

  // double MarginOnMortgage = 17;
  if (this->marginonmortgage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->marginonmortgage(), output);
  }

  // double ExchMarginOnMortgage = 18;
  if (this->exchmarginonmortgage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->exchmarginonmortgage(), output);
  }

  // double FrozenCommissionOnMortgage = 19;
  if (this->frozencommissiononmortgage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->frozencommissiononmortgage(), output);
  }

  // double PositionProfitOnMortgage = 20;
  if (this->positionprofitonmortgage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->positionprofitonmortgage(), output);
  }

  // double CommissionOnMortgage = 21;
  if (this->commissiononmortgage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->commissiononmortgage(), output);
  }

  // double CloseProfitOnMortgage = 22;
  if (this->closeprofitonmortgage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->closeprofitonmortgage(), output);
  }

  // double OptionCloseProfit = 23;
  if (this->optioncloseprofit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->optioncloseprofit(), output);
  }

  // double OptionValue = 24;
  if (this->optionvalue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->optionvalue(), output);
  }

  // double FrozenCash = 25;
  if (this->frozencash() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->frozencash(), output);
  }

  // double CashIn = 26;
  if (this->cashin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->cashin(), output);
  }

  // double Credit = 27;
  if (this->credit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->credit(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.trade_gateway_sync_account_field)
}

::google::protobuf::uint8* trade_gateway_sync_account_field::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.trade_gateway_sync_account_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string BrokerID = 1;
  if (this->brokerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->brokerid().data(), static_cast<int>(this->brokerid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_sync_account_field.BrokerID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->brokerid(), target);
  }

  // string InvestorID = 2;
  if (this->investorid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investorid().data(), static_cast<int>(this->investorid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_sync_account_field.InvestorID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->investorid(), target);
  }

  // double Withdraw = 3;
  if (this->withdraw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->withdraw(), target);
  }

  // double CurrMargin = 4;
  if (this->currmargin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->currmargin(), target);
  }

  // double Commission = 5;
  if (this->commission() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->commission(), target);
  }

  // double CloseProfit = 6;
  if (this->closeprofit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->closeprofit(), target);
  }

  // double PositionProfit = 7;
  if (this->positionprofit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->positionprofit(), target);
  }

  // double Balance = 8;
  if (this->balance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->balance(), target);
  }

  // double Available = 9;
  if (this->available() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->available(), target);
  }

  // double Mortgage = 10;
  if (this->mortgage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->mortgage(), target);
  }

  // double ExchangeMargin = 11;
  if (this->exchangemargin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->exchangemargin(), target);
  }

  // double WithdrawQuota = 12;
  if (this->withdrawquota() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->withdrawquota(), target);
  }

  // double FrozenMargin = 13;
  if (this->frozenmargin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->frozenmargin(), target);
  }

  // double FrozenCommission = 14;
  if (this->frozencommission() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->frozencommission(), target);
  }

  // string CurrencyID = 15;
  if (this->currencyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->currencyid().data(), static_cast<int>(this->currencyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_sync_account_field.CurrencyID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->currencyid(), target);
  }

  // double FrozenMarginOnMortgage = 16;
  if (this->frozenmarginonmortgage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->frozenmarginonmortgage(), target);
  }

  // double MarginOnMortgage = 17;
  if (this->marginonmortgage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->marginonmortgage(), target);
  }

  // double ExchMarginOnMortgage = 18;
  if (this->exchmarginonmortgage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->exchmarginonmortgage(), target);
  }

  // double FrozenCommissionOnMortgage = 19;
  if (this->frozencommissiononmortgage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->frozencommissiononmortgage(), target);
  }

  // double PositionProfitOnMortgage = 20;
  if (this->positionprofitonmortgage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->positionprofitonmortgage(), target);
  }

  // double CommissionOnMortgage = 21;
  if (this->commissiononmortgage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->commissiononmortgage(), target);
  }

  // double CloseProfitOnMortgage = 22;
  if (this->closeprofitonmortgage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->closeprofitonmortgage(), target);
  }

  // double OptionCloseProfit = 23;
  if (this->optioncloseprofit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->optioncloseprofit(), target);
  }

  // double OptionValue = 24;
  if (this->optionvalue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->optionvalue(), target);
  }

  // double FrozenCash = 25;
  if (this->frozencash() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->frozencash(), target);
  }

  // double CashIn = 26;
  if (this->cashin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->cashin(), target);
  }

  // double Credit = 27;
  if (this->credit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->credit(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.trade_gateway_sync_account_field)
  return target;
}

size_t trade_gateway_sync_account_field::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.trade_gateway_sync_account_field)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string BrokerID = 1;
  if (this->brokerid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->brokerid());
  }

  // string InvestorID = 2;
  if (this->investorid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->investorid());
  }

  // string CurrencyID = 15;
  if (this->currencyid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->currencyid());
  }

  // double Withdraw = 3;
  if (this->withdraw() != 0) {
    total_size += 1 + 8;
  }

  // double CurrMargin = 4;
  if (this->currmargin() != 0) {
    total_size += 1 + 8;
  }

  // double Commission = 5;
  if (this->commission() != 0) {
    total_size += 1 + 8;
  }

  // double CloseProfit = 6;
  if (this->closeprofit() != 0) {
    total_size += 1 + 8;
  }

  // double PositionProfit = 7;
  if (this->positionprofit() != 0) {
    total_size += 1 + 8;
  }

  // double Balance = 8;
  if (this->balance() != 0) {
    total_size += 1 + 8;
  }

  // double Available = 9;
  if (this->available() != 0) {
    total_size += 1 + 8;
  }

  // double Mortgage = 10;
  if (this->mortgage() != 0) {
    total_size += 1 + 8;
  }

  // double ExchangeMargin = 11;
  if (this->exchangemargin() != 0) {
    total_size += 1 + 8;
  }

  // double WithdrawQuota = 12;
  if (this->withdrawquota() != 0) {
    total_size += 1 + 8;
  }

  // double FrozenMargin = 13;
  if (this->frozenmargin() != 0) {
    total_size += 1 + 8;
  }

  // double FrozenCommission = 14;
  if (this->frozencommission() != 0) {
    total_size += 1 + 8;
  }

  // double FrozenMarginOnMortgage = 16;
  if (this->frozenmarginonmortgage() != 0) {
    total_size += 2 + 8;
  }

  // double MarginOnMortgage = 17;
  if (this->marginonmortgage() != 0) {
    total_size += 2 + 8;
  }

  // double ExchMarginOnMortgage = 18;
  if (this->exchmarginonmortgage() != 0) {
    total_size += 2 + 8;
  }

  // double FrozenCommissionOnMortgage = 19;
  if (this->frozencommissiononmortgage() != 0) {
    total_size += 2 + 8;
  }

  // double PositionProfitOnMortgage = 20;
  if (this->positionprofitonmortgage() != 0) {
    total_size += 2 + 8;
  }

  // double CommissionOnMortgage = 21;
  if (this->commissiononmortgage() != 0) {
    total_size += 2 + 8;
  }

  // double CloseProfitOnMortgage = 22;
  if (this->closeprofitonmortgage() != 0) {
    total_size += 2 + 8;
  }

  // double OptionCloseProfit = 23;
  if (this->optioncloseprofit() != 0) {
    total_size += 2 + 8;
  }

  // double OptionValue = 24;
  if (this->optionvalue() != 0) {
    total_size += 2 + 8;
  }

  // double FrozenCash = 25;
  if (this->frozencash() != 0) {
    total_size += 2 + 8;
  }

  // double CashIn = 26;
  if (this->cashin() != 0) {
    total_size += 2 + 8;
  }

  // double Credit = 27;
  if (this->credit() != 0) {
    total_size += 2 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void trade_gateway_sync_account_field::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.trade_gateway_sync_account_field)
  GOOGLE_DCHECK_NE(&from, this);
  const trade_gateway_sync_account_field* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const trade_gateway_sync_account_field>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.trade_gateway_sync_account_field)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.trade_gateway_sync_account_field)
    MergeFrom(*source);
  }
}

void trade_gateway_sync_account_field::MergeFrom(const trade_gateway_sync_account_field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.trade_gateway_sync_account_field)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.brokerid().size() > 0) {

    brokerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.brokerid_);
  }
  if (from.investorid().size() > 0) {

    investorid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.investorid_);
  }
  if (from.currencyid().size() > 0) {

    currencyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currencyid_);
  }
  if (from.withdraw() != 0) {
    set_withdraw(from.withdraw());
  }
  if (from.currmargin() != 0) {
    set_currmargin(from.currmargin());
  }
  if (from.commission() != 0) {
    set_commission(from.commission());
  }
  if (from.closeprofit() != 0) {
    set_closeprofit(from.closeprofit());
  }
  if (from.positionprofit() != 0) {
    set_positionprofit(from.positionprofit());
  }
  if (from.balance() != 0) {
    set_balance(from.balance());
  }
  if (from.available() != 0) {
    set_available(from.available());
  }
  if (from.mortgage() != 0) {
    set_mortgage(from.mortgage());
  }
  if (from.exchangemargin() != 0) {
    set_exchangemargin(from.exchangemargin());
  }
  if (from.withdrawquota() != 0) {
    set_withdrawquota(from.withdrawquota());
  }
  if (from.frozenmargin() != 0) {
    set_frozenmargin(from.frozenmargin());
  }
  if (from.frozencommission() != 0) {
    set_frozencommission(from.frozencommission());
  }
  if (from.frozenmarginonmortgage() != 0) {
    set_frozenmarginonmortgage(from.frozenmarginonmortgage());
  }
  if (from.marginonmortgage() != 0) {
    set_marginonmortgage(from.marginonmortgage());
  }
  if (from.exchmarginonmortgage() != 0) {
    set_exchmarginonmortgage(from.exchmarginonmortgage());
  }
  if (from.frozencommissiononmortgage() != 0) {
    set_frozencommissiononmortgage(from.frozencommissiononmortgage());
  }
  if (from.positionprofitonmortgage() != 0) {
    set_positionprofitonmortgage(from.positionprofitonmortgage());
  }
  if (from.commissiononmortgage() != 0) {
    set_commissiononmortgage(from.commissiononmortgage());
  }
  if (from.closeprofitonmortgage() != 0) {
    set_closeprofitonmortgage(from.closeprofitonmortgage());
  }
  if (from.optioncloseprofit() != 0) {
    set_optioncloseprofit(from.optioncloseprofit());
  }
  if (from.optionvalue() != 0) {
    set_optionvalue(from.optionvalue());
  }
  if (from.frozencash() != 0) {
    set_frozencash(from.frozencash());
  }
  if (from.cashin() != 0) {
    set_cashin(from.cashin());
  }
  if (from.credit() != 0) {
    set_credit(from.credit());
  }
}

void trade_gateway_sync_account_field::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.trade_gateway_sync_account_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void trade_gateway_sync_account_field::CopyFrom(const trade_gateway_sync_account_field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.trade_gateway_sync_account_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool trade_gateway_sync_account_field::IsInitialized() const {
  return true;
}

void trade_gateway_sync_account_field::Swap(trade_gateway_sync_account_field* other) {
  if (other == this) return;
  InternalSwap(other);
}
void trade_gateway_sync_account_field::InternalSwap(trade_gateway_sync_account_field* other) {
  using std::swap;
  brokerid_.Swap(&other->brokerid_);
  investorid_.Swap(&other->investorid_);
  currencyid_.Swap(&other->currencyid_);
  swap(withdraw_, other->withdraw_);
  swap(currmargin_, other->currmargin_);
  swap(commission_, other->commission_);
  swap(closeprofit_, other->closeprofit_);
  swap(positionprofit_, other->positionprofit_);
  swap(balance_, other->balance_);
  swap(available_, other->available_);
  swap(mortgage_, other->mortgage_);
  swap(exchangemargin_, other->exchangemargin_);
  swap(withdrawquota_, other->withdrawquota_);
  swap(frozenmargin_, other->frozenmargin_);
  swap(frozencommission_, other->frozencommission_);
  swap(frozenmarginonmortgage_, other->frozenmarginonmortgage_);
  swap(marginonmortgage_, other->marginonmortgage_);
  swap(exchmarginonmortgage_, other->exchmarginonmortgage_);
  swap(frozencommissiononmortgage_, other->frozencommissiononmortgage_);
  swap(positionprofitonmortgage_, other->positionprofitonmortgage_);
  swap(commissiononmortgage_, other->commissiononmortgage_);
  swap(closeprofitonmortgage_, other->closeprofitonmortgage_);
  swap(optioncloseprofit_, other->optioncloseprofit_);
  swap(optionvalue_, other->optionvalue_);
  swap(frozencash_, other->frozencash_);
  swap(cashin_, other->cashin_);
  swap(credit_, other->credit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata trade_gateway_sync_account_field::GetMetadata() const {
  protobuf_trade_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trade_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// trade_gateway_sync_account_field

// string BrokerID = 1;
void trade_gateway_sync_account_field::clear_brokerid() {
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& trade_gateway_sync_account_field::brokerid() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_sync_account_field.BrokerID)
  return brokerid_.GetNoArena();
}
void trade_gateway_sync_account_field::set_brokerid(const ::std::string& value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_sync_account_field.BrokerID)
}
#if LANG_CXX11
void trade_gateway_sync_account_field::set_brokerid(::std::string&& value) {
  
  brokerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_sync_account_field.BrokerID)
}
#endif
void trade_gateway_sync_account_field::set_brokerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_sync_account_field.BrokerID)
}
void trade_gateway_sync_account_field::set_brokerid(const char* value, size_t size) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_sync_account_field.BrokerID)
}
::std::string* trade_gateway_sync_account_field::mutable_brokerid() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_sync_account_field.BrokerID)
  return brokerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* trade_gateway_sync_account_field::release_brokerid() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_sync_account_field.BrokerID)
  
  return brokerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void trade_gateway_sync_account_field::set_allocated_brokerid(::std::string* brokerid) {
  if (brokerid != NULL) {
    
  } else {
    
  }
  brokerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brokerid);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_sync_account_field.BrokerID)
}

// string InvestorID = 2;
void trade_gateway_sync_account_field::clear_investorid() {
  investorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& trade_gateway_sync_account_field::investorid() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_sync_account_field.InvestorID)
  return investorid_.GetNoArena();
}
void trade_gateway_sync_account_field::set_investorid(const ::std::string& value) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_sync_account_field.InvestorID)
}
#if LANG_CXX11
void trade_gateway_sync_account_field::set_investorid(::std::string&& value) {
  
  investorid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_sync_account_field.InvestorID)
}
#endif
void trade_gateway_sync_account_field::set_investorid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_sync_account_field.InvestorID)
}
void trade_gateway_sync_account_field::set_investorid(const char* value, size_t size) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_sync_account_field.InvestorID)
}
::std::string* trade_gateway_sync_account_field::mutable_investorid() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_sync_account_field.InvestorID)
  return investorid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* trade_gateway_sync_account_field::release_investorid() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_sync_account_field.InvestorID)
  
  return investorid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void trade_gateway_sync_account_field::set_allocated_investorid(::std::string* investorid) {
  if (investorid != NULL) {
    
  } else {
    
  }
  investorid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), investorid);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_sync_account_field.InvestorID)
}

// double Withdraw = 3;
void trade_gateway_sync_account_field::clear_withdraw() {
  withdraw_ = 0;
}
double trade_gateway_sync_account_field::withdraw() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_sync_account_field.Withdraw)
  return withdraw_;
}
void trade_gateway_sync_account_field::set_withdraw(double value) {
  
  withdraw_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_sync_account_field.Withdraw)
}

// double CurrMargin = 4;
void trade_gateway_sync_account_field::clear_currmargin() {
  currmargin_ = 0;
}
double trade_gateway_sync_account_field::currmargin() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_sync_account_field.CurrMargin)
  return currmargin_;
}
void trade_gateway_sync_account_field::set_currmargin(double value) {
  
  currmargin_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_sync_account_field.CurrMargin)
}

// double Commission = 5;
void trade_gateway_sync_account_field::clear_commission() {
  commission_ = 0;
}
double trade_gateway_sync_account_field::commission() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_sync_account_field.Commission)
  return commission_;
}
void trade_gateway_sync_account_field::set_commission(double value) {
  
  commission_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_sync_account_field.Commission)
}

// double CloseProfit = 6;
void trade_gateway_sync_account_field::clear_closeprofit() {
  closeprofit_ = 0;
}
double trade_gateway_sync_account_field::closeprofit() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_sync_account_field.CloseProfit)
  return closeprofit_;
}
void trade_gateway_sync_account_field::set_closeprofit(double value) {
  
  closeprofit_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_sync_account_field.CloseProfit)
}

// double PositionProfit = 7;
void trade_gateway_sync_account_field::clear_positionprofit() {
  positionprofit_ = 0;
}
double trade_gateway_sync_account_field::positionprofit() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_sync_account_field.PositionProfit)
  return positionprofit_;
}
void trade_gateway_sync_account_field::set_positionprofit(double value) {
  
  positionprofit_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_sync_account_field.PositionProfit)
}

// double Balance = 8;
void trade_gateway_sync_account_field::clear_balance() {
  balance_ = 0;
}
double trade_gateway_sync_account_field::balance() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_sync_account_field.Balance)
  return balance_;
}
void trade_gateway_sync_account_field::set_balance(double value) {
  
  balance_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_sync_account_field.Balance)
}

// double Available = 9;
void trade_gateway_sync_account_field::clear_available() {
  available_ = 0;
}
double trade_gateway_sync_account_field::available() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_sync_account_field.Available)
  return available_;
}
void trade_gateway_sync_account_field::set_available(double value) {
  
  available_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_sync_account_field.Available)
}

// double Mortgage = 10;
void trade_gateway_sync_account_field::clear_mortgage() {
  mortgage_ = 0;
}
double trade_gateway_sync_account_field::mortgage() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_sync_account_field.Mortgage)
  return mortgage_;
}
void trade_gateway_sync_account_field::set_mortgage(double value) {
  
  mortgage_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_sync_account_field.Mortgage)
}

// double ExchangeMargin = 11;
void trade_gateway_sync_account_field::clear_exchangemargin() {
  exchangemargin_ = 0;
}
double trade_gateway_sync_account_field::exchangemargin() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_sync_account_field.ExchangeMargin)
  return exchangemargin_;
}
void trade_gateway_sync_account_field::set_exchangemargin(double value) {
  
  exchangemargin_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_sync_account_field.ExchangeMargin)
}

// double WithdrawQuota = 12;
void trade_gateway_sync_account_field::clear_withdrawquota() {
  withdrawquota_ = 0;
}
double trade_gateway_sync_account_field::withdrawquota() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_sync_account_field.WithdrawQuota)
  return withdrawquota_;
}
void trade_gateway_sync_account_field::set_withdrawquota(double value) {
  
  withdrawquota_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_sync_account_field.WithdrawQuota)
}

// double FrozenMargin = 13;
void trade_gateway_sync_account_field::clear_frozenmargin() {
  frozenmargin_ = 0;
}
double trade_gateway_sync_account_field::frozenmargin() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_sync_account_field.FrozenMargin)
  return frozenmargin_;
}
void trade_gateway_sync_account_field::set_frozenmargin(double value) {
  
  frozenmargin_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_sync_account_field.FrozenMargin)
}

// double FrozenCommission = 14;
void trade_gateway_sync_account_field::clear_frozencommission() {
  frozencommission_ = 0;
}
double trade_gateway_sync_account_field::frozencommission() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_sync_account_field.FrozenCommission)
  return frozencommission_;
}
void trade_gateway_sync_account_field::set_frozencommission(double value) {
  
  frozencommission_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_sync_account_field.FrozenCommission)
}

// string CurrencyID = 15;
void trade_gateway_sync_account_field::clear_currencyid() {
  currencyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& trade_gateway_sync_account_field::currencyid() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_sync_account_field.CurrencyID)
  return currencyid_.GetNoArena();
}
void trade_gateway_sync_account_field::set_currencyid(const ::std::string& value) {
  
  currencyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_sync_account_field.CurrencyID)
}
#if LANG_CXX11
void trade_gateway_sync_account_field::set_currencyid(::std::string&& value) {
  
  currencyid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_sync_account_field.CurrencyID)
}
#endif
void trade_gateway_sync_account_field::set_currencyid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  currencyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_sync_account_field.CurrencyID)
}
void trade_gateway_sync_account_field::set_currencyid(const char* value, size_t size) {
  
  currencyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_sync_account_field.CurrencyID)
}
::std::string* trade_gateway_sync_account_field::mutable_currencyid() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_sync_account_field.CurrencyID)
  return currencyid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* trade_gateway_sync_account_field::release_currencyid() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_sync_account_field.CurrencyID)
  
  return currencyid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void trade_gateway_sync_account_field::set_allocated_currencyid(::std::string* currencyid) {
  if (currencyid != NULL) {
    
  } else {
    
  }
  currencyid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), currencyid);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_sync_account_field.CurrencyID)
}

// double FrozenMarginOnMortgage = 16;
void trade_gateway_sync_account_field::clear_frozenmarginonmortgage() {
  frozenmarginonmortgage_ = 0;
}
double trade_gateway_sync_account_field::frozenmarginonmortgage() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_sync_account_field.FrozenMarginOnMortgage)
  return frozenmarginonmortgage_;
}
void trade_gateway_sync_account_field::set_frozenmarginonmortgage(double value) {
  
  frozenmarginonmortgage_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_sync_account_field.FrozenMarginOnMortgage)
}

// double MarginOnMortgage = 17;
void trade_gateway_sync_account_field::clear_marginonmortgage() {
  marginonmortgage_ = 0;
}
double trade_gateway_sync_account_field::marginonmortgage() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_sync_account_field.MarginOnMortgage)
  return marginonmortgage_;
}
void trade_gateway_sync_account_field::set_marginonmortgage(double value) {
  
  marginonmortgage_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_sync_account_field.MarginOnMortgage)
}

// double ExchMarginOnMortgage = 18;
void trade_gateway_sync_account_field::clear_exchmarginonmortgage() {
  exchmarginonmortgage_ = 0;
}
double trade_gateway_sync_account_field::exchmarginonmortgage() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_sync_account_field.ExchMarginOnMortgage)
  return exchmarginonmortgage_;
}
void trade_gateway_sync_account_field::set_exchmarginonmortgage(double value) {
  
  exchmarginonmortgage_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_sync_account_field.ExchMarginOnMortgage)
}

// double FrozenCommissionOnMortgage = 19;
void trade_gateway_sync_account_field::clear_frozencommissiononmortgage() {
  frozencommissiononmortgage_ = 0;
}
double trade_gateway_sync_account_field::frozencommissiononmortgage() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_sync_account_field.FrozenCommissionOnMortgage)
  return frozencommissiononmortgage_;
}
void trade_gateway_sync_account_field::set_frozencommissiononmortgage(double value) {
  
  frozencommissiononmortgage_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_sync_account_field.FrozenCommissionOnMortgage)
}

// double PositionProfitOnMortgage = 20;
void trade_gateway_sync_account_field::clear_positionprofitonmortgage() {
  positionprofitonmortgage_ = 0;
}
double trade_gateway_sync_account_field::positionprofitonmortgage() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_sync_account_field.PositionProfitOnMortgage)
  return positionprofitonmortgage_;
}
void trade_gateway_sync_account_field::set_positionprofitonmortgage(double value) {
  
  positionprofitonmortgage_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_sync_account_field.PositionProfitOnMortgage)
}

// double CommissionOnMortgage = 21;
void trade_gateway_sync_account_field::clear_commissiononmortgage() {
  commissiononmortgage_ = 0;
}
double trade_gateway_sync_account_field::commissiononmortgage() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_sync_account_field.CommissionOnMortgage)
  return commissiononmortgage_;
}
void trade_gateway_sync_account_field::set_commissiononmortgage(double value) {
  
  commissiononmortgage_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_sync_account_field.CommissionOnMortgage)
}

// double CloseProfitOnMortgage = 22;
void trade_gateway_sync_account_field::clear_closeprofitonmortgage() {
  closeprofitonmortgage_ = 0;
}
double trade_gateway_sync_account_field::closeprofitonmortgage() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_sync_account_field.CloseProfitOnMortgage)
  return closeprofitonmortgage_;
}
void trade_gateway_sync_account_field::set_closeprofitonmortgage(double value) {
  
  closeprofitonmortgage_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_sync_account_field.CloseProfitOnMortgage)
}

// double OptionCloseProfit = 23;
void trade_gateway_sync_account_field::clear_optioncloseprofit() {
  optioncloseprofit_ = 0;
}
double trade_gateway_sync_account_field::optioncloseprofit() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_sync_account_field.OptionCloseProfit)
  return optioncloseprofit_;
}
void trade_gateway_sync_account_field::set_optioncloseprofit(double value) {
  
  optioncloseprofit_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_sync_account_field.OptionCloseProfit)
}

// double OptionValue = 24;
void trade_gateway_sync_account_field::clear_optionvalue() {
  optionvalue_ = 0;
}
double trade_gateway_sync_account_field::optionvalue() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_sync_account_field.OptionValue)
  return optionvalue_;
}
void trade_gateway_sync_account_field::set_optionvalue(double value) {
  
  optionvalue_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_sync_account_field.OptionValue)
}

// double FrozenCash = 25;
void trade_gateway_sync_account_field::clear_frozencash() {
  frozencash_ = 0;
}
double trade_gateway_sync_account_field::frozencash() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_sync_account_field.FrozenCash)
  return frozencash_;
}
void trade_gateway_sync_account_field::set_frozencash(double value) {
  
  frozencash_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_sync_account_field.FrozenCash)
}

// double CashIn = 26;
void trade_gateway_sync_account_field::clear_cashin() {
  cashin_ = 0;
}
double trade_gateway_sync_account_field::cashin() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_sync_account_field.CashIn)
  return cashin_;
}
void trade_gateway_sync_account_field::set_cashin(double value) {
  
  cashin_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_sync_account_field.CashIn)
}

// double Credit = 27;
void trade_gateway_sync_account_field::clear_credit() {
  credit_ = 0;
}
double trade_gateway_sync_account_field::credit() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_sync_account_field.Credit)
  return credit_;
}
void trade_gateway_sync_account_field::set_credit(double value) {
  
  credit_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_sync_account_field.Credit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int trade_gateway_position_field::kUniqSequenceNoFieldNumber;
const int trade_gateway_position_field::kInstrumentIDFieldNumber;
const int trade_gateway_position_field::kBrokerIDFieldNumber;
const int trade_gateway_position_field::kInvestorIDFieldNumber;
const int trade_gateway_position_field::kPosiDirectionFieldNumber;
const int trade_gateway_position_field::kHedgeFlagFieldNumber;
const int trade_gateway_position_field::kPositionDateFieldNumber;
const int trade_gateway_position_field::kYdPositionFieldNumber;
const int trade_gateway_position_field::kPositionFieldNumber;
const int trade_gateway_position_field::kLongFrozenFieldNumber;
const int trade_gateway_position_field::kShortFrozenFieldNumber;
const int trade_gateway_position_field::kLongFrozenAmountFieldNumber;
const int trade_gateway_position_field::kShortFrozenAmountFieldNumber;
const int trade_gateway_position_field::kOpenVolumeFieldNumber;
const int trade_gateway_position_field::kCloseVolumeFieldNumber;
const int trade_gateway_position_field::kOpenAmountFieldNumber;
const int trade_gateway_position_field::kCloseAmountFieldNumber;
const int trade_gateway_position_field::kPositionCostFieldNumber;
const int trade_gateway_position_field::kPreMarginFieldNumber;
const int trade_gateway_position_field::kUseMarginFieldNumber;
const int trade_gateway_position_field::kFrozenMarginFieldNumber;
const int trade_gateway_position_field::kFrozenCashFieldNumber;
const int trade_gateway_position_field::kFrozenCommissionFieldNumber;
const int trade_gateway_position_field::kCashInFieldNumber;
const int trade_gateway_position_field::kCommissionFieldNumber;
const int trade_gateway_position_field::kCloseProfitFieldNumber;
const int trade_gateway_position_field::kPositionProfitFieldNumber;
const int trade_gateway_position_field::kPreSettlementPriceFieldNumber;
const int trade_gateway_position_field::kSettlementPriceFieldNumber;
const int trade_gateway_position_field::kTradingDayFieldNumber;
const int trade_gateway_position_field::kSettlementIDFieldNumber;
const int trade_gateway_position_field::kOpenCostFieldNumber;
const int trade_gateway_position_field::kExchangeMarginFieldNumber;
const int trade_gateway_position_field::kCombPositionFieldNumber;
const int trade_gateway_position_field::kCombLongFrozenFieldNumber;
const int trade_gateway_position_field::kCombShortFrozenFieldNumber;
const int trade_gateway_position_field::kCloseProfitByDateFieldNumber;
const int trade_gateway_position_field::kCloseProfitByTradeFieldNumber;
const int trade_gateway_position_field::kTodayPositionFieldNumber;
const int trade_gateway_position_field::kMarginRateByMoneyFieldNumber;
const int trade_gateway_position_field::kMarginRateByVolumeFieldNumber;
const int trade_gateway_position_field::kStrikeFrozenFieldNumber;
const int trade_gateway_position_field::kStrikeFrozenAmountFieldNumber;
const int trade_gateway_position_field::kAbandonFrozenFieldNumber;
const int trade_gateway_position_field::kOptionValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

trade_gateway_position_field::trade_gateway_position_field()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_trade_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.trade_gateway_position_field)
}
trade_gateway_position_field::trade_gateway_position_field(const trade_gateway_position_field& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  instrumentid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.instrumentid().size() > 0) {
    instrumentid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instrumentid_);
  }
  brokerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.brokerid().size() > 0) {
    brokerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.brokerid_);
  }
  investorid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.investorid().size() > 0) {
    investorid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.investorid_);
  }
  positiondate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.positiondate().size() > 0) {
    positiondate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.positiondate_);
  }
  tradingday_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tradingday().size() > 0) {
    tradingday_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradingday_);
  }
  ::memcpy(&uniqsequenceno_, &from.uniqsequenceno_,
    static_cast<size_t>(reinterpret_cast<char*>(&optionvalue_) -
    reinterpret_cast<char*>(&uniqsequenceno_)) + sizeof(optionvalue_));
  // @@protoc_insertion_point(copy_constructor:risk.trade_gateway_position_field)
}

void trade_gateway_position_field::SharedCtor() {
  instrumentid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  brokerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investorid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  positiondate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradingday_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&uniqsequenceno_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&optionvalue_) -
      reinterpret_cast<char*>(&uniqsequenceno_)) + sizeof(optionvalue_));
  _cached_size_ = 0;
}

trade_gateway_position_field::~trade_gateway_position_field() {
  // @@protoc_insertion_point(destructor:risk.trade_gateway_position_field)
  SharedDtor();
}

void trade_gateway_position_field::SharedDtor() {
  instrumentid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  brokerid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investorid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  positiondate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradingday_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void trade_gateway_position_field::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* trade_gateway_position_field::descriptor() {
  protobuf_trade_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trade_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const trade_gateway_position_field& trade_gateway_position_field::default_instance() {
  protobuf_trade_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

trade_gateway_position_field* trade_gateway_position_field::New(::google::protobuf::Arena* arena) const {
  trade_gateway_position_field* n = new trade_gateway_position_field;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void trade_gateway_position_field::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.trade_gateway_position_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  instrumentid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  positiondate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradingday_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&uniqsequenceno_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&optionvalue_) -
      reinterpret_cast<char*>(&uniqsequenceno_)) + sizeof(optionvalue_));
  _internal_metadata_.Clear();
}

bool trade_gateway_position_field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.trade_gateway_position_field)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 UniqSequenceNo = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uniqsequenceno_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string InstrumentID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrumentid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->instrumentid().data(), static_cast<int>(this->instrumentid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.trade_gateway_position_field.InstrumentID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string BrokerID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brokerid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->brokerid().data(), static_cast<int>(this->brokerid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.trade_gateway_position_field.BrokerID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string InvestorID = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_investorid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->investorid().data(), static_cast<int>(this->investorid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.trade_gateway_position_field.InvestorID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 PosiDirection = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posidirection_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 HedgeFlag = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hedgeflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string PositionDate = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_positiondate()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->positiondate().data(), static_cast<int>(this->positiondate().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.trade_gateway_position_field.PositionDate"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 YdPosition = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ydposition_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Position = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 LongFrozen = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &longfrozen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ShortFrozen = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shortfrozen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double LongFrozenAmount = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longfrozenamount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double ShortFrozenAmount = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &shortfrozenamount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 OpenVolume = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &openvolume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 CloseVolume = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &closevolume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double OpenAmount = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 129 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &openamount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double CloseAmount = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u /* 137 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &closeamount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double PositionCost = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(145u /* 145 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &positioncost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double PreMargin = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(153u /* 153 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &premargin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double UseMargin = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(161u /* 161 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &usemargin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double FrozenMargin = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(169u /* 169 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frozenmargin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double FrozenCash = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(177u /* 177 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frozencash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double FrozenCommission = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(185u /* 185 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frozencommission_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double CashIn = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(193u /* 193 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cashin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double Commission = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(201u /* 201 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &commission_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double CloseProfit = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(209u /* 209 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &closeprofit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double PositionProfit = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(217u /* 217 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &positionprofit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double PreSettlementPrice = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(225u /* 225 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &presettlementprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double SettlementPrice = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(233u /* 233 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &settlementprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string TradingDay = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradingday()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tradingday().data(), static_cast<int>(this->tradingday().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.trade_gateway_position_field.TradingDay"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 SettlementID = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 248 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &settlementid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double OpenCost = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1u /* 257 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &opencost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double ExchangeMargin = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 265 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &exchangemargin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 CombPosition = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 272 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &combposition_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 CombLongFrozen = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 280 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &comblongfrozen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 CombShortFrozen = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 288 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &combshortfrozen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double CloseProfitByDate = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 297 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &closeprofitbydate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double CloseProfitByTrade = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 305 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &closeprofitbytrade_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 TodayPosition = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 312 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &todayposition_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double MarginRateByMoney = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 321 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &marginratebymoney_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double MarginRateByVolume = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 329 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &marginratebyvolume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 StrikeFrozen = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 336 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &strikefrozen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double StrikeFrozenAmount = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 345 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &strikefrozenamount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 AbandonFrozen = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 352 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &abandonfrozen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double OptionValue = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 361 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &optionvalue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.trade_gateway_position_field)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.trade_gateway_position_field)
  return false;
#undef DO_
}

void trade_gateway_position_field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.trade_gateway_position_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 UniqSequenceNo = 1;
  if (this->uniqsequenceno() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uniqsequenceno(), output);
  }

  // string InstrumentID = 2;
  if (this->instrumentid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instrumentid().data(), static_cast<int>(this->instrumentid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_position_field.InstrumentID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->instrumentid(), output);
  }

  // string BrokerID = 3;
  if (this->brokerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->brokerid().data(), static_cast<int>(this->brokerid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_position_field.BrokerID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->brokerid(), output);
  }

  // string InvestorID = 4;
  if (this->investorid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investorid().data(), static_cast<int>(this->investorid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_position_field.InvestorID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->investorid(), output);
  }

  // int32 PosiDirection = 5;
  if (this->posidirection() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->posidirection(), output);
  }

  // int32 HedgeFlag = 6;
  if (this->hedgeflag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->hedgeflag(), output);
  }

  // string PositionDate = 7;
  if (this->positiondate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->positiondate().data(), static_cast<int>(this->positiondate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_position_field.PositionDate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->positiondate(), output);
  }

  // int32 YdPosition = 8;
  if (this->ydposition() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->ydposition(), output);
  }

  // int32 Position = 9;
  if (this->position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->position(), output);
  }

  // int32 LongFrozen = 10;
  if (this->longfrozen() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->longfrozen(), output);
  }

  // int32 ShortFrozen = 11;
  if (this->shortfrozen() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->shortfrozen(), output);
  }

  // double LongFrozenAmount = 12;
  if (this->longfrozenamount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->longfrozenamount(), output);
  }

  // double ShortFrozenAmount = 13;
  if (this->shortfrozenamount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->shortfrozenamount(), output);
  }

  // int32 OpenVolume = 14;
  if (this->openvolume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->openvolume(), output);
  }

  // int32 CloseVolume = 15;
  if (this->closevolume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->closevolume(), output);
  }

  // double OpenAmount = 16;
  if (this->openamount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->openamount(), output);
  }

  // double CloseAmount = 17;
  if (this->closeamount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->closeamount(), output);
  }

  // double PositionCost = 18;
  if (this->positioncost() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->positioncost(), output);
  }

  // double PreMargin = 19;
  if (this->premargin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->premargin(), output);
  }

  // double UseMargin = 20;
  if (this->usemargin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->usemargin(), output);
  }

  // double FrozenMargin = 21;
  if (this->frozenmargin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->frozenmargin(), output);
  }

  // double FrozenCash = 22;
  if (this->frozencash() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->frozencash(), output);
  }

  // double FrozenCommission = 23;
  if (this->frozencommission() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->frozencommission(), output);
  }

  // double CashIn = 24;
  if (this->cashin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->cashin(), output);
  }

  // double Commission = 25;
  if (this->commission() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->commission(), output);
  }

  // double CloseProfit = 26;
  if (this->closeprofit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->closeprofit(), output);
  }

  // double PositionProfit = 27;
  if (this->positionprofit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->positionprofit(), output);
  }

  // double PreSettlementPrice = 28;
  if (this->presettlementprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->presettlementprice(), output);
  }

  // double SettlementPrice = 29;
  if (this->settlementprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->settlementprice(), output);
  }

  // string TradingDay = 30;
  if (this->tradingday().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradingday().data(), static_cast<int>(this->tradingday().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_position_field.TradingDay");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      30, this->tradingday(), output);
  }

  // int32 SettlementID = 31;
  if (this->settlementid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->settlementid(), output);
  }

  // double OpenCost = 32;
  if (this->opencost() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(32, this->opencost(), output);
  }

  // double ExchangeMargin = 33;
  if (this->exchangemargin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(33, this->exchangemargin(), output);
  }

  // int32 CombPosition = 34;
  if (this->combposition() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->combposition(), output);
  }

  // int32 CombLongFrozen = 35;
  if (this->comblongfrozen() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->comblongfrozen(), output);
  }

  // int32 CombShortFrozen = 36;
  if (this->combshortfrozen() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->combshortfrozen(), output);
  }

  // double CloseProfitByDate = 37;
  if (this->closeprofitbydate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(37, this->closeprofitbydate(), output);
  }

  // double CloseProfitByTrade = 38;
  if (this->closeprofitbytrade() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(38, this->closeprofitbytrade(), output);
  }

  // int32 TodayPosition = 39;
  if (this->todayposition() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->todayposition(), output);
  }

  // double MarginRateByMoney = 40;
  if (this->marginratebymoney() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(40, this->marginratebymoney(), output);
  }

  // double MarginRateByVolume = 41;
  if (this->marginratebyvolume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(41, this->marginratebyvolume(), output);
  }

  // int32 StrikeFrozen = 42;
  if (this->strikefrozen() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(42, this->strikefrozen(), output);
  }

  // double StrikeFrozenAmount = 43;
  if (this->strikefrozenamount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(43, this->strikefrozenamount(), output);
  }

  // int32 AbandonFrozen = 44;
  if (this->abandonfrozen() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(44, this->abandonfrozen(), output);
  }

  // double OptionValue = 45;
  if (this->optionvalue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(45, this->optionvalue(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.trade_gateway_position_field)
}

::google::protobuf::uint8* trade_gateway_position_field::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.trade_gateway_position_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 UniqSequenceNo = 1;
  if (this->uniqsequenceno() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uniqsequenceno(), target);
  }

  // string InstrumentID = 2;
  if (this->instrumentid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instrumentid().data(), static_cast<int>(this->instrumentid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_position_field.InstrumentID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->instrumentid(), target);
  }

  // string BrokerID = 3;
  if (this->brokerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->brokerid().data(), static_cast<int>(this->brokerid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_position_field.BrokerID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->brokerid(), target);
  }

  // string InvestorID = 4;
  if (this->investorid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investorid().data(), static_cast<int>(this->investorid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_position_field.InvestorID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->investorid(), target);
  }

  // int32 PosiDirection = 5;
  if (this->posidirection() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->posidirection(), target);
  }

  // int32 HedgeFlag = 6;
  if (this->hedgeflag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->hedgeflag(), target);
  }

  // string PositionDate = 7;
  if (this->positiondate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->positiondate().data(), static_cast<int>(this->positiondate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_position_field.PositionDate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->positiondate(), target);
  }

  // int32 YdPosition = 8;
  if (this->ydposition() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->ydposition(), target);
  }

  // int32 Position = 9;
  if (this->position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->position(), target);
  }

  // int32 LongFrozen = 10;
  if (this->longfrozen() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->longfrozen(), target);
  }

  // int32 ShortFrozen = 11;
  if (this->shortfrozen() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->shortfrozen(), target);
  }

  // double LongFrozenAmount = 12;
  if (this->longfrozenamount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->longfrozenamount(), target);
  }

  // double ShortFrozenAmount = 13;
  if (this->shortfrozenamount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->shortfrozenamount(), target);
  }

  // int32 OpenVolume = 14;
  if (this->openvolume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->openvolume(), target);
  }

  // int32 CloseVolume = 15;
  if (this->closevolume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->closevolume(), target);
  }

  // double OpenAmount = 16;
  if (this->openamount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->openamount(), target);
  }

  // double CloseAmount = 17;
  if (this->closeamount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->closeamount(), target);
  }

  // double PositionCost = 18;
  if (this->positioncost() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->positioncost(), target);
  }

  // double PreMargin = 19;
  if (this->premargin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->premargin(), target);
  }

  // double UseMargin = 20;
  if (this->usemargin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->usemargin(), target);
  }

  // double FrozenMargin = 21;
  if (this->frozenmargin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->frozenmargin(), target);
  }

  // double FrozenCash = 22;
  if (this->frozencash() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->frozencash(), target);
  }

  // double FrozenCommission = 23;
  if (this->frozencommission() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->frozencommission(), target);
  }

  // double CashIn = 24;
  if (this->cashin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->cashin(), target);
  }

  // double Commission = 25;
  if (this->commission() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->commission(), target);
  }

  // double CloseProfit = 26;
  if (this->closeprofit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->closeprofit(), target);
  }

  // double PositionProfit = 27;
  if (this->positionprofit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->positionprofit(), target);
  }

  // double PreSettlementPrice = 28;
  if (this->presettlementprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->presettlementprice(), target);
  }

  // double SettlementPrice = 29;
  if (this->settlementprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->settlementprice(), target);
  }

  // string TradingDay = 30;
  if (this->tradingday().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradingday().data(), static_cast<int>(this->tradingday().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.trade_gateway_position_field.TradingDay");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->tradingday(), target);
  }

  // int32 SettlementID = 31;
  if (this->settlementid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->settlementid(), target);
  }

  // double OpenCost = 32;
  if (this->opencost() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(32, this->opencost(), target);
  }

  // double ExchangeMargin = 33;
  if (this->exchangemargin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(33, this->exchangemargin(), target);
  }

  // int32 CombPosition = 34;
  if (this->combposition() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->combposition(), target);
  }

  // int32 CombLongFrozen = 35;
  if (this->comblongfrozen() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->comblongfrozen(), target);
  }

  // int32 CombShortFrozen = 36;
  if (this->combshortfrozen() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->combshortfrozen(), target);
  }

  // double CloseProfitByDate = 37;
  if (this->closeprofitbydate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(37, this->closeprofitbydate(), target);
  }

  // double CloseProfitByTrade = 38;
  if (this->closeprofitbytrade() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(38, this->closeprofitbytrade(), target);
  }

  // int32 TodayPosition = 39;
  if (this->todayposition() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(39, this->todayposition(), target);
  }

  // double MarginRateByMoney = 40;
  if (this->marginratebymoney() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(40, this->marginratebymoney(), target);
  }

  // double MarginRateByVolume = 41;
  if (this->marginratebyvolume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(41, this->marginratebyvolume(), target);
  }

  // int32 StrikeFrozen = 42;
  if (this->strikefrozen() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(42, this->strikefrozen(), target);
  }

  // double StrikeFrozenAmount = 43;
  if (this->strikefrozenamount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(43, this->strikefrozenamount(), target);
  }

  // int32 AbandonFrozen = 44;
  if (this->abandonfrozen() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(44, this->abandonfrozen(), target);
  }

  // double OptionValue = 45;
  if (this->optionvalue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(45, this->optionvalue(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.trade_gateway_position_field)
  return target;
}

size_t trade_gateway_position_field::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.trade_gateway_position_field)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string InstrumentID = 2;
  if (this->instrumentid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->instrumentid());
  }

  // string BrokerID = 3;
  if (this->brokerid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->brokerid());
  }

  // string InvestorID = 4;
  if (this->investorid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->investorid());
  }

  // string PositionDate = 7;
  if (this->positiondate().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->positiondate());
  }

  // string TradingDay = 30;
  if (this->tradingday().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tradingday());
  }

  // int32 UniqSequenceNo = 1;
  if (this->uniqsequenceno() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->uniqsequenceno());
  }

  // int32 PosiDirection = 5;
  if (this->posidirection() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->posidirection());
  }

  // int32 HedgeFlag = 6;
  if (this->hedgeflag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hedgeflag());
  }

  // int32 YdPosition = 8;
  if (this->ydposition() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ydposition());
  }

  // int32 Position = 9;
  if (this->position() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->position());
  }

  // int32 LongFrozen = 10;
  if (this->longfrozen() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->longfrozen());
  }

  // double LongFrozenAmount = 12;
  if (this->longfrozenamount() != 0) {
    total_size += 1 + 8;
  }

  // int32 ShortFrozen = 11;
  if (this->shortfrozen() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->shortfrozen());
  }

  // int32 OpenVolume = 14;
  if (this->openvolume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->openvolume());
  }

  // double ShortFrozenAmount = 13;
  if (this->shortfrozenamount() != 0) {
    total_size += 1 + 8;
  }

  // double OpenAmount = 16;
  if (this->openamount() != 0) {
    total_size += 2 + 8;
  }

  // double CloseAmount = 17;
  if (this->closeamount() != 0) {
    total_size += 2 + 8;
  }

  // double PositionCost = 18;
  if (this->positioncost() != 0) {
    total_size += 2 + 8;
  }

  // double PreMargin = 19;
  if (this->premargin() != 0) {
    total_size += 2 + 8;
  }

  // double UseMargin = 20;
  if (this->usemargin() != 0) {
    total_size += 2 + 8;
  }

  // double FrozenMargin = 21;
  if (this->frozenmargin() != 0) {
    total_size += 2 + 8;
  }

  // double FrozenCash = 22;
  if (this->frozencash() != 0) {
    total_size += 2 + 8;
  }

  // double FrozenCommission = 23;
  if (this->frozencommission() != 0) {
    total_size += 2 + 8;
  }

  // int32 CloseVolume = 15;
  if (this->closevolume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->closevolume());
  }

  // int32 SettlementID = 31;
  if (this->settlementid() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->settlementid());
  }

  // double CashIn = 24;
  if (this->cashin() != 0) {
    total_size += 2 + 8;
  }

  // double Commission = 25;
  if (this->commission() != 0) {
    total_size += 2 + 8;
  }

  // double CloseProfit = 26;
  if (this->closeprofit() != 0) {
    total_size += 2 + 8;
  }

  // double PositionProfit = 27;
  if (this->positionprofit() != 0) {
    total_size += 2 + 8;
  }

  // double PreSettlementPrice = 28;
  if (this->presettlementprice() != 0) {
    total_size += 2 + 8;
  }

  // double SettlementPrice = 29;
  if (this->settlementprice() != 0) {
    total_size += 2 + 8;
  }

  // double OpenCost = 32;
  if (this->opencost() != 0) {
    total_size += 2 + 8;
  }

  // double ExchangeMargin = 33;
  if (this->exchangemargin() != 0) {
    total_size += 2 + 8;
  }

  // int32 CombPosition = 34;
  if (this->combposition() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->combposition());
  }

  // int32 CombLongFrozen = 35;
  if (this->comblongfrozen() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->comblongfrozen());
  }

  // double CloseProfitByDate = 37;
  if (this->closeprofitbydate() != 0) {
    total_size += 2 + 8;
  }

  // int32 CombShortFrozen = 36;
  if (this->combshortfrozen() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->combshortfrozen());
  }

  // int32 TodayPosition = 39;
  if (this->todayposition() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->todayposition());
  }

  // double CloseProfitByTrade = 38;
  if (this->closeprofitbytrade() != 0) {
    total_size += 2 + 8;
  }

  // double MarginRateByMoney = 40;
  if (this->marginratebymoney() != 0) {
    total_size += 2 + 8;
  }

  // double MarginRateByVolume = 41;
  if (this->marginratebyvolume() != 0) {
    total_size += 2 + 8;
  }

  // double StrikeFrozenAmount = 43;
  if (this->strikefrozenamount() != 0) {
    total_size += 2 + 8;
  }

  // int32 StrikeFrozen = 42;
  if (this->strikefrozen() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->strikefrozen());
  }

  // int32 AbandonFrozen = 44;
  if (this->abandonfrozen() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->abandonfrozen());
  }

  // double OptionValue = 45;
  if (this->optionvalue() != 0) {
    total_size += 2 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void trade_gateway_position_field::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.trade_gateway_position_field)
  GOOGLE_DCHECK_NE(&from, this);
  const trade_gateway_position_field* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const trade_gateway_position_field>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.trade_gateway_position_field)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.trade_gateway_position_field)
    MergeFrom(*source);
  }
}

void trade_gateway_position_field::MergeFrom(const trade_gateway_position_field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.trade_gateway_position_field)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.instrumentid().size() > 0) {

    instrumentid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instrumentid_);
  }
  if (from.brokerid().size() > 0) {

    brokerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.brokerid_);
  }
  if (from.investorid().size() > 0) {

    investorid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.investorid_);
  }
  if (from.positiondate().size() > 0) {

    positiondate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.positiondate_);
  }
  if (from.tradingday().size() > 0) {

    tradingday_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradingday_);
  }
  if (from.uniqsequenceno() != 0) {
    set_uniqsequenceno(from.uniqsequenceno());
  }
  if (from.posidirection() != 0) {
    set_posidirection(from.posidirection());
  }
  if (from.hedgeflag() != 0) {
    set_hedgeflag(from.hedgeflag());
  }
  if (from.ydposition() != 0) {
    set_ydposition(from.ydposition());
  }
  if (from.position() != 0) {
    set_position(from.position());
  }
  if (from.longfrozen() != 0) {
    set_longfrozen(from.longfrozen());
  }
  if (from.longfrozenamount() != 0) {
    set_longfrozenamount(from.longfrozenamount());
  }
  if (from.shortfrozen() != 0) {
    set_shortfrozen(from.shortfrozen());
  }
  if (from.openvolume() != 0) {
    set_openvolume(from.openvolume());
  }
  if (from.shortfrozenamount() != 0) {
    set_shortfrozenamount(from.shortfrozenamount());
  }
  if (from.openamount() != 0) {
    set_openamount(from.openamount());
  }
  if (from.closeamount() != 0) {
    set_closeamount(from.closeamount());
  }
  if (from.positioncost() != 0) {
    set_positioncost(from.positioncost());
  }
  if (from.premargin() != 0) {
    set_premargin(from.premargin());
  }
  if (from.usemargin() != 0) {
    set_usemargin(from.usemargin());
  }
  if (from.frozenmargin() != 0) {
    set_frozenmargin(from.frozenmargin());
  }
  if (from.frozencash() != 0) {
    set_frozencash(from.frozencash());
  }
  if (from.frozencommission() != 0) {
    set_frozencommission(from.frozencommission());
  }
  if (from.closevolume() != 0) {
    set_closevolume(from.closevolume());
  }
  if (from.settlementid() != 0) {
    set_settlementid(from.settlementid());
  }
  if (from.cashin() != 0) {
    set_cashin(from.cashin());
  }
  if (from.commission() != 0) {
    set_commission(from.commission());
  }
  if (from.closeprofit() != 0) {
    set_closeprofit(from.closeprofit());
  }
  if (from.positionprofit() != 0) {
    set_positionprofit(from.positionprofit());
  }
  if (from.presettlementprice() != 0) {
    set_presettlementprice(from.presettlementprice());
  }
  if (from.settlementprice() != 0) {
    set_settlementprice(from.settlementprice());
  }
  if (from.opencost() != 0) {
    set_opencost(from.opencost());
  }
  if (from.exchangemargin() != 0) {
    set_exchangemargin(from.exchangemargin());
  }
  if (from.combposition() != 0) {
    set_combposition(from.combposition());
  }
  if (from.comblongfrozen() != 0) {
    set_comblongfrozen(from.comblongfrozen());
  }
  if (from.closeprofitbydate() != 0) {
    set_closeprofitbydate(from.closeprofitbydate());
  }
  if (from.combshortfrozen() != 0) {
    set_combshortfrozen(from.combshortfrozen());
  }
  if (from.todayposition() != 0) {
    set_todayposition(from.todayposition());
  }
  if (from.closeprofitbytrade() != 0) {
    set_closeprofitbytrade(from.closeprofitbytrade());
  }
  if (from.marginratebymoney() != 0) {
    set_marginratebymoney(from.marginratebymoney());
  }
  if (from.marginratebyvolume() != 0) {
    set_marginratebyvolume(from.marginratebyvolume());
  }
  if (from.strikefrozenamount() != 0) {
    set_strikefrozenamount(from.strikefrozenamount());
  }
  if (from.strikefrozen() != 0) {
    set_strikefrozen(from.strikefrozen());
  }
  if (from.abandonfrozen() != 0) {
    set_abandonfrozen(from.abandonfrozen());
  }
  if (from.optionvalue() != 0) {
    set_optionvalue(from.optionvalue());
  }
}

void trade_gateway_position_field::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.trade_gateway_position_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void trade_gateway_position_field::CopyFrom(const trade_gateway_position_field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.trade_gateway_position_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool trade_gateway_position_field::IsInitialized() const {
  return true;
}

void trade_gateway_position_field::Swap(trade_gateway_position_field* other) {
  if (other == this) return;
  InternalSwap(other);
}
void trade_gateway_position_field::InternalSwap(trade_gateway_position_field* other) {
  using std::swap;
  instrumentid_.Swap(&other->instrumentid_);
  brokerid_.Swap(&other->brokerid_);
  investorid_.Swap(&other->investorid_);
  positiondate_.Swap(&other->positiondate_);
  tradingday_.Swap(&other->tradingday_);
  swap(uniqsequenceno_, other->uniqsequenceno_);
  swap(posidirection_, other->posidirection_);
  swap(hedgeflag_, other->hedgeflag_);
  swap(ydposition_, other->ydposition_);
  swap(position_, other->position_);
  swap(longfrozen_, other->longfrozen_);
  swap(longfrozenamount_, other->longfrozenamount_);
  swap(shortfrozen_, other->shortfrozen_);
  swap(openvolume_, other->openvolume_);
  swap(shortfrozenamount_, other->shortfrozenamount_);
  swap(openamount_, other->openamount_);
  swap(closeamount_, other->closeamount_);
  swap(positioncost_, other->positioncost_);
  swap(premargin_, other->premargin_);
  swap(usemargin_, other->usemargin_);
  swap(frozenmargin_, other->frozenmargin_);
  swap(frozencash_, other->frozencash_);
  swap(frozencommission_, other->frozencommission_);
  swap(closevolume_, other->closevolume_);
  swap(settlementid_, other->settlementid_);
  swap(cashin_, other->cashin_);
  swap(commission_, other->commission_);
  swap(closeprofit_, other->closeprofit_);
  swap(positionprofit_, other->positionprofit_);
  swap(presettlementprice_, other->presettlementprice_);
  swap(settlementprice_, other->settlementprice_);
  swap(opencost_, other->opencost_);
  swap(exchangemargin_, other->exchangemargin_);
  swap(combposition_, other->combposition_);
  swap(comblongfrozen_, other->comblongfrozen_);
  swap(closeprofitbydate_, other->closeprofitbydate_);
  swap(combshortfrozen_, other->combshortfrozen_);
  swap(todayposition_, other->todayposition_);
  swap(closeprofitbytrade_, other->closeprofitbytrade_);
  swap(marginratebymoney_, other->marginratebymoney_);
  swap(marginratebyvolume_, other->marginratebyvolume_);
  swap(strikefrozenamount_, other->strikefrozenamount_);
  swap(strikefrozen_, other->strikefrozen_);
  swap(abandonfrozen_, other->abandonfrozen_);
  swap(optionvalue_, other->optionvalue_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata trade_gateway_position_field::GetMetadata() const {
  protobuf_trade_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trade_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// trade_gateway_position_field

// int32 UniqSequenceNo = 1;
void trade_gateway_position_field::clear_uniqsequenceno() {
  uniqsequenceno_ = 0;
}
::google::protobuf::int32 trade_gateway_position_field::uniqsequenceno() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.UniqSequenceNo)
  return uniqsequenceno_;
}
void trade_gateway_position_field::set_uniqsequenceno(::google::protobuf::int32 value) {
  
  uniqsequenceno_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.UniqSequenceNo)
}

// string InstrumentID = 2;
void trade_gateway_position_field::clear_instrumentid() {
  instrumentid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& trade_gateway_position_field::instrumentid() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.InstrumentID)
  return instrumentid_.GetNoArena();
}
void trade_gateway_position_field::set_instrumentid(const ::std::string& value) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.InstrumentID)
}
#if LANG_CXX11
void trade_gateway_position_field::set_instrumentid(::std::string&& value) {
  
  instrumentid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_position_field.InstrumentID)
}
#endif
void trade_gateway_position_field::set_instrumentid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_position_field.InstrumentID)
}
void trade_gateway_position_field::set_instrumentid(const char* value, size_t size) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_position_field.InstrumentID)
}
::std::string* trade_gateway_position_field::mutable_instrumentid() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_position_field.InstrumentID)
  return instrumentid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* trade_gateway_position_field::release_instrumentid() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_position_field.InstrumentID)
  
  return instrumentid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void trade_gateway_position_field::set_allocated_instrumentid(::std::string* instrumentid) {
  if (instrumentid != NULL) {
    
  } else {
    
  }
  instrumentid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrumentid);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_position_field.InstrumentID)
}

// string BrokerID = 3;
void trade_gateway_position_field::clear_brokerid() {
  brokerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& trade_gateway_position_field::brokerid() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.BrokerID)
  return brokerid_.GetNoArena();
}
void trade_gateway_position_field::set_brokerid(const ::std::string& value) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.BrokerID)
}
#if LANG_CXX11
void trade_gateway_position_field::set_brokerid(::std::string&& value) {
  
  brokerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_position_field.BrokerID)
}
#endif
void trade_gateway_position_field::set_brokerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_position_field.BrokerID)
}
void trade_gateway_position_field::set_brokerid(const char* value, size_t size) {
  
  brokerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_position_field.BrokerID)
}
::std::string* trade_gateway_position_field::mutable_brokerid() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_position_field.BrokerID)
  return brokerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* trade_gateway_position_field::release_brokerid() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_position_field.BrokerID)
  
  return brokerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void trade_gateway_position_field::set_allocated_brokerid(::std::string* brokerid) {
  if (brokerid != NULL) {
    
  } else {
    
  }
  brokerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brokerid);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_position_field.BrokerID)
}

// string InvestorID = 4;
void trade_gateway_position_field::clear_investorid() {
  investorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& trade_gateway_position_field::investorid() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.InvestorID)
  return investorid_.GetNoArena();
}
void trade_gateway_position_field::set_investorid(const ::std::string& value) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.InvestorID)
}
#if LANG_CXX11
void trade_gateway_position_field::set_investorid(::std::string&& value) {
  
  investorid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_position_field.InvestorID)
}
#endif
void trade_gateway_position_field::set_investorid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_position_field.InvestorID)
}
void trade_gateway_position_field::set_investorid(const char* value, size_t size) {
  
  investorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_position_field.InvestorID)
}
::std::string* trade_gateway_position_field::mutable_investorid() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_position_field.InvestorID)
  return investorid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* trade_gateway_position_field::release_investorid() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_position_field.InvestorID)
  
  return investorid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void trade_gateway_position_field::set_allocated_investorid(::std::string* investorid) {
  if (investorid != NULL) {
    
  } else {
    
  }
  investorid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), investorid);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_position_field.InvestorID)
}

// int32 PosiDirection = 5;
void trade_gateway_position_field::clear_posidirection() {
  posidirection_ = 0;
}
::google::protobuf::int32 trade_gateway_position_field::posidirection() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.PosiDirection)
  return posidirection_;
}
void trade_gateway_position_field::set_posidirection(::google::protobuf::int32 value) {
  
  posidirection_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.PosiDirection)
}

// int32 HedgeFlag = 6;
void trade_gateway_position_field::clear_hedgeflag() {
  hedgeflag_ = 0;
}
::google::protobuf::int32 trade_gateway_position_field::hedgeflag() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.HedgeFlag)
  return hedgeflag_;
}
void trade_gateway_position_field::set_hedgeflag(::google::protobuf::int32 value) {
  
  hedgeflag_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.HedgeFlag)
}

// string PositionDate = 7;
void trade_gateway_position_field::clear_positiondate() {
  positiondate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& trade_gateway_position_field::positiondate() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.PositionDate)
  return positiondate_.GetNoArena();
}
void trade_gateway_position_field::set_positiondate(const ::std::string& value) {
  
  positiondate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.PositionDate)
}
#if LANG_CXX11
void trade_gateway_position_field::set_positiondate(::std::string&& value) {
  
  positiondate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_position_field.PositionDate)
}
#endif
void trade_gateway_position_field::set_positiondate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  positiondate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_position_field.PositionDate)
}
void trade_gateway_position_field::set_positiondate(const char* value, size_t size) {
  
  positiondate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_position_field.PositionDate)
}
::std::string* trade_gateway_position_field::mutable_positiondate() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_position_field.PositionDate)
  return positiondate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* trade_gateway_position_field::release_positiondate() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_position_field.PositionDate)
  
  return positiondate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void trade_gateway_position_field::set_allocated_positiondate(::std::string* positiondate) {
  if (positiondate != NULL) {
    
  } else {
    
  }
  positiondate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), positiondate);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_position_field.PositionDate)
}

// int32 YdPosition = 8;
void trade_gateway_position_field::clear_ydposition() {
  ydposition_ = 0;
}
::google::protobuf::int32 trade_gateway_position_field::ydposition() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.YdPosition)
  return ydposition_;
}
void trade_gateway_position_field::set_ydposition(::google::protobuf::int32 value) {
  
  ydposition_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.YdPosition)
}

// int32 Position = 9;
void trade_gateway_position_field::clear_position() {
  position_ = 0;
}
::google::protobuf::int32 trade_gateway_position_field::position() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.Position)
  return position_;
}
void trade_gateway_position_field::set_position(::google::protobuf::int32 value) {
  
  position_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.Position)
}

// int32 LongFrozen = 10;
void trade_gateway_position_field::clear_longfrozen() {
  longfrozen_ = 0;
}
::google::protobuf::int32 trade_gateway_position_field::longfrozen() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.LongFrozen)
  return longfrozen_;
}
void trade_gateway_position_field::set_longfrozen(::google::protobuf::int32 value) {
  
  longfrozen_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.LongFrozen)
}

// int32 ShortFrozen = 11;
void trade_gateway_position_field::clear_shortfrozen() {
  shortfrozen_ = 0;
}
::google::protobuf::int32 trade_gateway_position_field::shortfrozen() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.ShortFrozen)
  return shortfrozen_;
}
void trade_gateway_position_field::set_shortfrozen(::google::protobuf::int32 value) {
  
  shortfrozen_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.ShortFrozen)
}

// double LongFrozenAmount = 12;
void trade_gateway_position_field::clear_longfrozenamount() {
  longfrozenamount_ = 0;
}
double trade_gateway_position_field::longfrozenamount() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.LongFrozenAmount)
  return longfrozenamount_;
}
void trade_gateway_position_field::set_longfrozenamount(double value) {
  
  longfrozenamount_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.LongFrozenAmount)
}

// double ShortFrozenAmount = 13;
void trade_gateway_position_field::clear_shortfrozenamount() {
  shortfrozenamount_ = 0;
}
double trade_gateway_position_field::shortfrozenamount() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.ShortFrozenAmount)
  return shortfrozenamount_;
}
void trade_gateway_position_field::set_shortfrozenamount(double value) {
  
  shortfrozenamount_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.ShortFrozenAmount)
}

// int32 OpenVolume = 14;
void trade_gateway_position_field::clear_openvolume() {
  openvolume_ = 0;
}
::google::protobuf::int32 trade_gateway_position_field::openvolume() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.OpenVolume)
  return openvolume_;
}
void trade_gateway_position_field::set_openvolume(::google::protobuf::int32 value) {
  
  openvolume_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.OpenVolume)
}

// int32 CloseVolume = 15;
void trade_gateway_position_field::clear_closevolume() {
  closevolume_ = 0;
}
::google::protobuf::int32 trade_gateway_position_field::closevolume() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.CloseVolume)
  return closevolume_;
}
void trade_gateway_position_field::set_closevolume(::google::protobuf::int32 value) {
  
  closevolume_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.CloseVolume)
}

// double OpenAmount = 16;
void trade_gateway_position_field::clear_openamount() {
  openamount_ = 0;
}
double trade_gateway_position_field::openamount() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.OpenAmount)
  return openamount_;
}
void trade_gateway_position_field::set_openamount(double value) {
  
  openamount_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.OpenAmount)
}

// double CloseAmount = 17;
void trade_gateway_position_field::clear_closeamount() {
  closeamount_ = 0;
}
double trade_gateway_position_field::closeamount() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.CloseAmount)
  return closeamount_;
}
void trade_gateway_position_field::set_closeamount(double value) {
  
  closeamount_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.CloseAmount)
}

// double PositionCost = 18;
void trade_gateway_position_field::clear_positioncost() {
  positioncost_ = 0;
}
double trade_gateway_position_field::positioncost() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.PositionCost)
  return positioncost_;
}
void trade_gateway_position_field::set_positioncost(double value) {
  
  positioncost_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.PositionCost)
}

// double PreMargin = 19;
void trade_gateway_position_field::clear_premargin() {
  premargin_ = 0;
}
double trade_gateway_position_field::premargin() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.PreMargin)
  return premargin_;
}
void trade_gateway_position_field::set_premargin(double value) {
  
  premargin_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.PreMargin)
}

// double UseMargin = 20;
void trade_gateway_position_field::clear_usemargin() {
  usemargin_ = 0;
}
double trade_gateway_position_field::usemargin() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.UseMargin)
  return usemargin_;
}
void trade_gateway_position_field::set_usemargin(double value) {
  
  usemargin_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.UseMargin)
}

// double FrozenMargin = 21;
void trade_gateway_position_field::clear_frozenmargin() {
  frozenmargin_ = 0;
}
double trade_gateway_position_field::frozenmargin() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.FrozenMargin)
  return frozenmargin_;
}
void trade_gateway_position_field::set_frozenmargin(double value) {
  
  frozenmargin_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.FrozenMargin)
}

// double FrozenCash = 22;
void trade_gateway_position_field::clear_frozencash() {
  frozencash_ = 0;
}
double trade_gateway_position_field::frozencash() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.FrozenCash)
  return frozencash_;
}
void trade_gateway_position_field::set_frozencash(double value) {
  
  frozencash_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.FrozenCash)
}

// double FrozenCommission = 23;
void trade_gateway_position_field::clear_frozencommission() {
  frozencommission_ = 0;
}
double trade_gateway_position_field::frozencommission() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.FrozenCommission)
  return frozencommission_;
}
void trade_gateway_position_field::set_frozencommission(double value) {
  
  frozencommission_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.FrozenCommission)
}

// double CashIn = 24;
void trade_gateway_position_field::clear_cashin() {
  cashin_ = 0;
}
double trade_gateway_position_field::cashin() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.CashIn)
  return cashin_;
}
void trade_gateway_position_field::set_cashin(double value) {
  
  cashin_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.CashIn)
}

// double Commission = 25;
void trade_gateway_position_field::clear_commission() {
  commission_ = 0;
}
double trade_gateway_position_field::commission() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.Commission)
  return commission_;
}
void trade_gateway_position_field::set_commission(double value) {
  
  commission_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.Commission)
}

// double CloseProfit = 26;
void trade_gateway_position_field::clear_closeprofit() {
  closeprofit_ = 0;
}
double trade_gateway_position_field::closeprofit() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.CloseProfit)
  return closeprofit_;
}
void trade_gateway_position_field::set_closeprofit(double value) {
  
  closeprofit_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.CloseProfit)
}

// double PositionProfit = 27;
void trade_gateway_position_field::clear_positionprofit() {
  positionprofit_ = 0;
}
double trade_gateway_position_field::positionprofit() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.PositionProfit)
  return positionprofit_;
}
void trade_gateway_position_field::set_positionprofit(double value) {
  
  positionprofit_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.PositionProfit)
}

// double PreSettlementPrice = 28;
void trade_gateway_position_field::clear_presettlementprice() {
  presettlementprice_ = 0;
}
double trade_gateway_position_field::presettlementprice() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.PreSettlementPrice)
  return presettlementprice_;
}
void trade_gateway_position_field::set_presettlementprice(double value) {
  
  presettlementprice_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.PreSettlementPrice)
}

// double SettlementPrice = 29;
void trade_gateway_position_field::clear_settlementprice() {
  settlementprice_ = 0;
}
double trade_gateway_position_field::settlementprice() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.SettlementPrice)
  return settlementprice_;
}
void trade_gateway_position_field::set_settlementprice(double value) {
  
  settlementprice_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.SettlementPrice)
}

// string TradingDay = 30;
void trade_gateway_position_field::clear_tradingday() {
  tradingday_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& trade_gateway_position_field::tradingday() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.TradingDay)
  return tradingday_.GetNoArena();
}
void trade_gateway_position_field::set_tradingday(const ::std::string& value) {
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.TradingDay)
}
#if LANG_CXX11
void trade_gateway_position_field::set_tradingday(::std::string&& value) {
  
  tradingday_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.trade_gateway_position_field.TradingDay)
}
#endif
void trade_gateway_position_field::set_tradingday(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.trade_gateway_position_field.TradingDay)
}
void trade_gateway_position_field::set_tradingday(const char* value, size_t size) {
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.trade_gateway_position_field.TradingDay)
}
::std::string* trade_gateway_position_field::mutable_tradingday() {
  
  // @@protoc_insertion_point(field_mutable:risk.trade_gateway_position_field.TradingDay)
  return tradingday_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* trade_gateway_position_field::release_tradingday() {
  // @@protoc_insertion_point(field_release:risk.trade_gateway_position_field.TradingDay)
  
  return tradingday_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void trade_gateway_position_field::set_allocated_tradingday(::std::string* tradingday) {
  if (tradingday != NULL) {
    
  } else {
    
  }
  tradingday_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradingday);
  // @@protoc_insertion_point(field_set_allocated:risk.trade_gateway_position_field.TradingDay)
}

// int32 SettlementID = 31;
void trade_gateway_position_field::clear_settlementid() {
  settlementid_ = 0;
}
::google::protobuf::int32 trade_gateway_position_field::settlementid() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.SettlementID)
  return settlementid_;
}
void trade_gateway_position_field::set_settlementid(::google::protobuf::int32 value) {
  
  settlementid_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.SettlementID)
}

// double OpenCost = 32;
void trade_gateway_position_field::clear_opencost() {
  opencost_ = 0;
}
double trade_gateway_position_field::opencost() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.OpenCost)
  return opencost_;
}
void trade_gateway_position_field::set_opencost(double value) {
  
  opencost_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.OpenCost)
}

// double ExchangeMargin = 33;
void trade_gateway_position_field::clear_exchangemargin() {
  exchangemargin_ = 0;
}
double trade_gateway_position_field::exchangemargin() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.ExchangeMargin)
  return exchangemargin_;
}
void trade_gateway_position_field::set_exchangemargin(double value) {
  
  exchangemargin_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.ExchangeMargin)
}

// int32 CombPosition = 34;
void trade_gateway_position_field::clear_combposition() {
  combposition_ = 0;
}
::google::protobuf::int32 trade_gateway_position_field::combposition() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.CombPosition)
  return combposition_;
}
void trade_gateway_position_field::set_combposition(::google::protobuf::int32 value) {
  
  combposition_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.CombPosition)
}

// int32 CombLongFrozen = 35;
void trade_gateway_position_field::clear_comblongfrozen() {
  comblongfrozen_ = 0;
}
::google::protobuf::int32 trade_gateway_position_field::comblongfrozen() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.CombLongFrozen)
  return comblongfrozen_;
}
void trade_gateway_position_field::set_comblongfrozen(::google::protobuf::int32 value) {
  
  comblongfrozen_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.CombLongFrozen)
}

// int32 CombShortFrozen = 36;
void trade_gateway_position_field::clear_combshortfrozen() {
  combshortfrozen_ = 0;
}
::google::protobuf::int32 trade_gateway_position_field::combshortfrozen() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.CombShortFrozen)
  return combshortfrozen_;
}
void trade_gateway_position_field::set_combshortfrozen(::google::protobuf::int32 value) {
  
  combshortfrozen_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.CombShortFrozen)
}

// double CloseProfitByDate = 37;
void trade_gateway_position_field::clear_closeprofitbydate() {
  closeprofitbydate_ = 0;
}
double trade_gateway_position_field::closeprofitbydate() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.CloseProfitByDate)
  return closeprofitbydate_;
}
void trade_gateway_position_field::set_closeprofitbydate(double value) {
  
  closeprofitbydate_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.CloseProfitByDate)
}

// double CloseProfitByTrade = 38;
void trade_gateway_position_field::clear_closeprofitbytrade() {
  closeprofitbytrade_ = 0;
}
double trade_gateway_position_field::closeprofitbytrade() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.CloseProfitByTrade)
  return closeprofitbytrade_;
}
void trade_gateway_position_field::set_closeprofitbytrade(double value) {
  
  closeprofitbytrade_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.CloseProfitByTrade)
}

// int32 TodayPosition = 39;
void trade_gateway_position_field::clear_todayposition() {
  todayposition_ = 0;
}
::google::protobuf::int32 trade_gateway_position_field::todayposition() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.TodayPosition)
  return todayposition_;
}
void trade_gateway_position_field::set_todayposition(::google::protobuf::int32 value) {
  
  todayposition_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.TodayPosition)
}

// double MarginRateByMoney = 40;
void trade_gateway_position_field::clear_marginratebymoney() {
  marginratebymoney_ = 0;
}
double trade_gateway_position_field::marginratebymoney() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.MarginRateByMoney)
  return marginratebymoney_;
}
void trade_gateway_position_field::set_marginratebymoney(double value) {
  
  marginratebymoney_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.MarginRateByMoney)
}

// double MarginRateByVolume = 41;
void trade_gateway_position_field::clear_marginratebyvolume() {
  marginratebyvolume_ = 0;
}
double trade_gateway_position_field::marginratebyvolume() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.MarginRateByVolume)
  return marginratebyvolume_;
}
void trade_gateway_position_field::set_marginratebyvolume(double value) {
  
  marginratebyvolume_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.MarginRateByVolume)
}

// int32 StrikeFrozen = 42;
void trade_gateway_position_field::clear_strikefrozen() {
  strikefrozen_ = 0;
}
::google::protobuf::int32 trade_gateway_position_field::strikefrozen() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.StrikeFrozen)
  return strikefrozen_;
}
void trade_gateway_position_field::set_strikefrozen(::google::protobuf::int32 value) {
  
  strikefrozen_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.StrikeFrozen)
}

// double StrikeFrozenAmount = 43;
void trade_gateway_position_field::clear_strikefrozenamount() {
  strikefrozenamount_ = 0;
}
double trade_gateway_position_field::strikefrozenamount() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.StrikeFrozenAmount)
  return strikefrozenamount_;
}
void trade_gateway_position_field::set_strikefrozenamount(double value) {
  
  strikefrozenamount_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.StrikeFrozenAmount)
}

// int32 AbandonFrozen = 44;
void trade_gateway_position_field::clear_abandonfrozen() {
  abandonfrozen_ = 0;
}
::google::protobuf::int32 trade_gateway_position_field::abandonfrozen() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.AbandonFrozen)
  return abandonfrozen_;
}
void trade_gateway_position_field::set_abandonfrozen(::google::protobuf::int32 value) {
  
  abandonfrozen_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.AbandonFrozen)
}

// double OptionValue = 45;
void trade_gateway_position_field::clear_optionvalue() {
  optionvalue_ = 0;
}
double trade_gateway_position_field::optionvalue() const {
  // @@protoc_insertion_point(field_get:risk.trade_gateway_position_field.OptionValue)
  return optionvalue_;
}
void trade_gateway_position_field::set_optionvalue(double value) {
  
  optionvalue_ = value;
  // @@protoc_insertion_point(field_set:risk.trade_gateway_position_field.OptionValue)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int investorID_list::kRiskUserFieldNumber;
const int investorID_list::kInvestorIDListFieldNumber;
const int investorID_list::kIsLastFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

investorID_list::investorID_list()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_trade_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.investorID_list)
}
investorID_list::investorID_list(const investorID_list& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      investoridlist_(from.investoridlist_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  riskuser_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.riskuser().size() > 0) {
    riskuser_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.riskuser_);
  }
  islast_ = from.islast_;
  // @@protoc_insertion_point(copy_constructor:risk.investorID_list)
}

void investorID_list::SharedCtor() {
  riskuser_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  islast_ = false;
  _cached_size_ = 0;
}

investorID_list::~investorID_list() {
  // @@protoc_insertion_point(destructor:risk.investorID_list)
  SharedDtor();
}

void investorID_list::SharedDtor() {
  riskuser_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void investorID_list::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* investorID_list::descriptor() {
  protobuf_trade_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trade_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const investorID_list& investorID_list::default_instance() {
  protobuf_trade_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

investorID_list* investorID_list::New(::google::protobuf::Arena* arena) const {
  investorID_list* n = new investorID_list;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void investorID_list::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.investorID_list)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  investoridlist_.Clear();
  riskuser_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  islast_ = false;
  _internal_metadata_.Clear();
}

bool investorID_list::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.investorID_list)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string RiskUser = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_riskuser()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->riskuser().data(), static_cast<int>(this->riskuser().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.investorID_list.RiskUser"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string InvestorIDList = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_investoridlist()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->investoridlist(this->investoridlist_size() - 1).data(),
            static_cast<int>(this->investoridlist(this->investoridlist_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.investorID_list.InvestorIDList"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool IsLast = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &islast_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.investorID_list)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.investorID_list)
  return false;
#undef DO_
}

void investorID_list::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.investorID_list)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string RiskUser = 1;
  if (this->riskuser().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->riskuser().data(), static_cast<int>(this->riskuser().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.investorID_list.RiskUser");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->riskuser(), output);
  }

  // repeated string InvestorIDList = 2;
  for (int i = 0, n = this->investoridlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investoridlist(i).data(), static_cast<int>(this->investoridlist(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.investorID_list.InvestorIDList");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->investoridlist(i), output);
  }

  // bool IsLast = 3;
  if (this->islast() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->islast(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.investorID_list)
}

::google::protobuf::uint8* investorID_list::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.investorID_list)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string RiskUser = 1;
  if (this->riskuser().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->riskuser().data(), static_cast<int>(this->riskuser().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.investorID_list.RiskUser");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->riskuser(), target);
  }

  // repeated string InvestorIDList = 2;
  for (int i = 0, n = this->investoridlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investoridlist(i).data(), static_cast<int>(this->investoridlist(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.investorID_list.InvestorIDList");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->investoridlist(i), target);
  }

  // bool IsLast = 3;
  if (this->islast() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->islast(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.investorID_list)
  return target;
}

size_t investorID_list::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.investorID_list)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string InvestorIDList = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->investoridlist_size());
  for (int i = 0, n = this->investoridlist_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->investoridlist(i));
  }

  // string RiskUser = 1;
  if (this->riskuser().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->riskuser());
  }

  // bool IsLast = 3;
  if (this->islast() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void investorID_list::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.investorID_list)
  GOOGLE_DCHECK_NE(&from, this);
  const investorID_list* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const investorID_list>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.investorID_list)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.investorID_list)
    MergeFrom(*source);
  }
}

void investorID_list::MergeFrom(const investorID_list& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.investorID_list)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  investoridlist_.MergeFrom(from.investoridlist_);
  if (from.riskuser().size() > 0) {

    riskuser_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.riskuser_);
  }
  if (from.islast() != 0) {
    set_islast(from.islast());
  }
}

void investorID_list::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.investorID_list)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void investorID_list::CopyFrom(const investorID_list& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.investorID_list)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool investorID_list::IsInitialized() const {
  return true;
}

void investorID_list::Swap(investorID_list* other) {
  if (other == this) return;
  InternalSwap(other);
}
void investorID_list::InternalSwap(investorID_list* other) {
  using std::swap;
  investoridlist_.InternalSwap(&other->investoridlist_);
  riskuser_.Swap(&other->riskuser_);
  swap(islast_, other->islast_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata investorID_list::GetMetadata() const {
  protobuf_trade_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trade_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// investorID_list

// string RiskUser = 1;
void investorID_list::clear_riskuser() {
  riskuser_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& investorID_list::riskuser() const {
  // @@protoc_insertion_point(field_get:risk.investorID_list.RiskUser)
  return riskuser_.GetNoArena();
}
void investorID_list::set_riskuser(const ::std::string& value) {
  
  riskuser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.investorID_list.RiskUser)
}
#if LANG_CXX11
void investorID_list::set_riskuser(::std::string&& value) {
  
  riskuser_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.investorID_list.RiskUser)
}
#endif
void investorID_list::set_riskuser(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  riskuser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.investorID_list.RiskUser)
}
void investorID_list::set_riskuser(const char* value, size_t size) {
  
  riskuser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.investorID_list.RiskUser)
}
::std::string* investorID_list::mutable_riskuser() {
  
  // @@protoc_insertion_point(field_mutable:risk.investorID_list.RiskUser)
  return riskuser_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* investorID_list::release_riskuser() {
  // @@protoc_insertion_point(field_release:risk.investorID_list.RiskUser)
  
  return riskuser_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void investorID_list::set_allocated_riskuser(::std::string* riskuser) {
  if (riskuser != NULL) {
    
  } else {
    
  }
  riskuser_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), riskuser);
  // @@protoc_insertion_point(field_set_allocated:risk.investorID_list.RiskUser)
}

// repeated string InvestorIDList = 2;
int investorID_list::investoridlist_size() const {
  return investoridlist_.size();
}
void investorID_list::clear_investoridlist() {
  investoridlist_.Clear();
}
const ::std::string& investorID_list::investoridlist(int index) const {
  // @@protoc_insertion_point(field_get:risk.investorID_list.InvestorIDList)
  return investoridlist_.Get(index);
}
::std::string* investorID_list::mutable_investoridlist(int index) {
  // @@protoc_insertion_point(field_mutable:risk.investorID_list.InvestorIDList)
  return investoridlist_.Mutable(index);
}
void investorID_list::set_investoridlist(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:risk.investorID_list.InvestorIDList)
  investoridlist_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void investorID_list::set_investoridlist(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:risk.investorID_list.InvestorIDList)
  investoridlist_.Mutable(index)->assign(std::move(value));
}
#endif
void investorID_list::set_investoridlist(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  investoridlist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:risk.investorID_list.InvestorIDList)
}
void investorID_list::set_investoridlist(int index, const char* value, size_t size) {
  investoridlist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:risk.investorID_list.InvestorIDList)
}
::std::string* investorID_list::add_investoridlist() {
  // @@protoc_insertion_point(field_add_mutable:risk.investorID_list.InvestorIDList)
  return investoridlist_.Add();
}
void investorID_list::add_investoridlist(const ::std::string& value) {
  investoridlist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:risk.investorID_list.InvestorIDList)
}
#if LANG_CXX11
void investorID_list::add_investoridlist(::std::string&& value) {
  investoridlist_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:risk.investorID_list.InvestorIDList)
}
#endif
void investorID_list::add_investoridlist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  investoridlist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:risk.investorID_list.InvestorIDList)
}
void investorID_list::add_investoridlist(const char* value, size_t size) {
  investoridlist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:risk.investorID_list.InvestorIDList)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
investorID_list::investoridlist() const {
  // @@protoc_insertion_point(field_list:risk.investorID_list.InvestorIDList)
  return investoridlist_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
investorID_list::mutable_investoridlist() {
  // @@protoc_insertion_point(field_mutable_list:risk.investorID_list.InvestorIDList)
  return &investoridlist_;
}

// bool IsLast = 3;
void investorID_list::clear_islast() {
  islast_ = false;
}
bool investorID_list::islast() const {
  // @@protoc_insertion_point(field_get:risk.investorID_list.IsLast)
  return islast_;
}
void investorID_list::set_islast(bool value) {
  
  islast_ = value;
  // @@protoc_insertion_point(field_set:risk.investorID_list.IsLast)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int req_trade_login::kRiskeridFieldNumber;
const int req_trade_login::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

req_trade_login::req_trade_login()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_trade_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.req_trade_login)
}
req_trade_login::req_trade_login(const req_trade_login& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  riskerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.riskerid().size() > 0) {
    riskerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.riskerid_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.password().size() > 0) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  // @@protoc_insertion_point(copy_constructor:risk.req_trade_login)
}

void req_trade_login::SharedCtor() {
  riskerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

req_trade_login::~req_trade_login() {
  // @@protoc_insertion_point(destructor:risk.req_trade_login)
  SharedDtor();
}

void req_trade_login::SharedDtor() {
  riskerid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void req_trade_login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* req_trade_login::descriptor() {
  protobuf_trade_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trade_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const req_trade_login& req_trade_login::default_instance() {
  protobuf_trade_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

req_trade_login* req_trade_login::New(::google::protobuf::Arena* arena) const {
  req_trade_login* n = new req_trade_login;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void req_trade_login::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.req_trade_login)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  riskerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool req_trade_login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.req_trade_login)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string riskerid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_riskerid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->riskerid().data(), static_cast<int>(this->riskerid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.req_trade_login.riskerid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string password = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.req_trade_login.password"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.req_trade_login)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.req_trade_login)
  return false;
#undef DO_
}

void req_trade_login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.req_trade_login)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string riskerid = 1;
  if (this->riskerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->riskerid().data(), static_cast<int>(this->riskerid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.req_trade_login.riskerid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->riskerid(), output);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.req_trade_login.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.req_trade_login)
}

::google::protobuf::uint8* req_trade_login::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.req_trade_login)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string riskerid = 1;
  if (this->riskerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->riskerid().data(), static_cast<int>(this->riskerid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.req_trade_login.riskerid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->riskerid(), target);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.req_trade_login.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.req_trade_login)
  return target;
}

size_t req_trade_login::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.req_trade_login)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string riskerid = 1;
  if (this->riskerid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->riskerid());
  }

  // string password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void req_trade_login::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.req_trade_login)
  GOOGLE_DCHECK_NE(&from, this);
  const req_trade_login* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const req_trade_login>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.req_trade_login)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.req_trade_login)
    MergeFrom(*source);
  }
}

void req_trade_login::MergeFrom(const req_trade_login& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.req_trade_login)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.riskerid().size() > 0) {

    riskerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.riskerid_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
}

void req_trade_login::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.req_trade_login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void req_trade_login::CopyFrom(const req_trade_login& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.req_trade_login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool req_trade_login::IsInitialized() const {
  return true;
}

void req_trade_login::Swap(req_trade_login* other) {
  if (other == this) return;
  InternalSwap(other);
}
void req_trade_login::InternalSwap(req_trade_login* other) {
  using std::swap;
  riskerid_.Swap(&other->riskerid_);
  password_.Swap(&other->password_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata req_trade_login::GetMetadata() const {
  protobuf_trade_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trade_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// req_trade_login

// string riskerid = 1;
void req_trade_login::clear_riskerid() {
  riskerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& req_trade_login::riskerid() const {
  // @@protoc_insertion_point(field_get:risk.req_trade_login.riskerid)
  return riskerid_.GetNoArena();
}
void req_trade_login::set_riskerid(const ::std::string& value) {
  
  riskerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.req_trade_login.riskerid)
}
#if LANG_CXX11
void req_trade_login::set_riskerid(::std::string&& value) {
  
  riskerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.req_trade_login.riskerid)
}
#endif
void req_trade_login::set_riskerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  riskerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.req_trade_login.riskerid)
}
void req_trade_login::set_riskerid(const char* value, size_t size) {
  
  riskerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.req_trade_login.riskerid)
}
::std::string* req_trade_login::mutable_riskerid() {
  
  // @@protoc_insertion_point(field_mutable:risk.req_trade_login.riskerid)
  return riskerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* req_trade_login::release_riskerid() {
  // @@protoc_insertion_point(field_release:risk.req_trade_login.riskerid)
  
  return riskerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void req_trade_login::set_allocated_riskerid(::std::string* riskerid) {
  if (riskerid != NULL) {
    
  } else {
    
  }
  riskerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), riskerid);
  // @@protoc_insertion_point(field_set_allocated:risk.req_trade_login.riskerid)
}

// string password = 2;
void req_trade_login::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& req_trade_login::password() const {
  // @@protoc_insertion_point(field_get:risk.req_trade_login.password)
  return password_.GetNoArena();
}
void req_trade_login::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.req_trade_login.password)
}
#if LANG_CXX11
void req_trade_login::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.req_trade_login.password)
}
#endif
void req_trade_login::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.req_trade_login.password)
}
void req_trade_login::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.req_trade_login.password)
}
::std::string* req_trade_login::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:risk.req_trade_login.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* req_trade_login::release_password() {
  // @@protoc_insertion_point(field_release:risk.req_trade_login.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void req_trade_login::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:risk.req_trade_login.password)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rsp_trade_login::kMaxIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rsp_trade_login::rsp_trade_login()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_trade_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.rsp_trade_login)
}
rsp_trade_login::rsp_trade_login(const rsp_trade_login& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  max_id_ = from.max_id_;
  // @@protoc_insertion_point(copy_constructor:risk.rsp_trade_login)
}

void rsp_trade_login::SharedCtor() {
  max_id_ = 0;
  _cached_size_ = 0;
}

rsp_trade_login::~rsp_trade_login() {
  // @@protoc_insertion_point(destructor:risk.rsp_trade_login)
  SharedDtor();
}

void rsp_trade_login::SharedDtor() {
}

void rsp_trade_login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rsp_trade_login::descriptor() {
  protobuf_trade_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trade_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const rsp_trade_login& rsp_trade_login::default_instance() {
  protobuf_trade_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

rsp_trade_login* rsp_trade_login::New(::google::protobuf::Arena* arena) const {
  rsp_trade_login* n = new rsp_trade_login;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rsp_trade_login::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.rsp_trade_login)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  max_id_ = 0;
  _internal_metadata_.Clear();
}

bool rsp_trade_login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.rsp_trade_login)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 max_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.rsp_trade_login)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.rsp_trade_login)
  return false;
#undef DO_
}

void rsp_trade_login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.rsp_trade_login)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 max_id = 1;
  if (this->max_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->max_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.rsp_trade_login)
}

::google::protobuf::uint8* rsp_trade_login::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.rsp_trade_login)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 max_id = 1;
  if (this->max_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->max_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.rsp_trade_login)
  return target;
}

size_t rsp_trade_login::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.rsp_trade_login)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 max_id = 1;
  if (this->max_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rsp_trade_login::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.rsp_trade_login)
  GOOGLE_DCHECK_NE(&from, this);
  const rsp_trade_login* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const rsp_trade_login>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.rsp_trade_login)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.rsp_trade_login)
    MergeFrom(*source);
  }
}

void rsp_trade_login::MergeFrom(const rsp_trade_login& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.rsp_trade_login)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.max_id() != 0) {
    set_max_id(from.max_id());
  }
}

void rsp_trade_login::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.rsp_trade_login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rsp_trade_login::CopyFrom(const rsp_trade_login& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.rsp_trade_login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rsp_trade_login::IsInitialized() const {
  return true;
}

void rsp_trade_login::Swap(rsp_trade_login* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rsp_trade_login::InternalSwap(rsp_trade_login* other) {
  using std::swap;
  swap(max_id_, other->max_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rsp_trade_login::GetMetadata() const {
  protobuf_trade_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trade_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rsp_trade_login

// int32 max_id = 1;
void rsp_trade_login::clear_max_id() {
  max_id_ = 0;
}
::google::protobuf::int32 rsp_trade_login::max_id() const {
  // @@protoc_insertion_point(field_get:risk.rsp_trade_login.max_id)
  return max_id_;
}
void rsp_trade_login::set_max_id(::google::protobuf::int32 value) {
  
  max_id_ = value;
  // @@protoc_insertion_point(field_set:risk.rsp_trade_login.max_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace risk

// @@protoc_insertion_point(global_scope)
