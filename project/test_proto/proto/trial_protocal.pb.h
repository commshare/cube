// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trial_protocal.proto

#ifndef PROTOBUF_trial_5fprotocal_2eproto__INCLUDED
#define PROTOBUF_trial_5fprotocal_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "trade_protocal.pb.h"
#include "quote_protocal.pb.h"
// @@protoc_insertion_point(includes)
namespace risk {
class insmrgnrate_snapshot_field;
class insmrgnrate_snapshot_fieldDefaultTypeInternal;
extern insmrgnrate_snapshot_fieldDefaultTypeInternal _insmrgnrate_snapshot_field_default_instance_;
class position_snapshot_field;
class position_snapshot_fieldDefaultTypeInternal;
extern position_snapshot_fieldDefaultTypeInternal _position_snapshot_field_default_instance_;
class quote_snapshot_field;
class quote_snapshot_fieldDefaultTypeInternal;
extern quote_snapshot_fieldDefaultTypeInternal _quote_snapshot_field_default_instance_;
}  // namespace risk

namespace risk {

namespace protobuf_trial_5fprotocal_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_trial_5fprotocal_2eproto

// ===================================================================

class quote_snapshot_field : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.quote_snapshot_field) */ {
 public:
  quote_snapshot_field();
  virtual ~quote_snapshot_field();

  quote_snapshot_field(const quote_snapshot_field& from);

  inline quote_snapshot_field& operator=(const quote_snapshot_field& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  quote_snapshot_field(quote_snapshot_field&& from) noexcept
    : quote_snapshot_field() {
    *this = ::std::move(from);
  }

  inline quote_snapshot_field& operator=(quote_snapshot_field&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const quote_snapshot_field& default_instance();

  static inline const quote_snapshot_field* internal_default_instance() {
    return reinterpret_cast<const quote_snapshot_field*>(
               &_quote_snapshot_field_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(quote_snapshot_field* other);
  friend void swap(quote_snapshot_field& a, quote_snapshot_field& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline quote_snapshot_field* New() const PROTOBUF_FINAL { return New(NULL); }

  quote_snapshot_field* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const quote_snapshot_field& from);
  void MergeFrom(const quote_snapshot_field& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(quote_snapshot_field* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .risk.quote_gateway_market_field field = 1;
  bool has_field() const;
  void clear_field();
  static const int kFieldFieldNumber = 1;
  const ::risk::quote_gateway_market_field& field() const;
  ::risk::quote_gateway_market_field* mutable_field();
  ::risk::quote_gateway_market_field* release_field();
  void set_allocated_field(::risk::quote_gateway_market_field* field);

  // uint32 timestamp = 2;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  ::google::protobuf::uint32 timestamp() const;
  void set_timestamp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:risk.quote_snapshot_field)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::risk::quote_gateway_market_field* field_;
  ::google::protobuf::uint32 timestamp_;
  mutable int _cached_size_;
  friend struct protobuf_trial_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class position_snapshot_field : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.position_snapshot_field) */ {
 public:
  position_snapshot_field();
  virtual ~position_snapshot_field();

  position_snapshot_field(const position_snapshot_field& from);

  inline position_snapshot_field& operator=(const position_snapshot_field& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  position_snapshot_field(position_snapshot_field&& from) noexcept
    : position_snapshot_field() {
    *this = ::std::move(from);
  }

  inline position_snapshot_field& operator=(position_snapshot_field&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const position_snapshot_field& default_instance();

  static inline const position_snapshot_field* internal_default_instance() {
    return reinterpret_cast<const position_snapshot_field*>(
               &_position_snapshot_field_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(position_snapshot_field* other);
  friend void swap(position_snapshot_field& a, position_snapshot_field& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline position_snapshot_field* New() const PROTOBUF_FINAL { return New(NULL); }

  position_snapshot_field* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const position_snapshot_field& from);
  void MergeFrom(const position_snapshot_field& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(position_snapshot_field* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string exchangeid = 3;
  void clear_exchangeid();
  static const int kExchangeidFieldNumber = 3;
  const ::std::string& exchangeid() const;
  void set_exchangeid(const ::std::string& value);
  #if LANG_CXX11
  void set_exchangeid(::std::string&& value);
  #endif
  void set_exchangeid(const char* value);
  void set_exchangeid(const char* value, size_t size);
  ::std::string* mutable_exchangeid();
  ::std::string* release_exchangeid();
  void set_allocated_exchangeid(::std::string* exchangeid);

  // .risk.trade_gateway_position_field field = 1;
  bool has_field() const;
  void clear_field();
  static const int kFieldFieldNumber = 1;
  const ::risk::trade_gateway_position_field& field() const;
  ::risk::trade_gateway_position_field* mutable_field();
  ::risk::trade_gateway_position_field* release_field();
  void set_allocated_field(::risk::trade_gateway_position_field* field);

  // uint32 timestamp = 2;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  ::google::protobuf::uint32 timestamp() const;
  void set_timestamp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:risk.position_snapshot_field)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr exchangeid_;
  ::risk::trade_gateway_position_field* field_;
  ::google::protobuf::uint32 timestamp_;
  mutable int _cached_size_;
  friend struct protobuf_trial_5fprotocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class insmrgnrate_snapshot_field : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:risk.insmrgnrate_snapshot_field) */ {
 public:
  insmrgnrate_snapshot_field();
  virtual ~insmrgnrate_snapshot_field();

  insmrgnrate_snapshot_field(const insmrgnrate_snapshot_field& from);

  inline insmrgnrate_snapshot_field& operator=(const insmrgnrate_snapshot_field& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  insmrgnrate_snapshot_field(insmrgnrate_snapshot_field&& from) noexcept
    : insmrgnrate_snapshot_field() {
    *this = ::std::move(from);
  }

  inline insmrgnrate_snapshot_field& operator=(insmrgnrate_snapshot_field&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const insmrgnrate_snapshot_field& default_instance();

  static inline const insmrgnrate_snapshot_field* internal_default_instance() {
    return reinterpret_cast<const insmrgnrate_snapshot_field*>(
               &_insmrgnrate_snapshot_field_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(insmrgnrate_snapshot_field* other);
  friend void swap(insmrgnrate_snapshot_field& a, insmrgnrate_snapshot_field& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline insmrgnrate_snapshot_field* New() const PROTOBUF_FINAL { return New(NULL); }

  insmrgnrate_snapshot_field* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const insmrgnrate_snapshot_field& from);
  void MergeFrom(const insmrgnrate_snapshot_field& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(insmrgnrate_snapshot_field* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string tradingday = 1;
  void clear_tradingday();
  static const int kTradingdayFieldNumber = 1;
  const ::std::string& tradingday() const;
  void set_tradingday(const ::std::string& value);
  #if LANG_CXX11
  void set_tradingday(::std::string&& value);
  #endif
  void set_tradingday(const char* value);
  void set_tradingday(const char* value, size_t size);
  ::std::string* mutable_tradingday();
  ::std::string* release_tradingday();
  void set_allocated_tradingday(::std::string* tradingday);

  // string contractcode = 2;
  void clear_contractcode();
  static const int kContractcodeFieldNumber = 2;
  const ::std::string& contractcode() const;
  void set_contractcode(const ::std::string& value);
  #if LANG_CXX11
  void set_contractcode(::std::string&& value);
  #endif
  void set_contractcode(const char* value);
  void set_contractcode(const char* value, size_t size);
  ::std::string* mutable_contractcode();
  ::std::string* release_contractcode();
  void set_allocated_contractcode(::std::string* contractcode);

  // string hedgeflag = 3;
  void clear_hedgeflag();
  static const int kHedgeflagFieldNumber = 3;
  const ::std::string& hedgeflag() const;
  void set_hedgeflag(const ::std::string& value);
  #if LANG_CXX11
  void set_hedgeflag(::std::string&& value);
  #endif
  void set_hedgeflag(const char* value);
  void set_hedgeflag(const char* value, size_t size);
  ::std::string* mutable_hedgeflag();
  ::std::string* release_hedgeflag();
  void set_allocated_hedgeflag(::std::string* hedgeflag);

  // string direction = 4;
  void clear_direction();
  static const int kDirectionFieldNumber = 4;
  const ::std::string& direction() const;
  void set_direction(const ::std::string& value);
  #if LANG_CXX11
  void set_direction(::std::string&& value);
  #endif
  void set_direction(const char* value);
  void set_direction(const char* value, size_t size);
  ::std::string* mutable_direction();
  ::std::string* release_direction();
  void set_allocated_direction(::std::string* direction);

  // double marginrate = 5;
  void clear_marginrate();
  static const int kMarginrateFieldNumber = 5;
  double marginrate() const;
  void set_marginrate(double value);

  // double segmrgn = 6;
  void clear_segmrgn();
  static const int kSegmrgnFieldNumber = 6;
  double segmrgn() const;
  void set_segmrgn(double value);

  // uint32 timestamp = 7;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 7;
  ::google::protobuf::uint32 timestamp() const;
  void set_timestamp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:risk.insmrgnrate_snapshot_field)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr tradingday_;
  ::google::protobuf::internal::ArenaStringPtr contractcode_;
  ::google::protobuf::internal::ArenaStringPtr hedgeflag_;
  ::google::protobuf::internal::ArenaStringPtr direction_;
  double marginrate_;
  double segmrgn_;
  ::google::protobuf::uint32 timestamp_;
  mutable int _cached_size_;
  friend struct protobuf_trial_5fprotocal_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// quote_snapshot_field

// .risk.quote_gateway_market_field field = 1;
inline bool quote_snapshot_field::has_field() const {
  return this != internal_default_instance() && field_ != NULL;
}
inline void quote_snapshot_field::clear_field() {
  if (GetArenaNoVirtual() == NULL && field_ != NULL) delete field_;
  field_ = NULL;
}
inline const ::risk::quote_gateway_market_field& quote_snapshot_field::field() const {
  const ::risk::quote_gateway_market_field* p = field_;
  // @@protoc_insertion_point(field_get:risk.quote_snapshot_field.field)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::quote_gateway_market_field*>(
      &::risk::_quote_gateway_market_field_default_instance_);
}
inline ::risk::quote_gateway_market_field* quote_snapshot_field::mutable_field() {
  
  if (field_ == NULL) {
    field_ = new ::risk::quote_gateway_market_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.quote_snapshot_field.field)
  return field_;
}
inline ::risk::quote_gateway_market_field* quote_snapshot_field::release_field() {
  // @@protoc_insertion_point(field_release:risk.quote_snapshot_field.field)
  
  ::risk::quote_gateway_market_field* temp = field_;
  field_ = NULL;
  return temp;
}
inline void quote_snapshot_field::set_allocated_field(::risk::quote_gateway_market_field* field) {
  delete field_;
  field_ = field;
  if (field) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.quote_snapshot_field.field)
}

// uint32 timestamp = 2;
inline void quote_snapshot_field::clear_timestamp() {
  timestamp_ = 0u;
}
inline ::google::protobuf::uint32 quote_snapshot_field::timestamp() const {
  // @@protoc_insertion_point(field_get:risk.quote_snapshot_field.timestamp)
  return timestamp_;
}
inline void quote_snapshot_field::set_timestamp(::google::protobuf::uint32 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:risk.quote_snapshot_field.timestamp)
}

// -------------------------------------------------------------------

// position_snapshot_field

// .risk.trade_gateway_position_field field = 1;
inline bool position_snapshot_field::has_field() const {
  return this != internal_default_instance() && field_ != NULL;
}
inline void position_snapshot_field::clear_field() {
  if (GetArenaNoVirtual() == NULL && field_ != NULL) delete field_;
  field_ = NULL;
}
inline const ::risk::trade_gateway_position_field& position_snapshot_field::field() const {
  const ::risk::trade_gateway_position_field* p = field_;
  // @@protoc_insertion_point(field_get:risk.position_snapshot_field.field)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::trade_gateway_position_field*>(
      &::risk::_trade_gateway_position_field_default_instance_);
}
inline ::risk::trade_gateway_position_field* position_snapshot_field::mutable_field() {
  
  if (field_ == NULL) {
    field_ = new ::risk::trade_gateway_position_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.position_snapshot_field.field)
  return field_;
}
inline ::risk::trade_gateway_position_field* position_snapshot_field::release_field() {
  // @@protoc_insertion_point(field_release:risk.position_snapshot_field.field)
  
  ::risk::trade_gateway_position_field* temp = field_;
  field_ = NULL;
  return temp;
}
inline void position_snapshot_field::set_allocated_field(::risk::trade_gateway_position_field* field) {
  delete field_;
  field_ = field;
  if (field) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.position_snapshot_field.field)
}

// uint32 timestamp = 2;
inline void position_snapshot_field::clear_timestamp() {
  timestamp_ = 0u;
}
inline ::google::protobuf::uint32 position_snapshot_field::timestamp() const {
  // @@protoc_insertion_point(field_get:risk.position_snapshot_field.timestamp)
  return timestamp_;
}
inline void position_snapshot_field::set_timestamp(::google::protobuf::uint32 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:risk.position_snapshot_field.timestamp)
}

// string exchangeid = 3;
inline void position_snapshot_field::clear_exchangeid() {
  exchangeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& position_snapshot_field::exchangeid() const {
  // @@protoc_insertion_point(field_get:risk.position_snapshot_field.exchangeid)
  return exchangeid_.GetNoArena();
}
inline void position_snapshot_field::set_exchangeid(const ::std::string& value) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.position_snapshot_field.exchangeid)
}
#if LANG_CXX11
inline void position_snapshot_field::set_exchangeid(::std::string&& value) {
  
  exchangeid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.position_snapshot_field.exchangeid)
}
#endif
inline void position_snapshot_field::set_exchangeid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.position_snapshot_field.exchangeid)
}
inline void position_snapshot_field::set_exchangeid(const char* value, size_t size) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.position_snapshot_field.exchangeid)
}
inline ::std::string* position_snapshot_field::mutable_exchangeid() {
  
  // @@protoc_insertion_point(field_mutable:risk.position_snapshot_field.exchangeid)
  return exchangeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* position_snapshot_field::release_exchangeid() {
  // @@protoc_insertion_point(field_release:risk.position_snapshot_field.exchangeid)
  
  return exchangeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void position_snapshot_field::set_allocated_exchangeid(::std::string* exchangeid) {
  if (exchangeid != NULL) {
    
  } else {
    
  }
  exchangeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchangeid);
  // @@protoc_insertion_point(field_set_allocated:risk.position_snapshot_field.exchangeid)
}

// -------------------------------------------------------------------

// insmrgnrate_snapshot_field

// string tradingday = 1;
inline void insmrgnrate_snapshot_field::clear_tradingday() {
  tradingday_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& insmrgnrate_snapshot_field::tradingday() const {
  // @@protoc_insertion_point(field_get:risk.insmrgnrate_snapshot_field.tradingday)
  return tradingday_.GetNoArena();
}
inline void insmrgnrate_snapshot_field::set_tradingday(const ::std::string& value) {
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.insmrgnrate_snapshot_field.tradingday)
}
#if LANG_CXX11
inline void insmrgnrate_snapshot_field::set_tradingday(::std::string&& value) {
  
  tradingday_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.insmrgnrate_snapshot_field.tradingday)
}
#endif
inline void insmrgnrate_snapshot_field::set_tradingday(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.insmrgnrate_snapshot_field.tradingday)
}
inline void insmrgnrate_snapshot_field::set_tradingday(const char* value, size_t size) {
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.insmrgnrate_snapshot_field.tradingday)
}
inline ::std::string* insmrgnrate_snapshot_field::mutable_tradingday() {
  
  // @@protoc_insertion_point(field_mutable:risk.insmrgnrate_snapshot_field.tradingday)
  return tradingday_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* insmrgnrate_snapshot_field::release_tradingday() {
  // @@protoc_insertion_point(field_release:risk.insmrgnrate_snapshot_field.tradingday)
  
  return tradingday_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void insmrgnrate_snapshot_field::set_allocated_tradingday(::std::string* tradingday) {
  if (tradingday != NULL) {
    
  } else {
    
  }
  tradingday_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradingday);
  // @@protoc_insertion_point(field_set_allocated:risk.insmrgnrate_snapshot_field.tradingday)
}

// string contractcode = 2;
inline void insmrgnrate_snapshot_field::clear_contractcode() {
  contractcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& insmrgnrate_snapshot_field::contractcode() const {
  // @@protoc_insertion_point(field_get:risk.insmrgnrate_snapshot_field.contractcode)
  return contractcode_.GetNoArena();
}
inline void insmrgnrate_snapshot_field::set_contractcode(const ::std::string& value) {
  
  contractcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.insmrgnrate_snapshot_field.contractcode)
}
#if LANG_CXX11
inline void insmrgnrate_snapshot_field::set_contractcode(::std::string&& value) {
  
  contractcode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.insmrgnrate_snapshot_field.contractcode)
}
#endif
inline void insmrgnrate_snapshot_field::set_contractcode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  contractcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.insmrgnrate_snapshot_field.contractcode)
}
inline void insmrgnrate_snapshot_field::set_contractcode(const char* value, size_t size) {
  
  contractcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.insmrgnrate_snapshot_field.contractcode)
}
inline ::std::string* insmrgnrate_snapshot_field::mutable_contractcode() {
  
  // @@protoc_insertion_point(field_mutable:risk.insmrgnrate_snapshot_field.contractcode)
  return contractcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* insmrgnrate_snapshot_field::release_contractcode() {
  // @@protoc_insertion_point(field_release:risk.insmrgnrate_snapshot_field.contractcode)
  
  return contractcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void insmrgnrate_snapshot_field::set_allocated_contractcode(::std::string* contractcode) {
  if (contractcode != NULL) {
    
  } else {
    
  }
  contractcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contractcode);
  // @@protoc_insertion_point(field_set_allocated:risk.insmrgnrate_snapshot_field.contractcode)
}

// string hedgeflag = 3;
inline void insmrgnrate_snapshot_field::clear_hedgeflag() {
  hedgeflag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& insmrgnrate_snapshot_field::hedgeflag() const {
  // @@protoc_insertion_point(field_get:risk.insmrgnrate_snapshot_field.hedgeflag)
  return hedgeflag_.GetNoArena();
}
inline void insmrgnrate_snapshot_field::set_hedgeflag(const ::std::string& value) {
  
  hedgeflag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.insmrgnrate_snapshot_field.hedgeflag)
}
#if LANG_CXX11
inline void insmrgnrate_snapshot_field::set_hedgeflag(::std::string&& value) {
  
  hedgeflag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.insmrgnrate_snapshot_field.hedgeflag)
}
#endif
inline void insmrgnrate_snapshot_field::set_hedgeflag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hedgeflag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.insmrgnrate_snapshot_field.hedgeflag)
}
inline void insmrgnrate_snapshot_field::set_hedgeflag(const char* value, size_t size) {
  
  hedgeflag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.insmrgnrate_snapshot_field.hedgeflag)
}
inline ::std::string* insmrgnrate_snapshot_field::mutable_hedgeflag() {
  
  // @@protoc_insertion_point(field_mutable:risk.insmrgnrate_snapshot_field.hedgeflag)
  return hedgeflag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* insmrgnrate_snapshot_field::release_hedgeflag() {
  // @@protoc_insertion_point(field_release:risk.insmrgnrate_snapshot_field.hedgeflag)
  
  return hedgeflag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void insmrgnrate_snapshot_field::set_allocated_hedgeflag(::std::string* hedgeflag) {
  if (hedgeflag != NULL) {
    
  } else {
    
  }
  hedgeflag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hedgeflag);
  // @@protoc_insertion_point(field_set_allocated:risk.insmrgnrate_snapshot_field.hedgeflag)
}

// string direction = 4;
inline void insmrgnrate_snapshot_field::clear_direction() {
  direction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& insmrgnrate_snapshot_field::direction() const {
  // @@protoc_insertion_point(field_get:risk.insmrgnrate_snapshot_field.direction)
  return direction_.GetNoArena();
}
inline void insmrgnrate_snapshot_field::set_direction(const ::std::string& value) {
  
  direction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.insmrgnrate_snapshot_field.direction)
}
#if LANG_CXX11
inline void insmrgnrate_snapshot_field::set_direction(::std::string&& value) {
  
  direction_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.insmrgnrate_snapshot_field.direction)
}
#endif
inline void insmrgnrate_snapshot_field::set_direction(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  direction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.insmrgnrate_snapshot_field.direction)
}
inline void insmrgnrate_snapshot_field::set_direction(const char* value, size_t size) {
  
  direction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.insmrgnrate_snapshot_field.direction)
}
inline ::std::string* insmrgnrate_snapshot_field::mutable_direction() {
  
  // @@protoc_insertion_point(field_mutable:risk.insmrgnrate_snapshot_field.direction)
  return direction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* insmrgnrate_snapshot_field::release_direction() {
  // @@protoc_insertion_point(field_release:risk.insmrgnrate_snapshot_field.direction)
  
  return direction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void insmrgnrate_snapshot_field::set_allocated_direction(::std::string* direction) {
  if (direction != NULL) {
    
  } else {
    
  }
  direction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), direction);
  // @@protoc_insertion_point(field_set_allocated:risk.insmrgnrate_snapshot_field.direction)
}

// double marginrate = 5;
inline void insmrgnrate_snapshot_field::clear_marginrate() {
  marginrate_ = 0;
}
inline double insmrgnrate_snapshot_field::marginrate() const {
  // @@protoc_insertion_point(field_get:risk.insmrgnrate_snapshot_field.marginrate)
  return marginrate_;
}
inline void insmrgnrate_snapshot_field::set_marginrate(double value) {
  
  marginrate_ = value;
  // @@protoc_insertion_point(field_set:risk.insmrgnrate_snapshot_field.marginrate)
}

// double segmrgn = 6;
inline void insmrgnrate_snapshot_field::clear_segmrgn() {
  segmrgn_ = 0;
}
inline double insmrgnrate_snapshot_field::segmrgn() const {
  // @@protoc_insertion_point(field_get:risk.insmrgnrate_snapshot_field.segmrgn)
  return segmrgn_;
}
inline void insmrgnrate_snapshot_field::set_segmrgn(double value) {
  
  segmrgn_ = value;
  // @@protoc_insertion_point(field_set:risk.insmrgnrate_snapshot_field.segmrgn)
}

// uint32 timestamp = 7;
inline void insmrgnrate_snapshot_field::clear_timestamp() {
  timestamp_ = 0u;
}
inline ::google::protobuf::uint32 insmrgnrate_snapshot_field::timestamp() const {
  // @@protoc_insertion_point(field_get:risk.insmrgnrate_snapshot_field.timestamp)
  return timestamp_;
}
inline void insmrgnrate_snapshot_field::set_timestamp(::google::protobuf::uint32 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:risk.insmrgnrate_snapshot_field.timestamp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace risk

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_trial_5fprotocal_2eproto__INCLUDED
