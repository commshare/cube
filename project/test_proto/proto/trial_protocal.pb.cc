// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trial_protocal.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "trial_protocal.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace risk {
class quote_snapshot_fieldDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<quote_snapshot_field>
     _instance;
} _quote_snapshot_field_default_instance_;
class position_snapshot_fieldDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<position_snapshot_field>
     _instance;
} _position_snapshot_field_default_instance_;
class insmrgnrate_snapshot_fieldDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<insmrgnrate_snapshot_field>
     _instance;
} _insmrgnrate_snapshot_field_default_instance_;

namespace protobuf_trial_5fprotocal_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(quote_snapshot_field, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(quote_snapshot_field, field_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(quote_snapshot_field, timestamp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(position_snapshot_field, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(position_snapshot_field, field_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(position_snapshot_field, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(position_snapshot_field, exchangeid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(insmrgnrate_snapshot_field, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(insmrgnrate_snapshot_field, tradingday_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(insmrgnrate_snapshot_field, contractcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(insmrgnrate_snapshot_field, hedgeflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(insmrgnrate_snapshot_field, direction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(insmrgnrate_snapshot_field, marginrate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(insmrgnrate_snapshot_field, segmrgn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(insmrgnrate_snapshot_field, timestamp_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(quote_snapshot_field)},
  { 7, -1, sizeof(position_snapshot_field)},
  { 15, -1, sizeof(insmrgnrate_snapshot_field)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_quote_snapshot_field_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_position_snapshot_field_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_insmrgnrate_snapshot_field_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "trial_protocal.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::risk::protobuf_trade_5fprotocal_2eproto::InitDefaults();
  ::risk::protobuf_quote_5fprotocal_2eproto::InitDefaults();
  _quote_snapshot_field_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_quote_snapshot_field_default_instance_);_position_snapshot_field_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_position_snapshot_field_default_instance_);_insmrgnrate_snapshot_field_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_insmrgnrate_snapshot_field_default_instance_);_quote_snapshot_field_default_instance_._instance.get_mutable()->field_ = const_cast< ::risk::quote_gateway_market_field*>(
      ::risk::quote_gateway_market_field::internal_default_instance());
  _position_snapshot_field_default_instance_._instance.get_mutable()->field_ = const_cast< ::risk::trade_gateway_position_field*>(
      ::risk::trade_gateway_position_field::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\024trial_protocal.proto\022\004risk\032\024trade_prot"
      "ocal.proto\032\024quote_protocal.proto\"Z\n\024quot"
      "e_snapshot_field\022/\n\005field\030\001 \001(\0132 .risk.q"
      "uote_gateway_market_field\022\021\n\ttimestamp\030\002"
      " \001(\r\"s\n\027position_snapshot_field\0221\n\005field"
      "\030\001 \001(\0132\".risk.trade_gateway_position_fie"
      "ld\022\021\n\ttimestamp\030\002 \001(\r\022\022\n\nexchangeid\030\003 \001("
      "\t\"\244\001\n\032insmrgnrate_snapshot_field\022\022\n\ntrad"
      "ingday\030\001 \001(\t\022\024\n\014contractcode\030\002 \001(\t\022\021\n\the"
      "dgeflag\030\003 \001(\t\022\021\n\tdirection\030\004 \001(\t\022\022\n\nmarg"
      "inrate\030\005 \001(\001\022\017\n\007segmrgn\030\006 \001(\001\022\021\n\ttimesta"
      "mp\030\007 \001(\rb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 456);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "trial_protocal.proto", &protobuf_RegisterTypes);
  ::risk::protobuf_trade_5fprotocal_2eproto::AddDescriptors();
  ::risk::protobuf_quote_5fprotocal_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_trial_5fprotocal_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int quote_snapshot_field::kFieldFieldNumber;
const int quote_snapshot_field::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

quote_snapshot_field::quote_snapshot_field()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_trial_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.quote_snapshot_field)
}
quote_snapshot_field::quote_snapshot_field(const quote_snapshot_field& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_field()) {
    field_ = new ::risk::quote_gateway_market_field(*from.field_);
  } else {
    field_ = NULL;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:risk.quote_snapshot_field)
}

void quote_snapshot_field::SharedCtor() {
  ::memset(&field_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&field_)) + sizeof(timestamp_));
  _cached_size_ = 0;
}

quote_snapshot_field::~quote_snapshot_field() {
  // @@protoc_insertion_point(destructor:risk.quote_snapshot_field)
  SharedDtor();
}

void quote_snapshot_field::SharedDtor() {
  if (this != internal_default_instance()) delete field_;
}

void quote_snapshot_field::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* quote_snapshot_field::descriptor() {
  protobuf_trial_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trial_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const quote_snapshot_field& quote_snapshot_field::default_instance() {
  protobuf_trial_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

quote_snapshot_field* quote_snapshot_field::New(::google::protobuf::Arena* arena) const {
  quote_snapshot_field* n = new quote_snapshot_field;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void quote_snapshot_field::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.quote_snapshot_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && field_ != NULL) {
    delete field_;
  }
  field_ = NULL;
  timestamp_ = 0u;
  _internal_metadata_.Clear();
}

bool quote_snapshot_field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.quote_snapshot_field)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .risk.quote_gateway_market_field field = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.quote_snapshot_field)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.quote_snapshot_field)
  return false;
#undef DO_
}

void quote_snapshot_field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.quote_snapshot_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .risk.quote_gateway_market_field field = 1;
  if (this->has_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->field_, output);
  }

  // uint32 timestamp = 2;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timestamp(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.quote_snapshot_field)
}

::google::protobuf::uint8* quote_snapshot_field::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.quote_snapshot_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .risk.quote_gateway_market_field field = 1;
  if (this->has_field()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->field_, deterministic, target);
  }

  // uint32 timestamp = 2;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timestamp(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.quote_snapshot_field)
  return target;
}

size_t quote_snapshot_field::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.quote_snapshot_field)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .risk.quote_gateway_market_field field = 1;
  if (this->has_field()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->field_);
  }

  // uint32 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void quote_snapshot_field::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.quote_snapshot_field)
  GOOGLE_DCHECK_NE(&from, this);
  const quote_snapshot_field* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const quote_snapshot_field>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.quote_snapshot_field)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.quote_snapshot_field)
    MergeFrom(*source);
  }
}

void quote_snapshot_field::MergeFrom(const quote_snapshot_field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.quote_snapshot_field)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_field()) {
    mutable_field()->::risk::quote_gateway_market_field::MergeFrom(from.field());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void quote_snapshot_field::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.quote_snapshot_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void quote_snapshot_field::CopyFrom(const quote_snapshot_field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.quote_snapshot_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool quote_snapshot_field::IsInitialized() const {
  return true;
}

void quote_snapshot_field::Swap(quote_snapshot_field* other) {
  if (other == this) return;
  InternalSwap(other);
}
void quote_snapshot_field::InternalSwap(quote_snapshot_field* other) {
  using std::swap;
  swap(field_, other->field_);
  swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata quote_snapshot_field::GetMetadata() const {
  protobuf_trial_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trial_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// quote_snapshot_field

// .risk.quote_gateway_market_field field = 1;
bool quote_snapshot_field::has_field() const {
  return this != internal_default_instance() && field_ != NULL;
}
void quote_snapshot_field::clear_field() {
  if (GetArenaNoVirtual() == NULL && field_ != NULL) delete field_;
  field_ = NULL;
}
const ::risk::quote_gateway_market_field& quote_snapshot_field::field() const {
  const ::risk::quote_gateway_market_field* p = field_;
  // @@protoc_insertion_point(field_get:risk.quote_snapshot_field.field)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::quote_gateway_market_field*>(
      &::risk::_quote_gateway_market_field_default_instance_);
}
::risk::quote_gateway_market_field* quote_snapshot_field::mutable_field() {
  
  if (field_ == NULL) {
    field_ = new ::risk::quote_gateway_market_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.quote_snapshot_field.field)
  return field_;
}
::risk::quote_gateway_market_field* quote_snapshot_field::release_field() {
  // @@protoc_insertion_point(field_release:risk.quote_snapshot_field.field)
  
  ::risk::quote_gateway_market_field* temp = field_;
  field_ = NULL;
  return temp;
}
void quote_snapshot_field::set_allocated_field(::risk::quote_gateway_market_field* field) {
  delete field_;
  field_ = field;
  if (field) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.quote_snapshot_field.field)
}

// uint32 timestamp = 2;
void quote_snapshot_field::clear_timestamp() {
  timestamp_ = 0u;
}
::google::protobuf::uint32 quote_snapshot_field::timestamp() const {
  // @@protoc_insertion_point(field_get:risk.quote_snapshot_field.timestamp)
  return timestamp_;
}
void quote_snapshot_field::set_timestamp(::google::protobuf::uint32 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:risk.quote_snapshot_field.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int position_snapshot_field::kFieldFieldNumber;
const int position_snapshot_field::kTimestampFieldNumber;
const int position_snapshot_field::kExchangeidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

position_snapshot_field::position_snapshot_field()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_trial_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.position_snapshot_field)
}
position_snapshot_field::position_snapshot_field(const position_snapshot_field& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  exchangeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.exchangeid().size() > 0) {
    exchangeid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchangeid_);
  }
  if (from.has_field()) {
    field_ = new ::risk::trade_gateway_position_field(*from.field_);
  } else {
    field_ = NULL;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:risk.position_snapshot_field)
}

void position_snapshot_field::SharedCtor() {
  exchangeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&field_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&field_)) + sizeof(timestamp_));
  _cached_size_ = 0;
}

position_snapshot_field::~position_snapshot_field() {
  // @@protoc_insertion_point(destructor:risk.position_snapshot_field)
  SharedDtor();
}

void position_snapshot_field::SharedDtor() {
  exchangeid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete field_;
}

void position_snapshot_field::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* position_snapshot_field::descriptor() {
  protobuf_trial_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trial_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const position_snapshot_field& position_snapshot_field::default_instance() {
  protobuf_trial_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

position_snapshot_field* position_snapshot_field::New(::google::protobuf::Arena* arena) const {
  position_snapshot_field* n = new position_snapshot_field;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void position_snapshot_field::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.position_snapshot_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  exchangeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && field_ != NULL) {
    delete field_;
  }
  field_ = NULL;
  timestamp_ = 0u;
  _internal_metadata_.Clear();
}

bool position_snapshot_field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.position_snapshot_field)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .risk.trade_gateway_position_field field = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string exchangeid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangeid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchangeid().data(), static_cast<int>(this->exchangeid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.position_snapshot_field.exchangeid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.position_snapshot_field)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.position_snapshot_field)
  return false;
#undef DO_
}

void position_snapshot_field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.position_snapshot_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .risk.trade_gateway_position_field field = 1;
  if (this->has_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->field_, output);
  }

  // uint32 timestamp = 2;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timestamp(), output);
  }

  // string exchangeid = 3;
  if (this->exchangeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchangeid().data(), static_cast<int>(this->exchangeid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.position_snapshot_field.exchangeid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->exchangeid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.position_snapshot_field)
}

::google::protobuf::uint8* position_snapshot_field::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.position_snapshot_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .risk.trade_gateway_position_field field = 1;
  if (this->has_field()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->field_, deterministic, target);
  }

  // uint32 timestamp = 2;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timestamp(), target);
  }

  // string exchangeid = 3;
  if (this->exchangeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchangeid().data(), static_cast<int>(this->exchangeid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.position_snapshot_field.exchangeid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->exchangeid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.position_snapshot_field)
  return target;
}

size_t position_snapshot_field::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.position_snapshot_field)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string exchangeid = 3;
  if (this->exchangeid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchangeid());
  }

  // .risk.trade_gateway_position_field field = 1;
  if (this->has_field()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->field_);
  }

  // uint32 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void position_snapshot_field::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.position_snapshot_field)
  GOOGLE_DCHECK_NE(&from, this);
  const position_snapshot_field* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const position_snapshot_field>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.position_snapshot_field)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.position_snapshot_field)
    MergeFrom(*source);
  }
}

void position_snapshot_field::MergeFrom(const position_snapshot_field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.position_snapshot_field)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.exchangeid().size() > 0) {

    exchangeid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchangeid_);
  }
  if (from.has_field()) {
    mutable_field()->::risk::trade_gateway_position_field::MergeFrom(from.field());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void position_snapshot_field::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.position_snapshot_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void position_snapshot_field::CopyFrom(const position_snapshot_field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.position_snapshot_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool position_snapshot_field::IsInitialized() const {
  return true;
}

void position_snapshot_field::Swap(position_snapshot_field* other) {
  if (other == this) return;
  InternalSwap(other);
}
void position_snapshot_field::InternalSwap(position_snapshot_field* other) {
  using std::swap;
  exchangeid_.Swap(&other->exchangeid_);
  swap(field_, other->field_);
  swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata position_snapshot_field::GetMetadata() const {
  protobuf_trial_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trial_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// position_snapshot_field

// .risk.trade_gateway_position_field field = 1;
bool position_snapshot_field::has_field() const {
  return this != internal_default_instance() && field_ != NULL;
}
void position_snapshot_field::clear_field() {
  if (GetArenaNoVirtual() == NULL && field_ != NULL) delete field_;
  field_ = NULL;
}
const ::risk::trade_gateway_position_field& position_snapshot_field::field() const {
  const ::risk::trade_gateway_position_field* p = field_;
  // @@protoc_insertion_point(field_get:risk.position_snapshot_field.field)
  return p != NULL ? *p : *reinterpret_cast<const ::risk::trade_gateway_position_field*>(
      &::risk::_trade_gateway_position_field_default_instance_);
}
::risk::trade_gateway_position_field* position_snapshot_field::mutable_field() {
  
  if (field_ == NULL) {
    field_ = new ::risk::trade_gateway_position_field;
  }
  // @@protoc_insertion_point(field_mutable:risk.position_snapshot_field.field)
  return field_;
}
::risk::trade_gateway_position_field* position_snapshot_field::release_field() {
  // @@protoc_insertion_point(field_release:risk.position_snapshot_field.field)
  
  ::risk::trade_gateway_position_field* temp = field_;
  field_ = NULL;
  return temp;
}
void position_snapshot_field::set_allocated_field(::risk::trade_gateway_position_field* field) {
  delete field_;
  field_ = field;
  if (field) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:risk.position_snapshot_field.field)
}

// uint32 timestamp = 2;
void position_snapshot_field::clear_timestamp() {
  timestamp_ = 0u;
}
::google::protobuf::uint32 position_snapshot_field::timestamp() const {
  // @@protoc_insertion_point(field_get:risk.position_snapshot_field.timestamp)
  return timestamp_;
}
void position_snapshot_field::set_timestamp(::google::protobuf::uint32 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:risk.position_snapshot_field.timestamp)
}

// string exchangeid = 3;
void position_snapshot_field::clear_exchangeid() {
  exchangeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& position_snapshot_field::exchangeid() const {
  // @@protoc_insertion_point(field_get:risk.position_snapshot_field.exchangeid)
  return exchangeid_.GetNoArena();
}
void position_snapshot_field::set_exchangeid(const ::std::string& value) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.position_snapshot_field.exchangeid)
}
#if LANG_CXX11
void position_snapshot_field::set_exchangeid(::std::string&& value) {
  
  exchangeid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.position_snapshot_field.exchangeid)
}
#endif
void position_snapshot_field::set_exchangeid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.position_snapshot_field.exchangeid)
}
void position_snapshot_field::set_exchangeid(const char* value, size_t size) {
  
  exchangeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.position_snapshot_field.exchangeid)
}
::std::string* position_snapshot_field::mutable_exchangeid() {
  
  // @@protoc_insertion_point(field_mutable:risk.position_snapshot_field.exchangeid)
  return exchangeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* position_snapshot_field::release_exchangeid() {
  // @@protoc_insertion_point(field_release:risk.position_snapshot_field.exchangeid)
  
  return exchangeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void position_snapshot_field::set_allocated_exchangeid(::std::string* exchangeid) {
  if (exchangeid != NULL) {
    
  } else {
    
  }
  exchangeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchangeid);
  // @@protoc_insertion_point(field_set_allocated:risk.position_snapshot_field.exchangeid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int insmrgnrate_snapshot_field::kTradingdayFieldNumber;
const int insmrgnrate_snapshot_field::kContractcodeFieldNumber;
const int insmrgnrate_snapshot_field::kHedgeflagFieldNumber;
const int insmrgnrate_snapshot_field::kDirectionFieldNumber;
const int insmrgnrate_snapshot_field::kMarginrateFieldNumber;
const int insmrgnrate_snapshot_field::kSegmrgnFieldNumber;
const int insmrgnrate_snapshot_field::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

insmrgnrate_snapshot_field::insmrgnrate_snapshot_field()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_trial_5fprotocal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:risk.insmrgnrate_snapshot_field)
}
insmrgnrate_snapshot_field::insmrgnrate_snapshot_field(const insmrgnrate_snapshot_field& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tradingday_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tradingday().size() > 0) {
    tradingday_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradingday_);
  }
  contractcode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.contractcode().size() > 0) {
    contractcode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contractcode_);
  }
  hedgeflag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hedgeflag().size() > 0) {
    hedgeflag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hedgeflag_);
  }
  direction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.direction().size() > 0) {
    direction_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.direction_);
  }
  ::memcpy(&marginrate_, &from.marginrate_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&marginrate_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:risk.insmrgnrate_snapshot_field)
}

void insmrgnrate_snapshot_field::SharedCtor() {
  tradingday_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contractcode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hedgeflag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  direction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&marginrate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&marginrate_)) + sizeof(timestamp_));
  _cached_size_ = 0;
}

insmrgnrate_snapshot_field::~insmrgnrate_snapshot_field() {
  // @@protoc_insertion_point(destructor:risk.insmrgnrate_snapshot_field)
  SharedDtor();
}

void insmrgnrate_snapshot_field::SharedDtor() {
  tradingday_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contractcode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hedgeflag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  direction_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void insmrgnrate_snapshot_field::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* insmrgnrate_snapshot_field::descriptor() {
  protobuf_trial_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trial_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const insmrgnrate_snapshot_field& insmrgnrate_snapshot_field::default_instance() {
  protobuf_trial_5fprotocal_2eproto::InitDefaults();
  return *internal_default_instance();
}

insmrgnrate_snapshot_field* insmrgnrate_snapshot_field::New(::google::protobuf::Arena* arena) const {
  insmrgnrate_snapshot_field* n = new insmrgnrate_snapshot_field;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void insmrgnrate_snapshot_field::Clear() {
// @@protoc_insertion_point(message_clear_start:risk.insmrgnrate_snapshot_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tradingday_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contractcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hedgeflag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  direction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&marginrate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&marginrate_)) + sizeof(timestamp_));
  _internal_metadata_.Clear();
}

bool insmrgnrate_snapshot_field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:risk.insmrgnrate_snapshot_field)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string tradingday = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradingday()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tradingday().data(), static_cast<int>(this->tradingday().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.insmrgnrate_snapshot_field.tradingday"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string contractcode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contractcode()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->contractcode().data(), static_cast<int>(this->contractcode().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.insmrgnrate_snapshot_field.contractcode"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string hedgeflag = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hedgeflag()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hedgeflag().data(), static_cast<int>(this->hedgeflag().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.insmrgnrate_snapshot_field.hedgeflag"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string direction = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_direction()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->direction().data(), static_cast<int>(this->direction().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "risk.insmrgnrate_snapshot_field.direction"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double marginrate = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &marginrate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double segmrgn = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &segmrgn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 timestamp = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:risk.insmrgnrate_snapshot_field)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:risk.insmrgnrate_snapshot_field)
  return false;
#undef DO_
}

void insmrgnrate_snapshot_field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:risk.insmrgnrate_snapshot_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tradingday = 1;
  if (this->tradingday().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradingday().data(), static_cast<int>(this->tradingday().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.insmrgnrate_snapshot_field.tradingday");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tradingday(), output);
  }

  // string contractcode = 2;
  if (this->contractcode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->contractcode().data(), static_cast<int>(this->contractcode().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.insmrgnrate_snapshot_field.contractcode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->contractcode(), output);
  }

  // string hedgeflag = 3;
  if (this->hedgeflag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hedgeflag().data(), static_cast<int>(this->hedgeflag().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.insmrgnrate_snapshot_field.hedgeflag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->hedgeflag(), output);
  }

  // string direction = 4;
  if (this->direction().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->direction().data(), static_cast<int>(this->direction().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.insmrgnrate_snapshot_field.direction");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->direction(), output);
  }

  // double marginrate = 5;
  if (this->marginrate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->marginrate(), output);
  }

  // double segmrgn = 6;
  if (this->segmrgn() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->segmrgn(), output);
  }

  // uint32 timestamp = 7;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->timestamp(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:risk.insmrgnrate_snapshot_field)
}

::google::protobuf::uint8* insmrgnrate_snapshot_field::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:risk.insmrgnrate_snapshot_field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tradingday = 1;
  if (this->tradingday().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradingday().data(), static_cast<int>(this->tradingday().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.insmrgnrate_snapshot_field.tradingday");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tradingday(), target);
  }

  // string contractcode = 2;
  if (this->contractcode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->contractcode().data(), static_cast<int>(this->contractcode().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.insmrgnrate_snapshot_field.contractcode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->contractcode(), target);
  }

  // string hedgeflag = 3;
  if (this->hedgeflag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hedgeflag().data(), static_cast<int>(this->hedgeflag().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.insmrgnrate_snapshot_field.hedgeflag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->hedgeflag(), target);
  }

  // string direction = 4;
  if (this->direction().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->direction().data(), static_cast<int>(this->direction().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "risk.insmrgnrate_snapshot_field.direction");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->direction(), target);
  }

  // double marginrate = 5;
  if (this->marginrate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->marginrate(), target);
  }

  // double segmrgn = 6;
  if (this->segmrgn() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->segmrgn(), target);
  }

  // uint32 timestamp = 7;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->timestamp(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:risk.insmrgnrate_snapshot_field)
  return target;
}

size_t insmrgnrate_snapshot_field::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:risk.insmrgnrate_snapshot_field)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string tradingday = 1;
  if (this->tradingday().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tradingday());
  }

  // string contractcode = 2;
  if (this->contractcode().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->contractcode());
  }

  // string hedgeflag = 3;
  if (this->hedgeflag().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hedgeflag());
  }

  // string direction = 4;
  if (this->direction().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->direction());
  }

  // double marginrate = 5;
  if (this->marginrate() != 0) {
    total_size += 1 + 8;
  }

  // double segmrgn = 6;
  if (this->segmrgn() != 0) {
    total_size += 1 + 8;
  }

  // uint32 timestamp = 7;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void insmrgnrate_snapshot_field::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:risk.insmrgnrate_snapshot_field)
  GOOGLE_DCHECK_NE(&from, this);
  const insmrgnrate_snapshot_field* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const insmrgnrate_snapshot_field>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:risk.insmrgnrate_snapshot_field)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:risk.insmrgnrate_snapshot_field)
    MergeFrom(*source);
  }
}

void insmrgnrate_snapshot_field::MergeFrom(const insmrgnrate_snapshot_field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:risk.insmrgnrate_snapshot_field)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tradingday().size() > 0) {

    tradingday_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradingday_);
  }
  if (from.contractcode().size() > 0) {

    contractcode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contractcode_);
  }
  if (from.hedgeflag().size() > 0) {

    hedgeflag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hedgeflag_);
  }
  if (from.direction().size() > 0) {

    direction_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.direction_);
  }
  if (from.marginrate() != 0) {
    set_marginrate(from.marginrate());
  }
  if (from.segmrgn() != 0) {
    set_segmrgn(from.segmrgn());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void insmrgnrate_snapshot_field::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:risk.insmrgnrate_snapshot_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void insmrgnrate_snapshot_field::CopyFrom(const insmrgnrate_snapshot_field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:risk.insmrgnrate_snapshot_field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool insmrgnrate_snapshot_field::IsInitialized() const {
  return true;
}

void insmrgnrate_snapshot_field::Swap(insmrgnrate_snapshot_field* other) {
  if (other == this) return;
  InternalSwap(other);
}
void insmrgnrate_snapshot_field::InternalSwap(insmrgnrate_snapshot_field* other) {
  using std::swap;
  tradingday_.Swap(&other->tradingday_);
  contractcode_.Swap(&other->contractcode_);
  hedgeflag_.Swap(&other->hedgeflag_);
  direction_.Swap(&other->direction_);
  swap(marginrate_, other->marginrate_);
  swap(segmrgn_, other->segmrgn_);
  swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata insmrgnrate_snapshot_field::GetMetadata() const {
  protobuf_trial_5fprotocal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trial_5fprotocal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// insmrgnrate_snapshot_field

// string tradingday = 1;
void insmrgnrate_snapshot_field::clear_tradingday() {
  tradingday_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& insmrgnrate_snapshot_field::tradingday() const {
  // @@protoc_insertion_point(field_get:risk.insmrgnrate_snapshot_field.tradingday)
  return tradingday_.GetNoArena();
}
void insmrgnrate_snapshot_field::set_tradingday(const ::std::string& value) {
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.insmrgnrate_snapshot_field.tradingday)
}
#if LANG_CXX11
void insmrgnrate_snapshot_field::set_tradingday(::std::string&& value) {
  
  tradingday_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.insmrgnrate_snapshot_field.tradingday)
}
#endif
void insmrgnrate_snapshot_field::set_tradingday(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.insmrgnrate_snapshot_field.tradingday)
}
void insmrgnrate_snapshot_field::set_tradingday(const char* value, size_t size) {
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.insmrgnrate_snapshot_field.tradingday)
}
::std::string* insmrgnrate_snapshot_field::mutable_tradingday() {
  
  // @@protoc_insertion_point(field_mutable:risk.insmrgnrate_snapshot_field.tradingday)
  return tradingday_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* insmrgnrate_snapshot_field::release_tradingday() {
  // @@protoc_insertion_point(field_release:risk.insmrgnrate_snapshot_field.tradingday)
  
  return tradingday_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void insmrgnrate_snapshot_field::set_allocated_tradingday(::std::string* tradingday) {
  if (tradingday != NULL) {
    
  } else {
    
  }
  tradingday_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradingday);
  // @@protoc_insertion_point(field_set_allocated:risk.insmrgnrate_snapshot_field.tradingday)
}

// string contractcode = 2;
void insmrgnrate_snapshot_field::clear_contractcode() {
  contractcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& insmrgnrate_snapshot_field::contractcode() const {
  // @@protoc_insertion_point(field_get:risk.insmrgnrate_snapshot_field.contractcode)
  return contractcode_.GetNoArena();
}
void insmrgnrate_snapshot_field::set_contractcode(const ::std::string& value) {
  
  contractcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.insmrgnrate_snapshot_field.contractcode)
}
#if LANG_CXX11
void insmrgnrate_snapshot_field::set_contractcode(::std::string&& value) {
  
  contractcode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.insmrgnrate_snapshot_field.contractcode)
}
#endif
void insmrgnrate_snapshot_field::set_contractcode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  contractcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.insmrgnrate_snapshot_field.contractcode)
}
void insmrgnrate_snapshot_field::set_contractcode(const char* value, size_t size) {
  
  contractcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.insmrgnrate_snapshot_field.contractcode)
}
::std::string* insmrgnrate_snapshot_field::mutable_contractcode() {
  
  // @@protoc_insertion_point(field_mutable:risk.insmrgnrate_snapshot_field.contractcode)
  return contractcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* insmrgnrate_snapshot_field::release_contractcode() {
  // @@protoc_insertion_point(field_release:risk.insmrgnrate_snapshot_field.contractcode)
  
  return contractcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void insmrgnrate_snapshot_field::set_allocated_contractcode(::std::string* contractcode) {
  if (contractcode != NULL) {
    
  } else {
    
  }
  contractcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contractcode);
  // @@protoc_insertion_point(field_set_allocated:risk.insmrgnrate_snapshot_field.contractcode)
}

// string hedgeflag = 3;
void insmrgnrate_snapshot_field::clear_hedgeflag() {
  hedgeflag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& insmrgnrate_snapshot_field::hedgeflag() const {
  // @@protoc_insertion_point(field_get:risk.insmrgnrate_snapshot_field.hedgeflag)
  return hedgeflag_.GetNoArena();
}
void insmrgnrate_snapshot_field::set_hedgeflag(const ::std::string& value) {
  
  hedgeflag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.insmrgnrate_snapshot_field.hedgeflag)
}
#if LANG_CXX11
void insmrgnrate_snapshot_field::set_hedgeflag(::std::string&& value) {
  
  hedgeflag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.insmrgnrate_snapshot_field.hedgeflag)
}
#endif
void insmrgnrate_snapshot_field::set_hedgeflag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hedgeflag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.insmrgnrate_snapshot_field.hedgeflag)
}
void insmrgnrate_snapshot_field::set_hedgeflag(const char* value, size_t size) {
  
  hedgeflag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.insmrgnrate_snapshot_field.hedgeflag)
}
::std::string* insmrgnrate_snapshot_field::mutable_hedgeflag() {
  
  // @@protoc_insertion_point(field_mutable:risk.insmrgnrate_snapshot_field.hedgeflag)
  return hedgeflag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* insmrgnrate_snapshot_field::release_hedgeflag() {
  // @@protoc_insertion_point(field_release:risk.insmrgnrate_snapshot_field.hedgeflag)
  
  return hedgeflag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void insmrgnrate_snapshot_field::set_allocated_hedgeflag(::std::string* hedgeflag) {
  if (hedgeflag != NULL) {
    
  } else {
    
  }
  hedgeflag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hedgeflag);
  // @@protoc_insertion_point(field_set_allocated:risk.insmrgnrate_snapshot_field.hedgeflag)
}

// string direction = 4;
void insmrgnrate_snapshot_field::clear_direction() {
  direction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& insmrgnrate_snapshot_field::direction() const {
  // @@protoc_insertion_point(field_get:risk.insmrgnrate_snapshot_field.direction)
  return direction_.GetNoArena();
}
void insmrgnrate_snapshot_field::set_direction(const ::std::string& value) {
  
  direction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:risk.insmrgnrate_snapshot_field.direction)
}
#if LANG_CXX11
void insmrgnrate_snapshot_field::set_direction(::std::string&& value) {
  
  direction_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:risk.insmrgnrate_snapshot_field.direction)
}
#endif
void insmrgnrate_snapshot_field::set_direction(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  direction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:risk.insmrgnrate_snapshot_field.direction)
}
void insmrgnrate_snapshot_field::set_direction(const char* value, size_t size) {
  
  direction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:risk.insmrgnrate_snapshot_field.direction)
}
::std::string* insmrgnrate_snapshot_field::mutable_direction() {
  
  // @@protoc_insertion_point(field_mutable:risk.insmrgnrate_snapshot_field.direction)
  return direction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* insmrgnrate_snapshot_field::release_direction() {
  // @@protoc_insertion_point(field_release:risk.insmrgnrate_snapshot_field.direction)
  
  return direction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void insmrgnrate_snapshot_field::set_allocated_direction(::std::string* direction) {
  if (direction != NULL) {
    
  } else {
    
  }
  direction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), direction);
  // @@protoc_insertion_point(field_set_allocated:risk.insmrgnrate_snapshot_field.direction)
}

// double marginrate = 5;
void insmrgnrate_snapshot_field::clear_marginrate() {
  marginrate_ = 0;
}
double insmrgnrate_snapshot_field::marginrate() const {
  // @@protoc_insertion_point(field_get:risk.insmrgnrate_snapshot_field.marginrate)
  return marginrate_;
}
void insmrgnrate_snapshot_field::set_marginrate(double value) {
  
  marginrate_ = value;
  // @@protoc_insertion_point(field_set:risk.insmrgnrate_snapshot_field.marginrate)
}

// double segmrgn = 6;
void insmrgnrate_snapshot_field::clear_segmrgn() {
  segmrgn_ = 0;
}
double insmrgnrate_snapshot_field::segmrgn() const {
  // @@protoc_insertion_point(field_get:risk.insmrgnrate_snapshot_field.segmrgn)
  return segmrgn_;
}
void insmrgnrate_snapshot_field::set_segmrgn(double value) {
  
  segmrgn_ = value;
  // @@protoc_insertion_point(field_set:risk.insmrgnrate_snapshot_field.segmrgn)
}

// uint32 timestamp = 7;
void insmrgnrate_snapshot_field::clear_timestamp() {
  timestamp_ = 0u;
}
::google::protobuf::uint32 insmrgnrate_snapshot_field::timestamp() const {
  // @@protoc_insertion_point(field_get:risk.insmrgnrate_snapshot_field.timestamp)
  return timestamp_;
}
void insmrgnrate_snapshot_field::set_timestamp(::google::protobuf::uint32 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:risk.insmrgnrate_snapshot_field.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace risk

// @@protoc_insertion_point(global_scope)
